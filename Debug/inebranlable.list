
inebranlable.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af54  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000644  0800b0e8  0800b0e8  0001b0e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b72c  0800b72c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b72c  0800b72c  0001b72c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b734  0800b734  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b734  0800b734  0001b734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b738  0800b738  0001b738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b73c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b438  200001e0  0800b91c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b618  0800b91c  0002b618  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d946  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000473f  00000000  00000000  0003db56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001898  00000000  00000000  00042298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016a0  00000000  00000000  00043b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025ef0  00000000  00000000  000451d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021fe5  00000000  00000000  0006b0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6a84  00000000  00000000  0008d0a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00163b29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075dc  00000000  00000000  00163b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b0cc 	.word	0x0800b0cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800b0cc 	.word	0x0800b0cc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ebc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	4a06      	ldr	r2, [pc, #24]	; (8000edc <vApplicationGetIdleTaskMemory+0x30>)
 8000ec2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2280      	movs	r2, #128	; 0x80
 8000ec8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	2000a3f8 	.word	0x2000a3f8
 8000edc:	2000a4ac 	.word	0x2000a4ac

08000ee0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ee0:	b5b0      	push	{r4, r5, r7, lr}
 8000ee2:	b090      	sub	sp, #64	; 0x40
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of traceMutex */
  osMutexStaticDef(traceMutex, &traceMutexControlBlock);
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	63bb      	str	r3, [r7, #56]	; 0x38
 8000eea:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <MX_FREERTOS_Init+0x74>)
 8000eec:	63fb      	str	r3, [r7, #60]	; 0x3c
  traceMutexHandle = osMutexCreate(osMutex(traceMutex));
 8000eee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f004 fd64 	bl	80059c0 <osMutexCreate>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	4a17      	ldr	r2, [pc, #92]	; (8000f58 <MX_FREERTOS_Init+0x78>)
 8000efc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of blinkTask */
  osThreadStaticDef(blinkTask, StartBlinkTask, osPriorityIdle, 0, 10000, blinkTaskBuffer, &blinkTaskControlBlock);
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <MX_FREERTOS_Init+0x7c>)
 8000f00:	f107 041c 	add.w	r4, r7, #28
 8000f04:	461d      	mov	r5, r3
 8000f06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  blinkTaskHandle = osThreadCreate(osThread(blinkTask), NULL);
 8000f12:	f107 031c 	add.w	r3, r7, #28
 8000f16:	2100      	movs	r1, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f004 fcf1 	bl	8005900 <osThreadCreate>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	4a0f      	ldr	r2, [pc, #60]	; (8000f60 <MX_FREERTOS_Init+0x80>)
 8000f22:	6013      	str	r3, [r2, #0]

  /* definition and creation of xbeeTask */
  osThreadStaticDef(xbeeTask, StartXbeeTask, osPriorityNormal, 0, 256, XbeeTaskBuffer, &XbeeTaskControlBlock);
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <MX_FREERTOS_Init+0x84>)
 8000f26:	463c      	mov	r4, r7
 8000f28:	461d      	mov	r5, r3
 8000f2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  xbeeTaskHandle = osThreadCreate(osThread(xbeeTask), NULL);
 8000f36:	463b      	mov	r3, r7
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f004 fce0 	bl	8005900 <osThreadCreate>
 8000f40:	4603      	mov	r3, r0
 8000f42:	4a09      	ldr	r2, [pc, #36]	; (8000f68 <MX_FREERTOS_Init+0x88>)
 8000f44:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  PRINT("\n\n\033[2J\033[H/---- StartUp ----/\n\n");
 8000f46:	4809      	ldr	r0, [pc, #36]	; (8000f6c <MX_FREERTOS_Init+0x8c>)
 8000f48:	f000 face 	bl	80014e8 <PRINT>
  /* USER CODE END RTOS_THREADS */

}
 8000f4c:	bf00      	nop
 8000f4e:	3740      	adds	r7, #64	; 0x40
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bdb0      	pop	{r4, r5, r7, pc}
 8000f54:	2000a3b0 	.word	0x2000a3b0
 8000f58:	2000a3ac 	.word	0x2000a3ac
 8000f5c:	0800b120 	.word	0x0800b120
 8000f60:	200001fc 	.word	0x200001fc
 8000f64:	0800b13c 	.word	0x0800b13c
 8000f68:	20009ef4 	.word	0x20009ef4
 8000f6c:	0800b100 	.word	0x0800b100

08000f70 <StartBlinkTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlinkTask */
void StartBlinkTask(void const * argument)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b0ce      	sub	sp, #312	; 0x138
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000f7a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000f7e:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartBlinkTask */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000f80:	2108      	movs	r1, #8
 8000f82:	4815      	ldr	r0, [pc, #84]	; (8000fd8 <StartBlinkTask+0x68>)
 8000f84:	f000 ff44 	bl	8001e10 <HAL_GPIO_TogglePin>
    osDelay(100);
 8000f88:	2064      	movs	r0, #100	; 0x64
 8000f8a:	f004 fd05 	bl	8005998 <osDelay>
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000f8e:	2108      	movs	r1, #8
 8000f90:	4811      	ldr	r0, [pc, #68]	; (8000fd8 <StartBlinkTask+0x68>)
 8000f92:	f000 ff3d 	bl	8001e10 <HAL_GPIO_TogglePin>
    osDelay(100);
 8000f96:	2064      	movs	r0, #100	; 0x64
 8000f98:	f004 fcfe 	bl	8005998 <osDelay>
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000f9c:	2108      	movs	r1, #8
 8000f9e:	480e      	ldr	r0, [pc, #56]	; (8000fd8 <StartBlinkTask+0x68>)
 8000fa0:	f000 ff36 	bl	8001e10 <HAL_GPIO_TogglePin>
    osDelay(100);
 8000fa4:	2064      	movs	r0, #100	; 0x64
 8000fa6:	f004 fcf7 	bl	8005998 <osDelay>
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000faa:	2108      	movs	r1, #8
 8000fac:	480a      	ldr	r0, [pc, #40]	; (8000fd8 <StartBlinkTask+0x68>)
 8000fae:	f000 ff2f 	bl	8001e10 <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000fb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fb6:	f004 fcef 	bl	8005998 <osDelay>

    uint8_t msg[300];
    memset(msg, 0xAB, 300);
 8000fba:	f107 030c 	add.w	r3, r7, #12
 8000fbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000fc2:	21ab      	movs	r1, #171	; 0xab
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f007 fa3b 	bl	8008440 <memset>
    LOG_INFO("%.s", msg);
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <StartBlinkTask+0x6c>)
 8000fd2:	f004 fb7f 	bl	80056d4 <LOG_INFO>
  {
 8000fd6:	e7d3      	b.n	8000f80 <StartBlinkTask+0x10>
 8000fd8:	48000400 	.word	0x48000400
 8000fdc:	0800b158 	.word	0x0800b158

08000fe0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe6:	f107 030c 	add.w	r3, r7, #12
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
 8000ff4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff6:	4b1d      	ldr	r3, [pc, #116]	; (800106c <MX_GPIO_Init+0x8c>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	4a1c      	ldr	r2, [pc, #112]	; (800106c <MX_GPIO_Init+0x8c>)
 8000ffc:	f043 0304 	orr.w	r3, r3, #4
 8001000:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001002:	4b1a      	ldr	r3, [pc, #104]	; (800106c <MX_GPIO_Init+0x8c>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	f003 0304 	and.w	r3, r3, #4
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	4b17      	ldr	r3, [pc, #92]	; (800106c <MX_GPIO_Init+0x8c>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	4a16      	ldr	r2, [pc, #88]	; (800106c <MX_GPIO_Init+0x8c>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101a:	4b14      	ldr	r3, [pc, #80]	; (800106c <MX_GPIO_Init+0x8c>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <MX_GPIO_Init+0x8c>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	4a10      	ldr	r2, [pc, #64]	; (800106c <MX_GPIO_Init+0x8c>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <MX_GPIO_Init+0x8c>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	2108      	movs	r1, #8
 8001042:	480b      	ldr	r0, [pc, #44]	; (8001070 <MX_GPIO_Init+0x90>)
 8001044:	f000 fecc 	bl	8001de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001048:	2308      	movs	r3, #8
 800104a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104c:	2301      	movs	r3, #1
 800104e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	4619      	mov	r1, r3
 800105e:	4804      	ldr	r0, [pc, #16]	; (8001070 <MX_GPIO_Init+0x90>)
 8001060:	f000 fd54 	bl	8001b0c <HAL_GPIO_Init>

}
 8001064:	bf00      	nop
 8001066:	3720      	adds	r7, #32
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40021000 	.word	0x40021000
 8001070:	48000400 	.word	0x48000400

08001074 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001078:	f000 fbad 	bl	80017d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107c:	f000 f80c 	bl	8001098 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001080:	f7ff ffae 	bl	8000fe0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001084:	f000 fa84 	bl	8001590 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001088:	f000 fa52 	bl	8001530 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800108c:	f7ff ff28 	bl	8000ee0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001090:	f004 fc2f 	bl	80058f2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001094:	e7fe      	b.n	8001094 <main+0x20>
	...

08001098 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b096      	sub	sp, #88	; 0x58
 800109c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	2244      	movs	r2, #68	; 0x44
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f007 f9ca 	bl	8008440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ac:	463b      	mov	r3, r7
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010be:	f000 fedf 	bl	8001e80 <HAL_PWREx_ControlVoltageScaling>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010c8:	f000 f85a 	bl	8001180 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010cc:	f000 feba 	bl	8001e44 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010d0:	4b21      	ldr	r3, [pc, #132]	; (8001158 <SystemClock_Config+0xc0>)
 80010d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010d6:	4a20      	ldr	r2, [pc, #128]	; (8001158 <SystemClock_Config+0xc0>)
 80010d8:	f023 0318 	bic.w	r3, r3, #24
 80010dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80010e0:	2314      	movs	r3, #20
 80010e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010e4:	2301      	movs	r3, #1
 80010e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010e8:	2301      	movs	r3, #1
 80010ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010f0:	2360      	movs	r3, #96	; 0x60
 80010f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f4:	2302      	movs	r3, #2
 80010f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010f8:	2301      	movs	r3, #1
 80010fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010fc:	2301      	movs	r3, #1
 80010fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001100:	2328      	movs	r3, #40	; 0x28
 8001102:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001104:	2307      	movs	r3, #7
 8001106:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001108:	2302      	movs	r3, #2
 800110a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800110c:	2302      	movs	r3, #2
 800110e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4618      	mov	r0, r3
 8001116:	f000 ff09 	bl	8001f2c <HAL_RCC_OscConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001120:	f000 f82e 	bl	8001180 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001124:	230f      	movs	r3, #15
 8001126:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001128:	2303      	movs	r3, #3
 800112a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001138:	463b      	mov	r3, r7
 800113a:	2104      	movs	r1, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f001 fb09 	bl	8002754 <HAL_RCC_ClockConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001148:	f000 f81a 	bl	8001180 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800114c:	f001 ff4e 	bl	8002fec <HAL_RCCEx_EnableMSIPLLMode>
}
 8001150:	bf00      	nop
 8001152:	3758      	adds	r7, #88	; 0x58
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40021000 	.word	0x40021000

0800115c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a04      	ldr	r2, [pc, #16]	; (800117c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d101      	bne.n	8001172 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800116e:	f000 fb4b 	bl	8001808 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40001000 	.word	0x40001000

08001180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001184:	b672      	cpsid	i
}
 8001186:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001188:	e7fe      	b.n	8001188 <Error_Handler+0x8>
	...

0800118c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <HAL_MspInit+0x4c>)
 8001194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001196:	4a10      	ldr	r2, [pc, #64]	; (80011d8 <HAL_MspInit+0x4c>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6613      	str	r3, [r2, #96]	; 0x60
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <HAL_MspInit+0x4c>)
 80011a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011aa:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <HAL_MspInit+0x4c>)
 80011ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ae:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <HAL_MspInit+0x4c>)
 80011b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b4:	6593      	str	r3, [r2, #88]	; 0x58
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <HAL_MspInit+0x4c>)
 80011b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	210f      	movs	r1, #15
 80011c6:	f06f 0001 	mvn.w	r0, #1
 80011ca:	f000 fbf5 	bl	80019b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40021000 	.word	0x40021000

080011dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08c      	sub	sp, #48	; 0x30
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	2036      	movs	r0, #54	; 0x36
 80011f2:	f000 fbe1 	bl	80019b8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011f6:	2036      	movs	r0, #54	; 0x36
 80011f8:	f000 fbfa 	bl	80019f0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011fc:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <HAL_InitTick+0x9c>)
 80011fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001200:	4a1d      	ldr	r2, [pc, #116]	; (8001278 <HAL_InitTick+0x9c>)
 8001202:	f043 0310 	orr.w	r3, r3, #16
 8001206:	6593      	str	r3, [r2, #88]	; 0x58
 8001208:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <HAL_InitTick+0x9c>)
 800120a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120c:	f003 0310 	and.w	r3, r3, #16
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001214:	f107 0210 	add.w	r2, r7, #16
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4611      	mov	r1, r2
 800121e:	4618      	mov	r0, r3
 8001220:	f001 fc5c 	bl	8002adc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001224:	f001 fc2e 	bl	8002a84 <HAL_RCC_GetPCLK1Freq>
 8001228:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800122a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800122c:	4a13      	ldr	r2, [pc, #76]	; (800127c <HAL_InitTick+0xa0>)
 800122e:	fba2 2303 	umull	r2, r3, r2, r3
 8001232:	0c9b      	lsrs	r3, r3, #18
 8001234:	3b01      	subs	r3, #1
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <HAL_InitTick+0xa4>)
 800123a:	4a12      	ldr	r2, [pc, #72]	; (8001284 <HAL_InitTick+0xa8>)
 800123c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <HAL_InitTick+0xa4>)
 8001240:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001244:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001246:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <HAL_InitTick+0xa4>)
 8001248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <HAL_InitTick+0xa4>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001252:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <HAL_InitTick+0xa4>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001258:	4809      	ldr	r0, [pc, #36]	; (8001280 <HAL_InitTick+0xa4>)
 800125a:	f001 ffc9 	bl	80031f0 <HAL_TIM_Base_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d104      	bne.n	800126e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001264:	4806      	ldr	r0, [pc, #24]	; (8001280 <HAL_InitTick+0xa4>)
 8001266:	f002 f825 	bl	80032b4 <HAL_TIM_Base_Start_IT>
 800126a:	4603      	mov	r3, r0
 800126c:	e000      	b.n	8001270 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
}
 8001270:	4618      	mov	r0, r3
 8001272:	3730      	adds	r7, #48	; 0x30
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40021000 	.word	0x40021000
 800127c:	431bde83 	.word	0x431bde83
 8001280:	2000a6ac 	.word	0x2000a6ac
 8001284:	40001000 	.word	0x40001000

08001288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800128c:	e7fe      	b.n	800128c <NMI_Handler+0x4>

0800128e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001292:	e7fe      	b.n	8001292 <HardFault_Handler+0x4>

08001294 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <MemManage_Handler+0x4>

0800129a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800129e:	e7fe      	b.n	800129e <BusFault_Handler+0x4>

080012a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <UsageFault_Handler+0x4>

080012a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012b8:	4802      	ldr	r0, [pc, #8]	; (80012c4 <USART1_IRQHandler+0x10>)
 80012ba:	f002 fb51 	bl	8003960 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	2000a6fc 	.word	0x2000a6fc

080012c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012cc:	4802      	ldr	r0, [pc, #8]	; (80012d8 <USART2_IRQHandler+0x10>)
 80012ce:	f002 fb47 	bl	8003960 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	2000a780 	.word	0x2000a780

080012dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012e0:	4802      	ldr	r0, [pc, #8]	; (80012ec <TIM6_DAC_IRQHandler+0x10>)
 80012e2:	f002 f83b 	bl	800335c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	2000a6ac 	.word	0x2000a6ac

080012f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
	return 1;
 80012f4:	2301      	movs	r3, #1
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <_kill>:

int _kill(int pid, int sig)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800130a:	f006 ff47 	bl	800819c <__errno>
 800130e:	4603      	mov	r3, r0
 8001310:	2216      	movs	r2, #22
 8001312:	601a      	str	r2, [r3, #0]
	return -1;
 8001314:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <_exit>:

void _exit (int status)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001328:	f04f 31ff 	mov.w	r1, #4294967295
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ffe7 	bl	8001300 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001332:	e7fe      	b.n	8001332 <_exit+0x12>

08001334 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	e00a      	b.n	800135c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001346:	f3af 8000 	nop.w
 800134a:	4601      	mov	r1, r0
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	1c5a      	adds	r2, r3, #1
 8001350:	60ba      	str	r2, [r7, #8]
 8001352:	b2ca      	uxtb	r2, r1
 8001354:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	3301      	adds	r3, #1
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	697a      	ldr	r2, [r7, #20]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	429a      	cmp	r2, r3
 8001362:	dbf0      	blt.n	8001346 <_read+0x12>
	}

return len;
 8001364:	687b      	ldr	r3, [r7, #4]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b086      	sub	sp, #24
 8001372:	af00      	add	r7, sp, #0
 8001374:	60f8      	str	r0, [r7, #12]
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
 800137e:	e009      	b.n	8001394 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	1c5a      	adds	r2, r3, #1
 8001384:	60ba      	str	r2, [r7, #8]
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	3301      	adds	r3, #1
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	429a      	cmp	r2, r3
 800139a:	dbf1      	blt.n	8001380 <_write+0x12>
	}
	return len;
 800139c:	687b      	ldr	r3, [r7, #4]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <_close>:

int _close(int file)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
	return -1;
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ce:	605a      	str	r2, [r3, #4]
	return 0;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <_isatty>:

int _isatty(int file)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
	return 1;
 80013e6:	2301      	movs	r3, #1
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
	return 0;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001418:	4a14      	ldr	r2, [pc, #80]	; (800146c <_sbrk+0x5c>)
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <_sbrk+0x60>)
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <_sbrk+0x64>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d102      	bne.n	8001432 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <_sbrk+0x64>)
 800142e:	4a12      	ldr	r2, [pc, #72]	; (8001478 <_sbrk+0x68>)
 8001430:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <_sbrk+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	429a      	cmp	r2, r3
 800143e:	d207      	bcs.n	8001450 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001440:	f006 feac 	bl	800819c <__errno>
 8001444:	4603      	mov	r3, r0
 8001446:	220c      	movs	r2, #12
 8001448:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
 800144e:	e009      	b.n	8001464 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <_sbrk+0x64>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	4a05      	ldr	r2, [pc, #20]	; (8001474 <_sbrk+0x64>)
 8001460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001462:	68fb      	ldr	r3, [r7, #12]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20010000 	.word	0x20010000
 8001470:	00000400 	.word	0x00000400
 8001474:	2000a6f8 	.word	0x2000a6f8
 8001478:	2000b618 	.word	0x2000b618

0800147c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <SystemInit+0x20>)
 8001482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001486:	4a05      	ldr	r2, [pc, #20]	; (800149c <SystemInit+0x20>)
 8001488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800148c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <vprint>:
#include "cmsis_os.h"

extern osMutexId traceMutexHandle;

void vprint(const char *fmt, va_list argp)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b0b4      	sub	sp, #208	; 0xd0
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string,fmt,argp)) // build string
 80014aa:	f107 0308 	add.w	r3, r7, #8
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f007 fdea 	bl	800908c <vsiprintf>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	dd0d      	ble.n	80014da <vprint+0x3a>
    {
        HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
 80014be:	f107 0308 	add.w	r3, r7, #8
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7fe fe84 	bl	80001d0 <strlen>
 80014c8:	4603      	mov	r3, r0
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	f107 0108 	add.w	r1, r7, #8
 80014d0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80014d4:	4803      	ldr	r0, [pc, #12]	; (80014e4 <vprint+0x44>)
 80014d6:	f002 f959 	bl	800378c <HAL_UART_Transmit>
    }
}
 80014da:	bf00      	nop
 80014dc:	37d0      	adds	r7, #208	; 0xd0
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	2000a780 	.word	0x2000a780

080014e8 <PRINT>:

void PRINT(const char *fmt, ...) // custom printf() function
{
 80014e8:	b40f      	push	{r0, r1, r2, r3}
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
	va_list argp;

	if( osMutexWait(traceMutexHandle, 0) != osOK)
 80014f0:	4b0e      	ldr	r3, [pc, #56]	; (800152c <PRINT+0x44>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f004 fa7a 	bl	80059f0 <osMutexWait>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10c      	bne.n	800151c <PRINT+0x34>
		return;

    va_start(argp, fmt);
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	607b      	str	r3, [r7, #4]
    vprint(fmt, argp);
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	6938      	ldr	r0, [r7, #16]
 800150c:	f7ff ffc8 	bl	80014a0 <vprint>
    va_end(argp);

	osMutexRelease(traceMutexHandle);
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <PRINT+0x44>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f004 fab9 	bl	8005a8c <osMutexRelease>
 800151a:	e000      	b.n	800151e <PRINT+0x36>
		return;
 800151c:	bf00      	nop
}
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001526:	b004      	add	sp, #16
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	2000a3ac 	.word	0x2000a3ac

08001530 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001534:	4b14      	ldr	r3, [pc, #80]	; (8001588 <MX_USART1_UART_Init+0x58>)
 8001536:	4a15      	ldr	r2, [pc, #84]	; (800158c <MX_USART1_UART_Init+0x5c>)
 8001538:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <MX_USART1_UART_Init+0x58>)
 800153c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001540:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MX_USART1_UART_Init+0x58>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <MX_USART1_UART_Init+0x58>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <MX_USART1_UART_Init+0x58>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <MX_USART1_UART_Init+0x58>)
 8001556:	220c      	movs	r2, #12
 8001558:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155a:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <MX_USART1_UART_Init+0x58>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_USART1_UART_Init+0x58>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <MX_USART1_UART_Init+0x58>)
 8001568:	2200      	movs	r2, #0
 800156a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_USART1_UART_Init+0x58>)
 800156e:	2200      	movs	r2, #0
 8001570:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <MX_USART1_UART_Init+0x58>)
 8001574:	f002 f8bc 	bl	80036f0 <HAL_UART_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800157e:	f7ff fdff 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	2000a6fc 	.word	0x2000a6fc
 800158c:	40013800 	.word	0x40013800

08001590 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001594:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <MX_USART2_UART_Init+0x58>)
 8001596:	4a15      	ldr	r2, [pc, #84]	; (80015ec <MX_USART2_UART_Init+0x5c>)
 8001598:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800159a:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <MX_USART2_UART_Init+0x58>)
 800159c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <MX_USART2_UART_Init+0x58>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <MX_USART2_UART_Init+0x58>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <MX_USART2_UART_Init+0x58>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <MX_USART2_UART_Init+0x58>)
 80015b6:	220c      	movs	r2, #12
 80015b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ba:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <MX_USART2_UART_Init+0x58>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c0:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <MX_USART2_UART_Init+0x58>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015c6:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <MX_USART2_UART_Init+0x58>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <MX_USART2_UART_Init+0x58>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015d2:	4805      	ldr	r0, [pc, #20]	; (80015e8 <MX_USART2_UART_Init+0x58>)
 80015d4:	f002 f88c 	bl	80036f0 <HAL_UART_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015de:	f7ff fdcf 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	2000a780 	.word	0x2000a780
 80015ec:	40004400 	.word	0x40004400

080015f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b0a0      	sub	sp, #128	; 0x80
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001608:	f107 0318 	add.w	r3, r7, #24
 800160c:	2254      	movs	r2, #84	; 0x54
 800160e:	2100      	movs	r1, #0
 8001610:	4618      	mov	r0, r3
 8001612:	f006 ff15 	bl	8008440 <memset>
  if(uartHandle->Instance==USART1)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a4f      	ldr	r2, [pc, #316]	; (8001758 <HAL_UART_MspInit+0x168>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d140      	bne.n	80016a2 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001620:	2301      	movs	r3, #1
 8001622:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001624:	2300      	movs	r3, #0
 8001626:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001628:	f107 0318 	add.w	r3, r7, #24
 800162c:	4618      	mov	r0, r3
 800162e:	f001 fae7 	bl	8002c00 <HAL_RCCEx_PeriphCLKConfig>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001638:	f7ff fda2 	bl	8001180 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800163c:	4b47      	ldr	r3, [pc, #284]	; (800175c <HAL_UART_MspInit+0x16c>)
 800163e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001640:	4a46      	ldr	r2, [pc, #280]	; (800175c <HAL_UART_MspInit+0x16c>)
 8001642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001646:	6613      	str	r3, [r2, #96]	; 0x60
 8001648:	4b44      	ldr	r3, [pc, #272]	; (800175c <HAL_UART_MspInit+0x16c>)
 800164a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800164c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001654:	4b41      	ldr	r3, [pc, #260]	; (800175c <HAL_UART_MspInit+0x16c>)
 8001656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001658:	4a40      	ldr	r2, [pc, #256]	; (800175c <HAL_UART_MspInit+0x16c>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001660:	4b3e      	ldr	r3, [pc, #248]	; (800175c <HAL_UART_MspInit+0x16c>)
 8001662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800166c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001670:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	2302      	movs	r3, #2
 8001674:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167a:	2303      	movs	r3, #3
 800167c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800167e:	2307      	movs	r3, #7
 8001680:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001682:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001686:	4619      	mov	r1, r3
 8001688:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168c:	f000 fa3e 	bl	8001b0c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001690:	2200      	movs	r2, #0
 8001692:	2105      	movs	r1, #5
 8001694:	2025      	movs	r0, #37	; 0x25
 8001696:	f000 f98f 	bl	80019b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800169a:	2025      	movs	r0, #37	; 0x25
 800169c:	f000 f9a8 	bl	80019f0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80016a0:	e055      	b.n	800174e <HAL_UART_MspInit+0x15e>
  else if(uartHandle->Instance==USART2)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a2e      	ldr	r2, [pc, #184]	; (8001760 <HAL_UART_MspInit+0x170>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d150      	bne.n	800174e <HAL_UART_MspInit+0x15e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016ac:	2302      	movs	r3, #2
 80016ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016b0:	2300      	movs	r3, #0
 80016b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b4:	f107 0318 	add.w	r3, r7, #24
 80016b8:	4618      	mov	r0, r3
 80016ba:	f001 faa1 	bl	8002c00 <HAL_RCCEx_PeriphCLKConfig>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80016c4:	f7ff fd5c 	bl	8001180 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016c8:	4b24      	ldr	r3, [pc, #144]	; (800175c <HAL_UART_MspInit+0x16c>)
 80016ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016cc:	4a23      	ldr	r2, [pc, #140]	; (800175c <HAL_UART_MspInit+0x16c>)
 80016ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d2:	6593      	str	r3, [r2, #88]	; 0x58
 80016d4:	4b21      	ldr	r3, [pc, #132]	; (800175c <HAL_UART_MspInit+0x16c>)
 80016d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e0:	4b1e      	ldr	r3, [pc, #120]	; (800175c <HAL_UART_MspInit+0x16c>)
 80016e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e4:	4a1d      	ldr	r2, [pc, #116]	; (800175c <HAL_UART_MspInit+0x16c>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ec:	4b1b      	ldr	r3, [pc, #108]	; (800175c <HAL_UART_MspInit+0x16c>)
 80016ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80016f8:	2304      	movs	r3, #4
 80016fa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001704:	2303      	movs	r3, #3
 8001706:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001708:	2307      	movs	r3, #7
 800170a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800170c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001710:	4619      	mov	r1, r3
 8001712:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001716:	f000 f9f9 	bl	8001b0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800171a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800171e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800172c:	2303      	movs	r3, #3
 800172e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001730:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001734:	4619      	mov	r1, r3
 8001736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173a:	f000 f9e7 	bl	8001b0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	2105      	movs	r1, #5
 8001742:	2026      	movs	r0, #38	; 0x26
 8001744:	f000 f938 	bl	80019b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001748:	2026      	movs	r0, #38	; 0x26
 800174a:	f000 f951 	bl	80019f0 <HAL_NVIC_EnableIRQ>
}
 800174e:	bf00      	nop
 8001750:	3780      	adds	r7, #128	; 0x80
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40013800 	.word	0x40013800
 800175c:	40021000 	.word	0x40021000
 8001760:	40004400 	.word	0x40004400

08001764 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a04      	ldr	r2, [pc, #16]	; (8001780 <HAL_UART_RxCpltCallback+0x1c>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d101      	bne.n	8001778 <HAL_UART_RxCpltCallback+0x14>
	{
		xbeeSerial_rxCallback();
 8001774:	f003 ff16 	bl	80055a4 <xbeeSerial_rxCallback>
	}
	else if(huart == &huart2)
	{
		//GPS Callback
	}
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	2000a6fc 	.word	0x2000a6fc

08001784 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001784:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001788:	f7ff fe78 	bl	800147c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800178c:	480c      	ldr	r0, [pc, #48]	; (80017c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800178e:	490d      	ldr	r1, [pc, #52]	; (80017c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001790:	4a0d      	ldr	r2, [pc, #52]	; (80017c8 <LoopForever+0xe>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001794:	e002      	b.n	800179c <LoopCopyDataInit>

08001796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179a:	3304      	adds	r3, #4

0800179c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800179c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a0:	d3f9      	bcc.n	8001796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a2:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80017a4:	4c0a      	ldr	r4, [pc, #40]	; (80017d0 <LoopForever+0x16>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a8:	e001      	b.n	80017ae <LoopFillZerobss>

080017aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ac:	3204      	adds	r2, #4

080017ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b0:	d3fb      	bcc.n	80017aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017b2:	f006 fdef 	bl	8008394 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017b6:	f7ff fc5d 	bl	8001074 <main>

080017ba <LoopForever>:

LoopForever:
    b LoopForever
 80017ba:	e7fe      	b.n	80017ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017bc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80017c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80017c8:	0800b73c 	.word	0x0800b73c
  ldr r2, =_sbss
 80017cc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80017d0:	2000b618 	.word	0x2000b618

080017d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017d4:	e7fe      	b.n	80017d4 <ADC1_IRQHandler>

080017d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e0:	2003      	movs	r0, #3
 80017e2:	f000 f8de 	bl	80019a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017e6:	200f      	movs	r0, #15
 80017e8:	f7ff fcf8 	bl	80011dc <HAL_InitTick>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d002      	beq.n	80017f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	71fb      	strb	r3, [r7, #7]
 80017f6:	e001      	b.n	80017fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017f8:	f7ff fcc8 	bl	800118c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017fc:	79fb      	ldrb	r3, [r7, #7]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_IncTick+0x20>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_IncTick+0x24>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4413      	add	r3, r2
 8001818:	4a04      	ldr	r2, [pc, #16]	; (800182c <HAL_IncTick+0x24>)
 800181a:	6013      	str	r3, [r2, #0]
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	20000008 	.word	0x20000008
 800182c:	2000a804 	.word	0x2000a804

08001830 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return uwTick;
 8001834:	4b03      	ldr	r3, [pc, #12]	; (8001844 <HAL_GetTick+0x14>)
 8001836:	681b      	ldr	r3, [r3, #0]
}
 8001838:	4618      	mov	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	2000a804 	.word	0x2000a804

08001848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <__NVIC_SetPriorityGrouping+0x44>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001864:	4013      	ands	r3, r2
 8001866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001870:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187a:	4a04      	ldr	r2, [pc, #16]	; (800188c <__NVIC_SetPriorityGrouping+0x44>)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	60d3      	str	r3, [r2, #12]
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	0a1b      	lsrs	r3, r3, #8
 800189a:	f003 0307 	and.w	r3, r3, #7
}
 800189e:	4618      	mov	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	db0b      	blt.n	80018d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	f003 021f 	and.w	r2, r3, #31
 80018c4:	4907      	ldr	r1, [pc, #28]	; (80018e4 <__NVIC_EnableIRQ+0x38>)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	095b      	lsrs	r3, r3, #5
 80018cc:	2001      	movs	r0, #1
 80018ce:	fa00 f202 	lsl.w	r2, r0, r2
 80018d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000e100 	.word	0xe000e100

080018e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	6039      	str	r1, [r7, #0]
 80018f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	db0a      	blt.n	8001912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	490c      	ldr	r1, [pc, #48]	; (8001934 <__NVIC_SetPriority+0x4c>)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	0112      	lsls	r2, r2, #4
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	440b      	add	r3, r1
 800190c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001910:	e00a      	b.n	8001928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4908      	ldr	r1, [pc, #32]	; (8001938 <__NVIC_SetPriority+0x50>)
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	3b04      	subs	r3, #4
 8001920:	0112      	lsls	r2, r2, #4
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	440b      	add	r3, r1
 8001926:	761a      	strb	r2, [r3, #24]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000e100 	.word	0xe000e100
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193c:	b480      	push	{r7}
 800193e:	b089      	sub	sp, #36	; 0x24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f1c3 0307 	rsb	r3, r3, #7
 8001956:	2b04      	cmp	r3, #4
 8001958:	bf28      	it	cs
 800195a:	2304      	movcs	r3, #4
 800195c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3304      	adds	r3, #4
 8001962:	2b06      	cmp	r3, #6
 8001964:	d902      	bls.n	800196c <NVIC_EncodePriority+0x30>
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3b03      	subs	r3, #3
 800196a:	e000      	b.n	800196e <NVIC_EncodePriority+0x32>
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	f04f 32ff 	mov.w	r2, #4294967295
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43da      	mvns	r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	401a      	ands	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001984:	f04f 31ff 	mov.w	r1, #4294967295
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	43d9      	mvns	r1, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	4313      	orrs	r3, r2
         );
}
 8001996:	4618      	mov	r0, r3
 8001998:	3724      	adds	r7, #36	; 0x24
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff ff4c 	bl	8001848 <__NVIC_SetPriorityGrouping>
}
 80019b0:	bf00      	nop
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
 80019c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019ca:	f7ff ff61 	bl	8001890 <__NVIC_GetPriorityGrouping>
 80019ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	68b9      	ldr	r1, [r7, #8]
 80019d4:	6978      	ldr	r0, [r7, #20]
 80019d6:	f7ff ffb1 	bl	800193c <NVIC_EncodePriority>
 80019da:	4602      	mov	r2, r0
 80019dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e0:	4611      	mov	r1, r2
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff ff80 	bl	80018e8 <__NVIC_SetPriority>
}
 80019e8:	bf00      	nop
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff ff54 	bl	80018ac <__NVIC_EnableIRQ>
}
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d008      	beq.n	8001a36 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2204      	movs	r2, #4
 8001a28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e022      	b.n	8001a7c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 020e 	bic.w	r2, r2, #14
 8001a44:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 0201 	bic.w	r2, r2, #1
 8001a54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	f003 021c 	and.w	r2, r3, #28
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	2101      	movs	r1, #1
 8001a64:	fa01 f202 	lsl.w	r2, r1, r2
 8001a68:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a90:	2300      	movs	r3, #0
 8001a92:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d005      	beq.n	8001aac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2204      	movs	r2, #4
 8001aa4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	73fb      	strb	r3, [r7, #15]
 8001aaa:	e029      	b.n	8001b00 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 020e 	bic.w	r2, r2, #14
 8001aba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 0201 	bic.w	r2, r2, #1
 8001aca:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad0:	f003 021c 	and.w	r2, r3, #28
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	2101      	movs	r1, #1
 8001ada:	fa01 f202 	lsl.w	r2, r1, r2
 8001ade:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	4798      	blx	r3
    }
  }
  return status;
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b087      	sub	sp, #28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b1a:	e148      	b.n	8001dae <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	2101      	movs	r1, #1
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	fa01 f303 	lsl.w	r3, r1, r3
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 813a 	beq.w	8001da8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 0303 	and.w	r3, r3, #3
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d005      	beq.n	8001b4c <HAL_GPIO_Init+0x40>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d130      	bne.n	8001bae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	2203      	movs	r2, #3
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	68da      	ldr	r2, [r3, #12]
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b82:	2201      	movs	r2, #1
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	091b      	lsrs	r3, r3, #4
 8001b98:	f003 0201 	and.w	r2, r3, #1
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	d017      	beq.n	8001bea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d123      	bne.n	8001c3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	08da      	lsrs	r2, r3, #3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3208      	adds	r2, #8
 8001bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	220f      	movs	r2, #15
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43db      	mvns	r3, r3
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	4013      	ands	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	691a      	ldr	r2, [r3, #16]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	08da      	lsrs	r2, r3, #3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3208      	adds	r2, #8
 8001c38:	6939      	ldr	r1, [r7, #16]
 8001c3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	2203      	movs	r2, #3
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4013      	ands	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 0203 	and.w	r2, r3, #3
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 8094 	beq.w	8001da8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c80:	4b52      	ldr	r3, [pc, #328]	; (8001dcc <HAL_GPIO_Init+0x2c0>)
 8001c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c84:	4a51      	ldr	r2, [pc, #324]	; (8001dcc <HAL_GPIO_Init+0x2c0>)
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	6613      	str	r3, [r2, #96]	; 0x60
 8001c8c:	4b4f      	ldr	r3, [pc, #316]	; (8001dcc <HAL_GPIO_Init+0x2c0>)
 8001c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c98:	4a4d      	ldr	r2, [pc, #308]	; (8001dd0 <HAL_GPIO_Init+0x2c4>)
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	089b      	lsrs	r3, r3, #2
 8001c9e:	3302      	adds	r3, #2
 8001ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	220f      	movs	r2, #15
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cc2:	d00d      	beq.n	8001ce0 <HAL_GPIO_Init+0x1d4>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a43      	ldr	r2, [pc, #268]	; (8001dd4 <HAL_GPIO_Init+0x2c8>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d007      	beq.n	8001cdc <HAL_GPIO_Init+0x1d0>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a42      	ldr	r2, [pc, #264]	; (8001dd8 <HAL_GPIO_Init+0x2cc>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d101      	bne.n	8001cd8 <HAL_GPIO_Init+0x1cc>
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	e004      	b.n	8001ce2 <HAL_GPIO_Init+0x1d6>
 8001cd8:	2307      	movs	r3, #7
 8001cda:	e002      	b.n	8001ce2 <HAL_GPIO_Init+0x1d6>
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e000      	b.n	8001ce2 <HAL_GPIO_Init+0x1d6>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	f002 0203 	and.w	r2, r2, #3
 8001ce8:	0092      	lsls	r2, r2, #2
 8001cea:	4093      	lsls	r3, r2
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cf2:	4937      	ldr	r1, [pc, #220]	; (8001dd0 <HAL_GPIO_Init+0x2c4>)
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	089b      	lsrs	r3, r3, #2
 8001cf8:	3302      	adds	r3, #2
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d00:	4b36      	ldr	r3, [pc, #216]	; (8001ddc <HAL_GPIO_Init+0x2d0>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d24:	4a2d      	ldr	r2, [pc, #180]	; (8001ddc <HAL_GPIO_Init+0x2d0>)
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d2a:	4b2c      	ldr	r3, [pc, #176]	; (8001ddc <HAL_GPIO_Init+0x2d0>)
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4013      	ands	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d4e:	4a23      	ldr	r2, [pc, #140]	; (8001ddc <HAL_GPIO_Init+0x2d0>)
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d54:	4b21      	ldr	r3, [pc, #132]	; (8001ddc <HAL_GPIO_Init+0x2d0>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4013      	ands	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d78:	4a18      	ldr	r2, [pc, #96]	; (8001ddc <HAL_GPIO_Init+0x2d0>)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d7e:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <HAL_GPIO_Init+0x2d0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	43db      	mvns	r3, r3
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001da2:	4a0e      	ldr	r2, [pc, #56]	; (8001ddc <HAL_GPIO_Init+0x2d0>)
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	3301      	adds	r3, #1
 8001dac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	fa22 f303 	lsr.w	r3, r2, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f47f aeaf 	bne.w	8001b1c <HAL_GPIO_Init+0x10>
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	bf00      	nop
 8001dc2:	371c      	adds	r7, #28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40010000 	.word	0x40010000
 8001dd4:	48000400 	.word	0x48000400
 8001dd8:	48000800 	.word	0x48000800
 8001ddc:	40010400 	.word	0x40010400

08001de0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	807b      	strh	r3, [r7, #2]
 8001dec:	4613      	mov	r3, r2
 8001dee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001df0:	787b      	ldrb	r3, [r7, #1]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001df6:	887a      	ldrh	r2, [r7, #2]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dfc:	e002      	b.n	8001e04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dfe:	887a      	ldrh	r2, [r7, #2]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e22:	887a      	ldrh	r2, [r7, #2]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4013      	ands	r3, r2
 8001e28:	041a      	lsls	r2, r3, #16
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	43d9      	mvns	r1, r3
 8001e2e:	887b      	ldrh	r3, [r7, #2]
 8001e30:	400b      	ands	r3, r1
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	619a      	str	r2, [r3, #24]
}
 8001e38:	bf00      	nop
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a04      	ldr	r2, [pc, #16]	; (8001e60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e52:	6013      	str	r3, [r2, #0]
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40007000 	.word	0x40007000

08001e64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e68:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <HAL_PWREx_GetVoltageRange+0x18>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40007000 	.word	0x40007000

08001e80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e8e:	d130      	bne.n	8001ef2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e90:	4b23      	ldr	r3, [pc, #140]	; (8001f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e9c:	d038      	beq.n	8001f10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e9e:	4b20      	ldr	r3, [pc, #128]	; (8001f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ea6:	4a1e      	ldr	r2, [pc, #120]	; (8001f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ea8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001eae:	4b1d      	ldr	r3, [pc, #116]	; (8001f24 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2232      	movs	r2, #50	; 0x32
 8001eb4:	fb02 f303 	mul.w	r3, r2, r3
 8001eb8:	4a1b      	ldr	r2, [pc, #108]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001eba:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebe:	0c9b      	lsrs	r3, r3, #18
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ec4:	e002      	b.n	8001ecc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ed8:	d102      	bne.n	8001ee0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1f2      	bne.n	8001ec6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eec:	d110      	bne.n	8001f10 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e00f      	b.n	8001f12 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ef2:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001efe:	d007      	beq.n	8001f10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f00:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f08:	4a05      	ldr	r2, [pc, #20]	; (8001f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f0e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40007000 	.word	0x40007000
 8001f24:	20000000 	.word	0x20000000
 8001f28:	431bde83 	.word	0x431bde83

08001f2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d102      	bne.n	8001f40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	f000 bc02 	b.w	8002744 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f40:	4b96      	ldr	r3, [pc, #600]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 030c 	and.w	r3, r3, #12
 8001f48:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f4a:	4b94      	ldr	r3, [pc, #592]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0310 	and.w	r3, r3, #16
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 80e4 	beq.w	800212a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d007      	beq.n	8001f78 <HAL_RCC_OscConfig+0x4c>
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	2b0c      	cmp	r3, #12
 8001f6c:	f040 808b 	bne.w	8002086 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	f040 8087 	bne.w	8002086 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f78:	4b88      	ldr	r3, [pc, #544]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <HAL_RCC_OscConfig+0x64>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e3d9      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a1a      	ldr	r2, [r3, #32]
 8001f94:	4b81      	ldr	r3, [pc, #516]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0308 	and.w	r3, r3, #8
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d004      	beq.n	8001faa <HAL_RCC_OscConfig+0x7e>
 8001fa0:	4b7e      	ldr	r3, [pc, #504]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fa8:	e005      	b.n	8001fb6 <HAL_RCC_OscConfig+0x8a>
 8001faa:	4b7c      	ldr	r3, [pc, #496]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8001fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb0:	091b      	lsrs	r3, r3, #4
 8001fb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d223      	bcs.n	8002002 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 fdbe 	bl	8002b40 <RCC_SetFlashLatencyFromMSIRange>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e3ba      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fce:	4b73      	ldr	r3, [pc, #460]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a72      	ldr	r2, [pc, #456]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8001fd4:	f043 0308 	orr.w	r3, r3, #8
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	4b70      	ldr	r3, [pc, #448]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	496d      	ldr	r1, [pc, #436]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fec:	4b6b      	ldr	r3, [pc, #428]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	021b      	lsls	r3, r3, #8
 8001ffa:	4968      	ldr	r1, [pc, #416]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	604b      	str	r3, [r1, #4]
 8002000:	e025      	b.n	800204e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002002:	4b66      	ldr	r3, [pc, #408]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a65      	ldr	r2, [pc, #404]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8002008:	f043 0308 	orr.w	r3, r3, #8
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	4b63      	ldr	r3, [pc, #396]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	4960      	ldr	r1, [pc, #384]	; (800219c <HAL_RCC_OscConfig+0x270>)
 800201c:	4313      	orrs	r3, r2
 800201e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002020:	4b5e      	ldr	r3, [pc, #376]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	021b      	lsls	r3, r3, #8
 800202e:	495b      	ldr	r1, [pc, #364]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8002030:	4313      	orrs	r3, r2
 8002032:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d109      	bne.n	800204e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	4618      	mov	r0, r3
 8002040:	f000 fd7e 	bl	8002b40 <RCC_SetFlashLatencyFromMSIRange>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e37a      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800204e:	f000 fc81 	bl	8002954 <HAL_RCC_GetSysClockFreq>
 8002052:	4602      	mov	r2, r0
 8002054:	4b51      	ldr	r3, [pc, #324]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	091b      	lsrs	r3, r3, #4
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	4950      	ldr	r1, [pc, #320]	; (80021a0 <HAL_RCC_OscConfig+0x274>)
 8002060:	5ccb      	ldrb	r3, [r1, r3]
 8002062:	f003 031f 	and.w	r3, r3, #31
 8002066:	fa22 f303 	lsr.w	r3, r2, r3
 800206a:	4a4e      	ldr	r2, [pc, #312]	; (80021a4 <HAL_RCC_OscConfig+0x278>)
 800206c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800206e:	4b4e      	ldr	r3, [pc, #312]	; (80021a8 <HAL_RCC_OscConfig+0x27c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff f8b2 	bl	80011dc <HAL_InitTick>
 8002078:	4603      	mov	r3, r0
 800207a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800207c:	7bfb      	ldrb	r3, [r7, #15]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d052      	beq.n	8002128 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002082:	7bfb      	ldrb	r3, [r7, #15]
 8002084:	e35e      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d032      	beq.n	80020f4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800208e:	4b43      	ldr	r3, [pc, #268]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a42      	ldr	r2, [pc, #264]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800209a:	f7ff fbc9 	bl	8001830 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020a2:	f7ff fbc5 	bl	8001830 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e347      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020b4:	4b39      	ldr	r3, [pc, #228]	; (800219c <HAL_RCC_OscConfig+0x270>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0f0      	beq.n	80020a2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020c0:	4b36      	ldr	r3, [pc, #216]	; (800219c <HAL_RCC_OscConfig+0x270>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a35      	ldr	r2, [pc, #212]	; (800219c <HAL_RCC_OscConfig+0x270>)
 80020c6:	f043 0308 	orr.w	r3, r3, #8
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	4b33      	ldr	r3, [pc, #204]	; (800219c <HAL_RCC_OscConfig+0x270>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	4930      	ldr	r1, [pc, #192]	; (800219c <HAL_RCC_OscConfig+0x270>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020de:	4b2f      	ldr	r3, [pc, #188]	; (800219c <HAL_RCC_OscConfig+0x270>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	021b      	lsls	r3, r3, #8
 80020ec:	492b      	ldr	r1, [pc, #172]	; (800219c <HAL_RCC_OscConfig+0x270>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	604b      	str	r3, [r1, #4]
 80020f2:	e01a      	b.n	800212a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020f4:	4b29      	ldr	r3, [pc, #164]	; (800219c <HAL_RCC_OscConfig+0x270>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a28      	ldr	r2, [pc, #160]	; (800219c <HAL_RCC_OscConfig+0x270>)
 80020fa:	f023 0301 	bic.w	r3, r3, #1
 80020fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002100:	f7ff fb96 	bl	8001830 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002108:	f7ff fb92 	bl	8001830 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e314      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800211a:	4b20      	ldr	r3, [pc, #128]	; (800219c <HAL_RCC_OscConfig+0x270>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f0      	bne.n	8002108 <HAL_RCC_OscConfig+0x1dc>
 8002126:	e000      	b.n	800212a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002128:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d073      	beq.n	800221e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	2b08      	cmp	r3, #8
 800213a:	d005      	beq.n	8002148 <HAL_RCC_OscConfig+0x21c>
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	2b0c      	cmp	r3, #12
 8002140:	d10e      	bne.n	8002160 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	2b03      	cmp	r3, #3
 8002146:	d10b      	bne.n	8002160 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002148:	4b14      	ldr	r3, [pc, #80]	; (800219c <HAL_RCC_OscConfig+0x270>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d063      	beq.n	800221c <HAL_RCC_OscConfig+0x2f0>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d15f      	bne.n	800221c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e2f1      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002168:	d106      	bne.n	8002178 <HAL_RCC_OscConfig+0x24c>
 800216a:	4b0c      	ldr	r3, [pc, #48]	; (800219c <HAL_RCC_OscConfig+0x270>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a0b      	ldr	r2, [pc, #44]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8002170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	e025      	b.n	80021c4 <HAL_RCC_OscConfig+0x298>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002180:	d114      	bne.n	80021ac <HAL_RCC_OscConfig+0x280>
 8002182:	4b06      	ldr	r3, [pc, #24]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a05      	ldr	r2, [pc, #20]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8002188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	4b03      	ldr	r3, [pc, #12]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a02      	ldr	r2, [pc, #8]	; (800219c <HAL_RCC_OscConfig+0x270>)
 8002194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	e013      	b.n	80021c4 <HAL_RCC_OscConfig+0x298>
 800219c:	40021000 	.word	0x40021000
 80021a0:	0800b308 	.word	0x0800b308
 80021a4:	20000000 	.word	0x20000000
 80021a8:	20000004 	.word	0x20000004
 80021ac:	4ba0      	ldr	r3, [pc, #640]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a9f      	ldr	r2, [pc, #636]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 80021b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	4b9d      	ldr	r3, [pc, #628]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a9c      	ldr	r2, [pc, #624]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 80021be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d013      	beq.n	80021f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021cc:	f7ff fb30 	bl	8001830 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d4:	f7ff fb2c 	bl	8001830 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b64      	cmp	r3, #100	; 0x64
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e2ae      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021e6:	4b92      	ldr	r3, [pc, #584]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f0      	beq.n	80021d4 <HAL_RCC_OscConfig+0x2a8>
 80021f2:	e014      	b.n	800221e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f4:	f7ff fb1c 	bl	8001830 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021fc:	f7ff fb18 	bl	8001830 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b64      	cmp	r3, #100	; 0x64
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e29a      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800220e:	4b88      	ldr	r3, [pc, #544]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0x2d0>
 800221a:	e000      	b.n	800221e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800221c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d060      	beq.n	80022ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	2b04      	cmp	r3, #4
 800222e:	d005      	beq.n	800223c <HAL_RCC_OscConfig+0x310>
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	2b0c      	cmp	r3, #12
 8002234:	d119      	bne.n	800226a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	2b02      	cmp	r3, #2
 800223a:	d116      	bne.n	800226a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800223c:	4b7c      	ldr	r3, [pc, #496]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002244:	2b00      	cmp	r3, #0
 8002246:	d005      	beq.n	8002254 <HAL_RCC_OscConfig+0x328>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e277      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002254:	4b76      	ldr	r3, [pc, #472]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	061b      	lsls	r3, r3, #24
 8002262:	4973      	ldr	r1, [pc, #460]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 8002264:	4313      	orrs	r3, r2
 8002266:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002268:	e040      	b.n	80022ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d023      	beq.n	80022ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002272:	4b6f      	ldr	r3, [pc, #444]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a6e      	ldr	r2, [pc, #440]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 8002278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800227c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227e:	f7ff fad7 	bl	8001830 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002286:	f7ff fad3 	bl	8001830 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e255      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002298:	4b65      	ldr	r3, [pc, #404]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a4:	4b62      	ldr	r3, [pc, #392]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	061b      	lsls	r3, r3, #24
 80022b2:	495f      	ldr	r1, [pc, #380]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]
 80022b8:	e018      	b.n	80022ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ba:	4b5d      	ldr	r3, [pc, #372]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a5c      	ldr	r2, [pc, #368]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 80022c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c6:	f7ff fab3 	bl	8001830 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ce:	f7ff faaf 	bl	8001830 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e231      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022e0:	4b53      	ldr	r3, [pc, #332]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1f0      	bne.n	80022ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0308 	and.w	r3, r3, #8
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d03c      	beq.n	8002372 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d01c      	beq.n	800233a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002300:	4b4b      	ldr	r3, [pc, #300]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 8002302:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002306:	4a4a      	ldr	r2, [pc, #296]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002310:	f7ff fa8e 	bl	8001830 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002318:	f7ff fa8a 	bl	8001830 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e20c      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800232a:	4b41      	ldr	r3, [pc, #260]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 800232c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0ef      	beq.n	8002318 <HAL_RCC_OscConfig+0x3ec>
 8002338:	e01b      	b.n	8002372 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800233a:	4b3d      	ldr	r3, [pc, #244]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 800233c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002340:	4a3b      	ldr	r2, [pc, #236]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 8002342:	f023 0301 	bic.w	r3, r3, #1
 8002346:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234a:	f7ff fa71 	bl	8001830 <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002352:	f7ff fa6d 	bl	8001830 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e1ef      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002364:	4b32      	ldr	r3, [pc, #200]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 8002366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1ef      	bne.n	8002352 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0304 	and.w	r3, r3, #4
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 80a6 	beq.w	80024cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002380:	2300      	movs	r3, #0
 8002382:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002384:	4b2a      	ldr	r3, [pc, #168]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 8002386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10d      	bne.n	80023ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002390:	4b27      	ldr	r3, [pc, #156]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 8002392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002394:	4a26      	ldr	r2, [pc, #152]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 8002396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800239a:	6593      	str	r3, [r2, #88]	; 0x58
 800239c:	4b24      	ldr	r3, [pc, #144]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 800239e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023a8:	2301      	movs	r3, #1
 80023aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ac:	4b21      	ldr	r3, [pc, #132]	; (8002434 <HAL_RCC_OscConfig+0x508>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d118      	bne.n	80023ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023b8:	4b1e      	ldr	r3, [pc, #120]	; (8002434 <HAL_RCC_OscConfig+0x508>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a1d      	ldr	r2, [pc, #116]	; (8002434 <HAL_RCC_OscConfig+0x508>)
 80023be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c4:	f7ff fa34 	bl	8001830 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023cc:	f7ff fa30 	bl	8001830 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e1b2      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023de:	4b15      	ldr	r3, [pc, #84]	; (8002434 <HAL_RCC_OscConfig+0x508>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0f0      	beq.n	80023cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d108      	bne.n	8002404 <HAL_RCC_OscConfig+0x4d8>
 80023f2:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 80023f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f8:	4a0d      	ldr	r2, [pc, #52]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002402:	e029      	b.n	8002458 <HAL_RCC_OscConfig+0x52c>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2b05      	cmp	r3, #5
 800240a:	d115      	bne.n	8002438 <HAL_RCC_OscConfig+0x50c>
 800240c:	4b08      	ldr	r3, [pc, #32]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 800240e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002412:	4a07      	ldr	r2, [pc, #28]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 8002414:	f043 0304 	orr.w	r3, r3, #4
 8002418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800241c:	4b04      	ldr	r3, [pc, #16]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 800241e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002422:	4a03      	ldr	r2, [pc, #12]	; (8002430 <HAL_RCC_OscConfig+0x504>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800242c:	e014      	b.n	8002458 <HAL_RCC_OscConfig+0x52c>
 800242e:	bf00      	nop
 8002430:	40021000 	.word	0x40021000
 8002434:	40007000 	.word	0x40007000
 8002438:	4b9a      	ldr	r3, [pc, #616]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	4a99      	ldr	r2, [pc, #612]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 8002440:	f023 0301 	bic.w	r3, r3, #1
 8002444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002448:	4b96      	ldr	r3, [pc, #600]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 800244a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244e:	4a95      	ldr	r2, [pc, #596]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 8002450:	f023 0304 	bic.w	r3, r3, #4
 8002454:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d016      	beq.n	800248e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002460:	f7ff f9e6 	bl	8001830 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002466:	e00a      	b.n	800247e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002468:	f7ff f9e2 	bl	8001830 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	; 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e162      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800247e:	4b89      	ldr	r3, [pc, #548]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 8002480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0ed      	beq.n	8002468 <HAL_RCC_OscConfig+0x53c>
 800248c:	e015      	b.n	80024ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800248e:	f7ff f9cf 	bl	8001830 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002494:	e00a      	b.n	80024ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002496:	f7ff f9cb 	bl	8001830 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e14b      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024ac:	4b7d      	ldr	r3, [pc, #500]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 80024ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1ed      	bne.n	8002496 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024ba:	7ffb      	ldrb	r3, [r7, #31]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d105      	bne.n	80024cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c0:	4b78      	ldr	r3, [pc, #480]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 80024c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c4:	4a77      	ldr	r2, [pc, #476]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 80024c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0320 	and.w	r3, r3, #32
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d03c      	beq.n	8002552 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d01c      	beq.n	800251a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024e0:	4b70      	ldr	r3, [pc, #448]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 80024e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024e6:	4a6f      	ldr	r2, [pc, #444]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f0:	f7ff f99e 	bl	8001830 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024f8:	f7ff f99a 	bl	8001830 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e11c      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800250a:	4b66      	ldr	r3, [pc, #408]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 800250c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0ef      	beq.n	80024f8 <HAL_RCC_OscConfig+0x5cc>
 8002518:	e01b      	b.n	8002552 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800251a:	4b62      	ldr	r3, [pc, #392]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 800251c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002520:	4a60      	ldr	r2, [pc, #384]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 8002522:	f023 0301 	bic.w	r3, r3, #1
 8002526:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252a:	f7ff f981 	bl	8001830 <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002532:	f7ff f97d 	bl	8001830 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e0ff      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002544:	4b57      	ldr	r3, [pc, #348]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 8002546:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1ef      	bne.n	8002532 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 80f3 	beq.w	8002742 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002560:	2b02      	cmp	r3, #2
 8002562:	f040 80c9 	bne.w	80026f8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002566:	4b4f      	ldr	r3, [pc, #316]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f003 0203 	and.w	r2, r3, #3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002576:	429a      	cmp	r2, r3
 8002578:	d12c      	bne.n	80025d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002584:	3b01      	subs	r3, #1
 8002586:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002588:	429a      	cmp	r2, r3
 800258a:	d123      	bne.n	80025d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002596:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002598:	429a      	cmp	r2, r3
 800259a:	d11b      	bne.n	80025d4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d113      	bne.n	80025d4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b6:	085b      	lsrs	r3, r3, #1
 80025b8:	3b01      	subs	r3, #1
 80025ba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025bc:	429a      	cmp	r2, r3
 80025be:	d109      	bne.n	80025d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	085b      	lsrs	r3, r3, #1
 80025cc:	3b01      	subs	r3, #1
 80025ce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d06b      	beq.n	80026ac <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	2b0c      	cmp	r3, #12
 80025d8:	d062      	beq.n	80026a0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025da:	4b32      	ldr	r3, [pc, #200]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e0ac      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80025ea:	4b2e      	ldr	r3, [pc, #184]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a2d      	ldr	r2, [pc, #180]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 80025f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025f4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025f6:	f7ff f91b 	bl	8001830 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025fe:	f7ff f917 	bl	8001830 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e099      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002610:	4b24      	ldr	r3, [pc, #144]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1f0      	bne.n	80025fe <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800261c:	4b21      	ldr	r3, [pc, #132]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 800261e:	68da      	ldr	r2, [r3, #12]
 8002620:	4b21      	ldr	r3, [pc, #132]	; (80026a8 <HAL_RCC_OscConfig+0x77c>)
 8002622:	4013      	ands	r3, r2
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800262c:	3a01      	subs	r2, #1
 800262e:	0112      	lsls	r2, r2, #4
 8002630:	4311      	orrs	r1, r2
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002636:	0212      	lsls	r2, r2, #8
 8002638:	4311      	orrs	r1, r2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800263e:	0852      	lsrs	r2, r2, #1
 8002640:	3a01      	subs	r2, #1
 8002642:	0552      	lsls	r2, r2, #21
 8002644:	4311      	orrs	r1, r2
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800264a:	0852      	lsrs	r2, r2, #1
 800264c:	3a01      	subs	r2, #1
 800264e:	0652      	lsls	r2, r2, #25
 8002650:	4311      	orrs	r1, r2
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002656:	06d2      	lsls	r2, r2, #27
 8002658:	430a      	orrs	r2, r1
 800265a:	4912      	ldr	r1, [pc, #72]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 800265c:	4313      	orrs	r3, r2
 800265e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002660:	4b10      	ldr	r3, [pc, #64]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a0f      	ldr	r2, [pc, #60]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 8002666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800266a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800266c:	4b0d      	ldr	r3, [pc, #52]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	4a0c      	ldr	r2, [pc, #48]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 8002672:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002676:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002678:	f7ff f8da 	bl	8001830 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002680:	f7ff f8d6 	bl	8001830 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e058      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002692:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <HAL_RCC_OscConfig+0x778>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0f0      	beq.n	8002680 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800269e:	e050      	b.n	8002742 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e04f      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
 80026a4:	40021000 	.word	0x40021000
 80026a8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ac:	4b27      	ldr	r3, [pc, #156]	; (800274c <HAL_RCC_OscConfig+0x820>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d144      	bne.n	8002742 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80026b8:	4b24      	ldr	r3, [pc, #144]	; (800274c <HAL_RCC_OscConfig+0x820>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a23      	ldr	r2, [pc, #140]	; (800274c <HAL_RCC_OscConfig+0x820>)
 80026be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026c4:	4b21      	ldr	r3, [pc, #132]	; (800274c <HAL_RCC_OscConfig+0x820>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	4a20      	ldr	r2, [pc, #128]	; (800274c <HAL_RCC_OscConfig+0x820>)
 80026ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026d0:	f7ff f8ae 	bl	8001830 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d8:	f7ff f8aa 	bl	8001830 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e02c      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ea:	4b18      	ldr	r3, [pc, #96]	; (800274c <HAL_RCC_OscConfig+0x820>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCC_OscConfig+0x7ac>
 80026f6:	e024      	b.n	8002742 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	2b0c      	cmp	r3, #12
 80026fc:	d01f      	beq.n	800273e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fe:	4b13      	ldr	r3, [pc, #76]	; (800274c <HAL_RCC_OscConfig+0x820>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a12      	ldr	r2, [pc, #72]	; (800274c <HAL_RCC_OscConfig+0x820>)
 8002704:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270a:	f7ff f891 	bl	8001830 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002712:	f7ff f88d 	bl	8001830 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e00f      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002724:	4b09      	ldr	r3, [pc, #36]	; (800274c <HAL_RCC_OscConfig+0x820>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1f0      	bne.n	8002712 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <HAL_RCC_OscConfig+0x820>)
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	4905      	ldr	r1, [pc, #20]	; (800274c <HAL_RCC_OscConfig+0x820>)
 8002736:	4b06      	ldr	r3, [pc, #24]	; (8002750 <HAL_RCC_OscConfig+0x824>)
 8002738:	4013      	ands	r3, r2
 800273a:	60cb      	str	r3, [r1, #12]
 800273c:	e001      	b.n	8002742 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3720      	adds	r7, #32
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40021000 	.word	0x40021000
 8002750:	feeefffc 	.word	0xfeeefffc

08002754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e0e7      	b.n	8002938 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002768:	4b75      	ldr	r3, [pc, #468]	; (8002940 <HAL_RCC_ClockConfig+0x1ec>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	429a      	cmp	r2, r3
 8002774:	d910      	bls.n	8002798 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002776:	4b72      	ldr	r3, [pc, #456]	; (8002940 <HAL_RCC_ClockConfig+0x1ec>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f023 0207 	bic.w	r2, r3, #7
 800277e:	4970      	ldr	r1, [pc, #448]	; (8002940 <HAL_RCC_ClockConfig+0x1ec>)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	4313      	orrs	r3, r2
 8002784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002786:	4b6e      	ldr	r3, [pc, #440]	; (8002940 <HAL_RCC_ClockConfig+0x1ec>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d001      	beq.n	8002798 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e0cf      	b.n	8002938 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d010      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	4b66      	ldr	r3, [pc, #408]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d908      	bls.n	80027c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027b4:	4b63      	ldr	r3, [pc, #396]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	4960      	ldr	r1, [pc, #384]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d04c      	beq.n	800286c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d107      	bne.n	80027ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027da:	4b5a      	ldr	r3, [pc, #360]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d121      	bne.n	800282a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e0a6      	b.n	8002938 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d107      	bne.n	8002802 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027f2:	4b54      	ldr	r3, [pc, #336]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d115      	bne.n	800282a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e09a      	b.n	8002938 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d107      	bne.n	800281a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800280a:	4b4e      	ldr	r3, [pc, #312]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d109      	bne.n	800282a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e08e      	b.n	8002938 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800281a:	4b4a      	ldr	r3, [pc, #296]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e086      	b.n	8002938 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800282a:	4b46      	ldr	r3, [pc, #280]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f023 0203 	bic.w	r2, r3, #3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	4943      	ldr	r1, [pc, #268]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 8002838:	4313      	orrs	r3, r2
 800283a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800283c:	f7fe fff8 	bl	8001830 <HAL_GetTick>
 8002840:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002842:	e00a      	b.n	800285a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002844:	f7fe fff4 	bl	8001830 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002852:	4293      	cmp	r3, r2
 8002854:	d901      	bls.n	800285a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e06e      	b.n	8002938 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285a:	4b3a      	ldr	r3, [pc, #232]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 020c 	and.w	r2, r3, #12
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	429a      	cmp	r2, r3
 800286a:	d1eb      	bne.n	8002844 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d010      	beq.n	800289a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	4b31      	ldr	r3, [pc, #196]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002884:	429a      	cmp	r2, r3
 8002886:	d208      	bcs.n	800289a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002888:	4b2e      	ldr	r3, [pc, #184]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	492b      	ldr	r1, [pc, #172]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 8002896:	4313      	orrs	r3, r2
 8002898:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800289a:	4b29      	ldr	r3, [pc, #164]	; (8002940 <HAL_RCC_ClockConfig+0x1ec>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d210      	bcs.n	80028ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a8:	4b25      	ldr	r3, [pc, #148]	; (8002940 <HAL_RCC_ClockConfig+0x1ec>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f023 0207 	bic.w	r2, r3, #7
 80028b0:	4923      	ldr	r1, [pc, #140]	; (8002940 <HAL_RCC_ClockConfig+0x1ec>)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b8:	4b21      	ldr	r3, [pc, #132]	; (8002940 <HAL_RCC_ClockConfig+0x1ec>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d001      	beq.n	80028ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e036      	b.n	8002938 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0304 	and.w	r3, r3, #4
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d008      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028d6:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	4918      	ldr	r1, [pc, #96]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d009      	beq.n	8002908 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028f4:	4b13      	ldr	r3, [pc, #76]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	4910      	ldr	r1, [pc, #64]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 8002904:	4313      	orrs	r3, r2
 8002906:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002908:	f000 f824 	bl	8002954 <HAL_RCC_GetSysClockFreq>
 800290c:	4602      	mov	r2, r0
 800290e:	4b0d      	ldr	r3, [pc, #52]	; (8002944 <HAL_RCC_ClockConfig+0x1f0>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	091b      	lsrs	r3, r3, #4
 8002914:	f003 030f 	and.w	r3, r3, #15
 8002918:	490b      	ldr	r1, [pc, #44]	; (8002948 <HAL_RCC_ClockConfig+0x1f4>)
 800291a:	5ccb      	ldrb	r3, [r1, r3]
 800291c:	f003 031f 	and.w	r3, r3, #31
 8002920:	fa22 f303 	lsr.w	r3, r2, r3
 8002924:	4a09      	ldr	r2, [pc, #36]	; (800294c <HAL_RCC_ClockConfig+0x1f8>)
 8002926:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002928:	4b09      	ldr	r3, [pc, #36]	; (8002950 <HAL_RCC_ClockConfig+0x1fc>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f7fe fc55 	bl	80011dc <HAL_InitTick>
 8002932:	4603      	mov	r3, r0
 8002934:	72fb      	strb	r3, [r7, #11]

  return status;
 8002936:	7afb      	ldrb	r3, [r7, #11]
}
 8002938:	4618      	mov	r0, r3
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40022000 	.word	0x40022000
 8002944:	40021000 	.word	0x40021000
 8002948:	0800b308 	.word	0x0800b308
 800294c:	20000000 	.word	0x20000000
 8002950:	20000004 	.word	0x20000004

08002954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002954:	b480      	push	{r7}
 8002956:	b089      	sub	sp, #36	; 0x24
 8002958:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800295a:	2300      	movs	r3, #0
 800295c:	61fb      	str	r3, [r7, #28]
 800295e:	2300      	movs	r3, #0
 8002960:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002962:	4b3e      	ldr	r3, [pc, #248]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 030c 	and.w	r3, r3, #12
 800296a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800296c:	4b3b      	ldr	r3, [pc, #236]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x108>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f003 0303 	and.w	r3, r3, #3
 8002974:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d005      	beq.n	8002988 <HAL_RCC_GetSysClockFreq+0x34>
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	2b0c      	cmp	r3, #12
 8002980:	d121      	bne.n	80029c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d11e      	bne.n	80029c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002988:	4b34      	ldr	r3, [pc, #208]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x108>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0308 	and.w	r3, r3, #8
 8002990:	2b00      	cmp	r3, #0
 8002992:	d107      	bne.n	80029a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002994:	4b31      	ldr	r3, [pc, #196]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002996:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800299a:	0a1b      	lsrs	r3, r3, #8
 800299c:	f003 030f 	and.w	r3, r3, #15
 80029a0:	61fb      	str	r3, [r7, #28]
 80029a2:	e005      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029a4:	4b2d      	ldr	r3, [pc, #180]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x108>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	091b      	lsrs	r3, r3, #4
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029b0:	4a2b      	ldr	r2, [pc, #172]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x10c>)
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10d      	bne.n	80029dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029c4:	e00a      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d102      	bne.n	80029d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029cc:	4b25      	ldr	r3, [pc, #148]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x110>)
 80029ce:	61bb      	str	r3, [r7, #24]
 80029d0:	e004      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d101      	bne.n	80029dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029d8:	4b23      	ldr	r3, [pc, #140]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x114>)
 80029da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	2b0c      	cmp	r3, #12
 80029e0:	d134      	bne.n	8002a4c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029e2:	4b1e      	ldr	r3, [pc, #120]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x108>)
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d003      	beq.n	80029fa <HAL_RCC_GetSysClockFreq+0xa6>
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d003      	beq.n	8002a00 <HAL_RCC_GetSysClockFreq+0xac>
 80029f8:	e005      	b.n	8002a06 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80029fa:	4b1a      	ldr	r3, [pc, #104]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x110>)
 80029fc:	617b      	str	r3, [r7, #20]
      break;
 80029fe:	e005      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a00:	4b19      	ldr	r3, [pc, #100]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a02:	617b      	str	r3, [r7, #20]
      break;
 8002a04:	e002      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	617b      	str	r3, [r7, #20]
      break;
 8002a0a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a0c:	4b13      	ldr	r3, [pc, #76]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	091b      	lsrs	r3, r3, #4
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	3301      	adds	r3, #1
 8002a18:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a1a:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	0a1b      	lsrs	r3, r3, #8
 8002a20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	fb03 f202 	mul.w	r2, r3, r2
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a30:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a32:	4b0a      	ldr	r3, [pc, #40]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	0e5b      	lsrs	r3, r3, #25
 8002a38:	f003 0303 	and.w	r3, r3, #3
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a4c:	69bb      	ldr	r3, [r7, #24]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3724      	adds	r7, #36	; 0x24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	0800b320 	.word	0x0800b320
 8002a64:	00f42400 	.word	0x00f42400
 8002a68:	007a1200 	.word	0x007a1200

08002a6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a70:	4b03      	ldr	r3, [pc, #12]	; (8002a80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a72:	681b      	ldr	r3, [r3, #0]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	20000000 	.word	0x20000000

08002a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a88:	f7ff fff0 	bl	8002a6c <HAL_RCC_GetHCLKFreq>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	0a1b      	lsrs	r3, r3, #8
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	4904      	ldr	r1, [pc, #16]	; (8002aac <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a9a:	5ccb      	ldrb	r3, [r1, r3]
 8002a9c:	f003 031f 	and.w	r3, r3, #31
 8002aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	0800b318 	.word	0x0800b318

08002ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ab4:	f7ff ffda 	bl	8002a6c <HAL_RCC_GetHCLKFreq>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	0adb      	lsrs	r3, r3, #11
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	4904      	ldr	r1, [pc, #16]	; (8002ad8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ac6:	5ccb      	ldrb	r3, [r1, r3]
 8002ac8:	f003 031f 	and.w	r3, r3, #31
 8002acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	0800b318 	.word	0x0800b318

08002adc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	220f      	movs	r2, #15
 8002aea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002aec:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <HAL_RCC_GetClockConfig+0x5c>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 0203 	and.w	r2, r3, #3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002af8:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <HAL_RCC_GetClockConfig+0x5c>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002b04:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <HAL_RCC_GetClockConfig+0x5c>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002b10:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <HAL_RCC_GetClockConfig+0x5c>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	08db      	lsrs	r3, r3, #3
 8002b16:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002b1e:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <HAL_RCC_GetClockConfig+0x60>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0207 	and.w	r2, r3, #7
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	601a      	str	r2, [r3, #0]
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	40022000 	.word	0x40022000

08002b40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b48:	2300      	movs	r3, #0
 8002b4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b4c:	4b2a      	ldr	r3, [pc, #168]	; (8002bf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d003      	beq.n	8002b60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b58:	f7ff f984 	bl	8001e64 <HAL_PWREx_GetVoltageRange>
 8002b5c:	6178      	str	r0, [r7, #20]
 8002b5e:	e014      	b.n	8002b8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b60:	4b25      	ldr	r3, [pc, #148]	; (8002bf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b64:	4a24      	ldr	r2, [pc, #144]	; (8002bf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b6a:	6593      	str	r3, [r2, #88]	; 0x58
 8002b6c:	4b22      	ldr	r3, [pc, #136]	; (8002bf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b78:	f7ff f974 	bl	8001e64 <HAL_PWREx_GetVoltageRange>
 8002b7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b7e:	4b1e      	ldr	r3, [pc, #120]	; (8002bf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b82:	4a1d      	ldr	r2, [pc, #116]	; (8002bf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b88:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b90:	d10b      	bne.n	8002baa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b80      	cmp	r3, #128	; 0x80
 8002b96:	d919      	bls.n	8002bcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2ba0      	cmp	r3, #160	; 0xa0
 8002b9c:	d902      	bls.n	8002ba4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	613b      	str	r3, [r7, #16]
 8002ba2:	e013      	b.n	8002bcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	613b      	str	r3, [r7, #16]
 8002ba8:	e010      	b.n	8002bcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b80      	cmp	r3, #128	; 0x80
 8002bae:	d902      	bls.n	8002bb6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	613b      	str	r3, [r7, #16]
 8002bb4:	e00a      	b.n	8002bcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b80      	cmp	r3, #128	; 0x80
 8002bba:	d102      	bne.n	8002bc2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	613b      	str	r3, [r7, #16]
 8002bc0:	e004      	b.n	8002bcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b70      	cmp	r3, #112	; 0x70
 8002bc6:	d101      	bne.n	8002bcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bc8:	2301      	movs	r3, #1
 8002bca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f023 0207 	bic.w	r2, r3, #7
 8002bd4:	4909      	ldr	r1, [pc, #36]	; (8002bfc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002bdc:	4b07      	ldr	r3, [pc, #28]	; (8002bfc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d001      	beq.n	8002bee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3718      	adds	r7, #24
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	40022000 	.word	0x40022000

08002c00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c08:	2300      	movs	r3, #0
 8002c0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d031      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c20:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c24:	d01a      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002c26:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c2a:	d814      	bhi.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d009      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c34:	d10f      	bne.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002c36:	4b5d      	ldr	r3, [pc, #372]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	4a5c      	ldr	r2, [pc, #368]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c40:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c42:	e00c      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3304      	adds	r3, #4
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 f9de 	bl	800300c <RCCEx_PLLSAI1_Config>
 8002c50:	4603      	mov	r3, r0
 8002c52:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c54:	e003      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	74fb      	strb	r3, [r7, #19]
      break;
 8002c5a:	e000      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002c5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c5e:	7cfb      	ldrb	r3, [r7, #19]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10b      	bne.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c64:	4b51      	ldr	r3, [pc, #324]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c72:	494e      	ldr	r1, [pc, #312]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c7a:	e001      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c7c:	7cfb      	ldrb	r3, [r7, #19]
 8002c7e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 809e 	beq.w	8002dca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c92:	4b46      	ldr	r3, [pc, #280]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e000      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00d      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ca8:	4b40      	ldr	r3, [pc, #256]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cac:	4a3f      	ldr	r2, [pc, #252]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb2:	6593      	str	r3, [r2, #88]	; 0x58
 8002cb4:	4b3d      	ldr	r3, [pc, #244]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cbc:	60bb      	str	r3, [r7, #8]
 8002cbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cc4:	4b3a      	ldr	r3, [pc, #232]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a39      	ldr	r2, [pc, #228]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cd0:	f7fe fdae 	bl	8001830 <HAL_GetTick>
 8002cd4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002cd6:	e009      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd8:	f7fe fdaa 	bl	8001830 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d902      	bls.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	74fb      	strb	r3, [r7, #19]
        break;
 8002cea:	e005      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002cec:	4b30      	ldr	r3, [pc, #192]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0ef      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002cf8:	7cfb      	ldrb	r3, [r7, #19]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d15a      	bne.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cfe:	4b2b      	ldr	r3, [pc, #172]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d08:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d01e      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d019      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d1a:	4b24      	ldr	r3, [pc, #144]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d24:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d26:	4b21      	ldr	r3, [pc, #132]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2c:	4a1f      	ldr	r2, [pc, #124]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d36:	4b1d      	ldr	r3, [pc, #116]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3c:	4a1b      	ldr	r2, [pc, #108]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d46:	4a19      	ldr	r2, [pc, #100]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d016      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d58:	f7fe fd6a 	bl	8001830 <HAL_GetTick>
 8002d5c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d5e:	e00b      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d60:	f7fe fd66 	bl	8001830 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d902      	bls.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	74fb      	strb	r3, [r7, #19]
            break;
 8002d76:	e006      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d78:	4b0c      	ldr	r3, [pc, #48]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0ec      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002d86:	7cfb      	ldrb	r3, [r7, #19]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10b      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d8c:	4b07      	ldr	r3, [pc, #28]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d9a:	4904      	ldr	r1, [pc, #16]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002da2:	e009      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002da4:	7cfb      	ldrb	r3, [r7, #19]
 8002da6:	74bb      	strb	r3, [r7, #18]
 8002da8:	e006      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002daa:	bf00      	nop
 8002dac:	40021000 	.word	0x40021000
 8002db0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db4:	7cfb      	ldrb	r3, [r7, #19]
 8002db6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002db8:	7c7b      	ldrb	r3, [r7, #17]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d105      	bne.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dbe:	4b8a      	ldr	r3, [pc, #552]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc2:	4a89      	ldr	r2, [pc, #548]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dc8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00a      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dd6:	4b84      	ldr	r3, [pc, #528]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ddc:	f023 0203 	bic.w	r2, r3, #3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	4980      	ldr	r1, [pc, #512]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00a      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002df8:	4b7b      	ldr	r3, [pc, #492]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfe:	f023 020c 	bic.w	r2, r3, #12
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e06:	4978      	ldr	r1, [pc, #480]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0320 	and.w	r3, r3, #32
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00a      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e1a:	4b73      	ldr	r3, [pc, #460]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e20:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e28:	496f      	ldr	r1, [pc, #444]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00a      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e3c:	4b6a      	ldr	r3, [pc, #424]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e42:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e4a:	4967      	ldr	r1, [pc, #412]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00a      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e5e:	4b62      	ldr	r3, [pc, #392]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6c:	495e      	ldr	r1, [pc, #376]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00a      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e80:	4b59      	ldr	r3, [pc, #356]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8e:	4956      	ldr	r1, [pc, #344]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00a      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ea2:	4b51      	ldr	r3, [pc, #324]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb0:	494d      	ldr	r1, [pc, #308]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d028      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ec4:	4b48      	ldr	r3, [pc, #288]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	4945      	ldr	r1, [pc, #276]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ee2:	d106      	bne.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ee4:	4b40      	ldr	r3, [pc, #256]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4a3f      	ldr	r2, [pc, #252]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eee:	60d3      	str	r3, [r2, #12]
 8002ef0:	e011      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002efa:	d10c      	bne.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3304      	adds	r3, #4
 8002f00:	2101      	movs	r1, #1
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 f882 	bl	800300c <RCCEx_PLLSAI1_Config>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f0c:	7cfb      	ldrb	r3, [r7, #19]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002f12:	7cfb      	ldrb	r3, [r7, #19]
 8002f14:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d028      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f22:	4b31      	ldr	r3, [pc, #196]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f28:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f30:	492d      	ldr	r1, [pc, #180]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f40:	d106      	bne.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f42:	4b29      	ldr	r3, [pc, #164]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	4a28      	ldr	r2, [pc, #160]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f4c:	60d3      	str	r3, [r2, #12]
 8002f4e:	e011      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f58:	d10c      	bne.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	2101      	movs	r1, #1
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 f853 	bl	800300c <RCCEx_PLLSAI1_Config>
 8002f66:	4603      	mov	r3, r0
 8002f68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f6a:	7cfb      	ldrb	r3, [r7, #19]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002f70:	7cfb      	ldrb	r3, [r7, #19]
 8002f72:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d01c      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f80:	4b19      	ldr	r3, [pc, #100]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f8e:	4916      	ldr	r1, [pc, #88]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f9e:	d10c      	bne.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3304      	adds	r3, #4
 8002fa4:	2102      	movs	r1, #2
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 f830 	bl	800300c <RCCEx_PLLSAI1_Config>
 8002fac:	4603      	mov	r3, r0
 8002fae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fb0:	7cfb      	ldrb	r3, [r7, #19]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002fb6:	7cfb      	ldrb	r3, [r7, #19]
 8002fb8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00a      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002fc6:	4b08      	ldr	r3, [pc, #32]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fcc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd4:	4904      	ldr	r1, [pc, #16]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002fdc:	7cbb      	ldrb	r3, [r7, #18]
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40021000 	.word	0x40021000

08002fec <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002ff0:	4b05      	ldr	r3, [pc, #20]	; (8003008 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a04      	ldr	r2, [pc, #16]	; (8003008 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002ff6:	f043 0304 	orr.w	r3, r3, #4
 8002ffa:	6013      	str	r3, [r2, #0]
}
 8002ffc:	bf00      	nop
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	40021000 	.word	0x40021000

0800300c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003016:	2300      	movs	r3, #0
 8003018:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800301a:	4b74      	ldr	r3, [pc, #464]	; (80031ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d018      	beq.n	8003058 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003026:	4b71      	ldr	r3, [pc, #452]	; (80031ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f003 0203 	and.w	r2, r3, #3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	429a      	cmp	r2, r3
 8003034:	d10d      	bne.n	8003052 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
       ||
 800303a:	2b00      	cmp	r3, #0
 800303c:	d009      	beq.n	8003052 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800303e:	4b6b      	ldr	r3, [pc, #428]	; (80031ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	091b      	lsrs	r3, r3, #4
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	1c5a      	adds	r2, r3, #1
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
       ||
 800304e:	429a      	cmp	r2, r3
 8003050:	d047      	beq.n	80030e2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	73fb      	strb	r3, [r7, #15]
 8003056:	e044      	b.n	80030e2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b03      	cmp	r3, #3
 800305e:	d018      	beq.n	8003092 <RCCEx_PLLSAI1_Config+0x86>
 8003060:	2b03      	cmp	r3, #3
 8003062:	d825      	bhi.n	80030b0 <RCCEx_PLLSAI1_Config+0xa4>
 8003064:	2b01      	cmp	r3, #1
 8003066:	d002      	beq.n	800306e <RCCEx_PLLSAI1_Config+0x62>
 8003068:	2b02      	cmp	r3, #2
 800306a:	d009      	beq.n	8003080 <RCCEx_PLLSAI1_Config+0x74>
 800306c:	e020      	b.n	80030b0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800306e:	4b5f      	ldr	r3, [pc, #380]	; (80031ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d11d      	bne.n	80030b6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800307e:	e01a      	b.n	80030b6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003080:	4b5a      	ldr	r3, [pc, #360]	; (80031ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003088:	2b00      	cmp	r3, #0
 800308a:	d116      	bne.n	80030ba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003090:	e013      	b.n	80030ba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003092:	4b56      	ldr	r3, [pc, #344]	; (80031ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10f      	bne.n	80030be <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800309e:	4b53      	ldr	r3, [pc, #332]	; (80031ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d109      	bne.n	80030be <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030ae:	e006      	b.n	80030be <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	73fb      	strb	r3, [r7, #15]
      break;
 80030b4:	e004      	b.n	80030c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030b6:	bf00      	nop
 80030b8:	e002      	b.n	80030c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030ba:	bf00      	nop
 80030bc:	e000      	b.n	80030c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030be:	bf00      	nop
    }

    if(status == HAL_OK)
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10d      	bne.n	80030e2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030c6:	4b49      	ldr	r3, [pc, #292]	; (80031ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6819      	ldr	r1, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	430b      	orrs	r3, r1
 80030dc:	4943      	ldr	r1, [pc, #268]	; (80031ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030e2:	7bfb      	ldrb	r3, [r7, #15]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d17c      	bne.n	80031e2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80030e8:	4b40      	ldr	r3, [pc, #256]	; (80031ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a3f      	ldr	r2, [pc, #252]	; (80031ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80030ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030f4:	f7fe fb9c 	bl	8001830 <HAL_GetTick>
 80030f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030fa:	e009      	b.n	8003110 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030fc:	f7fe fb98 	bl	8001830 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d902      	bls.n	8003110 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	73fb      	strb	r3, [r7, #15]
        break;
 800310e:	e005      	b.n	800311c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003110:	4b36      	ldr	r3, [pc, #216]	; (80031ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1ef      	bne.n	80030fc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800311c:	7bfb      	ldrb	r3, [r7, #15]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d15f      	bne.n	80031e2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d110      	bne.n	800314a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003128:	4b30      	ldr	r3, [pc, #192]	; (80031ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003130:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6892      	ldr	r2, [r2, #8]
 8003138:	0211      	lsls	r1, r2, #8
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	68d2      	ldr	r2, [r2, #12]
 800313e:	06d2      	lsls	r2, r2, #27
 8003140:	430a      	orrs	r2, r1
 8003142:	492a      	ldr	r1, [pc, #168]	; (80031ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003144:	4313      	orrs	r3, r2
 8003146:	610b      	str	r3, [r1, #16]
 8003148:	e027      	b.n	800319a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d112      	bne.n	8003176 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003150:	4b26      	ldr	r3, [pc, #152]	; (80031ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003158:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6892      	ldr	r2, [r2, #8]
 8003160:	0211      	lsls	r1, r2, #8
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	6912      	ldr	r2, [r2, #16]
 8003166:	0852      	lsrs	r2, r2, #1
 8003168:	3a01      	subs	r2, #1
 800316a:	0552      	lsls	r2, r2, #21
 800316c:	430a      	orrs	r2, r1
 800316e:	491f      	ldr	r1, [pc, #124]	; (80031ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003170:	4313      	orrs	r3, r2
 8003172:	610b      	str	r3, [r1, #16]
 8003174:	e011      	b.n	800319a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003176:	4b1d      	ldr	r3, [pc, #116]	; (80031ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800317e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6892      	ldr	r2, [r2, #8]
 8003186:	0211      	lsls	r1, r2, #8
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	6952      	ldr	r2, [r2, #20]
 800318c:	0852      	lsrs	r2, r2, #1
 800318e:	3a01      	subs	r2, #1
 8003190:	0652      	lsls	r2, r2, #25
 8003192:	430a      	orrs	r2, r1
 8003194:	4915      	ldr	r1, [pc, #84]	; (80031ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003196:	4313      	orrs	r3, r2
 8003198:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800319a:	4b14      	ldr	r3, [pc, #80]	; (80031ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a13      	ldr	r2, [pc, #76]	; (80031ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80031a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031a4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a6:	f7fe fb43 	bl	8001830 <HAL_GetTick>
 80031aa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031ac:	e009      	b.n	80031c2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031ae:	f7fe fb3f 	bl	8001830 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d902      	bls.n	80031c2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	73fb      	strb	r3, [r7, #15]
          break;
 80031c0:	e005      	b.n	80031ce <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031c2:	4b0a      	ldr	r3, [pc, #40]	; (80031ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0ef      	beq.n	80031ae <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80031ce:	7bfb      	ldrb	r3, [r7, #15]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d106      	bne.n	80031e2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80031d4:	4b05      	ldr	r3, [pc, #20]	; (80031ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	4903      	ldr	r1, [pc, #12]	; (80031ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40021000 	.word	0x40021000

080031f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e049      	b.n	8003296 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d106      	bne.n	800321c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f841 	bl	800329e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3304      	adds	r3, #4
 800322c:	4619      	mov	r1, r3
 800322e:	4610      	mov	r0, r2
 8003230:	f000 f9dc 	bl	80035ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
	...

080032b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d001      	beq.n	80032cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e03b      	b.n	8003344 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0201 	orr.w	r2, r2, #1
 80032e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a19      	ldr	r2, [pc, #100]	; (8003350 <HAL_TIM_Base_Start_IT+0x9c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d009      	beq.n	8003302 <HAL_TIM_Base_Start_IT+0x4e>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f6:	d004      	beq.n	8003302 <HAL_TIM_Base_Start_IT+0x4e>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a15      	ldr	r2, [pc, #84]	; (8003354 <HAL_TIM_Base_Start_IT+0xa0>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d115      	bne.n	800332e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	4b13      	ldr	r3, [pc, #76]	; (8003358 <HAL_TIM_Base_Start_IT+0xa4>)
 800330a:	4013      	ands	r3, r2
 800330c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2b06      	cmp	r3, #6
 8003312:	d015      	beq.n	8003340 <HAL_TIM_Base_Start_IT+0x8c>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800331a:	d011      	beq.n	8003340 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0201 	orr.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800332c:	e008      	b.n	8003340 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f042 0201 	orr.w	r2, r2, #1
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	e000      	b.n	8003342 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003340:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	40012c00 	.word	0x40012c00
 8003354:	40014000 	.word	0x40014000
 8003358:	00010007 	.word	0x00010007

0800335c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b02      	cmp	r3, #2
 8003370:	d122      	bne.n	80033b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b02      	cmp	r3, #2
 800337e:	d11b      	bne.n	80033b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f06f 0202 	mvn.w	r2, #2
 8003388:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f905 	bl	80035ae <HAL_TIM_IC_CaptureCallback>
 80033a4:	e005      	b.n	80033b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f8f7 	bl	800359a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f908 	bl	80035c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	f003 0304 	and.w	r3, r3, #4
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d122      	bne.n	800340c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d11b      	bne.n	800340c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0204 	mvn.w	r2, #4
 80033dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2202      	movs	r2, #2
 80033e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f8db 	bl	80035ae <HAL_TIM_IC_CaptureCallback>
 80033f8:	e005      	b.n	8003406 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f8cd 	bl	800359a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f8de 	bl	80035c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b08      	cmp	r3, #8
 8003418:	d122      	bne.n	8003460 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f003 0308 	and.w	r3, r3, #8
 8003424:	2b08      	cmp	r3, #8
 8003426:	d11b      	bne.n	8003460 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f06f 0208 	mvn.w	r2, #8
 8003430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2204      	movs	r2, #4
 8003436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f8b1 	bl	80035ae <HAL_TIM_IC_CaptureCallback>
 800344c:	e005      	b.n	800345a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f8a3 	bl	800359a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f8b4 	bl	80035c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	2b10      	cmp	r3, #16
 800346c:	d122      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f003 0310 	and.w	r3, r3, #16
 8003478:	2b10      	cmp	r3, #16
 800347a:	d11b      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f06f 0210 	mvn.w	r2, #16
 8003484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2208      	movs	r2, #8
 800348a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f887 	bl	80035ae <HAL_TIM_IC_CaptureCallback>
 80034a0:	e005      	b.n	80034ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f879 	bl	800359a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f88a 	bl	80035c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d10e      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d107      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 0201 	mvn.w	r2, #1
 80034d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7fd fe3e 	bl	800115c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ea:	2b80      	cmp	r3, #128	; 0x80
 80034ec:	d10e      	bne.n	800350c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f8:	2b80      	cmp	r3, #128	; 0x80
 80034fa:	d107      	bne.n	800350c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f8de 	bl	80036c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800351a:	d10e      	bne.n	800353a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003526:	2b80      	cmp	r3, #128	; 0x80
 8003528:	d107      	bne.n	800353a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f8d1 	bl	80036dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003544:	2b40      	cmp	r3, #64	; 0x40
 8003546:	d10e      	bne.n	8003566 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003552:	2b40      	cmp	r3, #64	; 0x40
 8003554:	d107      	bne.n	8003566 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800355e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f838 	bl	80035d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	f003 0320 	and.w	r3, r3, #32
 8003570:	2b20      	cmp	r3, #32
 8003572:	d10e      	bne.n	8003592 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f003 0320 	and.w	r3, r3, #32
 800357e:	2b20      	cmp	r3, #32
 8003580:	d107      	bne.n	8003592 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f06f 0220 	mvn.w	r2, #32
 800358a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f891 	bl	80036b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003592:	bf00      	nop
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
	...

080035ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a2a      	ldr	r2, [pc, #168]	; (80036a8 <TIM_Base_SetConfig+0xbc>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d003      	beq.n	800360c <TIM_Base_SetConfig+0x20>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800360a:	d108      	bne.n	800361e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	4313      	orrs	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a21      	ldr	r2, [pc, #132]	; (80036a8 <TIM_Base_SetConfig+0xbc>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d00b      	beq.n	800363e <TIM_Base_SetConfig+0x52>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800362c:	d007      	beq.n	800363e <TIM_Base_SetConfig+0x52>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a1e      	ldr	r2, [pc, #120]	; (80036ac <TIM_Base_SetConfig+0xc0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d003      	beq.n	800363e <TIM_Base_SetConfig+0x52>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a1d      	ldr	r2, [pc, #116]	; (80036b0 <TIM_Base_SetConfig+0xc4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d108      	bne.n	8003650 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003644:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	4313      	orrs	r3, r2
 800364e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	4313      	orrs	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a0c      	ldr	r2, [pc, #48]	; (80036a8 <TIM_Base_SetConfig+0xbc>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d007      	beq.n	800368c <TIM_Base_SetConfig+0xa0>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a0b      	ldr	r2, [pc, #44]	; (80036ac <TIM_Base_SetConfig+0xc0>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d003      	beq.n	800368c <TIM_Base_SetConfig+0xa0>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a0a      	ldr	r2, [pc, #40]	; (80036b0 <TIM_Base_SetConfig+0xc4>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d103      	bne.n	8003694 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	615a      	str	r2, [r3, #20]
}
 800369a:	bf00      	nop
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	40012c00 	.word	0x40012c00
 80036ac:	40014000 	.word	0x40014000
 80036b0:	40014400 	.word	0x40014400

080036b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e040      	b.n	8003784 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003706:	2b00      	cmp	r3, #0
 8003708:	d106      	bne.n	8003718 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fd ff6c 	bl	80015f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2224      	movs	r2, #36	; 0x24
 800371c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0201 	bic.w	r2, r2, #1
 800372c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 fc18 	bl	8003f64 <UART_SetConfig>
 8003734:	4603      	mov	r3, r0
 8003736:	2b01      	cmp	r3, #1
 8003738:	d101      	bne.n	800373e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e022      	b.n	8003784 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	2b00      	cmp	r3, #0
 8003744:	d002      	beq.n	800374c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fe38 	bl	80043bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800375a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800376a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0201 	orr.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 febf 	bl	8004500 <UART_CheckIdleState>
 8003782:	4603      	mov	r3, r0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3708      	adds	r7, #8
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b08a      	sub	sp, #40	; 0x28
 8003790:	af02      	add	r7, sp, #8
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	603b      	str	r3, [r7, #0]
 8003798:	4613      	mov	r3, r2
 800379a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037a0:	2b20      	cmp	r3, #32
 80037a2:	f040 8082 	bne.w	80038aa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <HAL_UART_Transmit+0x26>
 80037ac:	88fb      	ldrh	r3, [r7, #6]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e07a      	b.n	80038ac <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <HAL_UART_Transmit+0x38>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e073      	b.n	80038ac <HAL_UART_Transmit+0x120>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2221      	movs	r2, #33	; 0x21
 80037d8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037da:	f7fe f829 	bl	8001830 <HAL_GetTick>
 80037de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	88fa      	ldrh	r2, [r7, #6]
 80037e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	88fa      	ldrh	r2, [r7, #6]
 80037ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f8:	d108      	bne.n	800380c <HAL_UART_Transmit+0x80>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d104      	bne.n	800380c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003802:	2300      	movs	r3, #0
 8003804:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	61bb      	str	r3, [r7, #24]
 800380a:	e003      	b.n	8003814 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003810:	2300      	movs	r3, #0
 8003812:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800381c:	e02d      	b.n	800387a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	2200      	movs	r2, #0
 8003826:	2180      	movs	r1, #128	; 0x80
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 feb2 	bl	8004592 <UART_WaitOnFlagUntilTimeout>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e039      	b.n	80038ac <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10b      	bne.n	8003856 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	881a      	ldrh	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800384a:	b292      	uxth	r2, r2
 800384c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	3302      	adds	r3, #2
 8003852:	61bb      	str	r3, [r7, #24]
 8003854:	e008      	b.n	8003868 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	781a      	ldrb	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	b292      	uxth	r2, r2
 8003860:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	3301      	adds	r3, #1
 8003866:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800386e:	b29b      	uxth	r3, r3
 8003870:	3b01      	subs	r3, #1
 8003872:	b29a      	uxth	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003880:	b29b      	uxth	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1cb      	bne.n	800381e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	2200      	movs	r2, #0
 800388e:	2140      	movs	r1, #64	; 0x40
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 fe7e 	bl	8004592 <UART_WaitOnFlagUntilTimeout>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e005      	b.n	80038ac <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2220      	movs	r2, #32
 80038a4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	e000      	b.n	80038ac <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80038aa:	2302      	movs	r3, #2
  }
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3720      	adds	r7, #32
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b08a      	sub	sp, #40	; 0x28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	4613      	mov	r3, r2
 80038c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038c6:	2b20      	cmp	r3, #32
 80038c8:	d142      	bne.n	8003950 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d002      	beq.n	80038d6 <HAL_UART_Receive_IT+0x22>
 80038d0:	88fb      	ldrh	r3, [r7, #6]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e03b      	b.n	8003952 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d101      	bne.n	80038e8 <HAL_UART_Receive_IT+0x34>
 80038e4:	2302      	movs	r3, #2
 80038e6:	e034      	b.n	8003952 <HAL_UART_Receive_IT+0x9e>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a18      	ldr	r2, [pc, #96]	; (800395c <HAL_UART_Receive_IT+0xa8>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d01f      	beq.n	8003940 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d018      	beq.n	8003940 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	e853 3f00 	ldrex	r3, [r3]
 800391a:	613b      	str	r3, [r7, #16]
   return(result);
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003922:	627b      	str	r3, [r7, #36]	; 0x24
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	461a      	mov	r2, r3
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	623b      	str	r3, [r7, #32]
 800392e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003930:	69f9      	ldr	r1, [r7, #28]
 8003932:	6a3a      	ldr	r2, [r7, #32]
 8003934:	e841 2300 	strex	r3, r2, [r1]
 8003938:	61bb      	str	r3, [r7, #24]
   return(result);
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1e6      	bne.n	800390e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003940:	88fb      	ldrh	r3, [r7, #6]
 8003942:	461a      	mov	r2, r3
 8003944:	68b9      	ldr	r1, [r7, #8]
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 fee8 	bl	800471c <UART_Start_Receive_IT>
 800394c:	4603      	mov	r3, r0
 800394e:	e000      	b.n	8003952 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003950:	2302      	movs	r3, #2
  }
}
 8003952:	4618      	mov	r0, r3
 8003954:	3728      	adds	r7, #40	; 0x28
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	40008000 	.word	0x40008000

08003960 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b0ba      	sub	sp, #232	; 0xe8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003986:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800398a:	f640 030f 	movw	r3, #2063	; 0x80f
 800398e:	4013      	ands	r3, r2
 8003990:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003994:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003998:	2b00      	cmp	r3, #0
 800399a:	d115      	bne.n	80039c8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800399c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039a0:	f003 0320 	and.w	r3, r3, #32
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00f      	beq.n	80039c8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039ac:	f003 0320 	and.w	r3, r3, #32
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d009      	beq.n	80039c8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 82a6 	beq.w	8003f0a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	4798      	blx	r3
      }
      return;
 80039c6:	e2a0      	b.n	8003f0a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80039c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 8117 	beq.w	8003c00 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80039d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80039de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80039e2:	4b85      	ldr	r3, [pc, #532]	; (8003bf8 <HAL_UART_IRQHandler+0x298>)
 80039e4:	4013      	ands	r3, r2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 810a 	beq.w	8003c00 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80039ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d011      	beq.n	8003a1c <HAL_UART_IRQHandler+0xbc>
 80039f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00b      	beq.n	8003a1c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a12:	f043 0201 	orr.w	r2, r3, #1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d011      	beq.n	8003a4c <HAL_UART_IRQHandler+0xec>
 8003a28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00b      	beq.n	8003a4c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2202      	movs	r2, #2
 8003a3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a42:	f043 0204 	orr.w	r2, r3, #4
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a50:	f003 0304 	and.w	r3, r3, #4
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d011      	beq.n	8003a7c <HAL_UART_IRQHandler+0x11c>
 8003a58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00b      	beq.n	8003a7c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2204      	movs	r2, #4
 8003a6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a72:	f043 0202 	orr.w	r2, r3, #2
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a80:	f003 0308 	and.w	r3, r3, #8
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d017      	beq.n	8003ab8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a8c:	f003 0320 	and.w	r3, r3, #32
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d105      	bne.n	8003aa0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003a94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a98:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00b      	beq.n	8003ab8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2208      	movs	r2, #8
 8003aa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aae:	f043 0208 	orr.w	r2, r3, #8
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003abc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d012      	beq.n	8003aea <HAL_UART_IRQHandler+0x18a>
 8003ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ac8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00c      	beq.n	8003aea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ad8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ae0:	f043 0220 	orr.w	r2, r3, #32
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 820c 	beq.w	8003f0e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003afa:	f003 0320 	and.w	r3, r3, #32
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00d      	beq.n	8003b1e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b06:	f003 0320 	and.w	r3, r3, #32
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d007      	beq.n	8003b1e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b32:	2b40      	cmp	r3, #64	; 0x40
 8003b34:	d005      	beq.n	8003b42 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003b36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d04f      	beq.n	8003be2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 feb4 	bl	80048b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b52:	2b40      	cmp	r3, #64	; 0x40
 8003b54:	d141      	bne.n	8003bda <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3308      	adds	r3, #8
 8003b5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b64:	e853 3f00 	ldrex	r3, [r3]
 8003b68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3308      	adds	r3, #8
 8003b7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b92:	e841 2300 	strex	r3, r2, [r1]
 8003b96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1d9      	bne.n	8003b56 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d013      	beq.n	8003bd2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bae:	4a13      	ldr	r2, [pc, #76]	; (8003bfc <HAL_UART_IRQHandler+0x29c>)
 8003bb0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fd ff66 	bl	8001a88 <HAL_DMA_Abort_IT>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d017      	beq.n	8003bf2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003bcc:	4610      	mov	r0, r2
 8003bce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd0:	e00f      	b.n	8003bf2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f9b0 	bl	8003f38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd8:	e00b      	b.n	8003bf2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f9ac 	bl	8003f38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be0:	e007      	b.n	8003bf2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f9a8 	bl	8003f38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003bf0:	e18d      	b.n	8003f0e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf2:	bf00      	nop
    return;
 8003bf4:	e18b      	b.n	8003f0e <HAL_UART_IRQHandler+0x5ae>
 8003bf6:	bf00      	nop
 8003bf8:	04000120 	.word	0x04000120
 8003bfc:	08004977 	.word	0x08004977

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	f040 8146 	bne.w	8003e96 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c0e:	f003 0310 	and.w	r3, r3, #16
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 813f 	beq.w	8003e96 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c1c:	f003 0310 	and.w	r3, r3, #16
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 8138 	beq.w	8003e96 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2210      	movs	r2, #16
 8003c2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c38:	2b40      	cmp	r3, #64	; 0x40
 8003c3a:	f040 80b4 	bne.w	8003da6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c4a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 815f 	beq.w	8003f12 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003c5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	f080 8157 	bcs.w	8003f12 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f040 8085 	bne.w	8003d8a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c8c:	e853 3f00 	ldrex	r3, [r3]
 8003c90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003caa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003cae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003cb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003cba:	e841 2300 	strex	r3, r2, [r1]
 8003cbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003cc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1da      	bne.n	8003c80 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	3308      	adds	r3, #8
 8003cd0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cd4:	e853 3f00 	ldrex	r3, [r3]
 8003cd8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003cda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cdc:	f023 0301 	bic.w	r3, r3, #1
 8003ce0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	3308      	adds	r3, #8
 8003cea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003cee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003cf2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003cf6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003cfa:	e841 2300 	strex	r3, r2, [r1]
 8003cfe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1e1      	bne.n	8003cca <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	3308      	adds	r3, #8
 8003d0c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d10:	e853 3f00 	ldrex	r3, [r3]
 8003d14:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	3308      	adds	r3, #8
 8003d26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d32:	e841 2300 	strex	r3, r2, [r1]
 8003d36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1e3      	bne.n	8003d06 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2220      	movs	r2, #32
 8003d42:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d52:	e853 3f00 	ldrex	r3, [r3]
 8003d56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d5a:	f023 0310 	bic.w	r3, r3, #16
 8003d5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	461a      	mov	r2, r3
 8003d68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d6e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d74:	e841 2300 	strex	r3, r2, [r1]
 8003d78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1e4      	bne.n	8003d4a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fd fe41 	bl	8001a0c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f8d4 	bl	8003f4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003da4:	e0b5      	b.n	8003f12 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 80a7 	beq.w	8003f16 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003dc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 80a2 	beq.w	8003f16 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dda:	e853 3f00 	ldrex	r3, [r3]
 8003dde:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003de6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	461a      	mov	r2, r3
 8003df0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003df4:	647b      	str	r3, [r7, #68]	; 0x44
 8003df6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003dfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dfc:	e841 2300 	strex	r3, r2, [r1]
 8003e00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1e4      	bne.n	8003dd2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	3308      	adds	r3, #8
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	e853 3f00 	ldrex	r3, [r3]
 8003e16:	623b      	str	r3, [r7, #32]
   return(result);
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	f023 0301 	bic.w	r3, r3, #1
 8003e1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	3308      	adds	r3, #8
 8003e28:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e2c:	633a      	str	r2, [r7, #48]	; 0x30
 8003e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e34:	e841 2300 	strex	r3, r2, [r1]
 8003e38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1e3      	bne.n	8003e08 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2220      	movs	r2, #32
 8003e44:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	e853 3f00 	ldrex	r3, [r3]
 8003e5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f023 0310 	bic.w	r3, r3, #16
 8003e66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e74:	61fb      	str	r3, [r7, #28]
 8003e76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e78:	69b9      	ldr	r1, [r7, #24]
 8003e7a:	69fa      	ldr	r2, [r7, #28]
 8003e7c:	e841 2300 	strex	r3, r2, [r1]
 8003e80:	617b      	str	r3, [r7, #20]
   return(result);
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1e4      	bne.n	8003e52 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f85c 	bl	8003f4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e94:	e03f      	b.n	8003f16 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00e      	beq.n	8003ec0 <HAL_UART_IRQHandler+0x560>
 8003ea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d008      	beq.n	8003ec0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003eb6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 fefc 	bl	8004cb6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ebe:	e02d      	b.n	8003f1c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00e      	beq.n	8003eea <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d008      	beq.n	8003eea <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d01c      	beq.n	8003f1a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	4798      	blx	r3
    }
    return;
 8003ee8:	e017      	b.n	8003f1a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d012      	beq.n	8003f1c <HAL_UART_IRQHandler+0x5bc>
 8003ef6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00c      	beq.n	8003f1c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 fd4d 	bl	80049a2 <UART_EndTransmit_IT>
    return;
 8003f08:	e008      	b.n	8003f1c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003f0a:	bf00      	nop
 8003f0c:	e006      	b.n	8003f1c <HAL_UART_IRQHandler+0x5bc>
    return;
 8003f0e:	bf00      	nop
 8003f10:	e004      	b.n	8003f1c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003f12:	bf00      	nop
 8003f14:	e002      	b.n	8003f1c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003f16:	bf00      	nop
 8003f18:	e000      	b.n	8003f1c <HAL_UART_IRQHandler+0x5bc>
    return;
 8003f1a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003f1c:	37e8      	adds	r7, #232	; 0xe8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop

08003f24 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	460b      	mov	r3, r1
 8003f56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f68:	b08a      	sub	sp, #40	; 0x28
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	431a      	orrs	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	4bb4      	ldr	r3, [pc, #720]	; (8004264 <UART_SetConfig+0x300>)
 8003f94:	4013      	ands	r3, r2
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	6812      	ldr	r2, [r2, #0]
 8003f9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f9c:	430b      	orrs	r3, r1
 8003f9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4aa9      	ldr	r2, [pc, #676]	; (8004268 <UART_SetConfig+0x304>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d004      	beq.n	8003fd0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4aa0      	ldr	r2, [pc, #640]	; (800426c <UART_SetConfig+0x308>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d126      	bne.n	800403c <UART_SetConfig+0xd8>
 8003fee:	4ba0      	ldr	r3, [pc, #640]	; (8004270 <UART_SetConfig+0x30c>)
 8003ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff4:	f003 0303 	and.w	r3, r3, #3
 8003ff8:	2b03      	cmp	r3, #3
 8003ffa:	d81b      	bhi.n	8004034 <UART_SetConfig+0xd0>
 8003ffc:	a201      	add	r2, pc, #4	; (adr r2, 8004004 <UART_SetConfig+0xa0>)
 8003ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004002:	bf00      	nop
 8004004:	08004015 	.word	0x08004015
 8004008:	08004025 	.word	0x08004025
 800400c:	0800401d 	.word	0x0800401d
 8004010:	0800402d 	.word	0x0800402d
 8004014:	2301      	movs	r3, #1
 8004016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800401a:	e080      	b.n	800411e <UART_SetConfig+0x1ba>
 800401c:	2302      	movs	r3, #2
 800401e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004022:	e07c      	b.n	800411e <UART_SetConfig+0x1ba>
 8004024:	2304      	movs	r3, #4
 8004026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800402a:	e078      	b.n	800411e <UART_SetConfig+0x1ba>
 800402c:	2308      	movs	r3, #8
 800402e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004032:	e074      	b.n	800411e <UART_SetConfig+0x1ba>
 8004034:	2310      	movs	r3, #16
 8004036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800403a:	e070      	b.n	800411e <UART_SetConfig+0x1ba>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a8c      	ldr	r2, [pc, #560]	; (8004274 <UART_SetConfig+0x310>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d138      	bne.n	80040b8 <UART_SetConfig+0x154>
 8004046:	4b8a      	ldr	r3, [pc, #552]	; (8004270 <UART_SetConfig+0x30c>)
 8004048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404c:	f003 030c 	and.w	r3, r3, #12
 8004050:	2b0c      	cmp	r3, #12
 8004052:	d82d      	bhi.n	80040b0 <UART_SetConfig+0x14c>
 8004054:	a201      	add	r2, pc, #4	; (adr r2, 800405c <UART_SetConfig+0xf8>)
 8004056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405a:	bf00      	nop
 800405c:	08004091 	.word	0x08004091
 8004060:	080040b1 	.word	0x080040b1
 8004064:	080040b1 	.word	0x080040b1
 8004068:	080040b1 	.word	0x080040b1
 800406c:	080040a1 	.word	0x080040a1
 8004070:	080040b1 	.word	0x080040b1
 8004074:	080040b1 	.word	0x080040b1
 8004078:	080040b1 	.word	0x080040b1
 800407c:	08004099 	.word	0x08004099
 8004080:	080040b1 	.word	0x080040b1
 8004084:	080040b1 	.word	0x080040b1
 8004088:	080040b1 	.word	0x080040b1
 800408c:	080040a9 	.word	0x080040a9
 8004090:	2300      	movs	r3, #0
 8004092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004096:	e042      	b.n	800411e <UART_SetConfig+0x1ba>
 8004098:	2302      	movs	r3, #2
 800409a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800409e:	e03e      	b.n	800411e <UART_SetConfig+0x1ba>
 80040a0:	2304      	movs	r3, #4
 80040a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040a6:	e03a      	b.n	800411e <UART_SetConfig+0x1ba>
 80040a8:	2308      	movs	r3, #8
 80040aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040ae:	e036      	b.n	800411e <UART_SetConfig+0x1ba>
 80040b0:	2310      	movs	r3, #16
 80040b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040b6:	e032      	b.n	800411e <UART_SetConfig+0x1ba>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a6a      	ldr	r2, [pc, #424]	; (8004268 <UART_SetConfig+0x304>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d12a      	bne.n	8004118 <UART_SetConfig+0x1b4>
 80040c2:	4b6b      	ldr	r3, [pc, #428]	; (8004270 <UART_SetConfig+0x30c>)
 80040c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040d0:	d01a      	beq.n	8004108 <UART_SetConfig+0x1a4>
 80040d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040d6:	d81b      	bhi.n	8004110 <UART_SetConfig+0x1ac>
 80040d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040dc:	d00c      	beq.n	80040f8 <UART_SetConfig+0x194>
 80040de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040e2:	d815      	bhi.n	8004110 <UART_SetConfig+0x1ac>
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <UART_SetConfig+0x18c>
 80040e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ec:	d008      	beq.n	8004100 <UART_SetConfig+0x19c>
 80040ee:	e00f      	b.n	8004110 <UART_SetConfig+0x1ac>
 80040f0:	2300      	movs	r3, #0
 80040f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040f6:	e012      	b.n	800411e <UART_SetConfig+0x1ba>
 80040f8:	2302      	movs	r3, #2
 80040fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040fe:	e00e      	b.n	800411e <UART_SetConfig+0x1ba>
 8004100:	2304      	movs	r3, #4
 8004102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004106:	e00a      	b.n	800411e <UART_SetConfig+0x1ba>
 8004108:	2308      	movs	r3, #8
 800410a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800410e:	e006      	b.n	800411e <UART_SetConfig+0x1ba>
 8004110:	2310      	movs	r3, #16
 8004112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004116:	e002      	b.n	800411e <UART_SetConfig+0x1ba>
 8004118:	2310      	movs	r3, #16
 800411a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a51      	ldr	r2, [pc, #324]	; (8004268 <UART_SetConfig+0x304>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d17a      	bne.n	800421e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004128:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800412c:	2b08      	cmp	r3, #8
 800412e:	d824      	bhi.n	800417a <UART_SetConfig+0x216>
 8004130:	a201      	add	r2, pc, #4	; (adr r2, 8004138 <UART_SetConfig+0x1d4>)
 8004132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004136:	bf00      	nop
 8004138:	0800415d 	.word	0x0800415d
 800413c:	0800417b 	.word	0x0800417b
 8004140:	08004165 	.word	0x08004165
 8004144:	0800417b 	.word	0x0800417b
 8004148:	0800416b 	.word	0x0800416b
 800414c:	0800417b 	.word	0x0800417b
 8004150:	0800417b 	.word	0x0800417b
 8004154:	0800417b 	.word	0x0800417b
 8004158:	08004173 	.word	0x08004173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800415c:	f7fe fc92 	bl	8002a84 <HAL_RCC_GetPCLK1Freq>
 8004160:	61f8      	str	r0, [r7, #28]
        break;
 8004162:	e010      	b.n	8004186 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004164:	4b44      	ldr	r3, [pc, #272]	; (8004278 <UART_SetConfig+0x314>)
 8004166:	61fb      	str	r3, [r7, #28]
        break;
 8004168:	e00d      	b.n	8004186 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800416a:	f7fe fbf3 	bl	8002954 <HAL_RCC_GetSysClockFreq>
 800416e:	61f8      	str	r0, [r7, #28]
        break;
 8004170:	e009      	b.n	8004186 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004176:	61fb      	str	r3, [r7, #28]
        break;
 8004178:	e005      	b.n	8004186 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800417a:	2300      	movs	r3, #0
 800417c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004184:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 8107 	beq.w	800439c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	4613      	mov	r3, r2
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	4413      	add	r3, r2
 8004198:	69fa      	ldr	r2, [r7, #28]
 800419a:	429a      	cmp	r2, r3
 800419c:	d305      	bcc.n	80041aa <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041a4:	69fa      	ldr	r2, [r7, #28]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d903      	bls.n	80041b2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80041b0:	e0f4      	b.n	800439c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	2200      	movs	r2, #0
 80041b6:	461c      	mov	r4, r3
 80041b8:	4615      	mov	r5, r2
 80041ba:	f04f 0200 	mov.w	r2, #0
 80041be:	f04f 0300 	mov.w	r3, #0
 80041c2:	022b      	lsls	r3, r5, #8
 80041c4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80041c8:	0222      	lsls	r2, r4, #8
 80041ca:	68f9      	ldr	r1, [r7, #12]
 80041cc:	6849      	ldr	r1, [r1, #4]
 80041ce:	0849      	lsrs	r1, r1, #1
 80041d0:	2000      	movs	r0, #0
 80041d2:	4688      	mov	r8, r1
 80041d4:	4681      	mov	r9, r0
 80041d6:	eb12 0a08 	adds.w	sl, r2, r8
 80041da:	eb43 0b09 	adc.w	fp, r3, r9
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	603b      	str	r3, [r7, #0]
 80041e6:	607a      	str	r2, [r7, #4]
 80041e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041ec:	4650      	mov	r0, sl
 80041ee:	4659      	mov	r1, fp
 80041f0:	f7fc fcda 	bl	8000ba8 <__aeabi_uldivmod>
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4613      	mov	r3, r2
 80041fa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004202:	d308      	bcc.n	8004216 <UART_SetConfig+0x2b2>
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800420a:	d204      	bcs.n	8004216 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	60da      	str	r2, [r3, #12]
 8004214:	e0c2      	b.n	800439c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800421c:	e0be      	b.n	800439c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004226:	d16a      	bne.n	80042fe <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004228:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800422c:	2b08      	cmp	r3, #8
 800422e:	d834      	bhi.n	800429a <UART_SetConfig+0x336>
 8004230:	a201      	add	r2, pc, #4	; (adr r2, 8004238 <UART_SetConfig+0x2d4>)
 8004232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004236:	bf00      	nop
 8004238:	0800425d 	.word	0x0800425d
 800423c:	0800427d 	.word	0x0800427d
 8004240:	08004285 	.word	0x08004285
 8004244:	0800429b 	.word	0x0800429b
 8004248:	0800428b 	.word	0x0800428b
 800424c:	0800429b 	.word	0x0800429b
 8004250:	0800429b 	.word	0x0800429b
 8004254:	0800429b 	.word	0x0800429b
 8004258:	08004293 	.word	0x08004293
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800425c:	f7fe fc12 	bl	8002a84 <HAL_RCC_GetPCLK1Freq>
 8004260:	61f8      	str	r0, [r7, #28]
        break;
 8004262:	e020      	b.n	80042a6 <UART_SetConfig+0x342>
 8004264:	efff69f3 	.word	0xefff69f3
 8004268:	40008000 	.word	0x40008000
 800426c:	40013800 	.word	0x40013800
 8004270:	40021000 	.word	0x40021000
 8004274:	40004400 	.word	0x40004400
 8004278:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800427c:	f7fe fc18 	bl	8002ab0 <HAL_RCC_GetPCLK2Freq>
 8004280:	61f8      	str	r0, [r7, #28]
        break;
 8004282:	e010      	b.n	80042a6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004284:	4b4c      	ldr	r3, [pc, #304]	; (80043b8 <UART_SetConfig+0x454>)
 8004286:	61fb      	str	r3, [r7, #28]
        break;
 8004288:	e00d      	b.n	80042a6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800428a:	f7fe fb63 	bl	8002954 <HAL_RCC_GetSysClockFreq>
 800428e:	61f8      	str	r0, [r7, #28]
        break;
 8004290:	e009      	b.n	80042a6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004296:	61fb      	str	r3, [r7, #28]
        break;
 8004298:	e005      	b.n	80042a6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800429a:	2300      	movs	r3, #0
 800429c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80042a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d077      	beq.n	800439c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	005a      	lsls	r2, r3, #1
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	085b      	lsrs	r3, r3, #1
 80042b6:	441a      	add	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	2b0f      	cmp	r3, #15
 80042c6:	d916      	bls.n	80042f6 <UART_SetConfig+0x392>
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ce:	d212      	bcs.n	80042f6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	f023 030f 	bic.w	r3, r3, #15
 80042d8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	085b      	lsrs	r3, r3, #1
 80042de:	b29b      	uxth	r3, r3
 80042e0:	f003 0307 	and.w	r3, r3, #7
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	8afb      	ldrh	r3, [r7, #22]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	8afa      	ldrh	r2, [r7, #22]
 80042f2:	60da      	str	r2, [r3, #12]
 80042f4:	e052      	b.n	800439c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80042fc:	e04e      	b.n	800439c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004302:	2b08      	cmp	r3, #8
 8004304:	d827      	bhi.n	8004356 <UART_SetConfig+0x3f2>
 8004306:	a201      	add	r2, pc, #4	; (adr r2, 800430c <UART_SetConfig+0x3a8>)
 8004308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430c:	08004331 	.word	0x08004331
 8004310:	08004339 	.word	0x08004339
 8004314:	08004341 	.word	0x08004341
 8004318:	08004357 	.word	0x08004357
 800431c:	08004347 	.word	0x08004347
 8004320:	08004357 	.word	0x08004357
 8004324:	08004357 	.word	0x08004357
 8004328:	08004357 	.word	0x08004357
 800432c:	0800434f 	.word	0x0800434f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004330:	f7fe fba8 	bl	8002a84 <HAL_RCC_GetPCLK1Freq>
 8004334:	61f8      	str	r0, [r7, #28]
        break;
 8004336:	e014      	b.n	8004362 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004338:	f7fe fbba 	bl	8002ab0 <HAL_RCC_GetPCLK2Freq>
 800433c:	61f8      	str	r0, [r7, #28]
        break;
 800433e:	e010      	b.n	8004362 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004340:	4b1d      	ldr	r3, [pc, #116]	; (80043b8 <UART_SetConfig+0x454>)
 8004342:	61fb      	str	r3, [r7, #28]
        break;
 8004344:	e00d      	b.n	8004362 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004346:	f7fe fb05 	bl	8002954 <HAL_RCC_GetSysClockFreq>
 800434a:	61f8      	str	r0, [r7, #28]
        break;
 800434c:	e009      	b.n	8004362 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800434e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004352:	61fb      	str	r3, [r7, #28]
        break;
 8004354:	e005      	b.n	8004362 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004356:	2300      	movs	r3, #0
 8004358:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004360:	bf00      	nop
    }

    if (pclk != 0U)
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d019      	beq.n	800439c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	085a      	lsrs	r2, r3, #1
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	441a      	add	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	fbb2 f3f3 	udiv	r3, r2, r3
 800437a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	2b0f      	cmp	r3, #15
 8004380:	d909      	bls.n	8004396 <UART_SetConfig+0x432>
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004388:	d205      	bcs.n	8004396 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	b29a      	uxth	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	60da      	str	r2, [r3, #12]
 8004394:	e002      	b.n	800439c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80043a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3728      	adds	r7, #40	; 0x28
 80043b0:	46bd      	mov	sp, r7
 80043b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043b6:	bf00      	nop
 80043b8:	00f42400 	.word	0x00f42400

080043bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00a      	beq.n	80043e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00a      	beq.n	8004408 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00a      	beq.n	800442a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	430a      	orrs	r2, r1
 8004428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	f003 0308 	and.w	r3, r3, #8
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00a      	beq.n	800444c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	f003 0310 	and.w	r3, r3, #16
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00a      	beq.n	800446e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	f003 0320 	and.w	r3, r3, #32
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00a      	beq.n	8004490 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	430a      	orrs	r2, r1
 800448e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004498:	2b00      	cmp	r3, #0
 800449a:	d01a      	beq.n	80044d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044ba:	d10a      	bne.n	80044d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00a      	beq.n	80044f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	605a      	str	r2, [r3, #4]
  }
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af02      	add	r7, sp, #8
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004510:	f7fd f98e 	bl	8001830 <HAL_GetTick>
 8004514:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0308 	and.w	r3, r3, #8
 8004520:	2b08      	cmp	r3, #8
 8004522:	d10e      	bne.n	8004542 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004524:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f82d 	bl	8004592 <UART_WaitOnFlagUntilTimeout>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e023      	b.n	800458a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b04      	cmp	r3, #4
 800454e:	d10e      	bne.n	800456e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004550:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f817 	bl	8004592 <UART_WaitOnFlagUntilTimeout>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e00d      	b.n	800458a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2220      	movs	r2, #32
 8004572:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2220      	movs	r2, #32
 8004578:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b09c      	sub	sp, #112	; 0x70
 8004596:	af00      	add	r7, sp, #0
 8004598:	60f8      	str	r0, [r7, #12]
 800459a:	60b9      	str	r1, [r7, #8]
 800459c:	603b      	str	r3, [r7, #0]
 800459e:	4613      	mov	r3, r2
 80045a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045a2:	e0a5      	b.n	80046f0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045aa:	f000 80a1 	beq.w	80046f0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ae:	f7fd f93f 	bl	8001830 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d302      	bcc.n	80045c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80045be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d13e      	bne.n	8004642 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045cc:	e853 3f00 	ldrex	r3, [r3]
 80045d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80045d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045d8:	667b      	str	r3, [r7, #100]	; 0x64
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	461a      	mov	r2, r3
 80045e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045e4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80045e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80045ea:	e841 2300 	strex	r3, r2, [r1]
 80045ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80045f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1e6      	bne.n	80045c4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	3308      	adds	r3, #8
 80045fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004600:	e853 3f00 	ldrex	r3, [r3]
 8004604:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004608:	f023 0301 	bic.w	r3, r3, #1
 800460c:	663b      	str	r3, [r7, #96]	; 0x60
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3308      	adds	r3, #8
 8004614:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004616:	64ba      	str	r2, [r7, #72]	; 0x48
 8004618:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800461c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800461e:	e841 2300 	strex	r3, r2, [r1]
 8004622:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1e5      	bne.n	80045f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2220      	movs	r2, #32
 800462e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2220      	movs	r2, #32
 8004634:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e067      	b.n	8004712 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b00      	cmp	r3, #0
 800464e:	d04f      	beq.n	80046f0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800465a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800465e:	d147      	bne.n	80046f0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004668:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004672:	e853 3f00 	ldrex	r3, [r3]
 8004676:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800467e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	461a      	mov	r2, r3
 8004686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004688:	637b      	str	r3, [r7, #52]	; 0x34
 800468a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800468e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004690:	e841 2300 	strex	r3, r2, [r1]
 8004694:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1e6      	bne.n	800466a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	3308      	adds	r3, #8
 80046a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	e853 3f00 	ldrex	r3, [r3]
 80046aa:	613b      	str	r3, [r7, #16]
   return(result);
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f023 0301 	bic.w	r3, r3, #1
 80046b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3308      	adds	r3, #8
 80046ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80046bc:	623a      	str	r2, [r7, #32]
 80046be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c0:	69f9      	ldr	r1, [r7, #28]
 80046c2:	6a3a      	ldr	r2, [r7, #32]
 80046c4:	e841 2300 	strex	r3, r2, [r1]
 80046c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1e5      	bne.n	800469c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2220      	movs	r2, #32
 80046d4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2220      	movs	r2, #32
 80046da:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2220      	movs	r2, #32
 80046e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e010      	b.n	8004712 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	69da      	ldr	r2, [r3, #28]
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	4013      	ands	r3, r2
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	bf0c      	ite	eq
 8004700:	2301      	moveq	r3, #1
 8004702:	2300      	movne	r3, #0
 8004704:	b2db      	uxtb	r3, r3
 8004706:	461a      	mov	r2, r3
 8004708:	79fb      	ldrb	r3, [r7, #7]
 800470a:	429a      	cmp	r2, r3
 800470c:	f43f af4a 	beq.w	80045a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3770      	adds	r7, #112	; 0x70
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
	...

0800471c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800471c:	b480      	push	{r7}
 800471e:	b097      	sub	sp, #92	; 0x5c
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	4613      	mov	r3, r2
 8004728:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	88fa      	ldrh	r2, [r7, #6]
 8004734:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	88fa      	ldrh	r2, [r7, #6]
 800473c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800474e:	d10e      	bne.n	800476e <UART_Start_Receive_IT+0x52>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d105      	bne.n	8004764 <UART_Start_Receive_IT+0x48>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800475e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004762:	e02d      	b.n	80047c0 <UART_Start_Receive_IT+0xa4>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	22ff      	movs	r2, #255	; 0xff
 8004768:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800476c:	e028      	b.n	80047c0 <UART_Start_Receive_IT+0xa4>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10d      	bne.n	8004792 <UART_Start_Receive_IT+0x76>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d104      	bne.n	8004788 <UART_Start_Receive_IT+0x6c>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	22ff      	movs	r2, #255	; 0xff
 8004782:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004786:	e01b      	b.n	80047c0 <UART_Start_Receive_IT+0xa4>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	227f      	movs	r2, #127	; 0x7f
 800478c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004790:	e016      	b.n	80047c0 <UART_Start_Receive_IT+0xa4>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800479a:	d10d      	bne.n	80047b8 <UART_Start_Receive_IT+0x9c>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d104      	bne.n	80047ae <UART_Start_Receive_IT+0x92>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	227f      	movs	r2, #127	; 0x7f
 80047a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047ac:	e008      	b.n	80047c0 <UART_Start_Receive_IT+0xa4>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	223f      	movs	r2, #63	; 0x3f
 80047b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047b6:	e003      	b.n	80047c0 <UART_Start_Receive_IT+0xa4>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2222      	movs	r2, #34	; 0x22
 80047cc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	3308      	adds	r3, #8
 80047d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047d8:	e853 3f00 	ldrex	r3, [r3]
 80047dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e0:	f043 0301 	orr.w	r3, r3, #1
 80047e4:	657b      	str	r3, [r7, #84]	; 0x54
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3308      	adds	r3, #8
 80047ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80047ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80047f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80047f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047f6:	e841 2300 	strex	r3, r2, [r1]
 80047fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80047fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1e5      	bne.n	80047ce <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800480a:	d107      	bne.n	800481c <UART_Start_Receive_IT+0x100>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d103      	bne.n	800481c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4a24      	ldr	r2, [pc, #144]	; (80048a8 <UART_Start_Receive_IT+0x18c>)
 8004818:	665a      	str	r2, [r3, #100]	; 0x64
 800481a:	e002      	b.n	8004822 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4a23      	ldr	r2, [pc, #140]	; (80048ac <UART_Start_Receive_IT+0x190>)
 8004820:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d019      	beq.n	8004866 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483a:	e853 3f00 	ldrex	r3, [r3]
 800483e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	461a      	mov	r2, r3
 800484e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004850:	637b      	str	r3, [r7, #52]	; 0x34
 8004852:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004854:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004856:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004858:	e841 2300 	strex	r3, r2, [r1]
 800485c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800485e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1e6      	bne.n	8004832 <UART_Start_Receive_IT+0x116>
 8004864:	e018      	b.n	8004898 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	e853 3f00 	ldrex	r3, [r3]
 8004872:	613b      	str	r3, [r7, #16]
   return(result);
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	f043 0320 	orr.w	r3, r3, #32
 800487a:	653b      	str	r3, [r7, #80]	; 0x50
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	461a      	mov	r2, r3
 8004882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004884:	623b      	str	r3, [r7, #32]
 8004886:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004888:	69f9      	ldr	r1, [r7, #28]
 800488a:	6a3a      	ldr	r2, [r7, #32]
 800488c:	e841 2300 	strex	r3, r2, [r1]
 8004890:	61bb      	str	r3, [r7, #24]
   return(result);
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1e6      	bne.n	8004866 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	375c      	adds	r7, #92	; 0x5c
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	08004b57 	.word	0x08004b57
 80048ac:	080049f7 	.word	0x080049f7

080048b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b095      	sub	sp, #84	; 0x54
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048c0:	e853 3f00 	ldrex	r3, [r3]
 80048c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	461a      	mov	r2, r3
 80048d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048d6:	643b      	str	r3, [r7, #64]	; 0x40
 80048d8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048de:	e841 2300 	strex	r3, r2, [r1]
 80048e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1e6      	bne.n	80048b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	3308      	adds	r3, #8
 80048f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f2:	6a3b      	ldr	r3, [r7, #32]
 80048f4:	e853 3f00 	ldrex	r3, [r3]
 80048f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	f023 0301 	bic.w	r3, r3, #1
 8004900:	64bb      	str	r3, [r7, #72]	; 0x48
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	3308      	adds	r3, #8
 8004908:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800490a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800490c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004912:	e841 2300 	strex	r3, r2, [r1]
 8004916:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1e5      	bne.n	80048ea <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004922:	2b01      	cmp	r3, #1
 8004924:	d118      	bne.n	8004958 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	e853 3f00 	ldrex	r3, [r3]
 8004932:	60bb      	str	r3, [r7, #8]
   return(result);
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f023 0310 	bic.w	r3, r3, #16
 800493a:	647b      	str	r3, [r7, #68]	; 0x44
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	461a      	mov	r2, r3
 8004942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004944:	61bb      	str	r3, [r7, #24]
 8004946:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004948:	6979      	ldr	r1, [r7, #20]
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	e841 2300 	strex	r3, r2, [r1]
 8004950:	613b      	str	r3, [r7, #16]
   return(result);
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1e6      	bne.n	8004926 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2220      	movs	r2, #32
 800495c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	665a      	str	r2, [r3, #100]	; 0x64
}
 800496a:	bf00      	nop
 800496c:	3754      	adds	r7, #84	; 0x54
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b084      	sub	sp, #16
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004982:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f7ff facf 	bl	8003f38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800499a:	bf00      	nop
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b088      	sub	sp, #32
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	e853 3f00 	ldrex	r3, [r3]
 80049b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049be:	61fb      	str	r3, [r7, #28]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	461a      	mov	r2, r3
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	61bb      	str	r3, [r7, #24]
 80049ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049cc:	6979      	ldr	r1, [r7, #20]
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	e841 2300 	strex	r3, r2, [r1]
 80049d4:	613b      	str	r3, [r7, #16]
   return(result);
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1e6      	bne.n	80049aa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2220      	movs	r2, #32
 80049e0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7ff fa9b 	bl	8003f24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049ee:	bf00      	nop
 80049f0:	3720      	adds	r7, #32
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b096      	sub	sp, #88	; 0x58
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a04:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a0c:	2b22      	cmp	r3, #34	; 0x22
 8004a0e:	f040 8094 	bne.w	8004b3a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004a18:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004a1c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004a20:	b2d9      	uxtb	r1, r3
 8004a22:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2c:	400a      	ands	r2, r1
 8004a2e:	b2d2      	uxtb	r2, r2
 8004a30:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a36:	1c5a      	adds	r2, r3, #1
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	3b01      	subs	r3, #1
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d179      	bne.n	8004b4e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a62:	e853 3f00 	ldrex	r3, [r3]
 8004a66:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a6e:	653b      	str	r3, [r7, #80]	; 0x50
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	461a      	mov	r2, r3
 8004a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a78:	647b      	str	r3, [r7, #68]	; 0x44
 8004a7a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a80:	e841 2300 	strex	r3, r2, [r1]
 8004a84:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1e6      	bne.n	8004a5a <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	3308      	adds	r3, #8
 8004a92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	e853 3f00 	ldrex	r3, [r3]
 8004a9a:	623b      	str	r3, [r7, #32]
   return(result);
 8004a9c:	6a3b      	ldr	r3, [r7, #32]
 8004a9e:	f023 0301 	bic.w	r3, r3, #1
 8004aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	3308      	adds	r3, #8
 8004aaa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004aac:	633a      	str	r2, [r7, #48]	; 0x30
 8004aae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ab2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ab4:	e841 2300 	strex	r3, r2, [r1]
 8004ab8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1e5      	bne.n	8004a8c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d12e      	bne.n	8004b32 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	e853 3f00 	ldrex	r3, [r3]
 8004ae6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f023 0310 	bic.w	r3, r3, #16
 8004aee:	64bb      	str	r3, [r7, #72]	; 0x48
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	461a      	mov	r2, r3
 8004af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004af8:	61fb      	str	r3, [r7, #28]
 8004afa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afc:	69b9      	ldr	r1, [r7, #24]
 8004afe:	69fa      	ldr	r2, [r7, #28]
 8004b00:	e841 2300 	strex	r3, r2, [r1]
 8004b04:	617b      	str	r3, [r7, #20]
   return(result);
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1e6      	bne.n	8004ada <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	f003 0310 	and.w	r3, r3, #16
 8004b16:	2b10      	cmp	r3, #16
 8004b18:	d103      	bne.n	8004b22 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2210      	movs	r2, #16
 8004b20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b28:	4619      	mov	r1, r3
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7ff fa0e 	bl	8003f4c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b30:	e00d      	b.n	8004b4e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7fc fe16 	bl	8001764 <HAL_UART_RxCpltCallback>
}
 8004b38:	e009      	b.n	8004b4e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	8b1b      	ldrh	r3, [r3, #24]
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f042 0208 	orr.w	r2, r2, #8
 8004b4a:	b292      	uxth	r2, r2
 8004b4c:	831a      	strh	r2, [r3, #24]
}
 8004b4e:	bf00      	nop
 8004b50:	3758      	adds	r7, #88	; 0x58
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b096      	sub	sp, #88	; 0x58
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004b64:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b6c:	2b22      	cmp	r3, #34	; 0x22
 8004b6e:	f040 8094 	bne.w	8004c9a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004b78:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b80:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004b82:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004b86:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b90:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b96:	1c9a      	adds	r2, r3, #2
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d179      	bne.n	8004cae <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc2:	e853 3f00 	ldrex	r3, [r3]
 8004bc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bd8:	643b      	str	r3, [r7, #64]	; 0x40
 8004bda:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bdc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004bde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004be0:	e841 2300 	strex	r3, r2, [r1]
 8004be4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1e6      	bne.n	8004bba <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3308      	adds	r3, #8
 8004bf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	e853 3f00 	ldrex	r3, [r3]
 8004bfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	f023 0301 	bic.w	r3, r3, #1
 8004c02:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	3308      	adds	r3, #8
 8004c0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c14:	e841 2300 	strex	r3, r2, [r1]
 8004c18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1e5      	bne.n	8004bec <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2220      	movs	r2, #32
 8004c24:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d12e      	bne.n	8004c92 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	e853 3f00 	ldrex	r3, [r3]
 8004c46:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	f023 0310 	bic.w	r3, r3, #16
 8004c4e:	647b      	str	r3, [r7, #68]	; 0x44
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	461a      	mov	r2, r3
 8004c56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c58:	61bb      	str	r3, [r7, #24]
 8004c5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5c:	6979      	ldr	r1, [r7, #20]
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	e841 2300 	strex	r3, r2, [r1]
 8004c64:	613b      	str	r3, [r7, #16]
   return(result);
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1e6      	bne.n	8004c3a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	f003 0310 	and.w	r3, r3, #16
 8004c76:	2b10      	cmp	r3, #16
 8004c78:	d103      	bne.n	8004c82 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2210      	movs	r2, #16
 8004c80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004c88:	4619      	mov	r1, r3
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7ff f95e 	bl	8003f4c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004c90:	e00d      	b.n	8004cae <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7fc fd66 	bl	8001764 <HAL_UART_RxCpltCallback>
}
 8004c98:	e009      	b.n	8004cae <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	8b1b      	ldrh	r3, [r3, #24]
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0208 	orr.w	r2, r2, #8
 8004caa:	b292      	uxth	r2, r2
 8004cac:	831a      	strh	r2, [r3, #24]
}
 8004cae:	bf00      	nop
 8004cb0:	3758      	adds	r7, #88	; 0x58
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b083      	sub	sp, #12
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <FifoNext>:

#include "fifo.h"
#include "frame.h"

static uint16_t FifoNext( Fifo_t *fifo, uint16_t index )
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b083      	sub	sp, #12
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	807b      	strh	r3, [r7, #2]
    return ( index + 1 ) % fifo->fifoSize;
 8004cd6:	887b      	ldrh	r3, [r7, #2]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	461a      	mov	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	fbb2 f1f3 	udiv	r1, r2, r3
 8004ce4:	fb01 f303 	mul.w	r3, r1, r3
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	b29b      	uxth	r3, r3
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <FifoInit>:
 * \param [IN] fifo   	 Pointer to the FIFO handler
 * \param [IN] dataSize  Size of each element stored
 * \param [IN] fifoSize  Number of element to store in fifo
 */
void FifoInit( Fifo_t *fifo, const size_t dataSize, const size_t fifoSize )
{
 8004cf8:	b590      	push	{r4, r7, lr}
 8004cfa:	b087      	sub	sp, #28
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
	//Allocate memory
	fifo->dataArray = (void**) malloc(fifoSize * sizeof(void*));
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f003 fb6b 	bl	80083e4 <malloc>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	461a      	mov	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	605a      	str	r2, [r3, #4]
	for(uint8_t i=0 ; i<fifoSize ; i++)
 8004d16:	2300      	movs	r3, #0
 8004d18:	75fb      	strb	r3, [r7, #23]
 8004d1a:	e00c      	b.n	8004d36 <FifoInit+0x3e>
		fifo->dataArray[i] = (void*) malloc(dataSize);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	7dfb      	ldrb	r3, [r7, #23]
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	18d4      	adds	r4, r2, r3
 8004d26:	68b8      	ldr	r0, [r7, #8]
 8004d28:	f003 fb5c 	bl	80083e4 <malloc>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	6023      	str	r3, [r4, #0]
	for(uint8_t i=0 ; i<fifoSize ; i++)
 8004d30:	7dfb      	ldrb	r3, [r7, #23]
 8004d32:	3301      	adds	r3, #1
 8004d34:	75fb      	strb	r3, [r7, #23]
 8004d36:	7dfb      	ldrb	r3, [r7, #23]
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d8ee      	bhi.n	8004d1c <FifoInit+0x24>

    fifo->head = 0;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	801a      	strh	r2, [r3, #0]
    fifo->tail = 0;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	805a      	strh	r2, [r3, #2]
    fifo->dataSize = dataSize;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	609a      	str	r2, [r3, #8]
    fifo->fifoSize = fifoSize;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	60da      	str	r2, [r3, #12]
}
 8004d56:	bf00      	nop
 8004d58:	371c      	adds	r7, #28
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd90      	pop	{r4, r7, pc}

08004d5e <FifoPush>:
 *
 * \param [IN] fifo Pointer to the FIFO object
 * \param [IN] data Data to be pushed into the FIFO
 */
void FifoPush( Fifo_t *fifo, const void *in )
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b082      	sub	sp, #8
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	6039      	str	r1, [r7, #0]
    fifo->tail = FifoNext( fifo, fifo->tail );
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	885b      	ldrh	r3, [r3, #2]
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7ff ffab 	bl	8004cca <FifoNext>
 8004d74:	4603      	mov	r3, r0
 8004d76:	461a      	mov	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	805a      	strh	r2, [r3, #2]
    memcpy(fifo->dataArray[fifo->tail], in, fifo->dataSize);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	885b      	ldrh	r3, [r3, #2]
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	6818      	ldr	r0, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	6839      	ldr	r1, [r7, #0]
 8004d92:	f003 fb47 	bl	8008424 <memcpy>
}
 8004d96:	bf00      	nop
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <FifoPop>:
 *
 * \param [IN] fifo Pointer to the FIFO object
 * \retval data     Data popped from the FIFO
 */
void FifoPop( Fifo_t *fifo, void *out )
{
 8004d9e:	b590      	push	{r4, r7, lr}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
 8004da6:	6039      	str	r1, [r7, #0]
    memcpy(out, fifo->dataArray[FifoNext( fifo, fifo->head )], fifo->dataSize);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685c      	ldr	r4, [r3, #4]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	881b      	ldrh	r3, [r3, #0]
 8004db0:	4619      	mov	r1, r3
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7ff ff89 	bl	8004cca <FifoNext>
 8004db8:	4603      	mov	r3, r0
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4423      	add	r3, r4
 8004dbe:	6819      	ldr	r1, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	6838      	ldr	r0, [r7, #0]
 8004dc8:	f003 fb2c 	bl	8008424 <memcpy>
    fifo->head = FifoNext( fifo, fifo->head );
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7ff ff79 	bl	8004cca <FifoNext>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	461a      	mov	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	801a      	strh	r2, [r3, #0]
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd90      	pop	{r4, r7, pc}

08004de8 <IsFifoEmpty>:
 *
 * \param [IN] fifo   Pointer to the FIFO object
 * \retval isEmpty    true: FIFO is empty, false FIFO is not empty
 */
bool IsFifoEmpty( Fifo_t *fifo )
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
    return ( fifo->head == fifo->tail );
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	881a      	ldrh	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	885b      	ldrh	r3, [r3, #2]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	bf0c      	ite	eq
 8004dfc:	2301      	moveq	r3, #1
 8004dfe:	2300      	movne	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
	...

08004e10 <StartXbeeTask>:
 * @brief FreeRTOS Task
 * Setup : config xbee module and start receiving
 * Loop : Process incoming messages
 */
void StartXbeeTask(void const * argument)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
	PRINT("XBee Start Task\n");
 8004e18:	480c      	ldr	r0, [pc, #48]	; (8004e4c <StartXbeeTask+0x3c>)
 8004e1a:	f7fc fb65 	bl	80014e8 <PRINT>

	if(xbee_init(&huart1) != 0)
 8004e1e:	480c      	ldr	r0, [pc, #48]	; (8004e50 <StartXbeeTask+0x40>)
 8004e20:	f000 f81c 	bl	8004e5c <xbee_init>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d004      	beq.n	8004e34 <StartXbeeTask+0x24>
		vTaskDelete(xbeeTaskHandle);
 8004e2a:	4b0a      	ldr	r3, [pc, #40]	; (8004e54 <StartXbeeTask+0x44>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f001 fe86 	bl	8006b40 <vTaskDelete>

	FifoInit(&frameFifo, sizeof(genericFrame_t), 100);
 8004e34:	2264      	movs	r2, #100	; 0x64
 8004e36:	2107      	movs	r1, #7
 8004e38:	4807      	ldr	r0, [pc, #28]	; (8004e58 <StartXbeeTask+0x48>)
 8004e3a:	f7ff ff5d 	bl	8004cf8 <FifoInit>

//Loop
	for(;;)
	{
		xbee_process();
 8004e3e:	f000 f86f 	bl	8004f20 <xbee_process>
		osDelay(10);
 8004e42:	200a      	movs	r0, #10
 8004e44:	f000 fda8 	bl	8005998 <osDelay>
		xbee_process();
 8004e48:	e7f9      	b.n	8004e3e <StartXbeeTask+0x2e>
 8004e4a:	bf00      	nop
 8004e4c:	0800b15c 	.word	0x0800b15c
 8004e50:	2000a6fc 	.word	0x2000a6fc
 8004e54:	20009ef4 	.word	0x20009ef4
 8004e58:	2000a874 	.word	0x2000a874

08004e5c <xbee_init>:

// Initialiser l'interface de communication avec le module XBee
// Return 0 if ok,
//		  1 if else
uint8_t xbee_init(UART_HandleTypeDef* uartHandle)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 8004e64:	2300      	movs	r3, #0
 8004e66:	73fb      	strb	r3, [r7, #15]

	PRINT("Init xbeeSerial...");
 8004e68:	4825      	ldr	r0, [pc, #148]	; (8004f00 <xbee_init+0xa4>)
 8004e6a:	f7fc fb3d 	bl	80014e8 <PRINT>
	xbeeSerial_Init(uartHandle);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 fac8 	bl	8005404 <xbeeSerial_Init>

	enteringCmdMode = 0;
 8004e74:	4b23      	ldr	r3, [pc, #140]	; (8004f04 <xbee_init+0xa8>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	701a      	strb	r2, [r3, #0]
	_resetFrame();
 8004e7a:	f000 fa79 	bl	8005370 <_resetFrame>

	_EnterCmdMode();
 8004e7e:	f000 fa11 	bl	80052a4 <_EnterCmdMode>

	if(ret != 0)
 8004e82:	7bfb      	ldrb	r3, [r7, #15]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d001      	beq.n	8004e8c <xbee_init+0x30>
		return ret;
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
 8004e8a:	e035      	b.n	8004ef8 <xbee_init+0x9c>

	// Configuration PAN ID
	xbee_send_at_command("ID", "30");
 8004e8c:	491e      	ldr	r1, [pc, #120]	; (8004f08 <xbee_init+0xac>)
 8004e8e:	481f      	ldr	r0, [pc, #124]	; (8004f0c <xbee_init+0xb0>)
 8004e90:	f000 f8c8 	bl	8005024 <xbee_send_at_command>
	ret = xbee_wait_for_AT_response();
 8004e94:	f000 f940 	bl	8005118 <xbee_wait_for_AT_response>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	73fb      	strb	r3, [r7, #15]
	_processStatus(ret);
 8004e9c:	7bfb      	ldrb	r3, [r7, #15]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 fa8e 	bl	80053c0 <_processStatus>
	if(ret != 0)
 8004ea4:	7bfb      	ldrb	r3, [r7, #15]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <xbee_init+0x52>
		return ret;
 8004eaa:	7bfb      	ldrb	r3, [r7, #15]
 8004eac:	e024      	b.n	8004ef8 <xbee_init+0x9c>

	// Configuration adresse de destination du second module XBee
	xbee_send_at_command("DH", "13A200");
 8004eae:	4918      	ldr	r1, [pc, #96]	; (8004f10 <xbee_init+0xb4>)
 8004eb0:	4818      	ldr	r0, [pc, #96]	; (8004f14 <xbee_init+0xb8>)
 8004eb2:	f000 f8b7 	bl	8005024 <xbee_send_at_command>
	ret = xbee_wait_for_AT_response();
 8004eb6:	f000 f92f 	bl	8005118 <xbee_wait_for_AT_response>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	73fb      	strb	r3, [r7, #15]
	_processStatus(ret);
 8004ebe:	7bfb      	ldrb	r3, [r7, #15]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 fa7d 	bl	80053c0 <_processStatus>
	if(ret != 0)
 8004ec6:	7bfb      	ldrb	r3, [r7, #15]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <xbee_init+0x74>
		return ret;
 8004ecc:	7bfb      	ldrb	r3, [r7, #15]
 8004ece:	e013      	b.n	8004ef8 <xbee_init+0x9c>

	xbee_send_at_command("DL", "420D3B79");
 8004ed0:	4911      	ldr	r1, [pc, #68]	; (8004f18 <xbee_init+0xbc>)
 8004ed2:	4812      	ldr	r0, [pc, #72]	; (8004f1c <xbee_init+0xc0>)
 8004ed4:	f000 f8a6 	bl	8005024 <xbee_send_at_command>
	ret = xbee_wait_for_AT_response();
 8004ed8:	f000 f91e 	bl	8005118 <xbee_wait_for_AT_response>
 8004edc:	4603      	mov	r3, r0
 8004ede:	73fb      	strb	r3, [r7, #15]
	_processStatus(ret);
 8004ee0:	7bfb      	ldrb	r3, [r7, #15]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 fa6c 	bl	80053c0 <_processStatus>
	if(ret != 0)
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <xbee_init+0x96>
		return ret;
 8004eee:	7bfb      	ldrb	r3, [r7, #15]
 8004ef0:	e002      	b.n	8004ef8 <xbee_init+0x9c>

	_ExitCmdMode();
 8004ef2:	f000 fa11 	bl	8005318 <_ExitCmdMode>

	return ret;
 8004ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	0800b170 	.word	0x0800b170
 8004f04:	2000a809 	.word	0x2000a809
 8004f08:	0800b184 	.word	0x0800b184
 8004f0c:	0800b188 	.word	0x0800b188
 8004f10:	0800b18c 	.word	0x0800b18c
 8004f14:	0800b194 	.word	0x0800b194
 8004f18:	0800b198 	.word	0x0800b198
 8004f1c:	0800b1a4 	.word	0x0800b1a4

08004f20 <xbee_process>:

//Main process du module xbee
//Devrait être appelé toutes les 100ms
void xbee_process(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b0c4      	sub	sp, #272	; 0x110
 8004f24:	af00      	add	r7, sp, #0
    if(IsFifoEmpty(&frameFifo)){
 8004f26:	4837      	ldr	r0, [pc, #220]	; (8005004 <xbee_process+0xe4>)
 8004f28:	f7ff ff5e 	bl	8004de8 <IsFifoEmpty>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d162      	bne.n	8004ff8 <xbee_process+0xd8>
    	return;
    }
	genericFrame_t frame;
	uint8_t buffer[256];
	uint32_t bufferSize = 0;
 8004f32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f36:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]
	memset(buffer, 0x0, 256);
 8004f3e:	1d3b      	adds	r3, r7, #4
 8004f40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f44:	2100      	movs	r1, #0
 8004f46:	4618      	mov	r0, r3
 8004f48:	f003 fa7a 	bl	8008440 <memset>

	FifoPop(&frameFifo, &frame);
 8004f4c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004f50:	4619      	mov	r1, r3
 8004f52:	482c      	ldr	r0, [pc, #176]	; (8005004 <xbee_process+0xe4>)
 8004f54:	f7ff ff23 	bl	8004d9e <FifoPop>
	serialize(frame, buffer, &bufferSize);
 8004f58:	463b      	mov	r3, r7
 8004f5a:	1d3a      	adds	r2, r7, #4
 8004f5c:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8004f60:	c903      	ldmia	r1, {r0, r1}
 8004f62:	f000 fb92 	bl	800568a <serialize>

	PRINT("[Xbee] Sending frame: \n\r");
 8004f66:	4828      	ldr	r0, [pc, #160]	; (8005008 <xbee_process+0xe8>)
 8004f68:	f7fc fabe 	bl	80014e8 <PRINT>
	PRINT(" >func:     0x%02X\n\r", frame.codeFunc);
 8004f6c:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8004f70:	4619      	mov	r1, r3
 8004f72:	4826      	ldr	r0, [pc, #152]	; (800500c <xbee_process+0xec>)
 8004f74:	f7fc fab8 	bl	80014e8 <PRINT>
	PRINT(" >mode:     0x%02X\n\r", frame.mode);
 8004f78:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4824      	ldr	r0, [pc, #144]	; (8005010 <xbee_process+0xf0>)
 8004f80:	f7fc fab2 	bl	80014e8 <PRINT>
	PRINT(" >dataSize: 0x%02X\n\r", frame.dataSize);
 8004f84:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4822      	ldr	r0, [pc, #136]	; (8005014 <xbee_process+0xf4>)
 8004f8c:	f7fc faac 	bl	80014e8 <PRINT>
	PRINT(" >data:     ");
 8004f90:	4821      	ldr	r0, [pc, #132]	; (8005018 <xbee_process+0xf8>)
 8004f92:	f7fc faa9 	bl	80014e8 <PRINT>
	for (int i = 0; i < bufferSize; i++)
 8004f96:	2300      	movs	r3, #0
 8004f98:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004f9c:	e010      	b.n	8004fc0 <xbee_process+0xa0>
	    PRINT("0x%02X ", buffer[i]);
 8004f9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004fa2:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8004fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004faa:	4413      	add	r3, r2
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	4619      	mov	r1, r3
 8004fb0:	481a      	ldr	r0, [pc, #104]	; (800501c <xbee_process+0xfc>)
 8004fb2:	f7fc fa99 	bl	80014e8 <PRINT>
	for (int i = 0; i < bufferSize; i++)
 8004fb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fba:	3301      	adds	r3, #1
 8004fbc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004fc0:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004fc4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004fc8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d3e5      	bcc.n	8004f9e <xbee_process+0x7e>
	PRINT("\n\r\n\r");
 8004fd2:	4813      	ldr	r0, [pc, #76]	; (8005020 <xbee_process+0x100>)
 8004fd4:	f7fc fa88 	bl	80014e8 <PRINT>

//	taskENTER_CRITICAL();
	xbeeSerial_Transmit(buffer, bufferSize);
 8004fd8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004fdc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	1d3b      	adds	r3, r7, #4
 8004fe4:	4611      	mov	r1, r2
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 fa96 	bl	8005518 <xbeeSerial_Transmit>
//    taskEXIT_CRITICAL();

	frameDelete(&frame); //Free Memory
 8004fec:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 fb3c 	bl	800566e <frameDelete>
 8004ff6:	e000      	b.n	8004ffa <xbee_process+0xda>
    	return;
 8004ff8:	bf00      	nop
}
 8004ffa:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	2000a874 	.word	0x2000a874
 8005008:	0800b1a8 	.word	0x0800b1a8
 800500c:	0800b1c4 	.word	0x0800b1c4
 8005010:	0800b1dc 	.word	0x0800b1dc
 8005014:	0800b1f4 	.word	0x0800b1f4
 8005018:	0800b20c 	.word	0x0800b20c
 800501c:	0800b21c 	.word	0x0800b21c
 8005020:	0800b224 	.word	0x0800b224

08005024 <xbee_send_at_command>:
// Copy command to frame buffer
// User must execute 'xbee_wait_for_AT_response' to send the issued AT request
// Return 0 if ok
//		  1 if buffer overflow
uint8_t xbee_send_at_command(const char *command, const char* param)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
	if(!isCmdMode)
 800502e:	4b35      	ldr	r3, [pc, #212]	; (8005104 <xbee_send_at_command+0xe0>)
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <xbee_send_at_command+0x16>
		_EnterCmdMode();
 8005036:	f000 f935 	bl	80052a4 <_EnterCmdMode>

	// add comma if daisy chained commands
	if(_size != 0)
 800503a:	4b33      	ldr	r3, [pc, #204]	; (8005108 <xbee_send_at_command+0xe4>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00f      	beq.n	8005062 <xbee_send_at_command+0x3e>
	{
		if(_allocateFrame(1))
 8005042:	2001      	movs	r0, #1
 8005044:	f000 f9a4 	bl	8005390 <_allocateFrame>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <xbee_send_at_command+0x2e>
			return 1;
 800504e:	2301      	movs	r3, #1
 8005050:	e053      	b.n	80050fa <xbee_send_at_command+0xd6>
		_frame[_size++] = ',';
 8005052:	4b2d      	ldr	r3, [pc, #180]	; (8005108 <xbee_send_at_command+0xe4>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	1c5a      	adds	r2, r3, #1
 8005058:	492b      	ldr	r1, [pc, #172]	; (8005108 <xbee_send_at_command+0xe4>)
 800505a:	600a      	str	r2, [r1, #0]
 800505c:	4a2b      	ldr	r2, [pc, #172]	; (800510c <xbee_send_at_command+0xe8>)
 800505e:	212c      	movs	r1, #44	; 0x2c
 8005060:	54d1      	strb	r1, [r2, r3]
	}

	if(_allocateFrame(4))
 8005062:	2004      	movs	r0, #4
 8005064:	f000 f994 	bl	8005390 <_allocateFrame>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <xbee_send_at_command+0x4e>
		return 1;
 800506e:	2301      	movs	r3, #1
 8005070:	e043      	b.n	80050fa <xbee_send_at_command+0xd6>

	memcpy(&_frame[_size], "AT", 2);
 8005072:	4b25      	ldr	r3, [pc, #148]	; (8005108 <xbee_send_at_command+0xe4>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a25      	ldr	r2, [pc, #148]	; (800510c <xbee_send_at_command+0xe8>)
 8005078:	4413      	add	r3, r2
 800507a:	2202      	movs	r2, #2
 800507c:	4924      	ldr	r1, [pc, #144]	; (8005110 <xbee_send_at_command+0xec>)
 800507e:	4618      	mov	r0, r3
 8005080:	f003 f9d0 	bl	8008424 <memcpy>
	_size += 2;
 8005084:	4b20      	ldr	r3, [pc, #128]	; (8005108 <xbee_send_at_command+0xe4>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	3302      	adds	r3, #2
 800508a:	4a1f      	ldr	r2, [pc, #124]	; (8005108 <xbee_send_at_command+0xe4>)
 800508c:	6013      	str	r3, [r2, #0]
	memcpy(&_frame[_size], command, 2);
 800508e:	4b1e      	ldr	r3, [pc, #120]	; (8005108 <xbee_send_at_command+0xe4>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a1e      	ldr	r2, [pc, #120]	; (800510c <xbee_send_at_command+0xe8>)
 8005094:	4413      	add	r3, r2
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	8812      	ldrh	r2, [r2, #0]
 800509a:	b292      	uxth	r2, r2
 800509c:	801a      	strh	r2, [r3, #0]
	_size += 2;
 800509e:	4b1a      	ldr	r3, [pc, #104]	; (8005108 <xbee_send_at_command+0xe4>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	3302      	adds	r3, #2
 80050a4:	4a18      	ldr	r2, [pc, #96]	; (8005108 <xbee_send_at_command+0xe4>)
 80050a6:	6013      	str	r3, [r2, #0]

	uint8_t i = 0;
 80050a8:	2300      	movs	r3, #0
 80050aa:	73fb      	strb	r3, [r7, #15]
	uint8_t currByte = param[i];
 80050ac:	7bfb      	ldrb	r3, [r7, #15]
 80050ae:	683a      	ldr	r2, [r7, #0]
 80050b0:	4413      	add	r3, r2
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	73bb      	strb	r3, [r7, #14]
	while(currByte != '\0')
 80050b6:	e017      	b.n	80050e8 <xbee_send_at_command+0xc4>
	{
		if(_allocateFrame(1))
 80050b8:	2001      	movs	r0, #1
 80050ba:	f000 f969 	bl	8005390 <_allocateFrame>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <xbee_send_at_command+0xa4>
			return 1;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e018      	b.n	80050fa <xbee_send_at_command+0xd6>

		_frame[_size++] = currByte;
 80050c8:	4b0f      	ldr	r3, [pc, #60]	; (8005108 <xbee_send_at_command+0xe4>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	1c5a      	adds	r2, r3, #1
 80050ce:	490e      	ldr	r1, [pc, #56]	; (8005108 <xbee_send_at_command+0xe4>)
 80050d0:	600a      	str	r2, [r1, #0]
 80050d2:	490e      	ldr	r1, [pc, #56]	; (800510c <xbee_send_at_command+0xe8>)
 80050d4:	7bba      	ldrb	r2, [r7, #14]
 80050d6:	54ca      	strb	r2, [r1, r3]
		currByte =  param[++i];
 80050d8:	7bfb      	ldrb	r3, [r7, #15]
 80050da:	3301      	adds	r3, #1
 80050dc:	73fb      	strb	r3, [r7, #15]
 80050de:	7bfb      	ldrb	r3, [r7, #15]
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	4413      	add	r3, r2
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	73bb      	strb	r3, [r7, #14]
	while(currByte != '\0')
 80050e8:	7bbb      	ldrb	r3, [r7, #14]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1e4      	bne.n	80050b8 <xbee_send_at_command+0x94>
	}

	PRINT("Command issued : AT %s %s\n", command, param); //Log
 80050ee:	683a      	ldr	r2, [r7, #0]
 80050f0:	6879      	ldr	r1, [r7, #4]
 80050f2:	4808      	ldr	r0, [pc, #32]	; (8005114 <xbee_send_at_command+0xf0>)
 80050f4:	f7fc f9f8 	bl	80014e8 <PRINT>

	return 0;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	2000a808 	.word	0x2000a808
 8005108:	2000a870 	.word	0x2000a870
 800510c:	2000a80c 	.word	0x2000a80c
 8005110:	0800b22c 	.word	0x0800b22c
 8005114:	0800b230 	.word	0x0800b230

08005118 <xbee_wait_for_AT_response>:
// Wait for 'OK\r' response
// Return   0 if ok
//		    1 if timeout
//		    2 if response incorrect
uint8_t xbee_wait_for_AT_response(void)
{
 8005118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800511c:	b087      	sub	sp, #28
 800511e:	af00      	add	r7, sp, #0
	uint32_t startTime, currTime;

	if(!isCmdMode)
 8005120:	4b44      	ldr	r3, [pc, #272]	; (8005234 <xbee_wait_for_AT_response+0x11c>)
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <xbee_wait_for_AT_response+0x14>
		return 0;
 8005128:	2300      	movs	r3, #0
 800512a:	e07e      	b.n	800522a <xbee_wait_for_AT_response+0x112>

	//If in command mode
	if(!enteringCmdMode)
 800512c:	4b42      	ldr	r3, [pc, #264]	; (8005238 <xbee_wait_for_AT_response+0x120>)
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d11f      	bne.n	8005174 <xbee_wait_for_AT_response+0x5c>
	{
		if(_allocateFrame(1))
 8005134:	2001      	movs	r0, #1
 8005136:	f000 f92b 	bl	8005390 <_allocateFrame>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <xbee_wait_for_AT_response+0x2c>
			return 1;
 8005140:	2301      	movs	r3, #1
 8005142:	e072      	b.n	800522a <xbee_wait_for_AT_response+0x112>

		PRINT("Sending frame  : %.*s\n", _size, _frame); //log _frame. '\r' is not printed
 8005144:	4b3d      	ldr	r3, [pc, #244]	; (800523c <xbee_wait_for_AT_response+0x124>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a3d      	ldr	r2, [pc, #244]	; (8005240 <xbee_wait_for_AT_response+0x128>)
 800514a:	4619      	mov	r1, r3
 800514c:	483d      	ldr	r0, [pc, #244]	; (8005244 <xbee_wait_for_AT_response+0x12c>)
 800514e:	f7fc f9cb 	bl	80014e8 <PRINT>
		PRINT("...");
 8005152:	483d      	ldr	r0, [pc, #244]	; (8005248 <xbee_wait_for_AT_response+0x130>)
 8005154:	f7fc f9c8 	bl	80014e8 <PRINT>
		_frame[_size++] = '\r';  //wrap up _frame
 8005158:	4b38      	ldr	r3, [pc, #224]	; (800523c <xbee_wait_for_AT_response+0x124>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	1c5a      	adds	r2, r3, #1
 800515e:	4937      	ldr	r1, [pc, #220]	; (800523c <xbee_wait_for_AT_response+0x124>)
 8005160:	600a      	str	r2, [r1, #0]
 8005162:	4a37      	ldr	r2, [pc, #220]	; (8005240 <xbee_wait_for_AT_response+0x128>)
 8005164:	210d      	movs	r1, #13
 8005166:	54d1      	strb	r1, [r2, r3]

		xbeeSerial_Transmit(_frame, _size);  //Send _frame
 8005168:	4b34      	ldr	r3, [pc, #208]	; (800523c <xbee_wait_for_AT_response+0x124>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4619      	mov	r1, r3
 800516e:	4834      	ldr	r0, [pc, #208]	; (8005240 <xbee_wait_for_AT_response+0x128>)
 8005170:	f000 f9d2 	bl	8005518 <xbeeSerial_Transmit>
	}

	//Check timeout
	startTime = HAL_GetTick();
 8005174:	f7fc fb5c 	bl	8001830 <HAL_GetTick>
 8005178:	6178      	str	r0, [r7, #20]
	while(!xbeeSerial_isMessageReceived())
 800517a:	e00c      	b.n	8005196 <xbee_wait_for_AT_response+0x7e>
	{
		currTime = HAL_GetTick();
 800517c:	f7fc fb58 	bl	8001830 <HAL_GetTick>
 8005180:	6078      	str	r0, [r7, #4]
		//wait time over 1 second
		if((currTime - startTime) > 2000)
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800518c:	d903      	bls.n	8005196 <xbee_wait_for_AT_response+0x7e>
		{
			//Timeout, module failed to respond
			_resetFrame();
 800518e:	f000 f8ef 	bl	8005370 <_resetFrame>
			return 1;
 8005192:	2301      	movs	r3, #1
 8005194:	e049      	b.n	800522a <xbee_wait_for_AT_response+0x112>
	while(!xbeeSerial_isMessageReceived())
 8005196:	f000 f9d3 	bl	8005540 <xbeeSerial_isMessageReceived>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d0ed      	beq.n	800517c <xbee_wait_for_AT_response+0x64>
		}
	}

	//Get response
	uint8_t correctBuffer[3] = "OK\r";
 80051a0:	4a2a      	ldr	r2, [pc, #168]	; (800524c <xbee_wait_for_AT_response+0x134>)
 80051a2:	463b      	mov	r3, r7
 80051a4:	6812      	ldr	r2, [r2, #0]
 80051a6:	4611      	mov	r1, r2
 80051a8:	8019      	strh	r1, [r3, #0]
 80051aa:	3302      	adds	r3, #2
 80051ac:	0c12      	lsrs	r2, r2, #16
 80051ae:	701a      	strb	r2, [r3, #0]
	uint32_t rxBufferSize = xbeeSerial_getBufferSize();
 80051b0:	f000 f990 	bl	80054d4 <xbeeSerial_getBufferSize>
 80051b4:	6138      	str	r0, [r7, #16]
	uint8_t rxBuffer[rxBufferSize];
 80051b6:	6939      	ldr	r1, [r7, #16]
 80051b8:	466b      	mov	r3, sp
 80051ba:	461e      	mov	r6, r3
 80051bc:	460b      	mov	r3, r1
 80051be:	3b01      	subs	r3, #1
 80051c0:	60fb      	str	r3, [r7, #12]
 80051c2:	2300      	movs	r3, #0
 80051c4:	4688      	mov	r8, r1
 80051c6:	4699      	mov	r9, r3
 80051c8:	f04f 0200 	mov.w	r2, #0
 80051cc:	f04f 0300 	mov.w	r3, #0
 80051d0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051d4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051d8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051dc:	2300      	movs	r3, #0
 80051de:	460c      	mov	r4, r1
 80051e0:	461d      	mov	r5, r3
 80051e2:	f04f 0200 	mov.w	r2, #0
 80051e6:	f04f 0300 	mov.w	r3, #0
 80051ea:	00eb      	lsls	r3, r5, #3
 80051ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051f0:	00e2      	lsls	r2, r4, #3
 80051f2:	1dcb      	adds	r3, r1, #7
 80051f4:	08db      	lsrs	r3, r3, #3
 80051f6:	00db      	lsls	r3, r3, #3
 80051f8:	ebad 0d03 	sub.w	sp, sp, r3
 80051fc:	466b      	mov	r3, sp
 80051fe:	3300      	adds	r3, #0
 8005200:	60bb      	str	r3, [r7, #8]

	xbeeSerial_getBuffer(rxBuffer);
 8005202:	68b8      	ldr	r0, [r7, #8]
 8005204:	f000 f91e 	bl	8005444 <xbeeSerial_getBuffer>
	if(memcmp(rxBuffer, correctBuffer, 3) != 0)
 8005208:	463b      	mov	r3, r7
 800520a:	2203      	movs	r2, #3
 800520c:	4619      	mov	r1, r3
 800520e:	68b8      	ldr	r0, [r7, #8]
 8005210:	f003 f8f8 	bl	8008404 <memcmp>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <xbee_wait_for_AT_response+0x10a>
	{
		//Response is incorrect
		_resetFrame();
 800521a:	f000 f8a9 	bl	8005370 <_resetFrame>
		return 2;
 800521e:	2302      	movs	r3, #2
 8005220:	e002      	b.n	8005228 <xbee_wait_for_AT_response+0x110>
	}

	_resetFrame();
 8005222:	f000 f8a5 	bl	8005370 <_resetFrame>
	return 0;
 8005226:	2300      	movs	r3, #0
 8005228:	46b5      	mov	sp, r6
}
 800522a:	4618      	mov	r0, r3
 800522c:	371c      	adds	r7, #28
 800522e:	46bd      	mov	sp, r7
 8005230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005234:	2000a808 	.word	0x2000a808
 8005238:	2000a809 	.word	0x2000a809
 800523c:	2000a870 	.word	0x2000a870
 8005240:	2000a80c 	.word	0x2000a80c
 8005244:	0800b24c 	.word	0x0800b24c
 8005248:	0800b264 	.word	0x0800b264
 800524c:	0800b268 	.word	0x0800b268

08005250 <xbee_byteRcvCallback>:

//Byte receive callback in transparent mode
//User should implement this
__weak void xbee_byteRcvCallback(const uint8_t byte)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	4603      	mov	r3, r0
 8005258:	71fb      	strb	r3, [r7, #7]
	PRINT("%c", byte);
 800525a:	79fb      	ldrb	r3, [r7, #7]
 800525c:	4619      	mov	r1, r3
 800525e:	4806      	ldr	r0, [pc, #24]	; (8005278 <xbee_byteRcvCallback+0x28>)
 8005260:	f7fc f942 	bl	80014e8 <PRINT>
	if(byte == '\r')
 8005264:	79fb      	ldrb	r3, [r7, #7]
 8005266:	2b0d      	cmp	r3, #13
 8005268:	d102      	bne.n	8005270 <xbee_byteRcvCallback+0x20>
		PRINT("\n");
 800526a:	4804      	ldr	r0, [pc, #16]	; (800527c <xbee_byteRcvCallback+0x2c>)
 800526c:	f7fc f93c 	bl	80014e8 <PRINT>
}
 8005270:	bf00      	nop
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	0800b26c 	.word	0x0800b26c
 800527c:	0800b270 	.word	0x0800b270

08005280 <xbee_sendFrame>:

void xbee_sendFrame(const genericFrame_t frame)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	463b      	mov	r3, r7
 8005288:	e883 0003 	stmia.w	r3, {r0, r1}
	FifoPush(&frameFifo, &frame);
 800528c:	463b      	mov	r3, r7
 800528e:	4619      	mov	r1, r3
 8005290:	4803      	ldr	r0, [pc, #12]	; (80052a0 <xbee_sendFrame+0x20>)
 8005292:	f7ff fd64 	bl	8004d5e <FifoPush>
}
 8005296:	bf00      	nop
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	2000a874 	.word	0x2000a874

080052a4 <_EnterCmdMode>:


//Enter command mode function.
//Return 0 if OK, 1 else
uint8_t _EnterCmdMode(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
	uint8_t ret = 1;
 80052aa:	2301      	movs	r3, #1
 80052ac:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[3] = "+++";
 80052ae:	4a16      	ldr	r2, [pc, #88]	; (8005308 <_EnterCmdMode+0x64>)
 80052b0:	1d3b      	adds	r3, r7, #4
 80052b2:	6812      	ldr	r2, [r2, #0]
 80052b4:	4611      	mov	r1, r2
 80052b6:	8019      	strh	r1, [r3, #0]
 80052b8:	3302      	adds	r3, #2
 80052ba:	0c12      	lsrs	r2, r2, #16
 80052bc:	701a      	strb	r2, [r3, #0]

	//We need to set CmdMode in order for callback to work
	//Variable is reset later if fail
	isCmdMode = 1;
 80052be:	4b13      	ldr	r3, [pc, #76]	; (800530c <_EnterCmdMode+0x68>)
 80052c0:	2201      	movs	r2, #1
 80052c2:	701a      	strb	r2, [r3, #0]
	enteringCmdMode = 1;
 80052c4:	4b12      	ldr	r3, [pc, #72]	; (8005310 <_EnterCmdMode+0x6c>)
 80052c6:	2201      	movs	r2, #1
 80052c8:	701a      	strb	r2, [r3, #0]

	xbeeSerial_Transmit(cmd, 3);
 80052ca:	1d3b      	adds	r3, r7, #4
 80052cc:	2103      	movs	r1, #3
 80052ce:	4618      	mov	r0, r3
 80052d0:	f000 f922 	bl	8005518 <xbeeSerial_Transmit>
	ret = xbee_wait_for_AT_response();
 80052d4:	f7ff ff20 	bl	8005118 <xbee_wait_for_AT_response>
 80052d8:	4603      	mov	r3, r0
 80052da:	71fb      	strb	r3, [r7, #7]
	_processStatus(ret);
 80052dc:	79fb      	ldrb	r3, [r7, #7]
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 f86e 	bl	80053c0 <_processStatus>
	if(ret != 0)
 80052e4:	79fb      	ldrb	r3, [r7, #7]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <_EnterCmdMode+0x4e>
		isCmdMode = 0;
 80052ea:	4b08      	ldr	r3, [pc, #32]	; (800530c <_EnterCmdMode+0x68>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	701a      	strb	r2, [r3, #0]
 80052f0:	e002      	b.n	80052f8 <_EnterCmdMode+0x54>
	else
		PRINT("  - CMD MODE\n");
 80052f2:	4808      	ldr	r0, [pc, #32]	; (8005314 <_EnterCmdMode+0x70>)
 80052f4:	f7fc f8f8 	bl	80014e8 <PRINT>

	enteringCmdMode = 0;
 80052f8:	4b05      	ldr	r3, [pc, #20]	; (8005310 <_EnterCmdMode+0x6c>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	701a      	strb	r2, [r3, #0]

	return ret;
 80052fe:	79fb      	ldrb	r3, [r7, #7]
}
 8005300:	4618      	mov	r0, r3
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	0800b284 	.word	0x0800b284
 800530c:	2000a808 	.word	0x2000a808
 8005310:	2000a809 	.word	0x2000a809
 8005314:	0800b274 	.word	0x0800b274

08005318 <_ExitCmdMode>:

uint8_t _ExitCmdMode(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
	uint8_t ret = 1;
 800531e:	2301      	movs	r3, #1
 8005320:	71fb      	strb	r3, [r7, #7]
	
	isCmdMode = 1;
 8005322:	4b0f      	ldr	r3, [pc, #60]	; (8005360 <_ExitCmdMode+0x48>)
 8005324:	2201      	movs	r2, #1
 8005326:	701a      	strb	r2, [r3, #0]

	xbee_send_at_command("CN", "");
 8005328:	490e      	ldr	r1, [pc, #56]	; (8005364 <_ExitCmdMode+0x4c>)
 800532a:	480f      	ldr	r0, [pc, #60]	; (8005368 <_ExitCmdMode+0x50>)
 800532c:	f7ff fe7a 	bl	8005024 <xbee_send_at_command>
	ret = xbee_wait_for_AT_response();
 8005330:	f7ff fef2 	bl	8005118 <xbee_wait_for_AT_response>
 8005334:	4603      	mov	r3, r0
 8005336:	71fb      	strb	r3, [r7, #7]
	_processStatus(ret);
 8005338:	79fb      	ldrb	r3, [r7, #7]
 800533a:	4618      	mov	r0, r3
 800533c:	f000 f840 	bl	80053c0 <_processStatus>
	if(ret == 0)
 8005340:	79fb      	ldrb	r3, [r7, #7]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d107      	bne.n	8005356 <_ExitCmdMode+0x3e>
	{
		ret = 0;
 8005346:	2300      	movs	r3, #0
 8005348:	71fb      	strb	r3, [r7, #7]
		isCmdMode = 0;
 800534a:	4b05      	ldr	r3, [pc, #20]	; (8005360 <_ExitCmdMode+0x48>)
 800534c:	2200      	movs	r2, #0
 800534e:	701a      	strb	r2, [r3, #0]
		PRINT("  - TRANSPARENT MODE\n");
 8005350:	4806      	ldr	r0, [pc, #24]	; (800536c <_ExitCmdMode+0x54>)
 8005352:	f7fc f8c9 	bl	80014e8 <PRINT>
	}

	return ret;
 8005356:	79fb      	ldrb	r3, [r7, #7]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3708      	adds	r7, #8
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	2000a808 	.word	0x2000a808
 8005364:	0800b288 	.word	0x0800b288
 8005368:	0800b28c 	.word	0x0800b28c
 800536c:	0800b290 	.word	0x0800b290

08005370 <_resetFrame>:

void _resetFrame(void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	af00      	add	r7, sp, #0
	memset(_frame, 0, TX_FRAME_SIZE);
 8005374:	2264      	movs	r2, #100	; 0x64
 8005376:	2100      	movs	r1, #0
 8005378:	4803      	ldr	r0, [pc, #12]	; (8005388 <_resetFrame+0x18>)
 800537a:	f003 f861 	bl	8008440 <memset>
	_size = 0;
 800537e:	4b03      	ldr	r3, [pc, #12]	; (800538c <_resetFrame+0x1c>)
 8005380:	2200      	movs	r2, #0
 8005382:	601a      	str	r2, [r3, #0]
}
 8005384:	bf00      	nop
 8005386:	bd80      	pop	{r7, pc}
 8005388:	2000a80c 	.word	0x2000a80c
 800538c:	2000a870 	.word	0x2000a870

08005390 <_allocateFrame>:
//Comme on rempli le buffer de données variable,
//permet de checker que le buffer n'overflow pas.
//Return 1 if _frame overflow
//		 0 else
uint8_t _allocateFrame(uint32_t nbBytes)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 8005398:	2300      	movs	r3, #0
 800539a:	73fb      	strb	r3, [r7, #15]
	if((_size+nbBytes) > TX_FRAME_SIZE) //check size
 800539c:	4b07      	ldr	r3, [pc, #28]	; (80053bc <_allocateFrame+0x2c>)
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4413      	add	r3, r2
 80053a4:	2b64      	cmp	r3, #100	; 0x64
 80053a6:	d903      	bls.n	80053b0 <_allocateFrame+0x20>
	{
		//buffer overflow, erase _frame and return
		_resetFrame();
 80053a8:	f7ff ffe2 	bl	8005370 <_resetFrame>
		ret = 1;
 80053ac:	2301      	movs	r3, #1
 80053ae:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 80053b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	2000a870 	.word	0x2000a870

080053c0 <_processStatus>:

void _processStatus(uint8_t status)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	4603      	mov	r3, r0
 80053c8:	71fb      	strb	r3, [r7, #7]
	switch(status)
 80053ca:	79fb      	ldrb	r3, [r7, #7]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d002      	beq.n	80053d6 <_processStatus+0x16>
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d008      	beq.n	80053e6 <_processStatus+0x26>
 80053d4:	e003      	b.n	80053de <_processStatus+0x1e>
	{
	case 0:
		PRINT("done\n\n");
 80053d6:	4808      	ldr	r0, [pc, #32]	; (80053f8 <_processStatus+0x38>)
 80053d8:	f7fc f886 	bl	80014e8 <PRINT>
		break;
 80053dc:	e007      	b.n	80053ee <_processStatus+0x2e>

	default:
	case 1:
		PRINT("/!\\ Timeout, communication failed!\n");
 80053de:	4807      	ldr	r0, [pc, #28]	; (80053fc <_processStatus+0x3c>)
 80053e0:	f7fc f882 	bl	80014e8 <PRINT>
		break;
 80053e4:	e003      	b.n	80053ee <_processStatus+0x2e>

	case 2:
		PRINT("/!\\ Bad response, communication failed!\n");
 80053e6:	4806      	ldr	r0, [pc, #24]	; (8005400 <_processStatus+0x40>)
 80053e8:	f7fc f87e 	bl	80014e8 <PRINT>
		break;
 80053ec:	bf00      	nop
	}
}
 80053ee:	bf00      	nop
 80053f0:	3708      	adds	r7, #8
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	0800b2a8 	.word	0x0800b2a8
 80053fc:	0800b2b0 	.word	0x0800b2b0
 8005400:	0800b2d4 	.word	0x0800b2d4

08005404 <xbeeSerial_Init>:

extern uint8_t isCmdMode;	//Boolean, is command mode active. Global variable
extern uint8_t enteringCmdMode;

void xbeeSerial_Init(UART_HandleTypeDef* huart)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
	uart = huart;
 800540c:	4a09      	ldr	r2, [pc, #36]	; (8005434 <xbeeSerial_Init+0x30>)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6013      	str	r3, [r2, #0]
	head = tail = rxByte = 0;
 8005412:	4b09      	ldr	r3, [pc, #36]	; (8005438 <xbeeSerial_Init+0x34>)
 8005414:	2200      	movs	r2, #0
 8005416:	701a      	strb	r2, [r3, #0]
 8005418:	4b08      	ldr	r3, [pc, #32]	; (800543c <xbeeSerial_Init+0x38>)
 800541a:	2200      	movs	r2, #0
 800541c:	601a      	str	r2, [r3, #0]
 800541e:	4b07      	ldr	r3, [pc, #28]	; (800543c <xbeeSerial_Init+0x38>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a07      	ldr	r2, [pc, #28]	; (8005440 <xbeeSerial_Init+0x3c>)
 8005424:	6013      	str	r3, [r2, #0]

	_ReceiveStart();
 8005426:	f000 f897 	bl	8005558 <_ReceiveStart>
}
 800542a:	bf00      	nop
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	2000a884 	.word	0x2000a884
 8005438:	2000a888 	.word	0x2000a888
 800543c:	2000a8f4 	.word	0x2000a8f4
 8005440:	2000a8f0 	.word	0x2000a8f0

08005444 <xbeeSerial_getBuffer>:

/*
 * Copy received buffer to destination
 */
void xbeeSerial_getBuffer(uint8_t* destination)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
	int32_t msgSize;
	if(head < tail)
 800544c:	4b1e      	ldr	r3, [pc, #120]	; (80054c8 <xbeeSerial_getBuffer+0x84>)
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	4b1e      	ldr	r3, [pc, #120]	; (80054cc <xbeeSerial_getBuffer+0x88>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	429a      	cmp	r2, r3
 8005456:	d21f      	bcs.n	8005498 <xbeeSerial_getBuffer+0x54>
	{
		//message is splitted in buffer, copy in two time
		msgSize = RING_BUFFER_SIZE - tail + head;
 8005458:	4b1b      	ldr	r3, [pc, #108]	; (80054c8 <xbeeSerial_getBuffer+0x84>)
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	4b1b      	ldr	r3, [pc, #108]	; (80054cc <xbeeSerial_getBuffer+0x88>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	3364      	adds	r3, #100	; 0x64
 8005464:	60fb      	str	r3, [r7, #12]
		uint8_t halfSize = RING_BUFFER_SIZE - tail;
 8005466:	4b19      	ldr	r3, [pc, #100]	; (80054cc <xbeeSerial_getBuffer+0x88>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	b2db      	uxtb	r3, r3
 800546c:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8005470:	72fb      	strb	r3, [r7, #11]
		memcpy(destination, &ringBuffer[tail], halfSize);
 8005472:	4b16      	ldr	r3, [pc, #88]	; (80054cc <xbeeSerial_getBuffer+0x88>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a16      	ldr	r2, [pc, #88]	; (80054d0 <xbeeSerial_getBuffer+0x8c>)
 8005478:	4413      	add	r3, r2
 800547a:	7afa      	ldrb	r2, [r7, #11]
 800547c:	4619      	mov	r1, r3
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f002 ffd0 	bl	8008424 <memcpy>
		memcpy(&destination[halfSize], ringBuffer, head);
 8005484:	7afb      	ldrb	r3, [r7, #11]
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	4413      	add	r3, r2
 800548a:	4a0f      	ldr	r2, [pc, #60]	; (80054c8 <xbeeSerial_getBuffer+0x84>)
 800548c:	6812      	ldr	r2, [r2, #0]
 800548e:	4910      	ldr	r1, [pc, #64]	; (80054d0 <xbeeSerial_getBuffer+0x8c>)
 8005490:	4618      	mov	r0, r3
 8005492:	f002 ffc7 	bl	8008424 <memcpy>
 8005496:	e00e      	b.n	80054b6 <xbeeSerial_getBuffer+0x72>
	}
	else
	{
		//Message is not splitted, regular copy
		msgSize = head - tail;
 8005498:	4b0b      	ldr	r3, [pc, #44]	; (80054c8 <xbeeSerial_getBuffer+0x84>)
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	4b0b      	ldr	r3, [pc, #44]	; (80054cc <xbeeSerial_getBuffer+0x88>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	60fb      	str	r3, [r7, #12]
		memcpy(destination, &ringBuffer[tail], msgSize);
 80054a4:	4b09      	ldr	r3, [pc, #36]	; (80054cc <xbeeSerial_getBuffer+0x88>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a09      	ldr	r2, [pc, #36]	; (80054d0 <xbeeSerial_getBuffer+0x8c>)
 80054aa:	4413      	add	r3, r2
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	4619      	mov	r1, r3
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f002 ffb7 	bl	8008424 <memcpy>
	}

	//Update index
	tail = head;
 80054b6:	4b04      	ldr	r3, [pc, #16]	; (80054c8 <xbeeSerial_getBuffer+0x84>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a04      	ldr	r2, [pc, #16]	; (80054cc <xbeeSerial_getBuffer+0x88>)
 80054bc:	6013      	str	r3, [r2, #0]
}
 80054be:	bf00      	nop
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	2000a8f0 	.word	0x2000a8f0
 80054cc:	2000a8f4 	.word	0x2000a8f4
 80054d0:	2000a88c 	.word	0x2000a88c

080054d4 <xbeeSerial_getBufferSize>:

/*
 * get amount of received bytes
 */
uint32_t xbeeSerial_getBufferSize(void)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
	uint32_t size;
	if(head < tail)
 80054da:	4b0d      	ldr	r3, [pc, #52]	; (8005510 <xbeeSerial_getBufferSize+0x3c>)
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	4b0d      	ldr	r3, [pc, #52]	; (8005514 <xbeeSerial_getBufferSize+0x40>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d207      	bcs.n	80054f6 <xbeeSerial_getBufferSize+0x22>
		size = RING_BUFFER_SIZE - tail + head;
 80054e6:	4b0a      	ldr	r3, [pc, #40]	; (8005510 <xbeeSerial_getBufferSize+0x3c>)
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	4b0a      	ldr	r3, [pc, #40]	; (8005514 <xbeeSerial_getBufferSize+0x40>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	3364      	adds	r3, #100	; 0x64
 80054f2:	607b      	str	r3, [r7, #4]
 80054f4:	e005      	b.n	8005502 <xbeeSerial_getBufferSize+0x2e>
	else
		size = head - tail;
 80054f6:	4b06      	ldr	r3, [pc, #24]	; (8005510 <xbeeSerial_getBufferSize+0x3c>)
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	4b06      	ldr	r3, [pc, #24]	; (8005514 <xbeeSerial_getBufferSize+0x40>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	607b      	str	r3, [r7, #4]
	return size;
 8005502:	687b      	ldr	r3, [r7, #4]
}
 8005504:	4618      	mov	r0, r3
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	2000a8f0 	.word	0x2000a8f0
 8005514:	2000a8f4 	.word	0x2000a8f4

08005518 <xbeeSerial_Transmit>:

/*
 * UART transmit blocking mode
 */
void xbeeSerial_Transmit(const uint8_t* txBuffer, const uint32_t size)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(uart, txBuffer, size, 1000);
 8005522:	4b06      	ldr	r3, [pc, #24]	; (800553c <xbeeSerial_Transmit+0x24>)
 8005524:	6818      	ldr	r0, [r3, #0]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	b29a      	uxth	r2, r3
 800552a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800552e:	6879      	ldr	r1, [r7, #4]
 8005530:	f7fe f92c 	bl	800378c <HAL_UART_Transmit>
}
 8005534:	bf00      	nop
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	2000a884 	.word	0x2000a884

08005540 <xbeeSerial_isMessageReceived>:

uint8_t xbeeSerial_isMessageReceived(void)
{
 8005540:	b480      	push	{r7}
 8005542:	af00      	add	r7, sp, #0
	return msgReceived;
 8005544:	4b03      	ldr	r3, [pc, #12]	; (8005554 <xbeeSerial_isMessageReceived+0x14>)
 8005546:	781b      	ldrb	r3, [r3, #0]
}
 8005548:	4618      	mov	r0, r3
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	2000a8f8 	.word	0x2000a8f8

08005558 <_ReceiveStart>:

/*** Private functions ***/
void _ReceiveStart(void)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	af00      	add	r7, sp, #0
	head = 0;
 800555c:	4b0b      	ldr	r3, [pc, #44]	; (800558c <_ReceiveStart+0x34>)
 800555e:	2200      	movs	r2, #0
 8005560:	601a      	str	r2, [r3, #0]
	tail = 0;
 8005562:	4b0b      	ldr	r3, [pc, #44]	; (8005590 <_ReceiveStart+0x38>)
 8005564:	2200      	movs	r2, #0
 8005566:	601a      	str	r2, [r3, #0]
	msgReceived = 0;
 8005568:	4b0a      	ldr	r3, [pc, #40]	; (8005594 <_ReceiveStart+0x3c>)
 800556a:	2200      	movs	r2, #0
 800556c:	701a      	strb	r2, [r3, #0]

	memset(ringBuffer, 0, RING_BUFFER_SIZE);
 800556e:	2264      	movs	r2, #100	; 0x64
 8005570:	2100      	movs	r1, #0
 8005572:	4809      	ldr	r0, [pc, #36]	; (8005598 <_ReceiveStart+0x40>)
 8005574:	f002 ff64 	bl	8008440 <memset>

	HAL_UART_Receive_IT(uart, &rxByte, 1);
 8005578:	4b08      	ldr	r3, [pc, #32]	; (800559c <_ReceiveStart+0x44>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2201      	movs	r2, #1
 800557e:	4908      	ldr	r1, [pc, #32]	; (80055a0 <_ReceiveStart+0x48>)
 8005580:	4618      	mov	r0, r3
 8005582:	f7fe f997 	bl	80038b4 <HAL_UART_Receive_IT>
}
 8005586:	bf00      	nop
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	2000a8f0 	.word	0x2000a8f0
 8005590:	2000a8f4 	.word	0x2000a8f4
 8005594:	2000a8f8 	.word	0x2000a8f8
 8005598:	2000a88c 	.word	0x2000a88c
 800559c:	2000a884 	.word	0x2000a884
 80055a0:	2000a888 	.word	0x2000a888

080055a4 <xbeeSerial_rxCallback>:


/*** Interrupt routines ***/

void xbeeSerial_rxCallback(void)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	af00      	add	r7, sp, #0
	if(isCmdMode | enteringCmdMode)
 80055a8:	4b18      	ldr	r3, [pc, #96]	; (800560c <xbeeSerial_rxCallback+0x68>)
 80055aa:	781a      	ldrb	r2, [r3, #0]
 80055ac:	4b18      	ldr	r3, [pc, #96]	; (8005610 <xbeeSerial_rxCallback+0x6c>)
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d01a      	beq.n	80055ee <xbeeSerial_rxCallback+0x4a>
	{
		if(rxByte == 0xD) // rxByte == '\r'
 80055b8:	4b16      	ldr	r3, [pc, #88]	; (8005614 <xbeeSerial_rxCallback+0x70>)
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	2b0d      	cmp	r3, #13
 80055be:	d102      	bne.n	80055c6 <xbeeSerial_rxCallback+0x22>
			msgReceived = 1;
 80055c0:	4b15      	ldr	r3, [pc, #84]	; (8005618 <xbeeSerial_rxCallback+0x74>)
 80055c2:	2201      	movs	r2, #1
 80055c4:	701a      	strb	r2, [r3, #0]

		ringBuffer[head] = rxByte;
 80055c6:	4b15      	ldr	r3, [pc, #84]	; (800561c <xbeeSerial_rxCallback+0x78>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a12      	ldr	r2, [pc, #72]	; (8005614 <xbeeSerial_rxCallback+0x70>)
 80055cc:	7811      	ldrb	r1, [r2, #0]
 80055ce:	4a14      	ldr	r2, [pc, #80]	; (8005620 <xbeeSerial_rxCallback+0x7c>)
 80055d0:	54d1      	strb	r1, [r2, r3]
		head = (head+1) % RING_BUFFER_SIZE; //update index
 80055d2:	4b12      	ldr	r3, [pc, #72]	; (800561c <xbeeSerial_rxCallback+0x78>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	1c5a      	adds	r2, r3, #1
 80055d8:	4b12      	ldr	r3, [pc, #72]	; (8005624 <xbeeSerial_rxCallback+0x80>)
 80055da:	fba3 1302 	umull	r1, r3, r3, r2
 80055de:	095b      	lsrs	r3, r3, #5
 80055e0:	2164      	movs	r1, #100	; 0x64
 80055e2:	fb01 f303 	mul.w	r3, r1, r3
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	4a0c      	ldr	r2, [pc, #48]	; (800561c <xbeeSerial_rxCallback+0x78>)
 80055ea:	6013      	str	r3, [r2, #0]
 80055ec:	e004      	b.n	80055f8 <xbeeSerial_rxCallback+0x54>
	}
	else
		xbee_byteRcvCallback(rxByte);
 80055ee:	4b09      	ldr	r3, [pc, #36]	; (8005614 <xbeeSerial_rxCallback+0x70>)
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7ff fe2c 	bl	8005250 <xbee_byteRcvCallback>

	HAL_UART_Receive_IT(uart, &rxByte, 1);
 80055f8:	4b0b      	ldr	r3, [pc, #44]	; (8005628 <xbeeSerial_rxCallback+0x84>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2201      	movs	r2, #1
 80055fe:	4905      	ldr	r1, [pc, #20]	; (8005614 <xbeeSerial_rxCallback+0x70>)
 8005600:	4618      	mov	r0, r3
 8005602:	f7fe f957 	bl	80038b4 <HAL_UART_Receive_IT>
}
 8005606:	bf00      	nop
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	2000a808 	.word	0x2000a808
 8005610:	2000a809 	.word	0x2000a809
 8005614:	2000a888 	.word	0x2000a888
 8005618:	2000a8f8 	.word	0x2000a8f8
 800561c:	2000a8f0 	.word	0x2000a8f0
 8005620:	2000a88c 	.word	0x2000a88c
 8005624:	51eb851f 	.word	0x51eb851f
 8005628:	2000a884 	.word	0x2000a884

0800562c <frameCreate>:
#include "frame.h"
#include "main.h"


void frameCreate(genericFrame_t* frame)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
	frame->codeFunc = 0;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	701a      	strb	r2, [r3, #0]
	frame->mode = 0;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	705a      	strb	r2, [r3, #1]
	frame->dataSize = 0;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	709a      	strb	r2, [r3, #2]
	frame->data = malloc(MAX_DATA_SIZE);
 8005646:	20fd      	movs	r0, #253	; 0xfd
 8005648:	f002 fecc 	bl	80083e4 <malloc>
 800564c:	4603      	mov	r3, r0
 800564e:	461a      	mov	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8c3 2003 	str.w	r2, [r3, #3]
	memset(frame->data, 0x0, MAX_DATA_SIZE);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8d3 3003 	ldr.w	r3, [r3, #3]
 800565c:	22fd      	movs	r2, #253	; 0xfd
 800565e:	2100      	movs	r1, #0
 8005660:	4618      	mov	r0, r3
 8005662:	f002 feed 	bl	8008440 <memset>
}
 8005666:	bf00      	nop
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <frameDelete>:

void frameDelete(genericFrame_t* frame)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b082      	sub	sp, #8
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
	free(frame->data);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f8d3 3003 	ldr.w	r3, [r3, #3]
 800567c:	4618      	mov	r0, r3
 800567e:	f002 feb9 	bl	80083f4 <free>
}
 8005682:	bf00      	nop
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <serialize>:
{
	memcpy(rawBuffer, (uint8_t*) &frame, rawBuffer[3] + 3);
}

void serialize(const genericFrame_t frame, uint8_t* rawBuffer, uint32_t* rawBufferSize)
{
 800568a:	b590      	push	{r4, r7, lr}
 800568c:	b085      	sub	sp, #20
 800568e:	af00      	add	r7, sp, #0
 8005690:	f107 0408 	add.w	r4, r7, #8
 8005694:	e884 0003 	stmia.w	r4, {r0, r1}
 8005698:	607a      	str	r2, [r7, #4]
 800569a:	603b      	str	r3, [r7, #0]
	rawBuffer[0] = frame.codeFunc;
 800569c:	7a3a      	ldrb	r2, [r7, #8]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	701a      	strb	r2, [r3, #0]
	rawBuffer[1] = frame.mode;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	3301      	adds	r3, #1
 80056a6:	7a7a      	ldrb	r2, [r7, #9]
 80056a8:	701a      	strb	r2, [r3, #0]
	rawBuffer[2] = frame.dataSize;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	3302      	adds	r3, #2
 80056ae:	7aba      	ldrb	r2, [r7, #10]
 80056b0:	701a      	strb	r2, [r3, #0]
	memcpy(&rawBuffer[3], (uint8_t*) frame.data, frame.dataSize);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	3303      	adds	r3, #3
 80056b6:	f8d7 100b 	ldr.w	r1, [r7, #11]
 80056ba:	7aba      	ldrb	r2, [r7, #10]
 80056bc:	4618      	mov	r0, r3
 80056be:	f002 feb1 	bl	8008424 <memcpy>
	*rawBufferSize = 3 + frame.dataSize;
 80056c2:	7abb      	ldrb	r3, [r7, #10]
 80056c4:	3303      	adds	r3, #3
 80056c6:	461a      	mov	r2, r3
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	601a      	str	r2, [r3, #0]
}
 80056cc:	bf00      	nop
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd90      	pop	{r4, r7, pc}

080056d4 <LOG_INFO>:
	memcpy(frame.data, (uint8_t*)&val, sizeof(float));
	LOG(frame);
}

//Fonctionne comme un printf
void LOG_INFO(const char *fmt, ...){
 80056d4:	b40f      	push	{r0, r1, r2, r3}
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b082      	sub	sp, #8
 80056da:	af00      	add	r7, sp, #0
	va_list argp;
    va_start(argp, fmt);
 80056dc:	f107 0314 	add.w	r3, r7, #20
 80056e0:	607b      	str	r3, [r7, #4]
	LOG_TEXT(CODE_FUNC_LOG_INFO, fmt, argp);
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	6939      	ldr	r1, [r7, #16]
 80056e6:	2009      	movs	r0, #9
 80056e8:	f000 f807 	bl	80056fa <LOG_TEXT>
    va_end(argp);
}
 80056ec:	bf00      	nop
 80056ee:	3708      	adds	r7, #8
 80056f0:	46bd      	mov	sp, r7
 80056f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056f6:	b004      	add	sp, #16
 80056f8:	4770      	bx	lr

080056fa <LOG_TEXT>:
    va_start(argp, fmt);
//	LOG_TEXT(CODE_FUNC_LOG_ERROR, val, 4);
    va_end(argp);
}

void LOG_TEXT(uint8_t codeFunc, const char *fmt, va_list arg){
 80056fa:	b580      	push	{r7, lr}
 80056fc:	f5ad 3d80 	sub.w	sp, sp, #65536	; 0x10000
 8005700:	b088      	sub	sp, #32
 8005702:	af00      	add	r7, sp, #0
 8005704:	f107 0320 	add.w	r3, r7, #32
 8005708:	f843 1c18 	str.w	r1, [r3, #-24]
 800570c:	f107 0320 	add.w	r3, r7, #32
 8005710:	f843 2c1c 	str.w	r2, [r3, #-28]
 8005714:	f107 0320 	add.w	r3, r7, #32
 8005718:	4602      	mov	r2, r0
 800571a:	f803 2c11 	strb.w	r2, [r3, #-17]
	genericFrame_t frame;
	frameCreate(&frame); //Allocate Memory
 800571e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8005722:	f103 0310 	add.w	r3, r3, #16
 8005726:	4618      	mov	r0, r3
 8005728:	f7ff ff80 	bl	800562c <frameCreate>

	frame.codeFunc = codeFunc;
 800572c:	f107 0320 	add.w	r3, r7, #32
 8005730:	f813 3c11 	ldrb.w	r3, [r3, #-17]
 8005734:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8005738:	f102 0210 	add.w	r2, r2, #16
 800573c:	7013      	strb	r3, [r2, #0]
	frame.mode = 1;
 800573e:	2301      	movs	r3, #1
 8005740:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8005744:	f102 0211 	add.w	r2, r2, #17
 8005748:	7013      	strb	r3, [r2, #0]

	// build string
	char string[0xFFFF];
	uint16_t stringSize = 0;
 800574a:	2300      	movs	r3, #0
 800574c:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8005750:	f102 021a 	add.w	r2, r2, #26
 8005754:	8013      	strh	r3, [r2, #0]
	stringSize = vsprintf(string,fmt,arg);
 8005756:	f107 0320 	add.w	r3, r7, #32
 800575a:	461a      	mov	r2, r3
 800575c:	f107 0320 	add.w	r3, r7, #32
 8005760:	4619      	mov	r1, r3
 8005762:	f107 0320 	add.w	r3, r7, #32
 8005766:	3b10      	subs	r3, #16
 8005768:	f852 2c1c 	ldr.w	r2, [r2, #-28]
 800576c:	f851 1c18 	ldr.w	r1, [r1, #-24]
 8005770:	4618      	mov	r0, r3
 8005772:	f003 fc8b 	bl	800908c <vsiprintf>
 8005776:	4603      	mov	r3, r0
 8005778:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 800577c:	f102 021a 	add.w	r2, r2, #26
 8005780:	8013      	strh	r3, [r2, #0]

	//Split string in multiple frames if too long
	uint32_t nbCharToSend = stringSize;
 8005782:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8005786:	f103 031a 	add.w	r3, r3, #26
 800578a:	881b      	ldrh	r3, [r3, #0]
 800578c:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8005790:	f102 021c 	add.w	r2, r2, #28
 8005794:	6013      	str	r3, [r2, #0]
	while(nbCharToSend != 0)
 8005796:	e065      	b.n	8005864 <LOG_TEXT+0x16a>
	{
		if(nbCharToSend > MAX_DATA_SIZE)
 8005798:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800579c:	f103 031c 	add.w	r3, r3, #28
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2bfd      	cmp	r3, #253	; 0xfd
 80057a4:	d929      	bls.n	80057fa <LOG_TEXT+0x100>
		{
			memcpy(frame.data, &string[stringSize - nbCharToSend], MAX_DATA_SIZE);
 80057a6:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80057aa:	f103 0313 	add.w	r3, r3, #19
 80057ae:	6818      	ldr	r0, [r3, #0]
 80057b0:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80057b4:	f103 031a 	add.w	r3, r3, #26
 80057b8:	881a      	ldrh	r2, [r3, #0]
 80057ba:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80057be:	f103 031c 	add.w	r3, r3, #28
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	1ad2      	subs	r2, r2, r3
 80057c6:	f107 0320 	add.w	r3, r7, #32
 80057ca:	3b10      	subs	r3, #16
 80057cc:	4413      	add	r3, r2
 80057ce:	22fd      	movs	r2, #253	; 0xfd
 80057d0:	4619      	mov	r1, r3
 80057d2:	f002 fe27 	bl	8008424 <memcpy>
			frame.dataSize = MAX_DATA_SIZE;
 80057d6:	23fd      	movs	r3, #253	; 0xfd
 80057d8:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80057dc:	f102 0212 	add.w	r2, r2, #18
 80057e0:	7013      	strb	r3, [r2, #0]
			nbCharToSend -= MAX_DATA_SIZE;
 80057e2:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80057e6:	f103 031c 	add.w	r3, r3, #28
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	3bfd      	subs	r3, #253	; 0xfd
 80057ee:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80057f2:	f102 021c 	add.w	r2, r2, #28
 80057f6:	6013      	str	r3, [r2, #0]
 80057f8:	e02c      	b.n	8005854 <LOG_TEXT+0x15a>
		}
		else
		{
			memcpy(frame.data, &string[stringSize - nbCharToSend], nbCharToSend);
 80057fa:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80057fe:	f103 0313 	add.w	r3, r3, #19
 8005802:	6818      	ldr	r0, [r3, #0]
 8005804:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8005808:	f103 031a 	add.w	r3, r3, #26
 800580c:	881a      	ldrh	r2, [r3, #0]
 800580e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8005812:	f103 031c 	add.w	r3, r3, #28
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	1ad2      	subs	r2, r2, r3
 800581a:	f107 0320 	add.w	r3, r7, #32
 800581e:	3b10      	subs	r3, #16
 8005820:	4413      	add	r3, r2
 8005822:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8005826:	f102 021c 	add.w	r2, r2, #28
 800582a:	6812      	ldr	r2, [r2, #0]
 800582c:	4619      	mov	r1, r3
 800582e:	f002 fdf9 	bl	8008424 <memcpy>
			frame.dataSize = nbCharToSend;
 8005832:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8005836:	f103 031c 	add.w	r3, r3, #28
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	b2db      	uxtb	r3, r3
 800583e:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8005842:	f102 0212 	add.w	r2, r2, #18
 8005846:	7013      	strb	r3, [r2, #0]
			nbCharToSend = 0;
 8005848:	2300      	movs	r3, #0
 800584a:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 800584e:	f102 021c 	add.w	r2, r2, #28
 8005852:	6013      	str	r3, [r2, #0]
		}
		LOG(frame);
 8005854:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8005858:	f103 0310 	add.w	r3, r3, #16
 800585c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005860:	f000 f80e 	bl	8005880 <LOG>
	while(nbCharToSend != 0)
 8005864:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8005868:	f103 031c 	add.w	r3, r3, #28
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d192      	bne.n	8005798 <LOG_TEXT+0x9e>
	}
}
 8005872:	bf00      	nop
 8005874:	bf00      	nop
 8005876:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800587a:	3720      	adds	r7, #32
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <LOG>:

void LOG(const genericFrame_t frame)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	463b      	mov	r3, r7
 8005888:	e883 0003 	stmia.w	r3, {r0, r1}
	xbee_sendFrame(frame);
 800588c:	463b      	mov	r3, r7
 800588e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005892:	f7ff fcf5 	bl	8005280 <xbee_sendFrame>
}
 8005896:	bf00      	nop
 8005898:	3708      	adds	r7, #8
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800589e:	b480      	push	{r7}
 80058a0:	b085      	sub	sp, #20
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	4603      	mov	r3, r0
 80058a6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80058a8:	2300      	movs	r3, #0
 80058aa:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80058ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058b0:	2b84      	cmp	r3, #132	; 0x84
 80058b2:	d005      	beq.n	80058c0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80058b4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4413      	add	r3, r2
 80058bc:	3303      	adds	r3, #3
 80058be:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80058c0:	68fb      	ldr	r3, [r7, #12]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80058ce:	b480      	push	{r7}
 80058d0:	b083      	sub	sp, #12
 80058d2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058d4:	f3ef 8305 	mrs	r3, IPSR
 80058d8:	607b      	str	r3, [r7, #4]
  return(result);
 80058da:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80058dc:	2b00      	cmp	r3, #0
 80058de:	bf14      	ite	ne
 80058e0:	2301      	movne	r3, #1
 80058e2:	2300      	moveq	r3, #0
 80058e4:	b2db      	uxtb	r3, r3
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80058f6:	f001 f9e7 	bl	8006cc8 <vTaskStartScheduler>
  
  return osOK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	bd80      	pop	{r7, pc}

08005900 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005902:	b089      	sub	sp, #36	; 0x24
 8005904:	af04      	add	r7, sp, #16
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d020      	beq.n	8005954 <osThreadCreate+0x54>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d01c      	beq.n	8005954 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685c      	ldr	r4, [r3, #4]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681d      	ldr	r5, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	691e      	ldr	r6, [r3, #16]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800592c:	4618      	mov	r0, r3
 800592e:	f7ff ffb6 	bl	800589e <makeFreeRtosPriority>
 8005932:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800593c:	9202      	str	r2, [sp, #8]
 800593e:	9301      	str	r3, [sp, #4]
 8005940:	9100      	str	r1, [sp, #0]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	4632      	mov	r2, r6
 8005946:	4629      	mov	r1, r5
 8005948:	4620      	mov	r0, r4
 800594a:	f000 ff4f 	bl	80067ec <xTaskCreateStatic>
 800594e:	4603      	mov	r3, r0
 8005950:	60fb      	str	r3, [r7, #12]
 8005952:	e01c      	b.n	800598e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685c      	ldr	r4, [r3, #4]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005960:	b29e      	uxth	r6, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005968:	4618      	mov	r0, r3
 800596a:	f7ff ff98 	bl	800589e <makeFreeRtosPriority>
 800596e:	4602      	mov	r2, r0
 8005970:	f107 030c 	add.w	r3, r7, #12
 8005974:	9301      	str	r3, [sp, #4]
 8005976:	9200      	str	r2, [sp, #0]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	4632      	mov	r2, r6
 800597c:	4629      	mov	r1, r5
 800597e:	4620      	mov	r0, r4
 8005980:	f000 ff91 	bl	80068a6 <xTaskCreate>
 8005984:	4603      	mov	r3, r0
 8005986:	2b01      	cmp	r3, #1
 8005988:	d001      	beq.n	800598e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800598a:	2300      	movs	r3, #0
 800598c:	e000      	b.n	8005990 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800598e:	68fb      	ldr	r3, [r7, #12]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005998 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d001      	beq.n	80059ae <osDelay+0x16>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	e000      	b.n	80059b0 <osDelay+0x18>
 80059ae:	2301      	movs	r3, #1
 80059b0:	4618      	mov	r0, r3
 80059b2:	f001 f955 	bl	8006c60 <vTaskDelay>
  
  return osOK;
 80059b6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d007      	beq.n	80059e0 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	4619      	mov	r1, r3
 80059d6:	2001      	movs	r0, #1
 80059d8:	f000 faad 	bl	8005f36 <xQueueCreateMutexStatic>
 80059dc:	4603      	mov	r3, r0
 80059de:	e003      	b.n	80059e8 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80059e0:	2001      	movs	r0, #1
 80059e2:	f000 fa90 	bl	8005f06 <xQueueCreateMutex>
 80059e6:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3708      	adds	r7, #8
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80059fa:	2300      	movs	r3, #0
 80059fc:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d101      	bne.n	8005a08 <osMutexWait+0x18>
    return osErrorParameter;
 8005a04:	2380      	movs	r3, #128	; 0x80
 8005a06:	e03a      	b.n	8005a7e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a12:	d103      	bne.n	8005a1c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005a14:	f04f 33ff 	mov.w	r3, #4294967295
 8005a18:	60fb      	str	r3, [r7, #12]
 8005a1a:	e009      	b.n	8005a30 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d006      	beq.n	8005a30 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <osMutexWait+0x40>
      ticks = 1;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005a30:	f7ff ff4d 	bl	80058ce <inHandlerMode>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d017      	beq.n	8005a6a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005a3a:	f107 0308 	add.w	r3, r7, #8
 8005a3e:	461a      	mov	r2, r3
 8005a40:	2100      	movs	r1, #0
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fd2a 	bl	800649c <xQueueReceiveFromISR>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d001      	beq.n	8005a52 <osMutexWait+0x62>
      return osErrorOS;
 8005a4e:	23ff      	movs	r3, #255	; 0xff
 8005a50:	e015      	b.n	8005a7e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d011      	beq.n	8005a7c <osMutexWait+0x8c>
 8005a58:	4b0b      	ldr	r3, [pc, #44]	; (8005a88 <osMutexWait+0x98>)
 8005a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a5e:	601a      	str	r2, [r3, #0]
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	e008      	b.n	8005a7c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005a6a:	68f9      	ldr	r1, [r7, #12]
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 fc09 	bl	8006284 <xQueueSemaphoreTake>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d001      	beq.n	8005a7c <osMutexWait+0x8c>
    return osErrorOS;
 8005a78:	23ff      	movs	r3, #255	; 0xff
 8005a7a:	e000      	b.n	8005a7e <osMutexWait+0x8e>
  }
  
  return osOK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	e000ed04 	.word	0xe000ed04

08005a8c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005a94:	2300      	movs	r3, #0
 8005a96:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005a9c:	f7ff ff17 	bl	80058ce <inHandlerMode>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d016      	beq.n	8005ad4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005aa6:	f107 0308 	add.w	r3, r7, #8
 8005aaa:	4619      	mov	r1, r3
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 fb5b 	bl	8006168 <xQueueGiveFromISR>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d001      	beq.n	8005abc <osMutexRelease+0x30>
      return osErrorOS;
 8005ab8:	23ff      	movs	r3, #255	; 0xff
 8005aba:	e017      	b.n	8005aec <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d013      	beq.n	8005aea <osMutexRelease+0x5e>
 8005ac2:	4b0c      	ldr	r3, [pc, #48]	; (8005af4 <osMutexRelease+0x68>)
 8005ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ac8:	601a      	str	r2, [r3, #0]
 8005aca:	f3bf 8f4f 	dsb	sy
 8005ace:	f3bf 8f6f 	isb	sy
 8005ad2:	e00a      	b.n	8005aea <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	2100      	movs	r1, #0
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fa46 	bl	8005f6c <xQueueGenericSend>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d001      	beq.n	8005aea <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005ae6:	23ff      	movs	r3, #255	; 0xff
 8005ae8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005aea:	68fb      	ldr	r3, [r7, #12]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	e000ed04 	.word	0xe000ed04

08005af8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f103 0208 	add.w	r2, r3, #8
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f103 0208 	add.w	r2, r3, #8
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f103 0208 	add.w	r2, r3, #8
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b46:	bf00      	nop
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b52:	b480      	push	{r7}
 8005b54:	b085      	sub	sp, #20
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
 8005b5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	689a      	ldr	r2, [r3, #8]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	1c5a      	adds	r2, r3, #1
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	601a      	str	r2, [r3, #0]
}
 8005b8e:	bf00      	nop
 8005b90:	3714      	adds	r7, #20
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b085      	sub	sp, #20
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb0:	d103      	bne.n	8005bba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	60fb      	str	r3, [r7, #12]
 8005bb8:	e00c      	b.n	8005bd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	3308      	adds	r3, #8
 8005bbe:	60fb      	str	r3, [r7, #12]
 8005bc0:	e002      	b.n	8005bc8 <vListInsert+0x2e>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d2f6      	bcs.n	8005bc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	1c5a      	adds	r2, r3, #1
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	601a      	str	r2, [r3, #0]
}
 8005c00:	bf00      	nop
 8005c02:	3714      	adds	r7, #20
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	6892      	ldr	r2, [r2, #8]
 8005c22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	6852      	ldr	r2, [r2, #4]
 8005c2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d103      	bne.n	8005c40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689a      	ldr	r2, [r3, #8]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	1e5a      	subs	r2, r3, #1
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10a      	bne.n	8005c8a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c78:	f383 8811 	msr	BASEPRI, r3
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005c86:	bf00      	nop
 8005c88:	e7fe      	b.n	8005c88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005c8a:	f001 ff7b 	bl	8007b84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c96:	68f9      	ldr	r1, [r7, #12]
 8005c98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c9a:	fb01 f303 	mul.w	r3, r1, r3
 8005c9e:	441a      	add	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	68f9      	ldr	r1, [r7, #12]
 8005cbe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005cc0:	fb01 f303 	mul.w	r3, r1, r3
 8005cc4:	441a      	add	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	22ff      	movs	r2, #255	; 0xff
 8005cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	22ff      	movs	r2, #255	; 0xff
 8005cd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d114      	bne.n	8005d0a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d01a      	beq.n	8005d1e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	3310      	adds	r3, #16
 8005cec:	4618      	mov	r0, r3
 8005cee:	f001 fa3d 	bl	800716c <xTaskRemoveFromEventList>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d012      	beq.n	8005d1e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005cf8:	4b0c      	ldr	r3, [pc, #48]	; (8005d2c <xQueueGenericReset+0xcc>)
 8005cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cfe:	601a      	str	r2, [r3, #0]
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	f3bf 8f6f 	isb	sy
 8005d08:	e009      	b.n	8005d1e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	3310      	adds	r3, #16
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7ff fef2 	bl	8005af8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	3324      	adds	r3, #36	; 0x24
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7ff feed 	bl	8005af8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005d1e:	f001 ff61 	bl	8007be4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005d22:	2301      	movs	r3, #1
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	e000ed04 	.word	0xe000ed04

08005d30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b08e      	sub	sp, #56	; 0x38
 8005d34:	af02      	add	r7, sp, #8
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
 8005d3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10a      	bne.n	8005d5a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d48:	f383 8811 	msr	BASEPRI, r3
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f3bf 8f4f 	dsb	sy
 8005d54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d56:	bf00      	nop
 8005d58:	e7fe      	b.n	8005d58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10a      	bne.n	8005d76 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d72:	bf00      	nop
 8005d74:	e7fe      	b.n	8005d74 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d002      	beq.n	8005d82 <xQueueGenericCreateStatic+0x52>
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d001      	beq.n	8005d86 <xQueueGenericCreateStatic+0x56>
 8005d82:	2301      	movs	r3, #1
 8005d84:	e000      	b.n	8005d88 <xQueueGenericCreateStatic+0x58>
 8005d86:	2300      	movs	r3, #0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10a      	bne.n	8005da2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d90:	f383 8811 	msr	BASEPRI, r3
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	623b      	str	r3, [r7, #32]
}
 8005d9e:	bf00      	nop
 8005da0:	e7fe      	b.n	8005da0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d102      	bne.n	8005dae <xQueueGenericCreateStatic+0x7e>
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <xQueueGenericCreateStatic+0x82>
 8005dae:	2301      	movs	r3, #1
 8005db0:	e000      	b.n	8005db4 <xQueueGenericCreateStatic+0x84>
 8005db2:	2300      	movs	r3, #0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10a      	bne.n	8005dce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbc:	f383 8811 	msr	BASEPRI, r3
 8005dc0:	f3bf 8f6f 	isb	sy
 8005dc4:	f3bf 8f4f 	dsb	sy
 8005dc8:	61fb      	str	r3, [r7, #28]
}
 8005dca:	bf00      	nop
 8005dcc:	e7fe      	b.n	8005dcc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005dce:	2348      	movs	r3, #72	; 0x48
 8005dd0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2b48      	cmp	r3, #72	; 0x48
 8005dd6:	d00a      	beq.n	8005dee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ddc:	f383 8811 	msr	BASEPRI, r3
 8005de0:	f3bf 8f6f 	isb	sy
 8005de4:	f3bf 8f4f 	dsb	sy
 8005de8:	61bb      	str	r3, [r7, #24]
}
 8005dea:	bf00      	nop
 8005dec:	e7fe      	b.n	8005dec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005dee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00d      	beq.n	8005e16 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e02:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	68b9      	ldr	r1, [r7, #8]
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f000 f83f 	bl	8005e94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3730      	adds	r7, #48	; 0x30
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b08a      	sub	sp, #40	; 0x28
 8005e24:	af02      	add	r7, sp, #8
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10a      	bne.n	8005e4a <xQueueGenericCreate+0x2a>
	__asm volatile
 8005e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e38:	f383 8811 	msr	BASEPRI, r3
 8005e3c:	f3bf 8f6f 	isb	sy
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	613b      	str	r3, [r7, #16]
}
 8005e46:	bf00      	nop
 8005e48:	e7fe      	b.n	8005e48 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	68ba      	ldr	r2, [r7, #8]
 8005e4e:	fb02 f303 	mul.w	r3, r2, r3
 8005e52:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	3348      	adds	r3, #72	; 0x48
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f001 ffb5 	bl	8007dc8 <pvPortMalloc>
 8005e5e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d011      	beq.n	8005e8a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	3348      	adds	r3, #72	; 0x48
 8005e6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e78:	79fa      	ldrb	r2, [r7, #7]
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	9300      	str	r3, [sp, #0]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	68b9      	ldr	r1, [r7, #8]
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f000 f805 	bl	8005e94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e8a:	69bb      	ldr	r3, [r7, #24]
	}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3720      	adds	r7, #32
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
 8005ea0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d103      	bne.n	8005eb0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	69ba      	ldr	r2, [r7, #24]
 8005eac:	601a      	str	r2, [r3, #0]
 8005eae:	e002      	b.n	8005eb6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005ec2:	2101      	movs	r1, #1
 8005ec4:	69b8      	ldr	r0, [r7, #24]
 8005ec6:	f7ff fecb 	bl	8005c60 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005eca:	bf00      	nop
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b082      	sub	sp, #8
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00e      	beq.n	8005efe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 f837 	bl	8005f6c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005efe:	bf00      	nop
 8005f00:	3708      	adds	r7, #8
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b086      	sub	sp, #24
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005f10:	2301      	movs	r3, #1
 8005f12:	617b      	str	r3, [r7, #20]
 8005f14:	2300      	movs	r3, #0
 8005f16:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005f18:	79fb      	ldrb	r3, [r7, #7]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	6939      	ldr	r1, [r7, #16]
 8005f1e:	6978      	ldr	r0, [r7, #20]
 8005f20:	f7ff ff7e 	bl	8005e20 <xQueueGenericCreate>
 8005f24:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f7ff ffd3 	bl	8005ed2 <prvInitialiseMutex>

		return xNewQueue;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
	}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3718      	adds	r7, #24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b088      	sub	sp, #32
 8005f3a:	af02      	add	r7, sp, #8
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	6039      	str	r1, [r7, #0]
 8005f40:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005f42:	2301      	movs	r3, #1
 8005f44:	617b      	str	r3, [r7, #20]
 8005f46:	2300      	movs	r3, #0
 8005f48:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005f4a:	79fb      	ldrb	r3, [r7, #7]
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	2200      	movs	r2, #0
 8005f52:	6939      	ldr	r1, [r7, #16]
 8005f54:	6978      	ldr	r0, [r7, #20]
 8005f56:	f7ff feeb 	bl	8005d30 <xQueueGenericCreateStatic>
 8005f5a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f7ff ffb8 	bl	8005ed2 <prvInitialiseMutex>

		return xNewQueue;
 8005f62:	68fb      	ldr	r3, [r7, #12]
	}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3718      	adds	r7, #24
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b08e      	sub	sp, #56	; 0x38
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
 8005f78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10a      	bne.n	8005f9e <xQueueGenericSend+0x32>
	__asm volatile
 8005f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8c:	f383 8811 	msr	BASEPRI, r3
 8005f90:	f3bf 8f6f 	isb	sy
 8005f94:	f3bf 8f4f 	dsb	sy
 8005f98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f9a:	bf00      	nop
 8005f9c:	e7fe      	b.n	8005f9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d103      	bne.n	8005fac <xQueueGenericSend+0x40>
 8005fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d101      	bne.n	8005fb0 <xQueueGenericSend+0x44>
 8005fac:	2301      	movs	r3, #1
 8005fae:	e000      	b.n	8005fb2 <xQueueGenericSend+0x46>
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10a      	bne.n	8005fcc <xQueueGenericSend+0x60>
	__asm volatile
 8005fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fba:	f383 8811 	msr	BASEPRI, r3
 8005fbe:	f3bf 8f6f 	isb	sy
 8005fc2:	f3bf 8f4f 	dsb	sy
 8005fc6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005fc8:	bf00      	nop
 8005fca:	e7fe      	b.n	8005fca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d103      	bne.n	8005fda <xQueueGenericSend+0x6e>
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d101      	bne.n	8005fde <xQueueGenericSend+0x72>
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e000      	b.n	8005fe0 <xQueueGenericSend+0x74>
 8005fde:	2300      	movs	r3, #0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10a      	bne.n	8005ffa <xQueueGenericSend+0x8e>
	__asm volatile
 8005fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe8:	f383 8811 	msr	BASEPRI, r3
 8005fec:	f3bf 8f6f 	isb	sy
 8005ff0:	f3bf 8f4f 	dsb	sy
 8005ff4:	623b      	str	r3, [r7, #32]
}
 8005ff6:	bf00      	nop
 8005ff8:	e7fe      	b.n	8005ff8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ffa:	f001 fa77 	bl	80074ec <xTaskGetSchedulerState>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d102      	bne.n	800600a <xQueueGenericSend+0x9e>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d101      	bne.n	800600e <xQueueGenericSend+0xa2>
 800600a:	2301      	movs	r3, #1
 800600c:	e000      	b.n	8006010 <xQueueGenericSend+0xa4>
 800600e:	2300      	movs	r3, #0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10a      	bne.n	800602a <xQueueGenericSend+0xbe>
	__asm volatile
 8006014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006018:	f383 8811 	msr	BASEPRI, r3
 800601c:	f3bf 8f6f 	isb	sy
 8006020:	f3bf 8f4f 	dsb	sy
 8006024:	61fb      	str	r3, [r7, #28]
}
 8006026:	bf00      	nop
 8006028:	e7fe      	b.n	8006028 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800602a:	f001 fdab 	bl	8007b84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800602e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006036:	429a      	cmp	r2, r3
 8006038:	d302      	bcc.n	8006040 <xQueueGenericSend+0xd4>
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	2b02      	cmp	r3, #2
 800603e:	d129      	bne.n	8006094 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	68b9      	ldr	r1, [r7, #8]
 8006044:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006046:	f000 fac1 	bl	80065cc <prvCopyDataToQueue>
 800604a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800604c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	2b00      	cmp	r3, #0
 8006052:	d010      	beq.n	8006076 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006056:	3324      	adds	r3, #36	; 0x24
 8006058:	4618      	mov	r0, r3
 800605a:	f001 f887 	bl	800716c <xTaskRemoveFromEventList>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d013      	beq.n	800608c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006064:	4b3f      	ldr	r3, [pc, #252]	; (8006164 <xQueueGenericSend+0x1f8>)
 8006066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800606a:	601a      	str	r2, [r3, #0]
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	f3bf 8f6f 	isb	sy
 8006074:	e00a      	b.n	800608c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006078:	2b00      	cmp	r3, #0
 800607a:	d007      	beq.n	800608c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800607c:	4b39      	ldr	r3, [pc, #228]	; (8006164 <xQueueGenericSend+0x1f8>)
 800607e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	f3bf 8f4f 	dsb	sy
 8006088:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800608c:	f001 fdaa 	bl	8007be4 <vPortExitCritical>
				return pdPASS;
 8006090:	2301      	movs	r3, #1
 8006092:	e063      	b.n	800615c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d103      	bne.n	80060a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800609a:	f001 fda3 	bl	8007be4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800609e:	2300      	movs	r3, #0
 80060a0:	e05c      	b.n	800615c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80060a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d106      	bne.n	80060b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80060a8:	f107 0314 	add.w	r3, r7, #20
 80060ac:	4618      	mov	r0, r3
 80060ae:	f001 f8bf 	bl	8007230 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060b2:	2301      	movs	r3, #1
 80060b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060b6:	f001 fd95 	bl	8007be4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060ba:	f000 fe6f 	bl	8006d9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060be:	f001 fd61 	bl	8007b84 <vPortEnterCritical>
 80060c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060c8:	b25b      	sxtb	r3, r3
 80060ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ce:	d103      	bne.n	80060d8 <xQueueGenericSend+0x16c>
 80060d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060de:	b25b      	sxtb	r3, r3
 80060e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e4:	d103      	bne.n	80060ee <xQueueGenericSend+0x182>
 80060e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060ee:	f001 fd79 	bl	8007be4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060f2:	1d3a      	adds	r2, r7, #4
 80060f4:	f107 0314 	add.w	r3, r7, #20
 80060f8:	4611      	mov	r1, r2
 80060fa:	4618      	mov	r0, r3
 80060fc:	f001 f8ae 	bl	800725c <xTaskCheckForTimeOut>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d124      	bne.n	8006150 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006106:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006108:	f000 fb58 	bl	80067bc <prvIsQueueFull>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d018      	beq.n	8006144 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006114:	3310      	adds	r3, #16
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	4611      	mov	r1, r2
 800611a:	4618      	mov	r0, r3
 800611c:	f001 f802 	bl	8007124 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006120:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006122:	f000 fae3 	bl	80066ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006126:	f000 fe47 	bl	8006db8 <xTaskResumeAll>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	f47f af7c 	bne.w	800602a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006132:	4b0c      	ldr	r3, [pc, #48]	; (8006164 <xQueueGenericSend+0x1f8>)
 8006134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006138:	601a      	str	r2, [r3, #0]
 800613a:	f3bf 8f4f 	dsb	sy
 800613e:	f3bf 8f6f 	isb	sy
 8006142:	e772      	b.n	800602a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006144:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006146:	f000 fad1 	bl	80066ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800614a:	f000 fe35 	bl	8006db8 <xTaskResumeAll>
 800614e:	e76c      	b.n	800602a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006150:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006152:	f000 facb 	bl	80066ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006156:	f000 fe2f 	bl	8006db8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800615a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800615c:	4618      	mov	r0, r3
 800615e:	3738      	adds	r7, #56	; 0x38
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	e000ed04 	.word	0xe000ed04

08006168 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b08e      	sub	sp, #56	; 0x38
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006178:	2b00      	cmp	r3, #0
 800617a:	d10a      	bne.n	8006192 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800617c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006180:	f383 8811 	msr	BASEPRI, r3
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	623b      	str	r3, [r7, #32]
}
 800618e:	bf00      	nop
 8006190:	e7fe      	b.n	8006190 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00a      	beq.n	80061b0 <xQueueGiveFromISR+0x48>
	__asm volatile
 800619a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	61fb      	str	r3, [r7, #28]
}
 80061ac:	bf00      	nop
 80061ae:	e7fe      	b.n	80061ae <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80061b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d103      	bne.n	80061c0 <xQueueGiveFromISR+0x58>
 80061b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d101      	bne.n	80061c4 <xQueueGiveFromISR+0x5c>
 80061c0:	2301      	movs	r3, #1
 80061c2:	e000      	b.n	80061c6 <xQueueGiveFromISR+0x5e>
 80061c4:	2300      	movs	r3, #0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10a      	bne.n	80061e0 <xQueueGiveFromISR+0x78>
	__asm volatile
 80061ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	61bb      	str	r3, [r7, #24]
}
 80061dc:	bf00      	nop
 80061de:	e7fe      	b.n	80061de <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80061e0:	f001 fdb2 	bl	8007d48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80061e4:	f3ef 8211 	mrs	r2, BASEPRI
 80061e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ec:	f383 8811 	msr	BASEPRI, r3
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	617a      	str	r2, [r7, #20]
 80061fa:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80061fc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80061fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006204:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800620a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800620c:	429a      	cmp	r2, r3
 800620e:	d22b      	bcs.n	8006268 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006212:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800621a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621c:	1c5a      	adds	r2, r3, #1
 800621e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006220:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006222:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622a:	d112      	bne.n	8006252 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800622c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006230:	2b00      	cmp	r3, #0
 8006232:	d016      	beq.n	8006262 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006236:	3324      	adds	r3, #36	; 0x24
 8006238:	4618      	mov	r0, r3
 800623a:	f000 ff97 	bl	800716c <xTaskRemoveFromEventList>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00e      	beq.n	8006262 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00b      	beq.n	8006262 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2201      	movs	r2, #1
 800624e:	601a      	str	r2, [r3, #0]
 8006250:	e007      	b.n	8006262 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006252:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006256:	3301      	adds	r3, #1
 8006258:	b2db      	uxtb	r3, r3
 800625a:	b25a      	sxtb	r2, r3
 800625c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006262:	2301      	movs	r3, #1
 8006264:	637b      	str	r3, [r7, #52]	; 0x34
 8006266:	e001      	b.n	800626c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006268:	2300      	movs	r3, #0
 800626a:	637b      	str	r3, [r7, #52]	; 0x34
 800626c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006276:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800627a:	4618      	mov	r0, r3
 800627c:	3738      	adds	r7, #56	; 0x38
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
	...

08006284 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b08e      	sub	sp, #56	; 0x38
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800628e:	2300      	movs	r3, #0
 8006290:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006296:	2300      	movs	r3, #0
 8006298:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800629a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10a      	bne.n	80062b6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80062a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	623b      	str	r3, [r7, #32]
}
 80062b2:	bf00      	nop
 80062b4:	e7fe      	b.n	80062b4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80062b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00a      	beq.n	80062d4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80062be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c2:	f383 8811 	msr	BASEPRI, r3
 80062c6:	f3bf 8f6f 	isb	sy
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	61fb      	str	r3, [r7, #28]
}
 80062d0:	bf00      	nop
 80062d2:	e7fe      	b.n	80062d2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062d4:	f001 f90a 	bl	80074ec <xTaskGetSchedulerState>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d102      	bne.n	80062e4 <xQueueSemaphoreTake+0x60>
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d101      	bne.n	80062e8 <xQueueSemaphoreTake+0x64>
 80062e4:	2301      	movs	r3, #1
 80062e6:	e000      	b.n	80062ea <xQueueSemaphoreTake+0x66>
 80062e8:	2300      	movs	r3, #0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10a      	bne.n	8006304 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	61bb      	str	r3, [r7, #24]
}
 8006300:	bf00      	nop
 8006302:	e7fe      	b.n	8006302 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006304:	f001 fc3e 	bl	8007b84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800630e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006310:	2b00      	cmp	r3, #0
 8006312:	d024      	beq.n	800635e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006316:	1e5a      	subs	r2, r3, #1
 8006318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800631c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d104      	bne.n	800632e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006324:	f001 fa8a 	bl	800783c <pvTaskIncrementMutexHeldCount>
 8006328:	4602      	mov	r2, r0
 800632a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800632e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00f      	beq.n	8006356 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006338:	3310      	adds	r3, #16
 800633a:	4618      	mov	r0, r3
 800633c:	f000 ff16 	bl	800716c <xTaskRemoveFromEventList>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d007      	beq.n	8006356 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006346:	4b54      	ldr	r3, [pc, #336]	; (8006498 <xQueueSemaphoreTake+0x214>)
 8006348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800634c:	601a      	str	r2, [r3, #0]
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006356:	f001 fc45 	bl	8007be4 <vPortExitCritical>
				return pdPASS;
 800635a:	2301      	movs	r3, #1
 800635c:	e097      	b.n	800648e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d111      	bne.n	8006388 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00a      	beq.n	8006380 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800636a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	617b      	str	r3, [r7, #20]
}
 800637c:	bf00      	nop
 800637e:	e7fe      	b.n	800637e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006380:	f001 fc30 	bl	8007be4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006384:	2300      	movs	r3, #0
 8006386:	e082      	b.n	800648e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800638a:	2b00      	cmp	r3, #0
 800638c:	d106      	bne.n	800639c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800638e:	f107 030c 	add.w	r3, r7, #12
 8006392:	4618      	mov	r0, r3
 8006394:	f000 ff4c 	bl	8007230 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006398:	2301      	movs	r3, #1
 800639a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800639c:	f001 fc22 	bl	8007be4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063a0:	f000 fcfc 	bl	8006d9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063a4:	f001 fbee 	bl	8007b84 <vPortEnterCritical>
 80063a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063ae:	b25b      	sxtb	r3, r3
 80063b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b4:	d103      	bne.n	80063be <xQueueSemaphoreTake+0x13a>
 80063b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063c4:	b25b      	sxtb	r3, r3
 80063c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ca:	d103      	bne.n	80063d4 <xQueueSemaphoreTake+0x150>
 80063cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063d4:	f001 fc06 	bl	8007be4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063d8:	463a      	mov	r2, r7
 80063da:	f107 030c 	add.w	r3, r7, #12
 80063de:	4611      	mov	r1, r2
 80063e0:	4618      	mov	r0, r3
 80063e2:	f000 ff3b 	bl	800725c <xTaskCheckForTimeOut>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d132      	bne.n	8006452 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063ee:	f000 f9cf 	bl	8006790 <prvIsQueueEmpty>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d026      	beq.n	8006446 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d109      	bne.n	8006414 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006400:	f001 fbc0 	bl	8007b84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	4618      	mov	r0, r3
 800640a:	f001 f88d 	bl	8007528 <xTaskPriorityInherit>
 800640e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006410:	f001 fbe8 	bl	8007be4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006416:	3324      	adds	r3, #36	; 0x24
 8006418:	683a      	ldr	r2, [r7, #0]
 800641a:	4611      	mov	r1, r2
 800641c:	4618      	mov	r0, r3
 800641e:	f000 fe81 	bl	8007124 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006422:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006424:	f000 f962 	bl	80066ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006428:	f000 fcc6 	bl	8006db8 <xTaskResumeAll>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	f47f af68 	bne.w	8006304 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006434:	4b18      	ldr	r3, [pc, #96]	; (8006498 <xQueueSemaphoreTake+0x214>)
 8006436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800643a:	601a      	str	r2, [r3, #0]
 800643c:	f3bf 8f4f 	dsb	sy
 8006440:	f3bf 8f6f 	isb	sy
 8006444:	e75e      	b.n	8006304 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006446:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006448:	f000 f950 	bl	80066ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800644c:	f000 fcb4 	bl	8006db8 <xTaskResumeAll>
 8006450:	e758      	b.n	8006304 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006452:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006454:	f000 f94a 	bl	80066ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006458:	f000 fcae 	bl	8006db8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800645c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800645e:	f000 f997 	bl	8006790 <prvIsQueueEmpty>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	f43f af4d 	beq.w	8006304 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800646a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00d      	beq.n	800648c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006470:	f001 fb88 	bl	8007b84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006474:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006476:	f000 f891 	bl	800659c <prvGetDisinheritPriorityAfterTimeout>
 800647a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800647c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006482:	4618      	mov	r0, r3
 8006484:	f001 f94c 	bl	8007720 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006488:	f001 fbac 	bl	8007be4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800648c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800648e:	4618      	mov	r0, r3
 8006490:	3738      	adds	r7, #56	; 0x38
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	e000ed04 	.word	0xe000ed04

0800649c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b08e      	sub	sp, #56	; 0x38
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80064ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10a      	bne.n	80064c8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80064b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b6:	f383 8811 	msr	BASEPRI, r3
 80064ba:	f3bf 8f6f 	isb	sy
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	623b      	str	r3, [r7, #32]
}
 80064c4:	bf00      	nop
 80064c6:	e7fe      	b.n	80064c6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d103      	bne.n	80064d6 <xQueueReceiveFromISR+0x3a>
 80064ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <xQueueReceiveFromISR+0x3e>
 80064d6:	2301      	movs	r3, #1
 80064d8:	e000      	b.n	80064dc <xQueueReceiveFromISR+0x40>
 80064da:	2300      	movs	r3, #0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10a      	bne.n	80064f6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	61fb      	str	r3, [r7, #28]
}
 80064f2:	bf00      	nop
 80064f4:	e7fe      	b.n	80064f4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064f6:	f001 fc27 	bl	8007d48 <vPortValidateInterruptPriority>
	__asm volatile
 80064fa:	f3ef 8211 	mrs	r2, BASEPRI
 80064fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	61ba      	str	r2, [r7, #24]
 8006510:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006512:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006514:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800651c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651e:	2b00      	cmp	r3, #0
 8006520:	d02f      	beq.n	8006582 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006524:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006528:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800652c:	68b9      	ldr	r1, [r7, #8]
 800652e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006530:	f000 f8b6 	bl	80066a0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006536:	1e5a      	subs	r2, r3, #1
 8006538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800653c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006544:	d112      	bne.n	800656c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d016      	beq.n	800657c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800654e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006550:	3310      	adds	r3, #16
 8006552:	4618      	mov	r0, r3
 8006554:	f000 fe0a 	bl	800716c <xTaskRemoveFromEventList>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00e      	beq.n	800657c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00b      	beq.n	800657c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	601a      	str	r2, [r3, #0]
 800656a:	e007      	b.n	800657c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800656c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006570:	3301      	adds	r3, #1
 8006572:	b2db      	uxtb	r3, r3
 8006574:	b25a      	sxtb	r2, r3
 8006576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800657c:	2301      	movs	r3, #1
 800657e:	637b      	str	r3, [r7, #52]	; 0x34
 8006580:	e001      	b.n	8006586 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006582:	2300      	movs	r3, #0
 8006584:	637b      	str	r3, [r7, #52]	; 0x34
 8006586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006588:	613b      	str	r3, [r7, #16]
	__asm volatile
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	f383 8811 	msr	BASEPRI, r3
}
 8006590:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006594:	4618      	mov	r0, r3
 8006596:	3738      	adds	r7, #56	; 0x38
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d006      	beq.n	80065ba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f1c3 0307 	rsb	r3, r3, #7
 80065b6:	60fb      	str	r3, [r7, #12]
 80065b8:	e001      	b.n	80065be <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80065ba:	2300      	movs	r3, #0
 80065bc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80065be:	68fb      	ldr	r3, [r7, #12]
	}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80065d8:	2300      	movs	r3, #0
 80065da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10d      	bne.n	8006606 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d14d      	bne.n	800668e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	4618      	mov	r0, r3
 80065f8:	f001 f80c 	bl	8007614 <xTaskPriorityDisinherit>
 80065fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	609a      	str	r2, [r3, #8]
 8006604:	e043      	b.n	800668e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d119      	bne.n	8006640 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6858      	ldr	r0, [r3, #4]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006614:	461a      	mov	r2, r3
 8006616:	68b9      	ldr	r1, [r7, #8]
 8006618:	f001 ff04 	bl	8008424 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006624:	441a      	add	r2, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	685a      	ldr	r2, [r3, #4]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	429a      	cmp	r2, r3
 8006634:	d32b      	bcc.n	800668e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	605a      	str	r2, [r3, #4]
 800663e:	e026      	b.n	800668e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	68d8      	ldr	r0, [r3, #12]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006648:	461a      	mov	r2, r3
 800664a:	68b9      	ldr	r1, [r7, #8]
 800664c:	f001 feea 	bl	8008424 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	68da      	ldr	r2, [r3, #12]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006658:	425b      	negs	r3, r3
 800665a:	441a      	add	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	68da      	ldr	r2, [r3, #12]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	429a      	cmp	r2, r3
 800666a:	d207      	bcs.n	800667c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	689a      	ldr	r2, [r3, #8]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006674:	425b      	negs	r3, r3
 8006676:	441a      	add	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b02      	cmp	r3, #2
 8006680:	d105      	bne.n	800668e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d002      	beq.n	800668e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	3b01      	subs	r3, #1
 800668c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	1c5a      	adds	r2, r3, #1
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006696:	697b      	ldr	r3, [r7, #20]
}
 8006698:	4618      	mov	r0, r3
 800669a:	3718      	adds	r7, #24
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d018      	beq.n	80066e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	68da      	ldr	r2, [r3, #12]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ba:	441a      	add	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	68da      	ldr	r2, [r3, #12]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d303      	bcc.n	80066d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	68d9      	ldr	r1, [r3, #12]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066dc:	461a      	mov	r2, r3
 80066de:	6838      	ldr	r0, [r7, #0]
 80066e0:	f001 fea0 	bl	8008424 <memcpy>
	}
}
 80066e4:	bf00      	nop
 80066e6:	3708      	adds	r7, #8
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80066f4:	f001 fa46 	bl	8007b84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006700:	e011      	b.n	8006726 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006706:	2b00      	cmp	r3, #0
 8006708:	d012      	beq.n	8006730 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	3324      	adds	r3, #36	; 0x24
 800670e:	4618      	mov	r0, r3
 8006710:	f000 fd2c 	bl	800716c <xTaskRemoveFromEventList>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800671a:	f000 fe01 	bl	8007320 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800671e:	7bfb      	ldrb	r3, [r7, #15]
 8006720:	3b01      	subs	r3, #1
 8006722:	b2db      	uxtb	r3, r3
 8006724:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800672a:	2b00      	cmp	r3, #0
 800672c:	dce9      	bgt.n	8006702 <prvUnlockQueue+0x16>
 800672e:	e000      	b.n	8006732 <prvUnlockQueue+0x46>
					break;
 8006730:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	22ff      	movs	r2, #255	; 0xff
 8006736:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800673a:	f001 fa53 	bl	8007be4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800673e:	f001 fa21 	bl	8007b84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006748:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800674a:	e011      	b.n	8006770 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d012      	beq.n	800677a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	3310      	adds	r3, #16
 8006758:	4618      	mov	r0, r3
 800675a:	f000 fd07 	bl	800716c <xTaskRemoveFromEventList>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d001      	beq.n	8006768 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006764:	f000 fddc 	bl	8007320 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006768:	7bbb      	ldrb	r3, [r7, #14]
 800676a:	3b01      	subs	r3, #1
 800676c:	b2db      	uxtb	r3, r3
 800676e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006770:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006774:	2b00      	cmp	r3, #0
 8006776:	dce9      	bgt.n	800674c <prvUnlockQueue+0x60>
 8006778:	e000      	b.n	800677c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800677a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	22ff      	movs	r2, #255	; 0xff
 8006780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006784:	f001 fa2e 	bl	8007be4 <vPortExitCritical>
}
 8006788:	bf00      	nop
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006798:	f001 f9f4 	bl	8007b84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d102      	bne.n	80067aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80067a4:	2301      	movs	r3, #1
 80067a6:	60fb      	str	r3, [r7, #12]
 80067a8:	e001      	b.n	80067ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80067aa:	2300      	movs	r3, #0
 80067ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067ae:	f001 fa19 	bl	8007be4 <vPortExitCritical>

	return xReturn;
 80067b2:	68fb      	ldr	r3, [r7, #12]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3710      	adds	r7, #16
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067c4:	f001 f9de 	bl	8007b84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d102      	bne.n	80067da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80067d4:	2301      	movs	r3, #1
 80067d6:	60fb      	str	r3, [r7, #12]
 80067d8:	e001      	b.n	80067de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80067da:	2300      	movs	r3, #0
 80067dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067de:	f001 fa01 	bl	8007be4 <vPortExitCritical>

	return xReturn;
 80067e2:	68fb      	ldr	r3, [r7, #12]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b08e      	sub	sp, #56	; 0x38
 80067f0:	af04      	add	r7, sp, #16
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
 80067f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80067fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d10a      	bne.n	8006816 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006804:	f383 8811 	msr	BASEPRI, r3
 8006808:	f3bf 8f6f 	isb	sy
 800680c:	f3bf 8f4f 	dsb	sy
 8006810:	623b      	str	r3, [r7, #32]
}
 8006812:	bf00      	nop
 8006814:	e7fe      	b.n	8006814 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10a      	bne.n	8006832 <xTaskCreateStatic+0x46>
	__asm volatile
 800681c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006820:	f383 8811 	msr	BASEPRI, r3
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	61fb      	str	r3, [r7, #28]
}
 800682e:	bf00      	nop
 8006830:	e7fe      	b.n	8006830 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006832:	23b4      	movs	r3, #180	; 0xb4
 8006834:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	2bb4      	cmp	r3, #180	; 0xb4
 800683a:	d00a      	beq.n	8006852 <xTaskCreateStatic+0x66>
	__asm volatile
 800683c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006840:	f383 8811 	msr	BASEPRI, r3
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	61bb      	str	r3, [r7, #24]
}
 800684e:	bf00      	nop
 8006850:	e7fe      	b.n	8006850 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006852:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006856:	2b00      	cmp	r3, #0
 8006858:	d01e      	beq.n	8006898 <xTaskCreateStatic+0xac>
 800685a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800685c:	2b00      	cmp	r3, #0
 800685e:	d01b      	beq.n	8006898 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006862:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006868:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	2202      	movs	r2, #2
 800686e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006872:	2300      	movs	r3, #0
 8006874:	9303      	str	r3, [sp, #12]
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	9302      	str	r3, [sp, #8]
 800687a:	f107 0314 	add.w	r3, r7, #20
 800687e:	9301      	str	r3, [sp, #4]
 8006880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006882:	9300      	str	r3, [sp, #0]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	68b9      	ldr	r1, [r7, #8]
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f000 f850 	bl	8006930 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006890:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006892:	f000 f8eb 	bl	8006a6c <prvAddNewTaskToReadyList>
 8006896:	e001      	b.n	800689c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006898:	2300      	movs	r3, #0
 800689a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800689c:	697b      	ldr	r3, [r7, #20]
	}
 800689e:	4618      	mov	r0, r3
 80068a0:	3728      	adds	r7, #40	; 0x28
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b08c      	sub	sp, #48	; 0x30
 80068aa:	af04      	add	r7, sp, #16
 80068ac:	60f8      	str	r0, [r7, #12]
 80068ae:	60b9      	str	r1, [r7, #8]
 80068b0:	603b      	str	r3, [r7, #0]
 80068b2:	4613      	mov	r3, r2
 80068b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80068b6:	88fb      	ldrh	r3, [r7, #6]
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	4618      	mov	r0, r3
 80068bc:	f001 fa84 	bl	8007dc8 <pvPortMalloc>
 80068c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00e      	beq.n	80068e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80068c8:	20b4      	movs	r0, #180	; 0xb4
 80068ca:	f001 fa7d 	bl	8007dc8 <pvPortMalloc>
 80068ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	631a      	str	r2, [r3, #48]	; 0x30
 80068dc:	e005      	b.n	80068ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80068de:	6978      	ldr	r0, [r7, #20]
 80068e0:	f001 fb3e 	bl	8007f60 <vPortFree>
 80068e4:	e001      	b.n	80068ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80068e6:	2300      	movs	r3, #0
 80068e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d017      	beq.n	8006920 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80068f8:	88fa      	ldrh	r2, [r7, #6]
 80068fa:	2300      	movs	r3, #0
 80068fc:	9303      	str	r3, [sp, #12]
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	9302      	str	r3, [sp, #8]
 8006902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006904:	9301      	str	r3, [sp, #4]
 8006906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006908:	9300      	str	r3, [sp, #0]
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	68b9      	ldr	r1, [r7, #8]
 800690e:	68f8      	ldr	r0, [r7, #12]
 8006910:	f000 f80e 	bl	8006930 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006914:	69f8      	ldr	r0, [r7, #28]
 8006916:	f000 f8a9 	bl	8006a6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800691a:	2301      	movs	r3, #1
 800691c:	61bb      	str	r3, [r7, #24]
 800691e:	e002      	b.n	8006926 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006920:	f04f 33ff 	mov.w	r3, #4294967295
 8006924:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006926:	69bb      	ldr	r3, [r7, #24]
	}
 8006928:	4618      	mov	r0, r3
 800692a:	3720      	adds	r7, #32
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b088      	sub	sp, #32
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
 800693c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800693e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006948:	3b01      	subs	r3, #1
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	f023 0307 	bic.w	r3, r3, #7
 8006956:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	f003 0307 	and.w	r3, r3, #7
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00a      	beq.n	8006978 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006966:	f383 8811 	msr	BASEPRI, r3
 800696a:	f3bf 8f6f 	isb	sy
 800696e:	f3bf 8f4f 	dsb	sy
 8006972:	617b      	str	r3, [r7, #20]
}
 8006974:	bf00      	nop
 8006976:	e7fe      	b.n	8006976 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d01f      	beq.n	80069be <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800697e:	2300      	movs	r3, #0
 8006980:	61fb      	str	r3, [r7, #28]
 8006982:	e012      	b.n	80069aa <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	4413      	add	r3, r2
 800698a:	7819      	ldrb	r1, [r3, #0]
 800698c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	4413      	add	r3, r2
 8006992:	3334      	adds	r3, #52	; 0x34
 8006994:	460a      	mov	r2, r1
 8006996:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006998:	68ba      	ldr	r2, [r7, #8]
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	4413      	add	r3, r2
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d006      	beq.n	80069b2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	3301      	adds	r3, #1
 80069a8:	61fb      	str	r3, [r7, #28]
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	2b0f      	cmp	r3, #15
 80069ae:	d9e9      	bls.n	8006984 <prvInitialiseNewTask+0x54>
 80069b0:	e000      	b.n	80069b4 <prvInitialiseNewTask+0x84>
			{
				break;
 80069b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80069b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069bc:	e003      	b.n	80069c6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80069be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80069c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c8:	2b06      	cmp	r3, #6
 80069ca:	d901      	bls.n	80069d0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80069cc:	2306      	movs	r3, #6
 80069ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80069d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80069d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069da:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80069dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069de:	2200      	movs	r2, #0
 80069e0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80069e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e4:	3304      	adds	r3, #4
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7ff f8a6 	bl	8005b38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80069ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ee:	3318      	adds	r3, #24
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7ff f8a1 	bl	8005b38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80069f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fe:	f1c3 0207 	rsb	r2, r3, #7
 8006a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a0a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a16:	2200      	movs	r2, #0
 8006a18:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1e:	334c      	adds	r3, #76	; 0x4c
 8006a20:	2260      	movs	r2, #96	; 0x60
 8006a22:	2100      	movs	r1, #0
 8006a24:	4618      	mov	r0, r3
 8006a26:	f001 fd0b 	bl	8008440 <memset>
 8006a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2c:	4a0c      	ldr	r2, [pc, #48]	; (8006a60 <prvInitialiseNewTask+0x130>)
 8006a2e:	651a      	str	r2, [r3, #80]	; 0x50
 8006a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a32:	4a0c      	ldr	r2, [pc, #48]	; (8006a64 <prvInitialiseNewTask+0x134>)
 8006a34:	655a      	str	r2, [r3, #84]	; 0x54
 8006a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a38:	4a0b      	ldr	r2, [pc, #44]	; (8006a68 <prvInitialiseNewTask+0x138>)
 8006a3a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	68f9      	ldr	r1, [r7, #12]
 8006a40:	69b8      	ldr	r0, [r7, #24]
 8006a42:	f000 ff75 	bl	8007930 <pxPortInitialiseStack>
 8006a46:	4602      	mov	r2, r0
 8006a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d002      	beq.n	8006a58 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a56:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a58:	bf00      	nop
 8006a5a:	3720      	adds	r7, #32
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	0800b370 	.word	0x0800b370
 8006a64:	0800b390 	.word	0x0800b390
 8006a68:	0800b350 	.word	0x0800b350

08006a6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a74:	f001 f886 	bl	8007b84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a78:	4b2a      	ldr	r3, [pc, #168]	; (8006b24 <prvAddNewTaskToReadyList+0xb8>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	4a29      	ldr	r2, [pc, #164]	; (8006b24 <prvAddNewTaskToReadyList+0xb8>)
 8006a80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a82:	4b29      	ldr	r3, [pc, #164]	; (8006b28 <prvAddNewTaskToReadyList+0xbc>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d109      	bne.n	8006a9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a8a:	4a27      	ldr	r2, [pc, #156]	; (8006b28 <prvAddNewTaskToReadyList+0xbc>)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a90:	4b24      	ldr	r3, [pc, #144]	; (8006b24 <prvAddNewTaskToReadyList+0xb8>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d110      	bne.n	8006aba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006a98:	f000 fc66 	bl	8007368 <prvInitialiseTaskLists>
 8006a9c:	e00d      	b.n	8006aba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a9e:	4b23      	ldr	r3, [pc, #140]	; (8006b2c <prvAddNewTaskToReadyList+0xc0>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d109      	bne.n	8006aba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006aa6:	4b20      	ldr	r3, [pc, #128]	; (8006b28 <prvAddNewTaskToReadyList+0xbc>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d802      	bhi.n	8006aba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006ab4:	4a1c      	ldr	r2, [pc, #112]	; (8006b28 <prvAddNewTaskToReadyList+0xbc>)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006aba:	4b1d      	ldr	r3, [pc, #116]	; (8006b30 <prvAddNewTaskToReadyList+0xc4>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	4a1b      	ldr	r2, [pc, #108]	; (8006b30 <prvAddNewTaskToReadyList+0xc4>)
 8006ac2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac8:	2201      	movs	r2, #1
 8006aca:	409a      	lsls	r2, r3
 8006acc:	4b19      	ldr	r3, [pc, #100]	; (8006b34 <prvAddNewTaskToReadyList+0xc8>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	4a18      	ldr	r2, [pc, #96]	; (8006b34 <prvAddNewTaskToReadyList+0xc8>)
 8006ad4:	6013      	str	r3, [r2, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ada:	4613      	mov	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4413      	add	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4a15      	ldr	r2, [pc, #84]	; (8006b38 <prvAddNewTaskToReadyList+0xcc>)
 8006ae4:	441a      	add	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	3304      	adds	r3, #4
 8006aea:	4619      	mov	r1, r3
 8006aec:	4610      	mov	r0, r2
 8006aee:	f7ff f830 	bl	8005b52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006af2:	f001 f877 	bl	8007be4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006af6:	4b0d      	ldr	r3, [pc, #52]	; (8006b2c <prvAddNewTaskToReadyList+0xc0>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00e      	beq.n	8006b1c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006afe:	4b0a      	ldr	r3, [pc, #40]	; (8006b28 <prvAddNewTaskToReadyList+0xbc>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d207      	bcs.n	8006b1c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006b0c:	4b0b      	ldr	r3, [pc, #44]	; (8006b3c <prvAddNewTaskToReadyList+0xd0>)
 8006b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b12:	601a      	str	r2, [r3, #0]
 8006b14:	f3bf 8f4f 	dsb	sy
 8006b18:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b1c:	bf00      	nop
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	2000a9fc 	.word	0x2000a9fc
 8006b28:	2000a8fc 	.word	0x2000a8fc
 8006b2c:	2000aa08 	.word	0x2000aa08
 8006b30:	2000aa18 	.word	0x2000aa18
 8006b34:	2000aa04 	.word	0x2000aa04
 8006b38:	2000a900 	.word	0x2000a900
 8006b3c:	e000ed04 	.word	0xe000ed04

08006b40 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006b48:	f001 f81c 	bl	8007b84 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d102      	bne.n	8006b58 <vTaskDelete+0x18>
 8006b52:	4b39      	ldr	r3, [pc, #228]	; (8006c38 <vTaskDelete+0xf8>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	e000      	b.n	8006b5a <vTaskDelete+0x1a>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	3304      	adds	r3, #4
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7ff f853 	bl	8005c0c <uxListRemove>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d115      	bne.n	8006b98 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b70:	4932      	ldr	r1, [pc, #200]	; (8006c3c <vTaskDelete+0xfc>)
 8006b72:	4613      	mov	r3, r2
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	440b      	add	r3, r1
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d10a      	bne.n	8006b98 <vTaskDelete+0x58>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b86:	2201      	movs	r2, #1
 8006b88:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8c:	43da      	mvns	r2, r3
 8006b8e:	4b2c      	ldr	r3, [pc, #176]	; (8006c40 <vTaskDelete+0x100>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4013      	ands	r3, r2
 8006b94:	4a2a      	ldr	r2, [pc, #168]	; (8006c40 <vTaskDelete+0x100>)
 8006b96:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d004      	beq.n	8006baa <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	3318      	adds	r3, #24
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7ff f831 	bl	8005c0c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8006baa:	4b26      	ldr	r3, [pc, #152]	; (8006c44 <vTaskDelete+0x104>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	4a24      	ldr	r2, [pc, #144]	; (8006c44 <vTaskDelete+0x104>)
 8006bb2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8006bb4:	4b20      	ldr	r3, [pc, #128]	; (8006c38 <vTaskDelete+0xf8>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d10b      	bne.n	8006bd6 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	3304      	adds	r3, #4
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	4820      	ldr	r0, [pc, #128]	; (8006c48 <vTaskDelete+0x108>)
 8006bc6:	f7fe ffc4 	bl	8005b52 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8006bca:	4b20      	ldr	r3, [pc, #128]	; (8006c4c <vTaskDelete+0x10c>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	4a1e      	ldr	r2, [pc, #120]	; (8006c4c <vTaskDelete+0x10c>)
 8006bd2:	6013      	str	r3, [r2, #0]
 8006bd4:	e009      	b.n	8006bea <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8006bd6:	4b1e      	ldr	r3, [pc, #120]	; (8006c50 <vTaskDelete+0x110>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	4a1c      	ldr	r2, [pc, #112]	; (8006c50 <vTaskDelete+0x110>)
 8006bde:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 fc2f 	bl	8007444 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8006be6:	f000 fc61 	bl	80074ac <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8006bea:	f000 fffb 	bl	8007be4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8006bee:	4b19      	ldr	r3, [pc, #100]	; (8006c54 <vTaskDelete+0x114>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d01b      	beq.n	8006c2e <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8006bf6:	4b10      	ldr	r3, [pc, #64]	; (8006c38 <vTaskDelete+0xf8>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d116      	bne.n	8006c2e <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8006c00:	4b15      	ldr	r3, [pc, #84]	; (8006c58 <vTaskDelete+0x118>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00a      	beq.n	8006c1e <vTaskDelete+0xde>
	__asm volatile
 8006c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0c:	f383 8811 	msr	BASEPRI, r3
 8006c10:	f3bf 8f6f 	isb	sy
 8006c14:	f3bf 8f4f 	dsb	sy
 8006c18:	60bb      	str	r3, [r7, #8]
}
 8006c1a:	bf00      	nop
 8006c1c:	e7fe      	b.n	8006c1c <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8006c1e:	4b0f      	ldr	r3, [pc, #60]	; (8006c5c <vTaskDelete+0x11c>)
 8006c20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c24:	601a      	str	r2, [r3, #0]
 8006c26:	f3bf 8f4f 	dsb	sy
 8006c2a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006c2e:	bf00      	nop
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	2000a8fc 	.word	0x2000a8fc
 8006c3c:	2000a900 	.word	0x2000a900
 8006c40:	2000aa04 	.word	0x2000aa04
 8006c44:	2000aa18 	.word	0x2000aa18
 8006c48:	2000a9d0 	.word	0x2000a9d0
 8006c4c:	2000a9e4 	.word	0x2000a9e4
 8006c50:	2000a9fc 	.word	0x2000a9fc
 8006c54:	2000aa08 	.word	0x2000aa08
 8006c58:	2000aa24 	.word	0x2000aa24
 8006c5c:	e000ed04 	.word	0xe000ed04

08006c60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d017      	beq.n	8006ca2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006c72:	4b13      	ldr	r3, [pc, #76]	; (8006cc0 <vTaskDelay+0x60>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00a      	beq.n	8006c90 <vTaskDelay+0x30>
	__asm volatile
 8006c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7e:	f383 8811 	msr	BASEPRI, r3
 8006c82:	f3bf 8f6f 	isb	sy
 8006c86:	f3bf 8f4f 	dsb	sy
 8006c8a:	60bb      	str	r3, [r7, #8]
}
 8006c8c:	bf00      	nop
 8006c8e:	e7fe      	b.n	8006c8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006c90:	f000 f884 	bl	8006d9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c94:	2100      	movs	r1, #0
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fde4 	bl	8007864 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006c9c:	f000 f88c 	bl	8006db8 <xTaskResumeAll>
 8006ca0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d107      	bne.n	8006cb8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006ca8:	4b06      	ldr	r3, [pc, #24]	; (8006cc4 <vTaskDelay+0x64>)
 8006caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cae:	601a      	str	r2, [r3, #0]
 8006cb0:	f3bf 8f4f 	dsb	sy
 8006cb4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006cb8:	bf00      	nop
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	2000aa24 	.word	0x2000aa24
 8006cc4:	e000ed04 	.word	0xe000ed04

08006cc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b08a      	sub	sp, #40	; 0x28
 8006ccc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006cd6:	463a      	mov	r2, r7
 8006cd8:	1d39      	adds	r1, r7, #4
 8006cda:	f107 0308 	add.w	r3, r7, #8
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f7fa f8e4 	bl	8000eac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ce4:	6839      	ldr	r1, [r7, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	9202      	str	r2, [sp, #8]
 8006cec:	9301      	str	r3, [sp, #4]
 8006cee:	2300      	movs	r3, #0
 8006cf0:	9300      	str	r3, [sp, #0]
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	460a      	mov	r2, r1
 8006cf6:	4921      	ldr	r1, [pc, #132]	; (8006d7c <vTaskStartScheduler+0xb4>)
 8006cf8:	4821      	ldr	r0, [pc, #132]	; (8006d80 <vTaskStartScheduler+0xb8>)
 8006cfa:	f7ff fd77 	bl	80067ec <xTaskCreateStatic>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	4a20      	ldr	r2, [pc, #128]	; (8006d84 <vTaskStartScheduler+0xbc>)
 8006d02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d04:	4b1f      	ldr	r3, [pc, #124]	; (8006d84 <vTaskStartScheduler+0xbc>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d002      	beq.n	8006d12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	617b      	str	r3, [r7, #20]
 8006d10:	e001      	b.n	8006d16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d12:	2300      	movs	r3, #0
 8006d14:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d11b      	bne.n	8006d54 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d20:	f383 8811 	msr	BASEPRI, r3
 8006d24:	f3bf 8f6f 	isb	sy
 8006d28:	f3bf 8f4f 	dsb	sy
 8006d2c:	613b      	str	r3, [r7, #16]
}
 8006d2e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006d30:	4b15      	ldr	r3, [pc, #84]	; (8006d88 <vTaskStartScheduler+0xc0>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	334c      	adds	r3, #76	; 0x4c
 8006d36:	4a15      	ldr	r2, [pc, #84]	; (8006d8c <vTaskStartScheduler+0xc4>)
 8006d38:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006d3a:	4b15      	ldr	r3, [pc, #84]	; (8006d90 <vTaskStartScheduler+0xc8>)
 8006d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006d42:	4b14      	ldr	r3, [pc, #80]	; (8006d94 <vTaskStartScheduler+0xcc>)
 8006d44:	2201      	movs	r2, #1
 8006d46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006d48:	4b13      	ldr	r3, [pc, #76]	; (8006d98 <vTaskStartScheduler+0xd0>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006d4e:	f000 fe77 	bl	8007a40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006d52:	e00e      	b.n	8006d72 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d5a:	d10a      	bne.n	8006d72 <vTaskStartScheduler+0xaa>
	__asm volatile
 8006d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d60:	f383 8811 	msr	BASEPRI, r3
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	60fb      	str	r3, [r7, #12]
}
 8006d6e:	bf00      	nop
 8006d70:	e7fe      	b.n	8006d70 <vTaskStartScheduler+0xa8>
}
 8006d72:	bf00      	nop
 8006d74:	3718      	adds	r7, #24
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	0800b300 	.word	0x0800b300
 8006d80:	08007339 	.word	0x08007339
 8006d84:	2000aa20 	.word	0x2000aa20
 8006d88:	2000a8fc 	.word	0x2000a8fc
 8006d8c:	20000010 	.word	0x20000010
 8006d90:	2000aa1c 	.word	0x2000aa1c
 8006d94:	2000aa08 	.word	0x2000aa08
 8006d98:	2000aa00 	.word	0x2000aa00

08006d9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006da0:	4b04      	ldr	r3, [pc, #16]	; (8006db4 <vTaskSuspendAll+0x18>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	3301      	adds	r3, #1
 8006da6:	4a03      	ldr	r2, [pc, #12]	; (8006db4 <vTaskSuspendAll+0x18>)
 8006da8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006daa:	bf00      	nop
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr
 8006db4:	2000aa24 	.word	0x2000aa24

08006db8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006dc6:	4b41      	ldr	r3, [pc, #260]	; (8006ecc <xTaskResumeAll+0x114>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d10a      	bne.n	8006de4 <xTaskResumeAll+0x2c>
	__asm volatile
 8006dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	603b      	str	r3, [r7, #0]
}
 8006de0:	bf00      	nop
 8006de2:	e7fe      	b.n	8006de2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006de4:	f000 fece 	bl	8007b84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006de8:	4b38      	ldr	r3, [pc, #224]	; (8006ecc <xTaskResumeAll+0x114>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	3b01      	subs	r3, #1
 8006dee:	4a37      	ldr	r2, [pc, #220]	; (8006ecc <xTaskResumeAll+0x114>)
 8006df0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006df2:	4b36      	ldr	r3, [pc, #216]	; (8006ecc <xTaskResumeAll+0x114>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d161      	bne.n	8006ebe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006dfa:	4b35      	ldr	r3, [pc, #212]	; (8006ed0 <xTaskResumeAll+0x118>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d05d      	beq.n	8006ebe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e02:	e02e      	b.n	8006e62 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e04:	4b33      	ldr	r3, [pc, #204]	; (8006ed4 <xTaskResumeAll+0x11c>)
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	3318      	adds	r3, #24
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7fe fefb 	bl	8005c0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	3304      	adds	r3, #4
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7fe fef6 	bl	8005c0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e24:	2201      	movs	r2, #1
 8006e26:	409a      	lsls	r2, r3
 8006e28:	4b2b      	ldr	r3, [pc, #172]	; (8006ed8 <xTaskResumeAll+0x120>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	4a2a      	ldr	r2, [pc, #168]	; (8006ed8 <xTaskResumeAll+0x120>)
 8006e30:	6013      	str	r3, [r2, #0]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e36:	4613      	mov	r3, r2
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4413      	add	r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4a27      	ldr	r2, [pc, #156]	; (8006edc <xTaskResumeAll+0x124>)
 8006e40:	441a      	add	r2, r3
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	3304      	adds	r3, #4
 8006e46:	4619      	mov	r1, r3
 8006e48:	4610      	mov	r0, r2
 8006e4a:	f7fe fe82 	bl	8005b52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e52:	4b23      	ldr	r3, [pc, #140]	; (8006ee0 <xTaskResumeAll+0x128>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d302      	bcc.n	8006e62 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006e5c:	4b21      	ldr	r3, [pc, #132]	; (8006ee4 <xTaskResumeAll+0x12c>)
 8006e5e:	2201      	movs	r2, #1
 8006e60:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e62:	4b1c      	ldr	r3, [pc, #112]	; (8006ed4 <xTaskResumeAll+0x11c>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1cc      	bne.n	8006e04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d001      	beq.n	8006e74 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006e70:	f000 fb1c 	bl	80074ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006e74:	4b1c      	ldr	r3, [pc, #112]	; (8006ee8 <xTaskResumeAll+0x130>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d010      	beq.n	8006ea2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006e80:	f000 f836 	bl	8006ef0 <xTaskIncrementTick>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d002      	beq.n	8006e90 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006e8a:	4b16      	ldr	r3, [pc, #88]	; (8006ee4 <xTaskResumeAll+0x12c>)
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	3b01      	subs	r3, #1
 8006e94:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1f1      	bne.n	8006e80 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006e9c:	4b12      	ldr	r3, [pc, #72]	; (8006ee8 <xTaskResumeAll+0x130>)
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006ea2:	4b10      	ldr	r3, [pc, #64]	; (8006ee4 <xTaskResumeAll+0x12c>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d009      	beq.n	8006ebe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006eae:	4b0f      	ldr	r3, [pc, #60]	; (8006eec <xTaskResumeAll+0x134>)
 8006eb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eb4:	601a      	str	r2, [r3, #0]
 8006eb6:	f3bf 8f4f 	dsb	sy
 8006eba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ebe:	f000 fe91 	bl	8007be4 <vPortExitCritical>

	return xAlreadyYielded;
 8006ec2:	68bb      	ldr	r3, [r7, #8]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	2000aa24 	.word	0x2000aa24
 8006ed0:	2000a9fc 	.word	0x2000a9fc
 8006ed4:	2000a9bc 	.word	0x2000a9bc
 8006ed8:	2000aa04 	.word	0x2000aa04
 8006edc:	2000a900 	.word	0x2000a900
 8006ee0:	2000a8fc 	.word	0x2000a8fc
 8006ee4:	2000aa10 	.word	0x2000aa10
 8006ee8:	2000aa0c 	.word	0x2000aa0c
 8006eec:	e000ed04 	.word	0xe000ed04

08006ef0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b086      	sub	sp, #24
 8006ef4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006efa:	4b4e      	ldr	r3, [pc, #312]	; (8007034 <xTaskIncrementTick+0x144>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f040 808e 	bne.w	8007020 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f04:	4b4c      	ldr	r3, [pc, #304]	; (8007038 <xTaskIncrementTick+0x148>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006f0c:	4a4a      	ldr	r2, [pc, #296]	; (8007038 <xTaskIncrementTick+0x148>)
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d120      	bne.n	8006f5a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006f18:	4b48      	ldr	r3, [pc, #288]	; (800703c <xTaskIncrementTick+0x14c>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00a      	beq.n	8006f38 <xTaskIncrementTick+0x48>
	__asm volatile
 8006f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f26:	f383 8811 	msr	BASEPRI, r3
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	603b      	str	r3, [r7, #0]
}
 8006f34:	bf00      	nop
 8006f36:	e7fe      	b.n	8006f36 <xTaskIncrementTick+0x46>
 8006f38:	4b40      	ldr	r3, [pc, #256]	; (800703c <xTaskIncrementTick+0x14c>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	60fb      	str	r3, [r7, #12]
 8006f3e:	4b40      	ldr	r3, [pc, #256]	; (8007040 <xTaskIncrementTick+0x150>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a3e      	ldr	r2, [pc, #248]	; (800703c <xTaskIncrementTick+0x14c>)
 8006f44:	6013      	str	r3, [r2, #0]
 8006f46:	4a3e      	ldr	r2, [pc, #248]	; (8007040 <xTaskIncrementTick+0x150>)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6013      	str	r3, [r2, #0]
 8006f4c:	4b3d      	ldr	r3, [pc, #244]	; (8007044 <xTaskIncrementTick+0x154>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	3301      	adds	r3, #1
 8006f52:	4a3c      	ldr	r2, [pc, #240]	; (8007044 <xTaskIncrementTick+0x154>)
 8006f54:	6013      	str	r3, [r2, #0]
 8006f56:	f000 faa9 	bl	80074ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006f5a:	4b3b      	ldr	r3, [pc, #236]	; (8007048 <xTaskIncrementTick+0x158>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	693a      	ldr	r2, [r7, #16]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d348      	bcc.n	8006ff6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f64:	4b35      	ldr	r3, [pc, #212]	; (800703c <xTaskIncrementTick+0x14c>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d104      	bne.n	8006f78 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f6e:	4b36      	ldr	r3, [pc, #216]	; (8007048 <xTaskIncrementTick+0x158>)
 8006f70:	f04f 32ff 	mov.w	r2, #4294967295
 8006f74:	601a      	str	r2, [r3, #0]
					break;
 8006f76:	e03e      	b.n	8006ff6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f78:	4b30      	ldr	r3, [pc, #192]	; (800703c <xTaskIncrementTick+0x14c>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006f88:	693a      	ldr	r2, [r7, #16]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d203      	bcs.n	8006f98 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006f90:	4a2d      	ldr	r2, [pc, #180]	; (8007048 <xTaskIncrementTick+0x158>)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006f96:	e02e      	b.n	8006ff6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	3304      	adds	r3, #4
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7fe fe35 	bl	8005c0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d004      	beq.n	8006fb4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	3318      	adds	r3, #24
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7fe fe2c 	bl	8005c0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb8:	2201      	movs	r2, #1
 8006fba:	409a      	lsls	r2, r3
 8006fbc:	4b23      	ldr	r3, [pc, #140]	; (800704c <xTaskIncrementTick+0x15c>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	4a22      	ldr	r2, [pc, #136]	; (800704c <xTaskIncrementTick+0x15c>)
 8006fc4:	6013      	str	r3, [r2, #0]
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fca:	4613      	mov	r3, r2
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4413      	add	r3, r2
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	4a1f      	ldr	r2, [pc, #124]	; (8007050 <xTaskIncrementTick+0x160>)
 8006fd4:	441a      	add	r2, r3
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	3304      	adds	r3, #4
 8006fda:	4619      	mov	r1, r3
 8006fdc:	4610      	mov	r0, r2
 8006fde:	f7fe fdb8 	bl	8005b52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe6:	4b1b      	ldr	r3, [pc, #108]	; (8007054 <xTaskIncrementTick+0x164>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d3b9      	bcc.n	8006f64 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ff4:	e7b6      	b.n	8006f64 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006ff6:	4b17      	ldr	r3, [pc, #92]	; (8007054 <xTaskIncrementTick+0x164>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ffc:	4914      	ldr	r1, [pc, #80]	; (8007050 <xTaskIncrementTick+0x160>)
 8006ffe:	4613      	mov	r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	4413      	add	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	440b      	add	r3, r1
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d901      	bls.n	8007012 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800700e:	2301      	movs	r3, #1
 8007010:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007012:	4b11      	ldr	r3, [pc, #68]	; (8007058 <xTaskIncrementTick+0x168>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d007      	beq.n	800702a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800701a:	2301      	movs	r3, #1
 800701c:	617b      	str	r3, [r7, #20]
 800701e:	e004      	b.n	800702a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007020:	4b0e      	ldr	r3, [pc, #56]	; (800705c <xTaskIncrementTick+0x16c>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	3301      	adds	r3, #1
 8007026:	4a0d      	ldr	r2, [pc, #52]	; (800705c <xTaskIncrementTick+0x16c>)
 8007028:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800702a:	697b      	ldr	r3, [r7, #20]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3718      	adds	r7, #24
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	2000aa24 	.word	0x2000aa24
 8007038:	2000aa00 	.word	0x2000aa00
 800703c:	2000a9b4 	.word	0x2000a9b4
 8007040:	2000a9b8 	.word	0x2000a9b8
 8007044:	2000aa14 	.word	0x2000aa14
 8007048:	2000aa1c 	.word	0x2000aa1c
 800704c:	2000aa04 	.word	0x2000aa04
 8007050:	2000a900 	.word	0x2000a900
 8007054:	2000a8fc 	.word	0x2000a8fc
 8007058:	2000aa10 	.word	0x2000aa10
 800705c:	2000aa0c 	.word	0x2000aa0c

08007060 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007060:	b480      	push	{r7}
 8007062:	b087      	sub	sp, #28
 8007064:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007066:	4b29      	ldr	r3, [pc, #164]	; (800710c <vTaskSwitchContext+0xac>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d003      	beq.n	8007076 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800706e:	4b28      	ldr	r3, [pc, #160]	; (8007110 <vTaskSwitchContext+0xb0>)
 8007070:	2201      	movs	r2, #1
 8007072:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007074:	e044      	b.n	8007100 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007076:	4b26      	ldr	r3, [pc, #152]	; (8007110 <vTaskSwitchContext+0xb0>)
 8007078:	2200      	movs	r2, #0
 800707a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800707c:	4b25      	ldr	r3, [pc, #148]	; (8007114 <vTaskSwitchContext+0xb4>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	fab3 f383 	clz	r3, r3
 8007088:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800708a:	7afb      	ldrb	r3, [r7, #11]
 800708c:	f1c3 031f 	rsb	r3, r3, #31
 8007090:	617b      	str	r3, [r7, #20]
 8007092:	4921      	ldr	r1, [pc, #132]	; (8007118 <vTaskSwitchContext+0xb8>)
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	4613      	mov	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4413      	add	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	440b      	add	r3, r1
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d10a      	bne.n	80070bc <vTaskSwitchContext+0x5c>
	__asm volatile
 80070a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070aa:	f383 8811 	msr	BASEPRI, r3
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	607b      	str	r3, [r7, #4]
}
 80070b8:	bf00      	nop
 80070ba:	e7fe      	b.n	80070ba <vTaskSwitchContext+0x5a>
 80070bc:	697a      	ldr	r2, [r7, #20]
 80070be:	4613      	mov	r3, r2
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4413      	add	r3, r2
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	4a14      	ldr	r2, [pc, #80]	; (8007118 <vTaskSwitchContext+0xb8>)
 80070c8:	4413      	add	r3, r2
 80070ca:	613b      	str	r3, [r7, #16]
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	605a      	str	r2, [r3, #4]
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	685a      	ldr	r2, [r3, #4]
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	3308      	adds	r3, #8
 80070de:	429a      	cmp	r2, r3
 80070e0:	d104      	bne.n	80070ec <vTaskSwitchContext+0x8c>
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	685a      	ldr	r2, [r3, #4]
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	605a      	str	r2, [r3, #4]
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	4a0a      	ldr	r2, [pc, #40]	; (800711c <vTaskSwitchContext+0xbc>)
 80070f4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80070f6:	4b09      	ldr	r3, [pc, #36]	; (800711c <vTaskSwitchContext+0xbc>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	334c      	adds	r3, #76	; 0x4c
 80070fc:	4a08      	ldr	r2, [pc, #32]	; (8007120 <vTaskSwitchContext+0xc0>)
 80070fe:	6013      	str	r3, [r2, #0]
}
 8007100:	bf00      	nop
 8007102:	371c      	adds	r7, #28
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr
 800710c:	2000aa24 	.word	0x2000aa24
 8007110:	2000aa10 	.word	0x2000aa10
 8007114:	2000aa04 	.word	0x2000aa04
 8007118:	2000a900 	.word	0x2000a900
 800711c:	2000a8fc 	.word	0x2000a8fc
 8007120:	20000010 	.word	0x20000010

08007124 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d10a      	bne.n	800714a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007138:	f383 8811 	msr	BASEPRI, r3
 800713c:	f3bf 8f6f 	isb	sy
 8007140:	f3bf 8f4f 	dsb	sy
 8007144:	60fb      	str	r3, [r7, #12]
}
 8007146:	bf00      	nop
 8007148:	e7fe      	b.n	8007148 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800714a:	4b07      	ldr	r3, [pc, #28]	; (8007168 <vTaskPlaceOnEventList+0x44>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	3318      	adds	r3, #24
 8007150:	4619      	mov	r1, r3
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7fe fd21 	bl	8005b9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007158:	2101      	movs	r1, #1
 800715a:	6838      	ldr	r0, [r7, #0]
 800715c:	f000 fb82 	bl	8007864 <prvAddCurrentTaskToDelayedList>
}
 8007160:	bf00      	nop
 8007162:	3710      	adds	r7, #16
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	2000a8fc 	.word	0x2000a8fc

0800716c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b086      	sub	sp, #24
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d10a      	bne.n	8007198 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007186:	f383 8811 	msr	BASEPRI, r3
 800718a:	f3bf 8f6f 	isb	sy
 800718e:	f3bf 8f4f 	dsb	sy
 8007192:	60fb      	str	r3, [r7, #12]
}
 8007194:	bf00      	nop
 8007196:	e7fe      	b.n	8007196 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	3318      	adds	r3, #24
 800719c:	4618      	mov	r0, r3
 800719e:	f7fe fd35 	bl	8005c0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071a2:	4b1d      	ldr	r3, [pc, #116]	; (8007218 <xTaskRemoveFromEventList+0xac>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d11c      	bne.n	80071e4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	3304      	adds	r3, #4
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7fe fd2c 	bl	8005c0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b8:	2201      	movs	r2, #1
 80071ba:	409a      	lsls	r2, r3
 80071bc:	4b17      	ldr	r3, [pc, #92]	; (800721c <xTaskRemoveFromEventList+0xb0>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	4a16      	ldr	r2, [pc, #88]	; (800721c <xTaskRemoveFromEventList+0xb0>)
 80071c4:	6013      	str	r3, [r2, #0]
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ca:	4613      	mov	r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4413      	add	r3, r2
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4a13      	ldr	r2, [pc, #76]	; (8007220 <xTaskRemoveFromEventList+0xb4>)
 80071d4:	441a      	add	r2, r3
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	3304      	adds	r3, #4
 80071da:	4619      	mov	r1, r3
 80071dc:	4610      	mov	r0, r2
 80071de:	f7fe fcb8 	bl	8005b52 <vListInsertEnd>
 80071e2:	e005      	b.n	80071f0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	3318      	adds	r3, #24
 80071e8:	4619      	mov	r1, r3
 80071ea:	480e      	ldr	r0, [pc, #56]	; (8007224 <xTaskRemoveFromEventList+0xb8>)
 80071ec:	f7fe fcb1 	bl	8005b52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f4:	4b0c      	ldr	r3, [pc, #48]	; (8007228 <xTaskRemoveFromEventList+0xbc>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d905      	bls.n	800720a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80071fe:	2301      	movs	r3, #1
 8007200:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007202:	4b0a      	ldr	r3, [pc, #40]	; (800722c <xTaskRemoveFromEventList+0xc0>)
 8007204:	2201      	movs	r2, #1
 8007206:	601a      	str	r2, [r3, #0]
 8007208:	e001      	b.n	800720e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800720a:	2300      	movs	r3, #0
 800720c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800720e:	697b      	ldr	r3, [r7, #20]
}
 8007210:	4618      	mov	r0, r3
 8007212:	3718      	adds	r7, #24
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	2000aa24 	.word	0x2000aa24
 800721c:	2000aa04 	.word	0x2000aa04
 8007220:	2000a900 	.word	0x2000a900
 8007224:	2000a9bc 	.word	0x2000a9bc
 8007228:	2000a8fc 	.word	0x2000a8fc
 800722c:	2000aa10 	.word	0x2000aa10

08007230 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007238:	4b06      	ldr	r3, [pc, #24]	; (8007254 <vTaskInternalSetTimeOutState+0x24>)
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007240:	4b05      	ldr	r3, [pc, #20]	; (8007258 <vTaskInternalSetTimeOutState+0x28>)
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	605a      	str	r2, [r3, #4]
}
 8007248:	bf00      	nop
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr
 8007254:	2000aa14 	.word	0x2000aa14
 8007258:	2000aa00 	.word	0x2000aa00

0800725c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b088      	sub	sp, #32
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d10a      	bne.n	8007282 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800726c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007270:	f383 8811 	msr	BASEPRI, r3
 8007274:	f3bf 8f6f 	isb	sy
 8007278:	f3bf 8f4f 	dsb	sy
 800727c:	613b      	str	r3, [r7, #16]
}
 800727e:	bf00      	nop
 8007280:	e7fe      	b.n	8007280 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10a      	bne.n	800729e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728c:	f383 8811 	msr	BASEPRI, r3
 8007290:	f3bf 8f6f 	isb	sy
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	60fb      	str	r3, [r7, #12]
}
 800729a:	bf00      	nop
 800729c:	e7fe      	b.n	800729c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800729e:	f000 fc71 	bl	8007b84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80072a2:	4b1d      	ldr	r3, [pc, #116]	; (8007318 <xTaskCheckForTimeOut+0xbc>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	69ba      	ldr	r2, [r7, #24]
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ba:	d102      	bne.n	80072c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80072bc:	2300      	movs	r3, #0
 80072be:	61fb      	str	r3, [r7, #28]
 80072c0:	e023      	b.n	800730a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	4b15      	ldr	r3, [pc, #84]	; (800731c <xTaskCheckForTimeOut+0xc0>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d007      	beq.n	80072de <xTaskCheckForTimeOut+0x82>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	69ba      	ldr	r2, [r7, #24]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d302      	bcc.n	80072de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80072d8:	2301      	movs	r3, #1
 80072da:	61fb      	str	r3, [r7, #28]
 80072dc:	e015      	b.n	800730a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d20b      	bcs.n	8007300 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	1ad2      	subs	r2, r2, r3
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f7ff ff9b 	bl	8007230 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80072fa:	2300      	movs	r3, #0
 80072fc:	61fb      	str	r3, [r7, #28]
 80072fe:	e004      	b.n	800730a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	2200      	movs	r2, #0
 8007304:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007306:	2301      	movs	r3, #1
 8007308:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800730a:	f000 fc6b 	bl	8007be4 <vPortExitCritical>

	return xReturn;
 800730e:	69fb      	ldr	r3, [r7, #28]
}
 8007310:	4618      	mov	r0, r3
 8007312:	3720      	adds	r7, #32
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	2000aa00 	.word	0x2000aa00
 800731c:	2000aa14 	.word	0x2000aa14

08007320 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007320:	b480      	push	{r7}
 8007322:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007324:	4b03      	ldr	r3, [pc, #12]	; (8007334 <vTaskMissedYield+0x14>)
 8007326:	2201      	movs	r2, #1
 8007328:	601a      	str	r2, [r3, #0]
}
 800732a:	bf00      	nop
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr
 8007334:	2000aa10 	.word	0x2000aa10

08007338 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007340:	f000 f852 	bl	80073e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007344:	4b06      	ldr	r3, [pc, #24]	; (8007360 <prvIdleTask+0x28>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d9f9      	bls.n	8007340 <prvIdleTask+0x8>
			{
				taskYIELD();
 800734c:	4b05      	ldr	r3, [pc, #20]	; (8007364 <prvIdleTask+0x2c>)
 800734e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800735c:	e7f0      	b.n	8007340 <prvIdleTask+0x8>
 800735e:	bf00      	nop
 8007360:	2000a900 	.word	0x2000a900
 8007364:	e000ed04 	.word	0xe000ed04

08007368 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800736e:	2300      	movs	r3, #0
 8007370:	607b      	str	r3, [r7, #4]
 8007372:	e00c      	b.n	800738e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	4613      	mov	r3, r2
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	4413      	add	r3, r2
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	4a12      	ldr	r2, [pc, #72]	; (80073c8 <prvInitialiseTaskLists+0x60>)
 8007380:	4413      	add	r3, r2
 8007382:	4618      	mov	r0, r3
 8007384:	f7fe fbb8 	bl	8005af8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	3301      	adds	r3, #1
 800738c:	607b      	str	r3, [r7, #4]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2b06      	cmp	r3, #6
 8007392:	d9ef      	bls.n	8007374 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007394:	480d      	ldr	r0, [pc, #52]	; (80073cc <prvInitialiseTaskLists+0x64>)
 8007396:	f7fe fbaf 	bl	8005af8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800739a:	480d      	ldr	r0, [pc, #52]	; (80073d0 <prvInitialiseTaskLists+0x68>)
 800739c:	f7fe fbac 	bl	8005af8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80073a0:	480c      	ldr	r0, [pc, #48]	; (80073d4 <prvInitialiseTaskLists+0x6c>)
 80073a2:	f7fe fba9 	bl	8005af8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80073a6:	480c      	ldr	r0, [pc, #48]	; (80073d8 <prvInitialiseTaskLists+0x70>)
 80073a8:	f7fe fba6 	bl	8005af8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80073ac:	480b      	ldr	r0, [pc, #44]	; (80073dc <prvInitialiseTaskLists+0x74>)
 80073ae:	f7fe fba3 	bl	8005af8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80073b2:	4b0b      	ldr	r3, [pc, #44]	; (80073e0 <prvInitialiseTaskLists+0x78>)
 80073b4:	4a05      	ldr	r2, [pc, #20]	; (80073cc <prvInitialiseTaskLists+0x64>)
 80073b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80073b8:	4b0a      	ldr	r3, [pc, #40]	; (80073e4 <prvInitialiseTaskLists+0x7c>)
 80073ba:	4a05      	ldr	r2, [pc, #20]	; (80073d0 <prvInitialiseTaskLists+0x68>)
 80073bc:	601a      	str	r2, [r3, #0]
}
 80073be:	bf00      	nop
 80073c0:	3708      	adds	r7, #8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	2000a900 	.word	0x2000a900
 80073cc:	2000a98c 	.word	0x2000a98c
 80073d0:	2000a9a0 	.word	0x2000a9a0
 80073d4:	2000a9bc 	.word	0x2000a9bc
 80073d8:	2000a9d0 	.word	0x2000a9d0
 80073dc:	2000a9e8 	.word	0x2000a9e8
 80073e0:	2000a9b4 	.word	0x2000a9b4
 80073e4:	2000a9b8 	.word	0x2000a9b8

080073e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073ee:	e019      	b.n	8007424 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80073f0:	f000 fbc8 	bl	8007b84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073f4:	4b10      	ldr	r3, [pc, #64]	; (8007438 <prvCheckTasksWaitingTermination+0x50>)
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	3304      	adds	r3, #4
 8007400:	4618      	mov	r0, r3
 8007402:	f7fe fc03 	bl	8005c0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007406:	4b0d      	ldr	r3, [pc, #52]	; (800743c <prvCheckTasksWaitingTermination+0x54>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	3b01      	subs	r3, #1
 800740c:	4a0b      	ldr	r2, [pc, #44]	; (800743c <prvCheckTasksWaitingTermination+0x54>)
 800740e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007410:	4b0b      	ldr	r3, [pc, #44]	; (8007440 <prvCheckTasksWaitingTermination+0x58>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	3b01      	subs	r3, #1
 8007416:	4a0a      	ldr	r2, [pc, #40]	; (8007440 <prvCheckTasksWaitingTermination+0x58>)
 8007418:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800741a:	f000 fbe3 	bl	8007be4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f810 	bl	8007444 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007424:	4b06      	ldr	r3, [pc, #24]	; (8007440 <prvCheckTasksWaitingTermination+0x58>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1e1      	bne.n	80073f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800742c:	bf00      	nop
 800742e:	bf00      	nop
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	2000a9d0 	.word	0x2000a9d0
 800743c:	2000a9fc 	.word	0x2000a9fc
 8007440:	2000a9e4 	.word	0x2000a9e4

08007444 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	334c      	adds	r3, #76	; 0x4c
 8007450:	4618      	mov	r0, r3
 8007452:	f001 fd55 	bl	8008f00 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800745c:	2b00      	cmp	r3, #0
 800745e:	d108      	bne.n	8007472 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007464:	4618      	mov	r0, r3
 8007466:	f000 fd7b 	bl	8007f60 <vPortFree>
				vPortFree( pxTCB );
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 fd78 	bl	8007f60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007470:	e018      	b.n	80074a4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007478:	2b01      	cmp	r3, #1
 800747a:	d103      	bne.n	8007484 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fd6f 	bl	8007f60 <vPortFree>
	}
 8007482:	e00f      	b.n	80074a4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800748a:	2b02      	cmp	r3, #2
 800748c:	d00a      	beq.n	80074a4 <prvDeleteTCB+0x60>
	__asm volatile
 800748e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007492:	f383 8811 	msr	BASEPRI, r3
 8007496:	f3bf 8f6f 	isb	sy
 800749a:	f3bf 8f4f 	dsb	sy
 800749e:	60fb      	str	r3, [r7, #12]
}
 80074a0:	bf00      	nop
 80074a2:	e7fe      	b.n	80074a2 <prvDeleteTCB+0x5e>
	}
 80074a4:	bf00      	nop
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074b2:	4b0c      	ldr	r3, [pc, #48]	; (80074e4 <prvResetNextTaskUnblockTime+0x38>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d104      	bne.n	80074c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80074bc:	4b0a      	ldr	r3, [pc, #40]	; (80074e8 <prvResetNextTaskUnblockTime+0x3c>)
 80074be:	f04f 32ff 	mov.w	r2, #4294967295
 80074c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80074c4:	e008      	b.n	80074d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074c6:	4b07      	ldr	r3, [pc, #28]	; (80074e4 <prvResetNextTaskUnblockTime+0x38>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	4a04      	ldr	r2, [pc, #16]	; (80074e8 <prvResetNextTaskUnblockTime+0x3c>)
 80074d6:	6013      	str	r3, [r2, #0]
}
 80074d8:	bf00      	nop
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr
 80074e4:	2000a9b4 	.word	0x2000a9b4
 80074e8:	2000aa1c 	.word	0x2000aa1c

080074ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80074f2:	4b0b      	ldr	r3, [pc, #44]	; (8007520 <xTaskGetSchedulerState+0x34>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d102      	bne.n	8007500 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80074fa:	2301      	movs	r3, #1
 80074fc:	607b      	str	r3, [r7, #4]
 80074fe:	e008      	b.n	8007512 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007500:	4b08      	ldr	r3, [pc, #32]	; (8007524 <xTaskGetSchedulerState+0x38>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d102      	bne.n	800750e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007508:	2302      	movs	r3, #2
 800750a:	607b      	str	r3, [r7, #4]
 800750c:	e001      	b.n	8007512 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800750e:	2300      	movs	r3, #0
 8007510:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007512:	687b      	ldr	r3, [r7, #4]
	}
 8007514:	4618      	mov	r0, r3
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr
 8007520:	2000aa08 	.word	0x2000aa08
 8007524:	2000aa24 	.word	0x2000aa24

08007528 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007534:	2300      	movs	r3, #0
 8007536:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d05e      	beq.n	80075fc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007542:	4b31      	ldr	r3, [pc, #196]	; (8007608 <xTaskPriorityInherit+0xe0>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007548:	429a      	cmp	r2, r3
 800754a:	d24e      	bcs.n	80075ea <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	699b      	ldr	r3, [r3, #24]
 8007550:	2b00      	cmp	r3, #0
 8007552:	db06      	blt.n	8007562 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007554:	4b2c      	ldr	r3, [pc, #176]	; (8007608 <xTaskPriorityInherit+0xe0>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755a:	f1c3 0207 	rsb	r2, r3, #7
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	6959      	ldr	r1, [r3, #20]
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800756a:	4613      	mov	r3, r2
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	4413      	add	r3, r2
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	4a26      	ldr	r2, [pc, #152]	; (800760c <xTaskPriorityInherit+0xe4>)
 8007574:	4413      	add	r3, r2
 8007576:	4299      	cmp	r1, r3
 8007578:	d12f      	bne.n	80075da <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	3304      	adds	r3, #4
 800757e:	4618      	mov	r0, r3
 8007580:	f7fe fb44 	bl	8005c0c <uxListRemove>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d10a      	bne.n	80075a0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758e:	2201      	movs	r2, #1
 8007590:	fa02 f303 	lsl.w	r3, r2, r3
 8007594:	43da      	mvns	r2, r3
 8007596:	4b1e      	ldr	r3, [pc, #120]	; (8007610 <xTaskPriorityInherit+0xe8>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4013      	ands	r3, r2
 800759c:	4a1c      	ldr	r2, [pc, #112]	; (8007610 <xTaskPriorityInherit+0xe8>)
 800759e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80075a0:	4b19      	ldr	r3, [pc, #100]	; (8007608 <xTaskPriorityInherit+0xe0>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ae:	2201      	movs	r2, #1
 80075b0:	409a      	lsls	r2, r3
 80075b2:	4b17      	ldr	r3, [pc, #92]	; (8007610 <xTaskPriorityInherit+0xe8>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	4a15      	ldr	r2, [pc, #84]	; (8007610 <xTaskPriorityInherit+0xe8>)
 80075ba:	6013      	str	r3, [r2, #0]
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075c0:	4613      	mov	r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	4413      	add	r3, r2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4a10      	ldr	r2, [pc, #64]	; (800760c <xTaskPriorityInherit+0xe4>)
 80075ca:	441a      	add	r2, r3
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	3304      	adds	r3, #4
 80075d0:	4619      	mov	r1, r3
 80075d2:	4610      	mov	r0, r2
 80075d4:	f7fe fabd 	bl	8005b52 <vListInsertEnd>
 80075d8:	e004      	b.n	80075e4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80075da:	4b0b      	ldr	r3, [pc, #44]	; (8007608 <xTaskPriorityInherit+0xe0>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80075e4:	2301      	movs	r3, #1
 80075e6:	60fb      	str	r3, [r7, #12]
 80075e8:	e008      	b.n	80075fc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075ee:	4b06      	ldr	r3, [pc, #24]	; (8007608 <xTaskPriorityInherit+0xe0>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d201      	bcs.n	80075fc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80075f8:	2301      	movs	r3, #1
 80075fa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80075fc:	68fb      	ldr	r3, [r7, #12]
	}
 80075fe:	4618      	mov	r0, r3
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	2000a8fc 	.word	0x2000a8fc
 800760c:	2000a900 	.word	0x2000a900
 8007610:	2000aa04 	.word	0x2000aa04

08007614 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007614:	b580      	push	{r7, lr}
 8007616:	b086      	sub	sp, #24
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007620:	2300      	movs	r3, #0
 8007622:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d06e      	beq.n	8007708 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800762a:	4b3a      	ldr	r3, [pc, #232]	; (8007714 <xTaskPriorityDisinherit+0x100>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	429a      	cmp	r2, r3
 8007632:	d00a      	beq.n	800764a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007638:	f383 8811 	msr	BASEPRI, r3
 800763c:	f3bf 8f6f 	isb	sy
 8007640:	f3bf 8f4f 	dsb	sy
 8007644:	60fb      	str	r3, [r7, #12]
}
 8007646:	bf00      	nop
 8007648:	e7fe      	b.n	8007648 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800764e:	2b00      	cmp	r3, #0
 8007650:	d10a      	bne.n	8007668 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007656:	f383 8811 	msr	BASEPRI, r3
 800765a:	f3bf 8f6f 	isb	sy
 800765e:	f3bf 8f4f 	dsb	sy
 8007662:	60bb      	str	r3, [r7, #8]
}
 8007664:	bf00      	nop
 8007666:	e7fe      	b.n	8007666 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800766c:	1e5a      	subs	r2, r3, #1
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800767a:	429a      	cmp	r2, r3
 800767c:	d044      	beq.n	8007708 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007682:	2b00      	cmp	r3, #0
 8007684:	d140      	bne.n	8007708 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	3304      	adds	r3, #4
 800768a:	4618      	mov	r0, r3
 800768c:	f7fe fabe 	bl	8005c0c <uxListRemove>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d115      	bne.n	80076c2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800769a:	491f      	ldr	r1, [pc, #124]	; (8007718 <xTaskPriorityDisinherit+0x104>)
 800769c:	4613      	mov	r3, r2
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4413      	add	r3, r2
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	440b      	add	r3, r1
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d10a      	bne.n	80076c2 <xTaskPriorityDisinherit+0xae>
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b0:	2201      	movs	r2, #1
 80076b2:	fa02 f303 	lsl.w	r3, r2, r3
 80076b6:	43da      	mvns	r2, r3
 80076b8:	4b18      	ldr	r3, [pc, #96]	; (800771c <xTaskPriorityDisinherit+0x108>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4013      	ands	r3, r2
 80076be:	4a17      	ldr	r2, [pc, #92]	; (800771c <xTaskPriorityDisinherit+0x108>)
 80076c0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ce:	f1c3 0207 	rsb	r2, r3, #7
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076da:	2201      	movs	r2, #1
 80076dc:	409a      	lsls	r2, r3
 80076de:	4b0f      	ldr	r3, [pc, #60]	; (800771c <xTaskPriorityDisinherit+0x108>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	4a0d      	ldr	r2, [pc, #52]	; (800771c <xTaskPriorityDisinherit+0x108>)
 80076e6:	6013      	str	r3, [r2, #0]
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ec:	4613      	mov	r3, r2
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	4413      	add	r3, r2
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	4a08      	ldr	r2, [pc, #32]	; (8007718 <xTaskPriorityDisinherit+0x104>)
 80076f6:	441a      	add	r2, r3
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	3304      	adds	r3, #4
 80076fc:	4619      	mov	r1, r3
 80076fe:	4610      	mov	r0, r2
 8007700:	f7fe fa27 	bl	8005b52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007704:	2301      	movs	r3, #1
 8007706:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007708:	697b      	ldr	r3, [r7, #20]
	}
 800770a:	4618      	mov	r0, r3
 800770c:	3718      	adds	r7, #24
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	2000a8fc 	.word	0x2000a8fc
 8007718:	2000a900 	.word	0x2000a900
 800771c:	2000aa04 	.word	0x2000aa04

08007720 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007720:	b580      	push	{r7, lr}
 8007722:	b088      	sub	sp, #32
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800772e:	2301      	movs	r3, #1
 8007730:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d077      	beq.n	8007828 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800773c:	2b00      	cmp	r3, #0
 800773e:	d10a      	bne.n	8007756 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007744:	f383 8811 	msr	BASEPRI, r3
 8007748:	f3bf 8f6f 	isb	sy
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	60fb      	str	r3, [r7, #12]
}
 8007752:	bf00      	nop
 8007754:	e7fe      	b.n	8007754 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800775a:	683a      	ldr	r2, [r7, #0]
 800775c:	429a      	cmp	r2, r3
 800775e:	d902      	bls.n	8007766 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	61fb      	str	r3, [r7, #28]
 8007764:	e002      	b.n	800776c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800776a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800776c:	69bb      	ldr	r3, [r7, #24]
 800776e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007770:	69fa      	ldr	r2, [r7, #28]
 8007772:	429a      	cmp	r2, r3
 8007774:	d058      	beq.n	8007828 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800777a:	697a      	ldr	r2, [r7, #20]
 800777c:	429a      	cmp	r2, r3
 800777e:	d153      	bne.n	8007828 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007780:	4b2b      	ldr	r3, [pc, #172]	; (8007830 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	69ba      	ldr	r2, [r7, #24]
 8007786:	429a      	cmp	r2, r3
 8007788:	d10a      	bne.n	80077a0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800778a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778e:	f383 8811 	msr	BASEPRI, r3
 8007792:	f3bf 8f6f 	isb	sy
 8007796:	f3bf 8f4f 	dsb	sy
 800779a:	60bb      	str	r3, [r7, #8]
}
 800779c:	bf00      	nop
 800779e:	e7fe      	b.n	800779e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	69fa      	ldr	r2, [r7, #28]
 80077aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	699b      	ldr	r3, [r3, #24]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	db04      	blt.n	80077be <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	f1c3 0207 	rsb	r2, r3, #7
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	6959      	ldr	r1, [r3, #20]
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	4613      	mov	r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	4413      	add	r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4a19      	ldr	r2, [pc, #100]	; (8007834 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80077ce:	4413      	add	r3, r2
 80077d0:	4299      	cmp	r1, r3
 80077d2:	d129      	bne.n	8007828 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	3304      	adds	r3, #4
 80077d8:	4618      	mov	r0, r3
 80077da:	f7fe fa17 	bl	8005c0c <uxListRemove>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10a      	bne.n	80077fa <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e8:	2201      	movs	r2, #1
 80077ea:	fa02 f303 	lsl.w	r3, r2, r3
 80077ee:	43da      	mvns	r2, r3
 80077f0:	4b11      	ldr	r3, [pc, #68]	; (8007838 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4013      	ands	r3, r2
 80077f6:	4a10      	ldr	r2, [pc, #64]	; (8007838 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80077f8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077fe:	2201      	movs	r2, #1
 8007800:	409a      	lsls	r2, r3
 8007802:	4b0d      	ldr	r3, [pc, #52]	; (8007838 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4313      	orrs	r3, r2
 8007808:	4a0b      	ldr	r2, [pc, #44]	; (8007838 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800780a:	6013      	str	r3, [r2, #0]
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007810:	4613      	mov	r3, r2
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	4413      	add	r3, r2
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	4a06      	ldr	r2, [pc, #24]	; (8007834 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800781a:	441a      	add	r2, r3
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	3304      	adds	r3, #4
 8007820:	4619      	mov	r1, r3
 8007822:	4610      	mov	r0, r2
 8007824:	f7fe f995 	bl	8005b52 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007828:	bf00      	nop
 800782a:	3720      	adds	r7, #32
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	2000a8fc 	.word	0x2000a8fc
 8007834:	2000a900 	.word	0x2000a900
 8007838:	2000aa04 	.word	0x2000aa04

0800783c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800783c:	b480      	push	{r7}
 800783e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007840:	4b07      	ldr	r3, [pc, #28]	; (8007860 <pvTaskIncrementMutexHeldCount+0x24>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d004      	beq.n	8007852 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007848:	4b05      	ldr	r3, [pc, #20]	; (8007860 <pvTaskIncrementMutexHeldCount+0x24>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800784e:	3201      	adds	r2, #1
 8007850:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007852:	4b03      	ldr	r3, [pc, #12]	; (8007860 <pvTaskIncrementMutexHeldCount+0x24>)
 8007854:	681b      	ldr	r3, [r3, #0]
	}
 8007856:	4618      	mov	r0, r3
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr
 8007860:	2000a8fc 	.word	0x2000a8fc

08007864 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800786e:	4b29      	ldr	r3, [pc, #164]	; (8007914 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007874:	4b28      	ldr	r3, [pc, #160]	; (8007918 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	3304      	adds	r3, #4
 800787a:	4618      	mov	r0, r3
 800787c:	f7fe f9c6 	bl	8005c0c <uxListRemove>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10b      	bne.n	800789e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007886:	4b24      	ldr	r3, [pc, #144]	; (8007918 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788c:	2201      	movs	r2, #1
 800788e:	fa02 f303 	lsl.w	r3, r2, r3
 8007892:	43da      	mvns	r2, r3
 8007894:	4b21      	ldr	r3, [pc, #132]	; (800791c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4013      	ands	r3, r2
 800789a:	4a20      	ldr	r2, [pc, #128]	; (800791c <prvAddCurrentTaskToDelayedList+0xb8>)
 800789c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a4:	d10a      	bne.n	80078bc <prvAddCurrentTaskToDelayedList+0x58>
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d007      	beq.n	80078bc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078ac:	4b1a      	ldr	r3, [pc, #104]	; (8007918 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	3304      	adds	r3, #4
 80078b2:	4619      	mov	r1, r3
 80078b4:	481a      	ldr	r0, [pc, #104]	; (8007920 <prvAddCurrentTaskToDelayedList+0xbc>)
 80078b6:	f7fe f94c 	bl	8005b52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80078ba:	e026      	b.n	800790a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4413      	add	r3, r2
 80078c2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80078c4:	4b14      	ldr	r3, [pc, #80]	; (8007918 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68ba      	ldr	r2, [r7, #8]
 80078ca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80078cc:	68ba      	ldr	r2, [r7, #8]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d209      	bcs.n	80078e8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078d4:	4b13      	ldr	r3, [pc, #76]	; (8007924 <prvAddCurrentTaskToDelayedList+0xc0>)
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	4b0f      	ldr	r3, [pc, #60]	; (8007918 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	3304      	adds	r3, #4
 80078de:	4619      	mov	r1, r3
 80078e0:	4610      	mov	r0, r2
 80078e2:	f7fe f95a 	bl	8005b9a <vListInsert>
}
 80078e6:	e010      	b.n	800790a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078e8:	4b0f      	ldr	r3, [pc, #60]	; (8007928 <prvAddCurrentTaskToDelayedList+0xc4>)
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	4b0a      	ldr	r3, [pc, #40]	; (8007918 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3304      	adds	r3, #4
 80078f2:	4619      	mov	r1, r3
 80078f4:	4610      	mov	r0, r2
 80078f6:	f7fe f950 	bl	8005b9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80078fa:	4b0c      	ldr	r3, [pc, #48]	; (800792c <prvAddCurrentTaskToDelayedList+0xc8>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	429a      	cmp	r2, r3
 8007902:	d202      	bcs.n	800790a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007904:	4a09      	ldr	r2, [pc, #36]	; (800792c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	6013      	str	r3, [r2, #0]
}
 800790a:	bf00      	nop
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	2000aa00 	.word	0x2000aa00
 8007918:	2000a8fc 	.word	0x2000a8fc
 800791c:	2000aa04 	.word	0x2000aa04
 8007920:	2000a9e8 	.word	0x2000a9e8
 8007924:	2000a9b8 	.word	0x2000a9b8
 8007928:	2000a9b4 	.word	0x2000a9b4
 800792c:	2000aa1c 	.word	0x2000aa1c

08007930 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007930:	b480      	push	{r7}
 8007932:	b085      	sub	sp, #20
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	3b04      	subs	r3, #4
 8007940:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007948:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	3b04      	subs	r3, #4
 800794e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	f023 0201 	bic.w	r2, r3, #1
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	3b04      	subs	r3, #4
 800795e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007960:	4a0c      	ldr	r2, [pc, #48]	; (8007994 <pxPortInitialiseStack+0x64>)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	3b14      	subs	r3, #20
 800796a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	3b04      	subs	r3, #4
 8007976:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f06f 0202 	mvn.w	r2, #2
 800797e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	3b20      	subs	r3, #32
 8007984:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007986:	68fb      	ldr	r3, [r7, #12]
}
 8007988:	4618      	mov	r0, r3
 800798a:	3714      	adds	r7, #20
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr
 8007994:	08007999 	.word	0x08007999

08007998 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007998:	b480      	push	{r7}
 800799a:	b085      	sub	sp, #20
 800799c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800799e:	2300      	movs	r3, #0
 80079a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80079a2:	4b12      	ldr	r3, [pc, #72]	; (80079ec <prvTaskExitError+0x54>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079aa:	d00a      	beq.n	80079c2 <prvTaskExitError+0x2a>
	__asm volatile
 80079ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b0:	f383 8811 	msr	BASEPRI, r3
 80079b4:	f3bf 8f6f 	isb	sy
 80079b8:	f3bf 8f4f 	dsb	sy
 80079bc:	60fb      	str	r3, [r7, #12]
}
 80079be:	bf00      	nop
 80079c0:	e7fe      	b.n	80079c0 <prvTaskExitError+0x28>
	__asm volatile
 80079c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c6:	f383 8811 	msr	BASEPRI, r3
 80079ca:	f3bf 8f6f 	isb	sy
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	60bb      	str	r3, [r7, #8]
}
 80079d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80079d6:	bf00      	nop
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d0fc      	beq.n	80079d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80079de:	bf00      	nop
 80079e0:	bf00      	nop
 80079e2:	3714      	adds	r7, #20
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr
 80079ec:	2000000c 	.word	0x2000000c

080079f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80079f0:	4b07      	ldr	r3, [pc, #28]	; (8007a10 <pxCurrentTCBConst2>)
 80079f2:	6819      	ldr	r1, [r3, #0]
 80079f4:	6808      	ldr	r0, [r1, #0]
 80079f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079fa:	f380 8809 	msr	PSP, r0
 80079fe:	f3bf 8f6f 	isb	sy
 8007a02:	f04f 0000 	mov.w	r0, #0
 8007a06:	f380 8811 	msr	BASEPRI, r0
 8007a0a:	4770      	bx	lr
 8007a0c:	f3af 8000 	nop.w

08007a10 <pxCurrentTCBConst2>:
 8007a10:	2000a8fc 	.word	0x2000a8fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a14:	bf00      	nop
 8007a16:	bf00      	nop

08007a18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007a18:	4808      	ldr	r0, [pc, #32]	; (8007a3c <prvPortStartFirstTask+0x24>)
 8007a1a:	6800      	ldr	r0, [r0, #0]
 8007a1c:	6800      	ldr	r0, [r0, #0]
 8007a1e:	f380 8808 	msr	MSP, r0
 8007a22:	f04f 0000 	mov.w	r0, #0
 8007a26:	f380 8814 	msr	CONTROL, r0
 8007a2a:	b662      	cpsie	i
 8007a2c:	b661      	cpsie	f
 8007a2e:	f3bf 8f4f 	dsb	sy
 8007a32:	f3bf 8f6f 	isb	sy
 8007a36:	df00      	svc	0
 8007a38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007a3a:	bf00      	nop
 8007a3c:	e000ed08 	.word	0xe000ed08

08007a40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007a46:	4b46      	ldr	r3, [pc, #280]	; (8007b60 <xPortStartScheduler+0x120>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a46      	ldr	r2, [pc, #280]	; (8007b64 <xPortStartScheduler+0x124>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d10a      	bne.n	8007a66 <xPortStartScheduler+0x26>
	__asm volatile
 8007a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a54:	f383 8811 	msr	BASEPRI, r3
 8007a58:	f3bf 8f6f 	isb	sy
 8007a5c:	f3bf 8f4f 	dsb	sy
 8007a60:	613b      	str	r3, [r7, #16]
}
 8007a62:	bf00      	nop
 8007a64:	e7fe      	b.n	8007a64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007a66:	4b3e      	ldr	r3, [pc, #248]	; (8007b60 <xPortStartScheduler+0x120>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a3f      	ldr	r2, [pc, #252]	; (8007b68 <xPortStartScheduler+0x128>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d10a      	bne.n	8007a86 <xPortStartScheduler+0x46>
	__asm volatile
 8007a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a74:	f383 8811 	msr	BASEPRI, r3
 8007a78:	f3bf 8f6f 	isb	sy
 8007a7c:	f3bf 8f4f 	dsb	sy
 8007a80:	60fb      	str	r3, [r7, #12]
}
 8007a82:	bf00      	nop
 8007a84:	e7fe      	b.n	8007a84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a86:	4b39      	ldr	r3, [pc, #228]	; (8007b6c <xPortStartScheduler+0x12c>)
 8007a88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	22ff      	movs	r2, #255	; 0xff
 8007a96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007aa0:	78fb      	ldrb	r3, [r7, #3]
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007aa8:	b2da      	uxtb	r2, r3
 8007aaa:	4b31      	ldr	r3, [pc, #196]	; (8007b70 <xPortStartScheduler+0x130>)
 8007aac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007aae:	4b31      	ldr	r3, [pc, #196]	; (8007b74 <xPortStartScheduler+0x134>)
 8007ab0:	2207      	movs	r2, #7
 8007ab2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ab4:	e009      	b.n	8007aca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007ab6:	4b2f      	ldr	r3, [pc, #188]	; (8007b74 <xPortStartScheduler+0x134>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	3b01      	subs	r3, #1
 8007abc:	4a2d      	ldr	r2, [pc, #180]	; (8007b74 <xPortStartScheduler+0x134>)
 8007abe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ac0:	78fb      	ldrb	r3, [r7, #3]
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	005b      	lsls	r3, r3, #1
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007aca:	78fb      	ldrb	r3, [r7, #3]
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ad2:	2b80      	cmp	r3, #128	; 0x80
 8007ad4:	d0ef      	beq.n	8007ab6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ad6:	4b27      	ldr	r3, [pc, #156]	; (8007b74 <xPortStartScheduler+0x134>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f1c3 0307 	rsb	r3, r3, #7
 8007ade:	2b04      	cmp	r3, #4
 8007ae0:	d00a      	beq.n	8007af8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae6:	f383 8811 	msr	BASEPRI, r3
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	60bb      	str	r3, [r7, #8]
}
 8007af4:	bf00      	nop
 8007af6:	e7fe      	b.n	8007af6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007af8:	4b1e      	ldr	r3, [pc, #120]	; (8007b74 <xPortStartScheduler+0x134>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	021b      	lsls	r3, r3, #8
 8007afe:	4a1d      	ldr	r2, [pc, #116]	; (8007b74 <xPortStartScheduler+0x134>)
 8007b00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b02:	4b1c      	ldr	r3, [pc, #112]	; (8007b74 <xPortStartScheduler+0x134>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b0a:	4a1a      	ldr	r2, [pc, #104]	; (8007b74 <xPortStartScheduler+0x134>)
 8007b0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	b2da      	uxtb	r2, r3
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b16:	4b18      	ldr	r3, [pc, #96]	; (8007b78 <xPortStartScheduler+0x138>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a17      	ldr	r2, [pc, #92]	; (8007b78 <xPortStartScheduler+0x138>)
 8007b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007b20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b22:	4b15      	ldr	r3, [pc, #84]	; (8007b78 <xPortStartScheduler+0x138>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a14      	ldr	r2, [pc, #80]	; (8007b78 <xPortStartScheduler+0x138>)
 8007b28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007b2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b2e:	f000 f8dd 	bl	8007cec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b32:	4b12      	ldr	r3, [pc, #72]	; (8007b7c <xPortStartScheduler+0x13c>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007b38:	f000 f8fc 	bl	8007d34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007b3c:	4b10      	ldr	r3, [pc, #64]	; (8007b80 <xPortStartScheduler+0x140>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a0f      	ldr	r2, [pc, #60]	; (8007b80 <xPortStartScheduler+0x140>)
 8007b42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007b46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b48:	f7ff ff66 	bl	8007a18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b4c:	f7ff fa88 	bl	8007060 <vTaskSwitchContext>
	prvTaskExitError();
 8007b50:	f7ff ff22 	bl	8007998 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3718      	adds	r7, #24
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	e000ed00 	.word	0xe000ed00
 8007b64:	410fc271 	.word	0x410fc271
 8007b68:	410fc270 	.word	0x410fc270
 8007b6c:	e000e400 	.word	0xe000e400
 8007b70:	2000aa28 	.word	0x2000aa28
 8007b74:	2000aa2c 	.word	0x2000aa2c
 8007b78:	e000ed20 	.word	0xe000ed20
 8007b7c:	2000000c 	.word	0x2000000c
 8007b80:	e000ef34 	.word	0xe000ef34

08007b84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
	__asm volatile
 8007b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8e:	f383 8811 	msr	BASEPRI, r3
 8007b92:	f3bf 8f6f 	isb	sy
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	607b      	str	r3, [r7, #4]
}
 8007b9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b9e:	4b0f      	ldr	r3, [pc, #60]	; (8007bdc <vPortEnterCritical+0x58>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	4a0d      	ldr	r2, [pc, #52]	; (8007bdc <vPortEnterCritical+0x58>)
 8007ba6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007ba8:	4b0c      	ldr	r3, [pc, #48]	; (8007bdc <vPortEnterCritical+0x58>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d10f      	bne.n	8007bd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007bb0:	4b0b      	ldr	r3, [pc, #44]	; (8007be0 <vPortEnterCritical+0x5c>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00a      	beq.n	8007bd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbe:	f383 8811 	msr	BASEPRI, r3
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	f3bf 8f4f 	dsb	sy
 8007bca:	603b      	str	r3, [r7, #0]
}
 8007bcc:	bf00      	nop
 8007bce:	e7fe      	b.n	8007bce <vPortEnterCritical+0x4a>
	}
}
 8007bd0:	bf00      	nop
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr
 8007bdc:	2000000c 	.word	0x2000000c
 8007be0:	e000ed04 	.word	0xe000ed04

08007be4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007bea:	4b12      	ldr	r3, [pc, #72]	; (8007c34 <vPortExitCritical+0x50>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10a      	bne.n	8007c08 <vPortExitCritical+0x24>
	__asm volatile
 8007bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	607b      	str	r3, [r7, #4]
}
 8007c04:	bf00      	nop
 8007c06:	e7fe      	b.n	8007c06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007c08:	4b0a      	ldr	r3, [pc, #40]	; (8007c34 <vPortExitCritical+0x50>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	4a09      	ldr	r2, [pc, #36]	; (8007c34 <vPortExitCritical+0x50>)
 8007c10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c12:	4b08      	ldr	r3, [pc, #32]	; (8007c34 <vPortExitCritical+0x50>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d105      	bne.n	8007c26 <vPortExitCritical+0x42>
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	f383 8811 	msr	BASEPRI, r3
}
 8007c24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c26:	bf00      	nop
 8007c28:	370c      	adds	r7, #12
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	2000000c 	.word	0x2000000c
	...

08007c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c40:	f3ef 8009 	mrs	r0, PSP
 8007c44:	f3bf 8f6f 	isb	sy
 8007c48:	4b15      	ldr	r3, [pc, #84]	; (8007ca0 <pxCurrentTCBConst>)
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	f01e 0f10 	tst.w	lr, #16
 8007c50:	bf08      	it	eq
 8007c52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c5a:	6010      	str	r0, [r2, #0]
 8007c5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007c64:	f380 8811 	msr	BASEPRI, r0
 8007c68:	f3bf 8f4f 	dsb	sy
 8007c6c:	f3bf 8f6f 	isb	sy
 8007c70:	f7ff f9f6 	bl	8007060 <vTaskSwitchContext>
 8007c74:	f04f 0000 	mov.w	r0, #0
 8007c78:	f380 8811 	msr	BASEPRI, r0
 8007c7c:	bc09      	pop	{r0, r3}
 8007c7e:	6819      	ldr	r1, [r3, #0]
 8007c80:	6808      	ldr	r0, [r1, #0]
 8007c82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c86:	f01e 0f10 	tst.w	lr, #16
 8007c8a:	bf08      	it	eq
 8007c8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c90:	f380 8809 	msr	PSP, r0
 8007c94:	f3bf 8f6f 	isb	sy
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop
 8007c9c:	f3af 8000 	nop.w

08007ca0 <pxCurrentTCBConst>:
 8007ca0:	2000a8fc 	.word	0x2000a8fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ca4:	bf00      	nop
 8007ca6:	bf00      	nop

08007ca8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
	__asm volatile
 8007cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb2:	f383 8811 	msr	BASEPRI, r3
 8007cb6:	f3bf 8f6f 	isb	sy
 8007cba:	f3bf 8f4f 	dsb	sy
 8007cbe:	607b      	str	r3, [r7, #4]
}
 8007cc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007cc2:	f7ff f915 	bl	8006ef0 <xTaskIncrementTick>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d003      	beq.n	8007cd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007ccc:	4b06      	ldr	r3, [pc, #24]	; (8007ce8 <SysTick_Handler+0x40>)
 8007cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cd2:	601a      	str	r2, [r3, #0]
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	f383 8811 	msr	BASEPRI, r3
}
 8007cde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ce0:	bf00      	nop
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	e000ed04 	.word	0xe000ed04

08007cec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007cec:	b480      	push	{r7}
 8007cee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007cf0:	4b0b      	ldr	r3, [pc, #44]	; (8007d20 <vPortSetupTimerInterrupt+0x34>)
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007cf6:	4b0b      	ldr	r3, [pc, #44]	; (8007d24 <vPortSetupTimerInterrupt+0x38>)
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007cfc:	4b0a      	ldr	r3, [pc, #40]	; (8007d28 <vPortSetupTimerInterrupt+0x3c>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a0a      	ldr	r2, [pc, #40]	; (8007d2c <vPortSetupTimerInterrupt+0x40>)
 8007d02:	fba2 2303 	umull	r2, r3, r2, r3
 8007d06:	099b      	lsrs	r3, r3, #6
 8007d08:	4a09      	ldr	r2, [pc, #36]	; (8007d30 <vPortSetupTimerInterrupt+0x44>)
 8007d0a:	3b01      	subs	r3, #1
 8007d0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d0e:	4b04      	ldr	r3, [pc, #16]	; (8007d20 <vPortSetupTimerInterrupt+0x34>)
 8007d10:	2207      	movs	r2, #7
 8007d12:	601a      	str	r2, [r3, #0]
}
 8007d14:	bf00      	nop
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	e000e010 	.word	0xe000e010
 8007d24:	e000e018 	.word	0xe000e018
 8007d28:	20000000 	.word	0x20000000
 8007d2c:	10624dd3 	.word	0x10624dd3
 8007d30:	e000e014 	.word	0xe000e014

08007d34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007d34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007d44 <vPortEnableVFP+0x10>
 8007d38:	6801      	ldr	r1, [r0, #0]
 8007d3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007d3e:	6001      	str	r1, [r0, #0]
 8007d40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007d42:	bf00      	nop
 8007d44:	e000ed88 	.word	0xe000ed88

08007d48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007d4e:	f3ef 8305 	mrs	r3, IPSR
 8007d52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2b0f      	cmp	r3, #15
 8007d58:	d914      	bls.n	8007d84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d5a:	4a17      	ldr	r2, [pc, #92]	; (8007db8 <vPortValidateInterruptPriority+0x70>)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	4413      	add	r3, r2
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d64:	4b15      	ldr	r3, [pc, #84]	; (8007dbc <vPortValidateInterruptPriority+0x74>)
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	7afa      	ldrb	r2, [r7, #11]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d20a      	bcs.n	8007d84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d72:	f383 8811 	msr	BASEPRI, r3
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	607b      	str	r3, [r7, #4]
}
 8007d80:	bf00      	nop
 8007d82:	e7fe      	b.n	8007d82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007d84:	4b0e      	ldr	r3, [pc, #56]	; (8007dc0 <vPortValidateInterruptPriority+0x78>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007d8c:	4b0d      	ldr	r3, [pc, #52]	; (8007dc4 <vPortValidateInterruptPriority+0x7c>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d90a      	bls.n	8007daa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d98:	f383 8811 	msr	BASEPRI, r3
 8007d9c:	f3bf 8f6f 	isb	sy
 8007da0:	f3bf 8f4f 	dsb	sy
 8007da4:	603b      	str	r3, [r7, #0]
}
 8007da6:	bf00      	nop
 8007da8:	e7fe      	b.n	8007da8 <vPortValidateInterruptPriority+0x60>
	}
 8007daa:	bf00      	nop
 8007dac:	3714      	adds	r7, #20
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr
 8007db6:	bf00      	nop
 8007db8:	e000e3f0 	.word	0xe000e3f0
 8007dbc:	2000aa28 	.word	0x2000aa28
 8007dc0:	e000ed0c 	.word	0xe000ed0c
 8007dc4:	2000aa2c 	.word	0x2000aa2c

08007dc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b08a      	sub	sp, #40	; 0x28
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007dd4:	f7fe ffe2 	bl	8006d9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007dd8:	4b5b      	ldr	r3, [pc, #364]	; (8007f48 <pvPortMalloc+0x180>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d101      	bne.n	8007de4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007de0:	f000 f920 	bl	8008024 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007de4:	4b59      	ldr	r3, [pc, #356]	; (8007f4c <pvPortMalloc+0x184>)
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4013      	ands	r3, r2
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f040 8093 	bne.w	8007f18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d01d      	beq.n	8007e34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007df8:	2208      	movs	r2, #8
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f003 0307 	and.w	r3, r3, #7
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d014      	beq.n	8007e34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f023 0307 	bic.w	r3, r3, #7
 8007e10:	3308      	adds	r3, #8
 8007e12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f003 0307 	and.w	r3, r3, #7
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00a      	beq.n	8007e34 <pvPortMalloc+0x6c>
	__asm volatile
 8007e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e22:	f383 8811 	msr	BASEPRI, r3
 8007e26:	f3bf 8f6f 	isb	sy
 8007e2a:	f3bf 8f4f 	dsb	sy
 8007e2e:	617b      	str	r3, [r7, #20]
}
 8007e30:	bf00      	nop
 8007e32:	e7fe      	b.n	8007e32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d06e      	beq.n	8007f18 <pvPortMalloc+0x150>
 8007e3a:	4b45      	ldr	r3, [pc, #276]	; (8007f50 <pvPortMalloc+0x188>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d869      	bhi.n	8007f18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e44:	4b43      	ldr	r3, [pc, #268]	; (8007f54 <pvPortMalloc+0x18c>)
 8007e46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e48:	4b42      	ldr	r3, [pc, #264]	; (8007f54 <pvPortMalloc+0x18c>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e4e:	e004      	b.n	8007e5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d903      	bls.n	8007e6c <pvPortMalloc+0xa4>
 8007e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1f1      	bne.n	8007e50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007e6c:	4b36      	ldr	r3, [pc, #216]	; (8007f48 <pvPortMalloc+0x180>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d050      	beq.n	8007f18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e76:	6a3b      	ldr	r3, [r7, #32]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2208      	movs	r2, #8
 8007e7c:	4413      	add	r3, r2
 8007e7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	6a3b      	ldr	r3, [r7, #32]
 8007e86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8a:	685a      	ldr	r2, [r3, #4]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	1ad2      	subs	r2, r2, r3
 8007e90:	2308      	movs	r3, #8
 8007e92:	005b      	lsls	r3, r3, #1
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d91f      	bls.n	8007ed8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	f003 0307 	and.w	r3, r3, #7
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d00a      	beq.n	8007ec0 <pvPortMalloc+0xf8>
	__asm volatile
 8007eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eae:	f383 8811 	msr	BASEPRI, r3
 8007eb2:	f3bf 8f6f 	isb	sy
 8007eb6:	f3bf 8f4f 	dsb	sy
 8007eba:	613b      	str	r3, [r7, #16]
}
 8007ebc:	bf00      	nop
 8007ebe:	e7fe      	b.n	8007ebe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec2:	685a      	ldr	r2, [r3, #4]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	1ad2      	subs	r2, r2, r3
 8007ec8:	69bb      	ldr	r3, [r7, #24]
 8007eca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007ed2:	69b8      	ldr	r0, [r7, #24]
 8007ed4:	f000 f908 	bl	80080e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ed8:	4b1d      	ldr	r3, [pc, #116]	; (8007f50 <pvPortMalloc+0x188>)
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	1ad3      	subs	r3, r2, r3
 8007ee2:	4a1b      	ldr	r2, [pc, #108]	; (8007f50 <pvPortMalloc+0x188>)
 8007ee4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ee6:	4b1a      	ldr	r3, [pc, #104]	; (8007f50 <pvPortMalloc+0x188>)
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	4b1b      	ldr	r3, [pc, #108]	; (8007f58 <pvPortMalloc+0x190>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d203      	bcs.n	8007efa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ef2:	4b17      	ldr	r3, [pc, #92]	; (8007f50 <pvPortMalloc+0x188>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a18      	ldr	r2, [pc, #96]	; (8007f58 <pvPortMalloc+0x190>)
 8007ef8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efc:	685a      	ldr	r2, [r3, #4]
 8007efe:	4b13      	ldr	r3, [pc, #76]	; (8007f4c <pvPortMalloc+0x184>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	431a      	orrs	r2, r3
 8007f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007f0e:	4b13      	ldr	r3, [pc, #76]	; (8007f5c <pvPortMalloc+0x194>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	3301      	adds	r3, #1
 8007f14:	4a11      	ldr	r2, [pc, #68]	; (8007f5c <pvPortMalloc+0x194>)
 8007f16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007f18:	f7fe ff4e 	bl	8006db8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	f003 0307 	and.w	r3, r3, #7
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d00a      	beq.n	8007f3c <pvPortMalloc+0x174>
	__asm volatile
 8007f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2a:	f383 8811 	msr	BASEPRI, r3
 8007f2e:	f3bf 8f6f 	isb	sy
 8007f32:	f3bf 8f4f 	dsb	sy
 8007f36:	60fb      	str	r3, [r7, #12]
}
 8007f38:	bf00      	nop
 8007f3a:	e7fe      	b.n	8007f3a <pvPortMalloc+0x172>
	return pvReturn;
 8007f3c:	69fb      	ldr	r3, [r7, #28]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3728      	adds	r7, #40	; 0x28
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	2000b5f0 	.word	0x2000b5f0
 8007f4c:	2000b604 	.word	0x2000b604
 8007f50:	2000b5f4 	.word	0x2000b5f4
 8007f54:	2000b5e8 	.word	0x2000b5e8
 8007f58:	2000b5f8 	.word	0x2000b5f8
 8007f5c:	2000b5fc 	.word	0x2000b5fc

08007f60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d04d      	beq.n	800800e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007f72:	2308      	movs	r3, #8
 8007f74:	425b      	negs	r3, r3
 8007f76:	697a      	ldr	r2, [r7, #20]
 8007f78:	4413      	add	r3, r2
 8007f7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	685a      	ldr	r2, [r3, #4]
 8007f84:	4b24      	ldr	r3, [pc, #144]	; (8008018 <vPortFree+0xb8>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4013      	ands	r3, r2
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10a      	bne.n	8007fa4 <vPortFree+0x44>
	__asm volatile
 8007f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f92:	f383 8811 	msr	BASEPRI, r3
 8007f96:	f3bf 8f6f 	isb	sy
 8007f9a:	f3bf 8f4f 	dsb	sy
 8007f9e:	60fb      	str	r3, [r7, #12]
}
 8007fa0:	bf00      	nop
 8007fa2:	e7fe      	b.n	8007fa2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00a      	beq.n	8007fc2 <vPortFree+0x62>
	__asm volatile
 8007fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb0:	f383 8811 	msr	BASEPRI, r3
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	60bb      	str	r3, [r7, #8]
}
 8007fbe:	bf00      	nop
 8007fc0:	e7fe      	b.n	8007fc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	685a      	ldr	r2, [r3, #4]
 8007fc6:	4b14      	ldr	r3, [pc, #80]	; (8008018 <vPortFree+0xb8>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4013      	ands	r3, r2
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d01e      	beq.n	800800e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d11a      	bne.n	800800e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	685a      	ldr	r2, [r3, #4]
 8007fdc:	4b0e      	ldr	r3, [pc, #56]	; (8008018 <vPortFree+0xb8>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	43db      	mvns	r3, r3
 8007fe2:	401a      	ands	r2, r3
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007fe8:	f7fe fed8 	bl	8006d9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	685a      	ldr	r2, [r3, #4]
 8007ff0:	4b0a      	ldr	r3, [pc, #40]	; (800801c <vPortFree+0xbc>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	4a09      	ldr	r2, [pc, #36]	; (800801c <vPortFree+0xbc>)
 8007ff8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007ffa:	6938      	ldr	r0, [r7, #16]
 8007ffc:	f000 f874 	bl	80080e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008000:	4b07      	ldr	r3, [pc, #28]	; (8008020 <vPortFree+0xc0>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	3301      	adds	r3, #1
 8008006:	4a06      	ldr	r2, [pc, #24]	; (8008020 <vPortFree+0xc0>)
 8008008:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800800a:	f7fe fed5 	bl	8006db8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800800e:	bf00      	nop
 8008010:	3718      	adds	r7, #24
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	2000b604 	.word	0x2000b604
 800801c:	2000b5f4 	.word	0x2000b5f4
 8008020:	2000b600 	.word	0x2000b600

08008024 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800802a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800802e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008030:	4b27      	ldr	r3, [pc, #156]	; (80080d0 <prvHeapInit+0xac>)
 8008032:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f003 0307 	and.w	r3, r3, #7
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00c      	beq.n	8008058 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	3307      	adds	r3, #7
 8008042:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f023 0307 	bic.w	r3, r3, #7
 800804a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800804c:	68ba      	ldr	r2, [r7, #8]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	1ad3      	subs	r3, r2, r3
 8008052:	4a1f      	ldr	r2, [pc, #124]	; (80080d0 <prvHeapInit+0xac>)
 8008054:	4413      	add	r3, r2
 8008056:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800805c:	4a1d      	ldr	r2, [pc, #116]	; (80080d4 <prvHeapInit+0xb0>)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008062:	4b1c      	ldr	r3, [pc, #112]	; (80080d4 <prvHeapInit+0xb0>)
 8008064:	2200      	movs	r2, #0
 8008066:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	68ba      	ldr	r2, [r7, #8]
 800806c:	4413      	add	r3, r2
 800806e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008070:	2208      	movs	r2, #8
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	1a9b      	subs	r3, r3, r2
 8008076:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f023 0307 	bic.w	r3, r3, #7
 800807e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	4a15      	ldr	r2, [pc, #84]	; (80080d8 <prvHeapInit+0xb4>)
 8008084:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008086:	4b14      	ldr	r3, [pc, #80]	; (80080d8 <prvHeapInit+0xb4>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2200      	movs	r2, #0
 800808c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800808e:	4b12      	ldr	r3, [pc, #72]	; (80080d8 <prvHeapInit+0xb4>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2200      	movs	r2, #0
 8008094:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	1ad2      	subs	r2, r2, r3
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80080a4:	4b0c      	ldr	r3, [pc, #48]	; (80080d8 <prvHeapInit+0xb4>)
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	4a0a      	ldr	r2, [pc, #40]	; (80080dc <prvHeapInit+0xb8>)
 80080b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	4a09      	ldr	r2, [pc, #36]	; (80080e0 <prvHeapInit+0xbc>)
 80080ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80080bc:	4b09      	ldr	r3, [pc, #36]	; (80080e4 <prvHeapInit+0xc0>)
 80080be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80080c2:	601a      	str	r2, [r3, #0]
}
 80080c4:	bf00      	nop
 80080c6:	3714      	adds	r7, #20
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr
 80080d0:	2000aa30 	.word	0x2000aa30
 80080d4:	2000b5e8 	.word	0x2000b5e8
 80080d8:	2000b5f0 	.word	0x2000b5f0
 80080dc:	2000b5f8 	.word	0x2000b5f8
 80080e0:	2000b5f4 	.word	0x2000b5f4
 80080e4:	2000b604 	.word	0x2000b604

080080e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80080f0:	4b28      	ldr	r3, [pc, #160]	; (8008194 <prvInsertBlockIntoFreeList+0xac>)
 80080f2:	60fb      	str	r3, [r7, #12]
 80080f4:	e002      	b.n	80080fc <prvInsertBlockIntoFreeList+0x14>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	60fb      	str	r3, [r7, #12]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	429a      	cmp	r2, r3
 8008104:	d8f7      	bhi.n	80080f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	4413      	add	r3, r2
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	429a      	cmp	r2, r3
 8008116:	d108      	bne.n	800812a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	685a      	ldr	r2, [r3, #4]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	441a      	add	r2, r3
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	68ba      	ldr	r2, [r7, #8]
 8008134:	441a      	add	r2, r3
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	429a      	cmp	r2, r3
 800813c:	d118      	bne.n	8008170 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	4b15      	ldr	r3, [pc, #84]	; (8008198 <prvInsertBlockIntoFreeList+0xb0>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	429a      	cmp	r2, r3
 8008148:	d00d      	beq.n	8008166 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	685a      	ldr	r2, [r3, #4]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	441a      	add	r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	601a      	str	r2, [r3, #0]
 8008164:	e008      	b.n	8008178 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008166:	4b0c      	ldr	r3, [pc, #48]	; (8008198 <prvInsertBlockIntoFreeList+0xb0>)
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	601a      	str	r2, [r3, #0]
 800816e:	e003      	b.n	8008178 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	429a      	cmp	r2, r3
 800817e:	d002      	beq.n	8008186 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008186:	bf00      	nop
 8008188:	3714      	adds	r7, #20
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	2000b5e8 	.word	0x2000b5e8
 8008198:	2000b5f0 	.word	0x2000b5f0

0800819c <__errno>:
 800819c:	4b01      	ldr	r3, [pc, #4]	; (80081a4 <__errno+0x8>)
 800819e:	6818      	ldr	r0, [r3, #0]
 80081a0:	4770      	bx	lr
 80081a2:	bf00      	nop
 80081a4:	20000010 	.word	0x20000010

080081a8 <std>:
 80081a8:	2300      	movs	r3, #0
 80081aa:	b510      	push	{r4, lr}
 80081ac:	4604      	mov	r4, r0
 80081ae:	e9c0 3300 	strd	r3, r3, [r0]
 80081b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081b6:	6083      	str	r3, [r0, #8]
 80081b8:	8181      	strh	r1, [r0, #12]
 80081ba:	6643      	str	r3, [r0, #100]	; 0x64
 80081bc:	81c2      	strh	r2, [r0, #14]
 80081be:	6183      	str	r3, [r0, #24]
 80081c0:	4619      	mov	r1, r3
 80081c2:	2208      	movs	r2, #8
 80081c4:	305c      	adds	r0, #92	; 0x5c
 80081c6:	f000 f93b 	bl	8008440 <memset>
 80081ca:	4b05      	ldr	r3, [pc, #20]	; (80081e0 <std+0x38>)
 80081cc:	6263      	str	r3, [r4, #36]	; 0x24
 80081ce:	4b05      	ldr	r3, [pc, #20]	; (80081e4 <std+0x3c>)
 80081d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80081d2:	4b05      	ldr	r3, [pc, #20]	; (80081e8 <std+0x40>)
 80081d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081d6:	4b05      	ldr	r3, [pc, #20]	; (80081ec <std+0x44>)
 80081d8:	6224      	str	r4, [r4, #32]
 80081da:	6323      	str	r3, [r4, #48]	; 0x30
 80081dc:	bd10      	pop	{r4, pc}
 80081de:	bf00      	nop
 80081e0:	08008fd9 	.word	0x08008fd9
 80081e4:	08008ffb 	.word	0x08008ffb
 80081e8:	08009033 	.word	0x08009033
 80081ec:	08009057 	.word	0x08009057

080081f0 <_cleanup_r>:
 80081f0:	4901      	ldr	r1, [pc, #4]	; (80081f8 <_cleanup_r+0x8>)
 80081f2:	f000 b8af 	b.w	8008354 <_fwalk_reent>
 80081f6:	bf00      	nop
 80081f8:	08009ee9 	.word	0x08009ee9

080081fc <__sfmoreglue>:
 80081fc:	b570      	push	{r4, r5, r6, lr}
 80081fe:	2268      	movs	r2, #104	; 0x68
 8008200:	1e4d      	subs	r5, r1, #1
 8008202:	4355      	muls	r5, r2
 8008204:	460e      	mov	r6, r1
 8008206:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800820a:	f000 f98d 	bl	8008528 <_malloc_r>
 800820e:	4604      	mov	r4, r0
 8008210:	b140      	cbz	r0, 8008224 <__sfmoreglue+0x28>
 8008212:	2100      	movs	r1, #0
 8008214:	e9c0 1600 	strd	r1, r6, [r0]
 8008218:	300c      	adds	r0, #12
 800821a:	60a0      	str	r0, [r4, #8]
 800821c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008220:	f000 f90e 	bl	8008440 <memset>
 8008224:	4620      	mov	r0, r4
 8008226:	bd70      	pop	{r4, r5, r6, pc}

08008228 <__sfp_lock_acquire>:
 8008228:	4801      	ldr	r0, [pc, #4]	; (8008230 <__sfp_lock_acquire+0x8>)
 800822a:	f000 b8d8 	b.w	80083de <__retarget_lock_acquire_recursive>
 800822e:	bf00      	nop
 8008230:	2000b609 	.word	0x2000b609

08008234 <__sfp_lock_release>:
 8008234:	4801      	ldr	r0, [pc, #4]	; (800823c <__sfp_lock_release+0x8>)
 8008236:	f000 b8d3 	b.w	80083e0 <__retarget_lock_release_recursive>
 800823a:	bf00      	nop
 800823c:	2000b609 	.word	0x2000b609

08008240 <__sinit_lock_acquire>:
 8008240:	4801      	ldr	r0, [pc, #4]	; (8008248 <__sinit_lock_acquire+0x8>)
 8008242:	f000 b8cc 	b.w	80083de <__retarget_lock_acquire_recursive>
 8008246:	bf00      	nop
 8008248:	2000b60a 	.word	0x2000b60a

0800824c <__sinit_lock_release>:
 800824c:	4801      	ldr	r0, [pc, #4]	; (8008254 <__sinit_lock_release+0x8>)
 800824e:	f000 b8c7 	b.w	80083e0 <__retarget_lock_release_recursive>
 8008252:	bf00      	nop
 8008254:	2000b60a 	.word	0x2000b60a

08008258 <__sinit>:
 8008258:	b510      	push	{r4, lr}
 800825a:	4604      	mov	r4, r0
 800825c:	f7ff fff0 	bl	8008240 <__sinit_lock_acquire>
 8008260:	69a3      	ldr	r3, [r4, #24]
 8008262:	b11b      	cbz	r3, 800826c <__sinit+0x14>
 8008264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008268:	f7ff bff0 	b.w	800824c <__sinit_lock_release>
 800826c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008270:	6523      	str	r3, [r4, #80]	; 0x50
 8008272:	4b13      	ldr	r3, [pc, #76]	; (80082c0 <__sinit+0x68>)
 8008274:	4a13      	ldr	r2, [pc, #76]	; (80082c4 <__sinit+0x6c>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	62a2      	str	r2, [r4, #40]	; 0x28
 800827a:	42a3      	cmp	r3, r4
 800827c:	bf04      	itt	eq
 800827e:	2301      	moveq	r3, #1
 8008280:	61a3      	streq	r3, [r4, #24]
 8008282:	4620      	mov	r0, r4
 8008284:	f000 f820 	bl	80082c8 <__sfp>
 8008288:	6060      	str	r0, [r4, #4]
 800828a:	4620      	mov	r0, r4
 800828c:	f000 f81c 	bl	80082c8 <__sfp>
 8008290:	60a0      	str	r0, [r4, #8]
 8008292:	4620      	mov	r0, r4
 8008294:	f000 f818 	bl	80082c8 <__sfp>
 8008298:	2200      	movs	r2, #0
 800829a:	60e0      	str	r0, [r4, #12]
 800829c:	2104      	movs	r1, #4
 800829e:	6860      	ldr	r0, [r4, #4]
 80082a0:	f7ff ff82 	bl	80081a8 <std>
 80082a4:	68a0      	ldr	r0, [r4, #8]
 80082a6:	2201      	movs	r2, #1
 80082a8:	2109      	movs	r1, #9
 80082aa:	f7ff ff7d 	bl	80081a8 <std>
 80082ae:	68e0      	ldr	r0, [r4, #12]
 80082b0:	2202      	movs	r2, #2
 80082b2:	2112      	movs	r1, #18
 80082b4:	f7ff ff78 	bl	80081a8 <std>
 80082b8:	2301      	movs	r3, #1
 80082ba:	61a3      	str	r3, [r4, #24]
 80082bc:	e7d2      	b.n	8008264 <__sinit+0xc>
 80082be:	bf00      	nop
 80082c0:	0800b3b0 	.word	0x0800b3b0
 80082c4:	080081f1 	.word	0x080081f1

080082c8 <__sfp>:
 80082c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ca:	4607      	mov	r7, r0
 80082cc:	f7ff ffac 	bl	8008228 <__sfp_lock_acquire>
 80082d0:	4b1e      	ldr	r3, [pc, #120]	; (800834c <__sfp+0x84>)
 80082d2:	681e      	ldr	r6, [r3, #0]
 80082d4:	69b3      	ldr	r3, [r6, #24]
 80082d6:	b913      	cbnz	r3, 80082de <__sfp+0x16>
 80082d8:	4630      	mov	r0, r6
 80082da:	f7ff ffbd 	bl	8008258 <__sinit>
 80082de:	3648      	adds	r6, #72	; 0x48
 80082e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80082e4:	3b01      	subs	r3, #1
 80082e6:	d503      	bpl.n	80082f0 <__sfp+0x28>
 80082e8:	6833      	ldr	r3, [r6, #0]
 80082ea:	b30b      	cbz	r3, 8008330 <__sfp+0x68>
 80082ec:	6836      	ldr	r6, [r6, #0]
 80082ee:	e7f7      	b.n	80082e0 <__sfp+0x18>
 80082f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80082f4:	b9d5      	cbnz	r5, 800832c <__sfp+0x64>
 80082f6:	4b16      	ldr	r3, [pc, #88]	; (8008350 <__sfp+0x88>)
 80082f8:	60e3      	str	r3, [r4, #12]
 80082fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80082fe:	6665      	str	r5, [r4, #100]	; 0x64
 8008300:	f000 f86c 	bl	80083dc <__retarget_lock_init_recursive>
 8008304:	f7ff ff96 	bl	8008234 <__sfp_lock_release>
 8008308:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800830c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008310:	6025      	str	r5, [r4, #0]
 8008312:	61a5      	str	r5, [r4, #24]
 8008314:	2208      	movs	r2, #8
 8008316:	4629      	mov	r1, r5
 8008318:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800831c:	f000 f890 	bl	8008440 <memset>
 8008320:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008324:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008328:	4620      	mov	r0, r4
 800832a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800832c:	3468      	adds	r4, #104	; 0x68
 800832e:	e7d9      	b.n	80082e4 <__sfp+0x1c>
 8008330:	2104      	movs	r1, #4
 8008332:	4638      	mov	r0, r7
 8008334:	f7ff ff62 	bl	80081fc <__sfmoreglue>
 8008338:	4604      	mov	r4, r0
 800833a:	6030      	str	r0, [r6, #0]
 800833c:	2800      	cmp	r0, #0
 800833e:	d1d5      	bne.n	80082ec <__sfp+0x24>
 8008340:	f7ff ff78 	bl	8008234 <__sfp_lock_release>
 8008344:	230c      	movs	r3, #12
 8008346:	603b      	str	r3, [r7, #0]
 8008348:	e7ee      	b.n	8008328 <__sfp+0x60>
 800834a:	bf00      	nop
 800834c:	0800b3b0 	.word	0x0800b3b0
 8008350:	ffff0001 	.word	0xffff0001

08008354 <_fwalk_reent>:
 8008354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008358:	4606      	mov	r6, r0
 800835a:	4688      	mov	r8, r1
 800835c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008360:	2700      	movs	r7, #0
 8008362:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008366:	f1b9 0901 	subs.w	r9, r9, #1
 800836a:	d505      	bpl.n	8008378 <_fwalk_reent+0x24>
 800836c:	6824      	ldr	r4, [r4, #0]
 800836e:	2c00      	cmp	r4, #0
 8008370:	d1f7      	bne.n	8008362 <_fwalk_reent+0xe>
 8008372:	4638      	mov	r0, r7
 8008374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008378:	89ab      	ldrh	r3, [r5, #12]
 800837a:	2b01      	cmp	r3, #1
 800837c:	d907      	bls.n	800838e <_fwalk_reent+0x3a>
 800837e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008382:	3301      	adds	r3, #1
 8008384:	d003      	beq.n	800838e <_fwalk_reent+0x3a>
 8008386:	4629      	mov	r1, r5
 8008388:	4630      	mov	r0, r6
 800838a:	47c0      	blx	r8
 800838c:	4307      	orrs	r7, r0
 800838e:	3568      	adds	r5, #104	; 0x68
 8008390:	e7e9      	b.n	8008366 <_fwalk_reent+0x12>
	...

08008394 <__libc_init_array>:
 8008394:	b570      	push	{r4, r5, r6, lr}
 8008396:	4d0d      	ldr	r5, [pc, #52]	; (80083cc <__libc_init_array+0x38>)
 8008398:	4c0d      	ldr	r4, [pc, #52]	; (80083d0 <__libc_init_array+0x3c>)
 800839a:	1b64      	subs	r4, r4, r5
 800839c:	10a4      	asrs	r4, r4, #2
 800839e:	2600      	movs	r6, #0
 80083a0:	42a6      	cmp	r6, r4
 80083a2:	d109      	bne.n	80083b8 <__libc_init_array+0x24>
 80083a4:	4d0b      	ldr	r5, [pc, #44]	; (80083d4 <__libc_init_array+0x40>)
 80083a6:	4c0c      	ldr	r4, [pc, #48]	; (80083d8 <__libc_init_array+0x44>)
 80083a8:	f002 fe90 	bl	800b0cc <_init>
 80083ac:	1b64      	subs	r4, r4, r5
 80083ae:	10a4      	asrs	r4, r4, #2
 80083b0:	2600      	movs	r6, #0
 80083b2:	42a6      	cmp	r6, r4
 80083b4:	d105      	bne.n	80083c2 <__libc_init_array+0x2e>
 80083b6:	bd70      	pop	{r4, r5, r6, pc}
 80083b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80083bc:	4798      	blx	r3
 80083be:	3601      	adds	r6, #1
 80083c0:	e7ee      	b.n	80083a0 <__libc_init_array+0xc>
 80083c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80083c6:	4798      	blx	r3
 80083c8:	3601      	adds	r6, #1
 80083ca:	e7f2      	b.n	80083b2 <__libc_init_array+0x1e>
 80083cc:	0800b734 	.word	0x0800b734
 80083d0:	0800b734 	.word	0x0800b734
 80083d4:	0800b734 	.word	0x0800b734
 80083d8:	0800b738 	.word	0x0800b738

080083dc <__retarget_lock_init_recursive>:
 80083dc:	4770      	bx	lr

080083de <__retarget_lock_acquire_recursive>:
 80083de:	4770      	bx	lr

080083e0 <__retarget_lock_release_recursive>:
 80083e0:	4770      	bx	lr
	...

080083e4 <malloc>:
 80083e4:	4b02      	ldr	r3, [pc, #8]	; (80083f0 <malloc+0xc>)
 80083e6:	4601      	mov	r1, r0
 80083e8:	6818      	ldr	r0, [r3, #0]
 80083ea:	f000 b89d 	b.w	8008528 <_malloc_r>
 80083ee:	bf00      	nop
 80083f0:	20000010 	.word	0x20000010

080083f4 <free>:
 80083f4:	4b02      	ldr	r3, [pc, #8]	; (8008400 <free+0xc>)
 80083f6:	4601      	mov	r1, r0
 80083f8:	6818      	ldr	r0, [r3, #0]
 80083fa:	f000 b829 	b.w	8008450 <_free_r>
 80083fe:	bf00      	nop
 8008400:	20000010 	.word	0x20000010

08008404 <memcmp>:
 8008404:	b510      	push	{r4, lr}
 8008406:	3901      	subs	r1, #1
 8008408:	4402      	add	r2, r0
 800840a:	4290      	cmp	r0, r2
 800840c:	d101      	bne.n	8008412 <memcmp+0xe>
 800840e:	2000      	movs	r0, #0
 8008410:	e005      	b.n	800841e <memcmp+0x1a>
 8008412:	7803      	ldrb	r3, [r0, #0]
 8008414:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008418:	42a3      	cmp	r3, r4
 800841a:	d001      	beq.n	8008420 <memcmp+0x1c>
 800841c:	1b18      	subs	r0, r3, r4
 800841e:	bd10      	pop	{r4, pc}
 8008420:	3001      	adds	r0, #1
 8008422:	e7f2      	b.n	800840a <memcmp+0x6>

08008424 <memcpy>:
 8008424:	440a      	add	r2, r1
 8008426:	4291      	cmp	r1, r2
 8008428:	f100 33ff 	add.w	r3, r0, #4294967295
 800842c:	d100      	bne.n	8008430 <memcpy+0xc>
 800842e:	4770      	bx	lr
 8008430:	b510      	push	{r4, lr}
 8008432:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008436:	f803 4f01 	strb.w	r4, [r3, #1]!
 800843a:	4291      	cmp	r1, r2
 800843c:	d1f9      	bne.n	8008432 <memcpy+0xe>
 800843e:	bd10      	pop	{r4, pc}

08008440 <memset>:
 8008440:	4402      	add	r2, r0
 8008442:	4603      	mov	r3, r0
 8008444:	4293      	cmp	r3, r2
 8008446:	d100      	bne.n	800844a <memset+0xa>
 8008448:	4770      	bx	lr
 800844a:	f803 1b01 	strb.w	r1, [r3], #1
 800844e:	e7f9      	b.n	8008444 <memset+0x4>

08008450 <_free_r>:
 8008450:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008452:	2900      	cmp	r1, #0
 8008454:	d044      	beq.n	80084e0 <_free_r+0x90>
 8008456:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800845a:	9001      	str	r0, [sp, #4]
 800845c:	2b00      	cmp	r3, #0
 800845e:	f1a1 0404 	sub.w	r4, r1, #4
 8008462:	bfb8      	it	lt
 8008464:	18e4      	addlt	r4, r4, r3
 8008466:	f001 fd91 	bl	8009f8c <__malloc_lock>
 800846a:	4a1e      	ldr	r2, [pc, #120]	; (80084e4 <_free_r+0x94>)
 800846c:	9801      	ldr	r0, [sp, #4]
 800846e:	6813      	ldr	r3, [r2, #0]
 8008470:	b933      	cbnz	r3, 8008480 <_free_r+0x30>
 8008472:	6063      	str	r3, [r4, #4]
 8008474:	6014      	str	r4, [r2, #0]
 8008476:	b003      	add	sp, #12
 8008478:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800847c:	f001 bd8c 	b.w	8009f98 <__malloc_unlock>
 8008480:	42a3      	cmp	r3, r4
 8008482:	d908      	bls.n	8008496 <_free_r+0x46>
 8008484:	6825      	ldr	r5, [r4, #0]
 8008486:	1961      	adds	r1, r4, r5
 8008488:	428b      	cmp	r3, r1
 800848a:	bf01      	itttt	eq
 800848c:	6819      	ldreq	r1, [r3, #0]
 800848e:	685b      	ldreq	r3, [r3, #4]
 8008490:	1949      	addeq	r1, r1, r5
 8008492:	6021      	streq	r1, [r4, #0]
 8008494:	e7ed      	b.n	8008472 <_free_r+0x22>
 8008496:	461a      	mov	r2, r3
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	b10b      	cbz	r3, 80084a0 <_free_r+0x50>
 800849c:	42a3      	cmp	r3, r4
 800849e:	d9fa      	bls.n	8008496 <_free_r+0x46>
 80084a0:	6811      	ldr	r1, [r2, #0]
 80084a2:	1855      	adds	r5, r2, r1
 80084a4:	42a5      	cmp	r5, r4
 80084a6:	d10b      	bne.n	80084c0 <_free_r+0x70>
 80084a8:	6824      	ldr	r4, [r4, #0]
 80084aa:	4421      	add	r1, r4
 80084ac:	1854      	adds	r4, r2, r1
 80084ae:	42a3      	cmp	r3, r4
 80084b0:	6011      	str	r1, [r2, #0]
 80084b2:	d1e0      	bne.n	8008476 <_free_r+0x26>
 80084b4:	681c      	ldr	r4, [r3, #0]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	6053      	str	r3, [r2, #4]
 80084ba:	4421      	add	r1, r4
 80084bc:	6011      	str	r1, [r2, #0]
 80084be:	e7da      	b.n	8008476 <_free_r+0x26>
 80084c0:	d902      	bls.n	80084c8 <_free_r+0x78>
 80084c2:	230c      	movs	r3, #12
 80084c4:	6003      	str	r3, [r0, #0]
 80084c6:	e7d6      	b.n	8008476 <_free_r+0x26>
 80084c8:	6825      	ldr	r5, [r4, #0]
 80084ca:	1961      	adds	r1, r4, r5
 80084cc:	428b      	cmp	r3, r1
 80084ce:	bf04      	itt	eq
 80084d0:	6819      	ldreq	r1, [r3, #0]
 80084d2:	685b      	ldreq	r3, [r3, #4]
 80084d4:	6063      	str	r3, [r4, #4]
 80084d6:	bf04      	itt	eq
 80084d8:	1949      	addeq	r1, r1, r5
 80084da:	6021      	streq	r1, [r4, #0]
 80084dc:	6054      	str	r4, [r2, #4]
 80084de:	e7ca      	b.n	8008476 <_free_r+0x26>
 80084e0:	b003      	add	sp, #12
 80084e2:	bd30      	pop	{r4, r5, pc}
 80084e4:	2000b60c 	.word	0x2000b60c

080084e8 <sbrk_aligned>:
 80084e8:	b570      	push	{r4, r5, r6, lr}
 80084ea:	4e0e      	ldr	r6, [pc, #56]	; (8008524 <sbrk_aligned+0x3c>)
 80084ec:	460c      	mov	r4, r1
 80084ee:	6831      	ldr	r1, [r6, #0]
 80084f0:	4605      	mov	r5, r0
 80084f2:	b911      	cbnz	r1, 80084fa <sbrk_aligned+0x12>
 80084f4:	f000 fd60 	bl	8008fb8 <_sbrk_r>
 80084f8:	6030      	str	r0, [r6, #0]
 80084fa:	4621      	mov	r1, r4
 80084fc:	4628      	mov	r0, r5
 80084fe:	f000 fd5b 	bl	8008fb8 <_sbrk_r>
 8008502:	1c43      	adds	r3, r0, #1
 8008504:	d00a      	beq.n	800851c <sbrk_aligned+0x34>
 8008506:	1cc4      	adds	r4, r0, #3
 8008508:	f024 0403 	bic.w	r4, r4, #3
 800850c:	42a0      	cmp	r0, r4
 800850e:	d007      	beq.n	8008520 <sbrk_aligned+0x38>
 8008510:	1a21      	subs	r1, r4, r0
 8008512:	4628      	mov	r0, r5
 8008514:	f000 fd50 	bl	8008fb8 <_sbrk_r>
 8008518:	3001      	adds	r0, #1
 800851a:	d101      	bne.n	8008520 <sbrk_aligned+0x38>
 800851c:	f04f 34ff 	mov.w	r4, #4294967295
 8008520:	4620      	mov	r0, r4
 8008522:	bd70      	pop	{r4, r5, r6, pc}
 8008524:	2000b610 	.word	0x2000b610

08008528 <_malloc_r>:
 8008528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800852c:	1ccd      	adds	r5, r1, #3
 800852e:	f025 0503 	bic.w	r5, r5, #3
 8008532:	3508      	adds	r5, #8
 8008534:	2d0c      	cmp	r5, #12
 8008536:	bf38      	it	cc
 8008538:	250c      	movcc	r5, #12
 800853a:	2d00      	cmp	r5, #0
 800853c:	4607      	mov	r7, r0
 800853e:	db01      	blt.n	8008544 <_malloc_r+0x1c>
 8008540:	42a9      	cmp	r1, r5
 8008542:	d905      	bls.n	8008550 <_malloc_r+0x28>
 8008544:	230c      	movs	r3, #12
 8008546:	603b      	str	r3, [r7, #0]
 8008548:	2600      	movs	r6, #0
 800854a:	4630      	mov	r0, r6
 800854c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008550:	4e2e      	ldr	r6, [pc, #184]	; (800860c <_malloc_r+0xe4>)
 8008552:	f001 fd1b 	bl	8009f8c <__malloc_lock>
 8008556:	6833      	ldr	r3, [r6, #0]
 8008558:	461c      	mov	r4, r3
 800855a:	bb34      	cbnz	r4, 80085aa <_malloc_r+0x82>
 800855c:	4629      	mov	r1, r5
 800855e:	4638      	mov	r0, r7
 8008560:	f7ff ffc2 	bl	80084e8 <sbrk_aligned>
 8008564:	1c43      	adds	r3, r0, #1
 8008566:	4604      	mov	r4, r0
 8008568:	d14d      	bne.n	8008606 <_malloc_r+0xde>
 800856a:	6834      	ldr	r4, [r6, #0]
 800856c:	4626      	mov	r6, r4
 800856e:	2e00      	cmp	r6, #0
 8008570:	d140      	bne.n	80085f4 <_malloc_r+0xcc>
 8008572:	6823      	ldr	r3, [r4, #0]
 8008574:	4631      	mov	r1, r6
 8008576:	4638      	mov	r0, r7
 8008578:	eb04 0803 	add.w	r8, r4, r3
 800857c:	f000 fd1c 	bl	8008fb8 <_sbrk_r>
 8008580:	4580      	cmp	r8, r0
 8008582:	d13a      	bne.n	80085fa <_malloc_r+0xd2>
 8008584:	6821      	ldr	r1, [r4, #0]
 8008586:	3503      	adds	r5, #3
 8008588:	1a6d      	subs	r5, r5, r1
 800858a:	f025 0503 	bic.w	r5, r5, #3
 800858e:	3508      	adds	r5, #8
 8008590:	2d0c      	cmp	r5, #12
 8008592:	bf38      	it	cc
 8008594:	250c      	movcc	r5, #12
 8008596:	4629      	mov	r1, r5
 8008598:	4638      	mov	r0, r7
 800859a:	f7ff ffa5 	bl	80084e8 <sbrk_aligned>
 800859e:	3001      	adds	r0, #1
 80085a0:	d02b      	beq.n	80085fa <_malloc_r+0xd2>
 80085a2:	6823      	ldr	r3, [r4, #0]
 80085a4:	442b      	add	r3, r5
 80085a6:	6023      	str	r3, [r4, #0]
 80085a8:	e00e      	b.n	80085c8 <_malloc_r+0xa0>
 80085aa:	6822      	ldr	r2, [r4, #0]
 80085ac:	1b52      	subs	r2, r2, r5
 80085ae:	d41e      	bmi.n	80085ee <_malloc_r+0xc6>
 80085b0:	2a0b      	cmp	r2, #11
 80085b2:	d916      	bls.n	80085e2 <_malloc_r+0xba>
 80085b4:	1961      	adds	r1, r4, r5
 80085b6:	42a3      	cmp	r3, r4
 80085b8:	6025      	str	r5, [r4, #0]
 80085ba:	bf18      	it	ne
 80085bc:	6059      	strne	r1, [r3, #4]
 80085be:	6863      	ldr	r3, [r4, #4]
 80085c0:	bf08      	it	eq
 80085c2:	6031      	streq	r1, [r6, #0]
 80085c4:	5162      	str	r2, [r4, r5]
 80085c6:	604b      	str	r3, [r1, #4]
 80085c8:	4638      	mov	r0, r7
 80085ca:	f104 060b 	add.w	r6, r4, #11
 80085ce:	f001 fce3 	bl	8009f98 <__malloc_unlock>
 80085d2:	f026 0607 	bic.w	r6, r6, #7
 80085d6:	1d23      	adds	r3, r4, #4
 80085d8:	1af2      	subs	r2, r6, r3
 80085da:	d0b6      	beq.n	800854a <_malloc_r+0x22>
 80085dc:	1b9b      	subs	r3, r3, r6
 80085de:	50a3      	str	r3, [r4, r2]
 80085e0:	e7b3      	b.n	800854a <_malloc_r+0x22>
 80085e2:	6862      	ldr	r2, [r4, #4]
 80085e4:	42a3      	cmp	r3, r4
 80085e6:	bf0c      	ite	eq
 80085e8:	6032      	streq	r2, [r6, #0]
 80085ea:	605a      	strne	r2, [r3, #4]
 80085ec:	e7ec      	b.n	80085c8 <_malloc_r+0xa0>
 80085ee:	4623      	mov	r3, r4
 80085f0:	6864      	ldr	r4, [r4, #4]
 80085f2:	e7b2      	b.n	800855a <_malloc_r+0x32>
 80085f4:	4634      	mov	r4, r6
 80085f6:	6876      	ldr	r6, [r6, #4]
 80085f8:	e7b9      	b.n	800856e <_malloc_r+0x46>
 80085fa:	230c      	movs	r3, #12
 80085fc:	603b      	str	r3, [r7, #0]
 80085fe:	4638      	mov	r0, r7
 8008600:	f001 fcca 	bl	8009f98 <__malloc_unlock>
 8008604:	e7a1      	b.n	800854a <_malloc_r+0x22>
 8008606:	6025      	str	r5, [r4, #0]
 8008608:	e7de      	b.n	80085c8 <_malloc_r+0xa0>
 800860a:	bf00      	nop
 800860c:	2000b60c 	.word	0x2000b60c

08008610 <__cvt>:
 8008610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008614:	ec55 4b10 	vmov	r4, r5, d0
 8008618:	2d00      	cmp	r5, #0
 800861a:	460e      	mov	r6, r1
 800861c:	4619      	mov	r1, r3
 800861e:	462b      	mov	r3, r5
 8008620:	bfbb      	ittet	lt
 8008622:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008626:	461d      	movlt	r5, r3
 8008628:	2300      	movge	r3, #0
 800862a:	232d      	movlt	r3, #45	; 0x2d
 800862c:	700b      	strb	r3, [r1, #0]
 800862e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008630:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008634:	4691      	mov	r9, r2
 8008636:	f023 0820 	bic.w	r8, r3, #32
 800863a:	bfbc      	itt	lt
 800863c:	4622      	movlt	r2, r4
 800863e:	4614      	movlt	r4, r2
 8008640:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008644:	d005      	beq.n	8008652 <__cvt+0x42>
 8008646:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800864a:	d100      	bne.n	800864e <__cvt+0x3e>
 800864c:	3601      	adds	r6, #1
 800864e:	2102      	movs	r1, #2
 8008650:	e000      	b.n	8008654 <__cvt+0x44>
 8008652:	2103      	movs	r1, #3
 8008654:	ab03      	add	r3, sp, #12
 8008656:	9301      	str	r3, [sp, #4]
 8008658:	ab02      	add	r3, sp, #8
 800865a:	9300      	str	r3, [sp, #0]
 800865c:	ec45 4b10 	vmov	d0, r4, r5
 8008660:	4653      	mov	r3, sl
 8008662:	4632      	mov	r2, r6
 8008664:	f000 fdcc 	bl	8009200 <_dtoa_r>
 8008668:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800866c:	4607      	mov	r7, r0
 800866e:	d102      	bne.n	8008676 <__cvt+0x66>
 8008670:	f019 0f01 	tst.w	r9, #1
 8008674:	d022      	beq.n	80086bc <__cvt+0xac>
 8008676:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800867a:	eb07 0906 	add.w	r9, r7, r6
 800867e:	d110      	bne.n	80086a2 <__cvt+0x92>
 8008680:	783b      	ldrb	r3, [r7, #0]
 8008682:	2b30      	cmp	r3, #48	; 0x30
 8008684:	d10a      	bne.n	800869c <__cvt+0x8c>
 8008686:	2200      	movs	r2, #0
 8008688:	2300      	movs	r3, #0
 800868a:	4620      	mov	r0, r4
 800868c:	4629      	mov	r1, r5
 800868e:	f7f8 fa1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008692:	b918      	cbnz	r0, 800869c <__cvt+0x8c>
 8008694:	f1c6 0601 	rsb	r6, r6, #1
 8008698:	f8ca 6000 	str.w	r6, [sl]
 800869c:	f8da 3000 	ldr.w	r3, [sl]
 80086a0:	4499      	add	r9, r3
 80086a2:	2200      	movs	r2, #0
 80086a4:	2300      	movs	r3, #0
 80086a6:	4620      	mov	r0, r4
 80086a8:	4629      	mov	r1, r5
 80086aa:	f7f8 fa0d 	bl	8000ac8 <__aeabi_dcmpeq>
 80086ae:	b108      	cbz	r0, 80086b4 <__cvt+0xa4>
 80086b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80086b4:	2230      	movs	r2, #48	; 0x30
 80086b6:	9b03      	ldr	r3, [sp, #12]
 80086b8:	454b      	cmp	r3, r9
 80086ba:	d307      	bcc.n	80086cc <__cvt+0xbc>
 80086bc:	9b03      	ldr	r3, [sp, #12]
 80086be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086c0:	1bdb      	subs	r3, r3, r7
 80086c2:	4638      	mov	r0, r7
 80086c4:	6013      	str	r3, [r2, #0]
 80086c6:	b004      	add	sp, #16
 80086c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086cc:	1c59      	adds	r1, r3, #1
 80086ce:	9103      	str	r1, [sp, #12]
 80086d0:	701a      	strb	r2, [r3, #0]
 80086d2:	e7f0      	b.n	80086b6 <__cvt+0xa6>

080086d4 <__exponent>:
 80086d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086d6:	4603      	mov	r3, r0
 80086d8:	2900      	cmp	r1, #0
 80086da:	bfb8      	it	lt
 80086dc:	4249      	neglt	r1, r1
 80086de:	f803 2b02 	strb.w	r2, [r3], #2
 80086e2:	bfb4      	ite	lt
 80086e4:	222d      	movlt	r2, #45	; 0x2d
 80086e6:	222b      	movge	r2, #43	; 0x2b
 80086e8:	2909      	cmp	r1, #9
 80086ea:	7042      	strb	r2, [r0, #1]
 80086ec:	dd2a      	ble.n	8008744 <__exponent+0x70>
 80086ee:	f10d 0407 	add.w	r4, sp, #7
 80086f2:	46a4      	mov	ip, r4
 80086f4:	270a      	movs	r7, #10
 80086f6:	46a6      	mov	lr, r4
 80086f8:	460a      	mov	r2, r1
 80086fa:	fb91 f6f7 	sdiv	r6, r1, r7
 80086fe:	fb07 1516 	mls	r5, r7, r6, r1
 8008702:	3530      	adds	r5, #48	; 0x30
 8008704:	2a63      	cmp	r2, #99	; 0x63
 8008706:	f104 34ff 	add.w	r4, r4, #4294967295
 800870a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800870e:	4631      	mov	r1, r6
 8008710:	dcf1      	bgt.n	80086f6 <__exponent+0x22>
 8008712:	3130      	adds	r1, #48	; 0x30
 8008714:	f1ae 0502 	sub.w	r5, lr, #2
 8008718:	f804 1c01 	strb.w	r1, [r4, #-1]
 800871c:	1c44      	adds	r4, r0, #1
 800871e:	4629      	mov	r1, r5
 8008720:	4561      	cmp	r1, ip
 8008722:	d30a      	bcc.n	800873a <__exponent+0x66>
 8008724:	f10d 0209 	add.w	r2, sp, #9
 8008728:	eba2 020e 	sub.w	r2, r2, lr
 800872c:	4565      	cmp	r5, ip
 800872e:	bf88      	it	hi
 8008730:	2200      	movhi	r2, #0
 8008732:	4413      	add	r3, r2
 8008734:	1a18      	subs	r0, r3, r0
 8008736:	b003      	add	sp, #12
 8008738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800873a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800873e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008742:	e7ed      	b.n	8008720 <__exponent+0x4c>
 8008744:	2330      	movs	r3, #48	; 0x30
 8008746:	3130      	adds	r1, #48	; 0x30
 8008748:	7083      	strb	r3, [r0, #2]
 800874a:	70c1      	strb	r1, [r0, #3]
 800874c:	1d03      	adds	r3, r0, #4
 800874e:	e7f1      	b.n	8008734 <__exponent+0x60>

08008750 <_printf_float>:
 8008750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008754:	ed2d 8b02 	vpush	{d8}
 8008758:	b08d      	sub	sp, #52	; 0x34
 800875a:	460c      	mov	r4, r1
 800875c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008760:	4616      	mov	r6, r2
 8008762:	461f      	mov	r7, r3
 8008764:	4605      	mov	r5, r0
 8008766:	f001 fbfb 	bl	8009f60 <_localeconv_r>
 800876a:	f8d0 a000 	ldr.w	sl, [r0]
 800876e:	4650      	mov	r0, sl
 8008770:	f7f7 fd2e 	bl	80001d0 <strlen>
 8008774:	2300      	movs	r3, #0
 8008776:	930a      	str	r3, [sp, #40]	; 0x28
 8008778:	6823      	ldr	r3, [r4, #0]
 800877a:	9305      	str	r3, [sp, #20]
 800877c:	f8d8 3000 	ldr.w	r3, [r8]
 8008780:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008784:	3307      	adds	r3, #7
 8008786:	f023 0307 	bic.w	r3, r3, #7
 800878a:	f103 0208 	add.w	r2, r3, #8
 800878e:	f8c8 2000 	str.w	r2, [r8]
 8008792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008796:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800879a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800879e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80087a2:	9307      	str	r3, [sp, #28]
 80087a4:	f8cd 8018 	str.w	r8, [sp, #24]
 80087a8:	ee08 0a10 	vmov	s16, r0
 80087ac:	4b9f      	ldr	r3, [pc, #636]	; (8008a2c <_printf_float+0x2dc>)
 80087ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087b2:	f04f 32ff 	mov.w	r2, #4294967295
 80087b6:	f7f8 f9b9 	bl	8000b2c <__aeabi_dcmpun>
 80087ba:	bb88      	cbnz	r0, 8008820 <_printf_float+0xd0>
 80087bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087c0:	4b9a      	ldr	r3, [pc, #616]	; (8008a2c <_printf_float+0x2dc>)
 80087c2:	f04f 32ff 	mov.w	r2, #4294967295
 80087c6:	f7f8 f993 	bl	8000af0 <__aeabi_dcmple>
 80087ca:	bb48      	cbnz	r0, 8008820 <_printf_float+0xd0>
 80087cc:	2200      	movs	r2, #0
 80087ce:	2300      	movs	r3, #0
 80087d0:	4640      	mov	r0, r8
 80087d2:	4649      	mov	r1, r9
 80087d4:	f7f8 f982 	bl	8000adc <__aeabi_dcmplt>
 80087d8:	b110      	cbz	r0, 80087e0 <_printf_float+0x90>
 80087da:	232d      	movs	r3, #45	; 0x2d
 80087dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087e0:	4b93      	ldr	r3, [pc, #588]	; (8008a30 <_printf_float+0x2e0>)
 80087e2:	4894      	ldr	r0, [pc, #592]	; (8008a34 <_printf_float+0x2e4>)
 80087e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80087e8:	bf94      	ite	ls
 80087ea:	4698      	movls	r8, r3
 80087ec:	4680      	movhi	r8, r0
 80087ee:	2303      	movs	r3, #3
 80087f0:	6123      	str	r3, [r4, #16]
 80087f2:	9b05      	ldr	r3, [sp, #20]
 80087f4:	f023 0204 	bic.w	r2, r3, #4
 80087f8:	6022      	str	r2, [r4, #0]
 80087fa:	f04f 0900 	mov.w	r9, #0
 80087fe:	9700      	str	r7, [sp, #0]
 8008800:	4633      	mov	r3, r6
 8008802:	aa0b      	add	r2, sp, #44	; 0x2c
 8008804:	4621      	mov	r1, r4
 8008806:	4628      	mov	r0, r5
 8008808:	f000 f9d8 	bl	8008bbc <_printf_common>
 800880c:	3001      	adds	r0, #1
 800880e:	f040 8090 	bne.w	8008932 <_printf_float+0x1e2>
 8008812:	f04f 30ff 	mov.w	r0, #4294967295
 8008816:	b00d      	add	sp, #52	; 0x34
 8008818:	ecbd 8b02 	vpop	{d8}
 800881c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008820:	4642      	mov	r2, r8
 8008822:	464b      	mov	r3, r9
 8008824:	4640      	mov	r0, r8
 8008826:	4649      	mov	r1, r9
 8008828:	f7f8 f980 	bl	8000b2c <__aeabi_dcmpun>
 800882c:	b140      	cbz	r0, 8008840 <_printf_float+0xf0>
 800882e:	464b      	mov	r3, r9
 8008830:	2b00      	cmp	r3, #0
 8008832:	bfbc      	itt	lt
 8008834:	232d      	movlt	r3, #45	; 0x2d
 8008836:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800883a:	487f      	ldr	r0, [pc, #508]	; (8008a38 <_printf_float+0x2e8>)
 800883c:	4b7f      	ldr	r3, [pc, #508]	; (8008a3c <_printf_float+0x2ec>)
 800883e:	e7d1      	b.n	80087e4 <_printf_float+0x94>
 8008840:	6863      	ldr	r3, [r4, #4]
 8008842:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008846:	9206      	str	r2, [sp, #24]
 8008848:	1c5a      	adds	r2, r3, #1
 800884a:	d13f      	bne.n	80088cc <_printf_float+0x17c>
 800884c:	2306      	movs	r3, #6
 800884e:	6063      	str	r3, [r4, #4]
 8008850:	9b05      	ldr	r3, [sp, #20]
 8008852:	6861      	ldr	r1, [r4, #4]
 8008854:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008858:	2300      	movs	r3, #0
 800885a:	9303      	str	r3, [sp, #12]
 800885c:	ab0a      	add	r3, sp, #40	; 0x28
 800885e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008862:	ab09      	add	r3, sp, #36	; 0x24
 8008864:	ec49 8b10 	vmov	d0, r8, r9
 8008868:	9300      	str	r3, [sp, #0]
 800886a:	6022      	str	r2, [r4, #0]
 800886c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008870:	4628      	mov	r0, r5
 8008872:	f7ff fecd 	bl	8008610 <__cvt>
 8008876:	9b06      	ldr	r3, [sp, #24]
 8008878:	9909      	ldr	r1, [sp, #36]	; 0x24
 800887a:	2b47      	cmp	r3, #71	; 0x47
 800887c:	4680      	mov	r8, r0
 800887e:	d108      	bne.n	8008892 <_printf_float+0x142>
 8008880:	1cc8      	adds	r0, r1, #3
 8008882:	db02      	blt.n	800888a <_printf_float+0x13a>
 8008884:	6863      	ldr	r3, [r4, #4]
 8008886:	4299      	cmp	r1, r3
 8008888:	dd41      	ble.n	800890e <_printf_float+0x1be>
 800888a:	f1ab 0b02 	sub.w	fp, fp, #2
 800888e:	fa5f fb8b 	uxtb.w	fp, fp
 8008892:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008896:	d820      	bhi.n	80088da <_printf_float+0x18a>
 8008898:	3901      	subs	r1, #1
 800889a:	465a      	mov	r2, fp
 800889c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80088a0:	9109      	str	r1, [sp, #36]	; 0x24
 80088a2:	f7ff ff17 	bl	80086d4 <__exponent>
 80088a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088a8:	1813      	adds	r3, r2, r0
 80088aa:	2a01      	cmp	r2, #1
 80088ac:	4681      	mov	r9, r0
 80088ae:	6123      	str	r3, [r4, #16]
 80088b0:	dc02      	bgt.n	80088b8 <_printf_float+0x168>
 80088b2:	6822      	ldr	r2, [r4, #0]
 80088b4:	07d2      	lsls	r2, r2, #31
 80088b6:	d501      	bpl.n	80088bc <_printf_float+0x16c>
 80088b8:	3301      	adds	r3, #1
 80088ba:	6123      	str	r3, [r4, #16]
 80088bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d09c      	beq.n	80087fe <_printf_float+0xae>
 80088c4:	232d      	movs	r3, #45	; 0x2d
 80088c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088ca:	e798      	b.n	80087fe <_printf_float+0xae>
 80088cc:	9a06      	ldr	r2, [sp, #24]
 80088ce:	2a47      	cmp	r2, #71	; 0x47
 80088d0:	d1be      	bne.n	8008850 <_printf_float+0x100>
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d1bc      	bne.n	8008850 <_printf_float+0x100>
 80088d6:	2301      	movs	r3, #1
 80088d8:	e7b9      	b.n	800884e <_printf_float+0xfe>
 80088da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80088de:	d118      	bne.n	8008912 <_printf_float+0x1c2>
 80088e0:	2900      	cmp	r1, #0
 80088e2:	6863      	ldr	r3, [r4, #4]
 80088e4:	dd0b      	ble.n	80088fe <_printf_float+0x1ae>
 80088e6:	6121      	str	r1, [r4, #16]
 80088e8:	b913      	cbnz	r3, 80088f0 <_printf_float+0x1a0>
 80088ea:	6822      	ldr	r2, [r4, #0]
 80088ec:	07d0      	lsls	r0, r2, #31
 80088ee:	d502      	bpl.n	80088f6 <_printf_float+0x1a6>
 80088f0:	3301      	adds	r3, #1
 80088f2:	440b      	add	r3, r1
 80088f4:	6123      	str	r3, [r4, #16]
 80088f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80088f8:	f04f 0900 	mov.w	r9, #0
 80088fc:	e7de      	b.n	80088bc <_printf_float+0x16c>
 80088fe:	b913      	cbnz	r3, 8008906 <_printf_float+0x1b6>
 8008900:	6822      	ldr	r2, [r4, #0]
 8008902:	07d2      	lsls	r2, r2, #31
 8008904:	d501      	bpl.n	800890a <_printf_float+0x1ba>
 8008906:	3302      	adds	r3, #2
 8008908:	e7f4      	b.n	80088f4 <_printf_float+0x1a4>
 800890a:	2301      	movs	r3, #1
 800890c:	e7f2      	b.n	80088f4 <_printf_float+0x1a4>
 800890e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008914:	4299      	cmp	r1, r3
 8008916:	db05      	blt.n	8008924 <_printf_float+0x1d4>
 8008918:	6823      	ldr	r3, [r4, #0]
 800891a:	6121      	str	r1, [r4, #16]
 800891c:	07d8      	lsls	r0, r3, #31
 800891e:	d5ea      	bpl.n	80088f6 <_printf_float+0x1a6>
 8008920:	1c4b      	adds	r3, r1, #1
 8008922:	e7e7      	b.n	80088f4 <_printf_float+0x1a4>
 8008924:	2900      	cmp	r1, #0
 8008926:	bfd4      	ite	le
 8008928:	f1c1 0202 	rsble	r2, r1, #2
 800892c:	2201      	movgt	r2, #1
 800892e:	4413      	add	r3, r2
 8008930:	e7e0      	b.n	80088f4 <_printf_float+0x1a4>
 8008932:	6823      	ldr	r3, [r4, #0]
 8008934:	055a      	lsls	r2, r3, #21
 8008936:	d407      	bmi.n	8008948 <_printf_float+0x1f8>
 8008938:	6923      	ldr	r3, [r4, #16]
 800893a:	4642      	mov	r2, r8
 800893c:	4631      	mov	r1, r6
 800893e:	4628      	mov	r0, r5
 8008940:	47b8      	blx	r7
 8008942:	3001      	adds	r0, #1
 8008944:	d12c      	bne.n	80089a0 <_printf_float+0x250>
 8008946:	e764      	b.n	8008812 <_printf_float+0xc2>
 8008948:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800894c:	f240 80e0 	bls.w	8008b10 <_printf_float+0x3c0>
 8008950:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008954:	2200      	movs	r2, #0
 8008956:	2300      	movs	r3, #0
 8008958:	f7f8 f8b6 	bl	8000ac8 <__aeabi_dcmpeq>
 800895c:	2800      	cmp	r0, #0
 800895e:	d034      	beq.n	80089ca <_printf_float+0x27a>
 8008960:	4a37      	ldr	r2, [pc, #220]	; (8008a40 <_printf_float+0x2f0>)
 8008962:	2301      	movs	r3, #1
 8008964:	4631      	mov	r1, r6
 8008966:	4628      	mov	r0, r5
 8008968:	47b8      	blx	r7
 800896a:	3001      	adds	r0, #1
 800896c:	f43f af51 	beq.w	8008812 <_printf_float+0xc2>
 8008970:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008974:	429a      	cmp	r2, r3
 8008976:	db02      	blt.n	800897e <_printf_float+0x22e>
 8008978:	6823      	ldr	r3, [r4, #0]
 800897a:	07d8      	lsls	r0, r3, #31
 800897c:	d510      	bpl.n	80089a0 <_printf_float+0x250>
 800897e:	ee18 3a10 	vmov	r3, s16
 8008982:	4652      	mov	r2, sl
 8008984:	4631      	mov	r1, r6
 8008986:	4628      	mov	r0, r5
 8008988:	47b8      	blx	r7
 800898a:	3001      	adds	r0, #1
 800898c:	f43f af41 	beq.w	8008812 <_printf_float+0xc2>
 8008990:	f04f 0800 	mov.w	r8, #0
 8008994:	f104 091a 	add.w	r9, r4, #26
 8008998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800899a:	3b01      	subs	r3, #1
 800899c:	4543      	cmp	r3, r8
 800899e:	dc09      	bgt.n	80089b4 <_printf_float+0x264>
 80089a0:	6823      	ldr	r3, [r4, #0]
 80089a2:	079b      	lsls	r3, r3, #30
 80089a4:	f100 8105 	bmi.w	8008bb2 <_printf_float+0x462>
 80089a8:	68e0      	ldr	r0, [r4, #12]
 80089aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089ac:	4298      	cmp	r0, r3
 80089ae:	bfb8      	it	lt
 80089b0:	4618      	movlt	r0, r3
 80089b2:	e730      	b.n	8008816 <_printf_float+0xc6>
 80089b4:	2301      	movs	r3, #1
 80089b6:	464a      	mov	r2, r9
 80089b8:	4631      	mov	r1, r6
 80089ba:	4628      	mov	r0, r5
 80089bc:	47b8      	blx	r7
 80089be:	3001      	adds	r0, #1
 80089c0:	f43f af27 	beq.w	8008812 <_printf_float+0xc2>
 80089c4:	f108 0801 	add.w	r8, r8, #1
 80089c8:	e7e6      	b.n	8008998 <_printf_float+0x248>
 80089ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	dc39      	bgt.n	8008a44 <_printf_float+0x2f4>
 80089d0:	4a1b      	ldr	r2, [pc, #108]	; (8008a40 <_printf_float+0x2f0>)
 80089d2:	2301      	movs	r3, #1
 80089d4:	4631      	mov	r1, r6
 80089d6:	4628      	mov	r0, r5
 80089d8:	47b8      	blx	r7
 80089da:	3001      	adds	r0, #1
 80089dc:	f43f af19 	beq.w	8008812 <_printf_float+0xc2>
 80089e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089e4:	4313      	orrs	r3, r2
 80089e6:	d102      	bne.n	80089ee <_printf_float+0x29e>
 80089e8:	6823      	ldr	r3, [r4, #0]
 80089ea:	07d9      	lsls	r1, r3, #31
 80089ec:	d5d8      	bpl.n	80089a0 <_printf_float+0x250>
 80089ee:	ee18 3a10 	vmov	r3, s16
 80089f2:	4652      	mov	r2, sl
 80089f4:	4631      	mov	r1, r6
 80089f6:	4628      	mov	r0, r5
 80089f8:	47b8      	blx	r7
 80089fa:	3001      	adds	r0, #1
 80089fc:	f43f af09 	beq.w	8008812 <_printf_float+0xc2>
 8008a00:	f04f 0900 	mov.w	r9, #0
 8008a04:	f104 0a1a 	add.w	sl, r4, #26
 8008a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a0a:	425b      	negs	r3, r3
 8008a0c:	454b      	cmp	r3, r9
 8008a0e:	dc01      	bgt.n	8008a14 <_printf_float+0x2c4>
 8008a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a12:	e792      	b.n	800893a <_printf_float+0x1ea>
 8008a14:	2301      	movs	r3, #1
 8008a16:	4652      	mov	r2, sl
 8008a18:	4631      	mov	r1, r6
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	47b8      	blx	r7
 8008a1e:	3001      	adds	r0, #1
 8008a20:	f43f aef7 	beq.w	8008812 <_printf_float+0xc2>
 8008a24:	f109 0901 	add.w	r9, r9, #1
 8008a28:	e7ee      	b.n	8008a08 <_printf_float+0x2b8>
 8008a2a:	bf00      	nop
 8008a2c:	7fefffff 	.word	0x7fefffff
 8008a30:	0800b3b4 	.word	0x0800b3b4
 8008a34:	0800b3b8 	.word	0x0800b3b8
 8008a38:	0800b3c0 	.word	0x0800b3c0
 8008a3c:	0800b3bc 	.word	0x0800b3bc
 8008a40:	0800b3c4 	.word	0x0800b3c4
 8008a44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	bfa8      	it	ge
 8008a4c:	461a      	movge	r2, r3
 8008a4e:	2a00      	cmp	r2, #0
 8008a50:	4691      	mov	r9, r2
 8008a52:	dc37      	bgt.n	8008ac4 <_printf_float+0x374>
 8008a54:	f04f 0b00 	mov.w	fp, #0
 8008a58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a5c:	f104 021a 	add.w	r2, r4, #26
 8008a60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a62:	9305      	str	r3, [sp, #20]
 8008a64:	eba3 0309 	sub.w	r3, r3, r9
 8008a68:	455b      	cmp	r3, fp
 8008a6a:	dc33      	bgt.n	8008ad4 <_printf_float+0x384>
 8008a6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a70:	429a      	cmp	r2, r3
 8008a72:	db3b      	blt.n	8008aec <_printf_float+0x39c>
 8008a74:	6823      	ldr	r3, [r4, #0]
 8008a76:	07da      	lsls	r2, r3, #31
 8008a78:	d438      	bmi.n	8008aec <_printf_float+0x39c>
 8008a7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a7c:	9a05      	ldr	r2, [sp, #20]
 8008a7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a80:	1a9a      	subs	r2, r3, r2
 8008a82:	eba3 0901 	sub.w	r9, r3, r1
 8008a86:	4591      	cmp	r9, r2
 8008a88:	bfa8      	it	ge
 8008a8a:	4691      	movge	r9, r2
 8008a8c:	f1b9 0f00 	cmp.w	r9, #0
 8008a90:	dc35      	bgt.n	8008afe <_printf_float+0x3ae>
 8008a92:	f04f 0800 	mov.w	r8, #0
 8008a96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a9a:	f104 0a1a 	add.w	sl, r4, #26
 8008a9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008aa2:	1a9b      	subs	r3, r3, r2
 8008aa4:	eba3 0309 	sub.w	r3, r3, r9
 8008aa8:	4543      	cmp	r3, r8
 8008aaa:	f77f af79 	ble.w	80089a0 <_printf_float+0x250>
 8008aae:	2301      	movs	r3, #1
 8008ab0:	4652      	mov	r2, sl
 8008ab2:	4631      	mov	r1, r6
 8008ab4:	4628      	mov	r0, r5
 8008ab6:	47b8      	blx	r7
 8008ab8:	3001      	adds	r0, #1
 8008aba:	f43f aeaa 	beq.w	8008812 <_printf_float+0xc2>
 8008abe:	f108 0801 	add.w	r8, r8, #1
 8008ac2:	e7ec      	b.n	8008a9e <_printf_float+0x34e>
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	4631      	mov	r1, r6
 8008ac8:	4642      	mov	r2, r8
 8008aca:	4628      	mov	r0, r5
 8008acc:	47b8      	blx	r7
 8008ace:	3001      	adds	r0, #1
 8008ad0:	d1c0      	bne.n	8008a54 <_printf_float+0x304>
 8008ad2:	e69e      	b.n	8008812 <_printf_float+0xc2>
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	4631      	mov	r1, r6
 8008ad8:	4628      	mov	r0, r5
 8008ada:	9205      	str	r2, [sp, #20]
 8008adc:	47b8      	blx	r7
 8008ade:	3001      	adds	r0, #1
 8008ae0:	f43f ae97 	beq.w	8008812 <_printf_float+0xc2>
 8008ae4:	9a05      	ldr	r2, [sp, #20]
 8008ae6:	f10b 0b01 	add.w	fp, fp, #1
 8008aea:	e7b9      	b.n	8008a60 <_printf_float+0x310>
 8008aec:	ee18 3a10 	vmov	r3, s16
 8008af0:	4652      	mov	r2, sl
 8008af2:	4631      	mov	r1, r6
 8008af4:	4628      	mov	r0, r5
 8008af6:	47b8      	blx	r7
 8008af8:	3001      	adds	r0, #1
 8008afa:	d1be      	bne.n	8008a7a <_printf_float+0x32a>
 8008afc:	e689      	b.n	8008812 <_printf_float+0xc2>
 8008afe:	9a05      	ldr	r2, [sp, #20]
 8008b00:	464b      	mov	r3, r9
 8008b02:	4442      	add	r2, r8
 8008b04:	4631      	mov	r1, r6
 8008b06:	4628      	mov	r0, r5
 8008b08:	47b8      	blx	r7
 8008b0a:	3001      	adds	r0, #1
 8008b0c:	d1c1      	bne.n	8008a92 <_printf_float+0x342>
 8008b0e:	e680      	b.n	8008812 <_printf_float+0xc2>
 8008b10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b12:	2a01      	cmp	r2, #1
 8008b14:	dc01      	bgt.n	8008b1a <_printf_float+0x3ca>
 8008b16:	07db      	lsls	r3, r3, #31
 8008b18:	d538      	bpl.n	8008b8c <_printf_float+0x43c>
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	4642      	mov	r2, r8
 8008b1e:	4631      	mov	r1, r6
 8008b20:	4628      	mov	r0, r5
 8008b22:	47b8      	blx	r7
 8008b24:	3001      	adds	r0, #1
 8008b26:	f43f ae74 	beq.w	8008812 <_printf_float+0xc2>
 8008b2a:	ee18 3a10 	vmov	r3, s16
 8008b2e:	4652      	mov	r2, sl
 8008b30:	4631      	mov	r1, r6
 8008b32:	4628      	mov	r0, r5
 8008b34:	47b8      	blx	r7
 8008b36:	3001      	adds	r0, #1
 8008b38:	f43f ae6b 	beq.w	8008812 <_printf_float+0xc2>
 8008b3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b40:	2200      	movs	r2, #0
 8008b42:	2300      	movs	r3, #0
 8008b44:	f7f7 ffc0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b48:	b9d8      	cbnz	r0, 8008b82 <_printf_float+0x432>
 8008b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b4c:	f108 0201 	add.w	r2, r8, #1
 8008b50:	3b01      	subs	r3, #1
 8008b52:	4631      	mov	r1, r6
 8008b54:	4628      	mov	r0, r5
 8008b56:	47b8      	blx	r7
 8008b58:	3001      	adds	r0, #1
 8008b5a:	d10e      	bne.n	8008b7a <_printf_float+0x42a>
 8008b5c:	e659      	b.n	8008812 <_printf_float+0xc2>
 8008b5e:	2301      	movs	r3, #1
 8008b60:	4652      	mov	r2, sl
 8008b62:	4631      	mov	r1, r6
 8008b64:	4628      	mov	r0, r5
 8008b66:	47b8      	blx	r7
 8008b68:	3001      	adds	r0, #1
 8008b6a:	f43f ae52 	beq.w	8008812 <_printf_float+0xc2>
 8008b6e:	f108 0801 	add.w	r8, r8, #1
 8008b72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b74:	3b01      	subs	r3, #1
 8008b76:	4543      	cmp	r3, r8
 8008b78:	dcf1      	bgt.n	8008b5e <_printf_float+0x40e>
 8008b7a:	464b      	mov	r3, r9
 8008b7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008b80:	e6dc      	b.n	800893c <_printf_float+0x1ec>
 8008b82:	f04f 0800 	mov.w	r8, #0
 8008b86:	f104 0a1a 	add.w	sl, r4, #26
 8008b8a:	e7f2      	b.n	8008b72 <_printf_float+0x422>
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	4642      	mov	r2, r8
 8008b90:	e7df      	b.n	8008b52 <_printf_float+0x402>
 8008b92:	2301      	movs	r3, #1
 8008b94:	464a      	mov	r2, r9
 8008b96:	4631      	mov	r1, r6
 8008b98:	4628      	mov	r0, r5
 8008b9a:	47b8      	blx	r7
 8008b9c:	3001      	adds	r0, #1
 8008b9e:	f43f ae38 	beq.w	8008812 <_printf_float+0xc2>
 8008ba2:	f108 0801 	add.w	r8, r8, #1
 8008ba6:	68e3      	ldr	r3, [r4, #12]
 8008ba8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008baa:	1a5b      	subs	r3, r3, r1
 8008bac:	4543      	cmp	r3, r8
 8008bae:	dcf0      	bgt.n	8008b92 <_printf_float+0x442>
 8008bb0:	e6fa      	b.n	80089a8 <_printf_float+0x258>
 8008bb2:	f04f 0800 	mov.w	r8, #0
 8008bb6:	f104 0919 	add.w	r9, r4, #25
 8008bba:	e7f4      	b.n	8008ba6 <_printf_float+0x456>

08008bbc <_printf_common>:
 8008bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bc0:	4616      	mov	r6, r2
 8008bc2:	4699      	mov	r9, r3
 8008bc4:	688a      	ldr	r2, [r1, #8]
 8008bc6:	690b      	ldr	r3, [r1, #16]
 8008bc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	bfb8      	it	lt
 8008bd0:	4613      	movlt	r3, r2
 8008bd2:	6033      	str	r3, [r6, #0]
 8008bd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bd8:	4607      	mov	r7, r0
 8008bda:	460c      	mov	r4, r1
 8008bdc:	b10a      	cbz	r2, 8008be2 <_printf_common+0x26>
 8008bde:	3301      	adds	r3, #1
 8008be0:	6033      	str	r3, [r6, #0]
 8008be2:	6823      	ldr	r3, [r4, #0]
 8008be4:	0699      	lsls	r1, r3, #26
 8008be6:	bf42      	ittt	mi
 8008be8:	6833      	ldrmi	r3, [r6, #0]
 8008bea:	3302      	addmi	r3, #2
 8008bec:	6033      	strmi	r3, [r6, #0]
 8008bee:	6825      	ldr	r5, [r4, #0]
 8008bf0:	f015 0506 	ands.w	r5, r5, #6
 8008bf4:	d106      	bne.n	8008c04 <_printf_common+0x48>
 8008bf6:	f104 0a19 	add.w	sl, r4, #25
 8008bfa:	68e3      	ldr	r3, [r4, #12]
 8008bfc:	6832      	ldr	r2, [r6, #0]
 8008bfe:	1a9b      	subs	r3, r3, r2
 8008c00:	42ab      	cmp	r3, r5
 8008c02:	dc26      	bgt.n	8008c52 <_printf_common+0x96>
 8008c04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c08:	1e13      	subs	r3, r2, #0
 8008c0a:	6822      	ldr	r2, [r4, #0]
 8008c0c:	bf18      	it	ne
 8008c0e:	2301      	movne	r3, #1
 8008c10:	0692      	lsls	r2, r2, #26
 8008c12:	d42b      	bmi.n	8008c6c <_printf_common+0xb0>
 8008c14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c18:	4649      	mov	r1, r9
 8008c1a:	4638      	mov	r0, r7
 8008c1c:	47c0      	blx	r8
 8008c1e:	3001      	adds	r0, #1
 8008c20:	d01e      	beq.n	8008c60 <_printf_common+0xa4>
 8008c22:	6823      	ldr	r3, [r4, #0]
 8008c24:	68e5      	ldr	r5, [r4, #12]
 8008c26:	6832      	ldr	r2, [r6, #0]
 8008c28:	f003 0306 	and.w	r3, r3, #6
 8008c2c:	2b04      	cmp	r3, #4
 8008c2e:	bf08      	it	eq
 8008c30:	1aad      	subeq	r5, r5, r2
 8008c32:	68a3      	ldr	r3, [r4, #8]
 8008c34:	6922      	ldr	r2, [r4, #16]
 8008c36:	bf0c      	ite	eq
 8008c38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c3c:	2500      	movne	r5, #0
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	bfc4      	itt	gt
 8008c42:	1a9b      	subgt	r3, r3, r2
 8008c44:	18ed      	addgt	r5, r5, r3
 8008c46:	2600      	movs	r6, #0
 8008c48:	341a      	adds	r4, #26
 8008c4a:	42b5      	cmp	r5, r6
 8008c4c:	d11a      	bne.n	8008c84 <_printf_common+0xc8>
 8008c4e:	2000      	movs	r0, #0
 8008c50:	e008      	b.n	8008c64 <_printf_common+0xa8>
 8008c52:	2301      	movs	r3, #1
 8008c54:	4652      	mov	r2, sl
 8008c56:	4649      	mov	r1, r9
 8008c58:	4638      	mov	r0, r7
 8008c5a:	47c0      	blx	r8
 8008c5c:	3001      	adds	r0, #1
 8008c5e:	d103      	bne.n	8008c68 <_printf_common+0xac>
 8008c60:	f04f 30ff 	mov.w	r0, #4294967295
 8008c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c68:	3501      	adds	r5, #1
 8008c6a:	e7c6      	b.n	8008bfa <_printf_common+0x3e>
 8008c6c:	18e1      	adds	r1, r4, r3
 8008c6e:	1c5a      	adds	r2, r3, #1
 8008c70:	2030      	movs	r0, #48	; 0x30
 8008c72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c76:	4422      	add	r2, r4
 8008c78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c80:	3302      	adds	r3, #2
 8008c82:	e7c7      	b.n	8008c14 <_printf_common+0x58>
 8008c84:	2301      	movs	r3, #1
 8008c86:	4622      	mov	r2, r4
 8008c88:	4649      	mov	r1, r9
 8008c8a:	4638      	mov	r0, r7
 8008c8c:	47c0      	blx	r8
 8008c8e:	3001      	adds	r0, #1
 8008c90:	d0e6      	beq.n	8008c60 <_printf_common+0xa4>
 8008c92:	3601      	adds	r6, #1
 8008c94:	e7d9      	b.n	8008c4a <_printf_common+0x8e>
	...

08008c98 <_printf_i>:
 8008c98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c9c:	7e0f      	ldrb	r7, [r1, #24]
 8008c9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ca0:	2f78      	cmp	r7, #120	; 0x78
 8008ca2:	4691      	mov	r9, r2
 8008ca4:	4680      	mov	r8, r0
 8008ca6:	460c      	mov	r4, r1
 8008ca8:	469a      	mov	sl, r3
 8008caa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008cae:	d807      	bhi.n	8008cc0 <_printf_i+0x28>
 8008cb0:	2f62      	cmp	r7, #98	; 0x62
 8008cb2:	d80a      	bhi.n	8008cca <_printf_i+0x32>
 8008cb4:	2f00      	cmp	r7, #0
 8008cb6:	f000 80d8 	beq.w	8008e6a <_printf_i+0x1d2>
 8008cba:	2f58      	cmp	r7, #88	; 0x58
 8008cbc:	f000 80a3 	beq.w	8008e06 <_printf_i+0x16e>
 8008cc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008cc8:	e03a      	b.n	8008d40 <_printf_i+0xa8>
 8008cca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cce:	2b15      	cmp	r3, #21
 8008cd0:	d8f6      	bhi.n	8008cc0 <_printf_i+0x28>
 8008cd2:	a101      	add	r1, pc, #4	; (adr r1, 8008cd8 <_printf_i+0x40>)
 8008cd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008cd8:	08008d31 	.word	0x08008d31
 8008cdc:	08008d45 	.word	0x08008d45
 8008ce0:	08008cc1 	.word	0x08008cc1
 8008ce4:	08008cc1 	.word	0x08008cc1
 8008ce8:	08008cc1 	.word	0x08008cc1
 8008cec:	08008cc1 	.word	0x08008cc1
 8008cf0:	08008d45 	.word	0x08008d45
 8008cf4:	08008cc1 	.word	0x08008cc1
 8008cf8:	08008cc1 	.word	0x08008cc1
 8008cfc:	08008cc1 	.word	0x08008cc1
 8008d00:	08008cc1 	.word	0x08008cc1
 8008d04:	08008e51 	.word	0x08008e51
 8008d08:	08008d75 	.word	0x08008d75
 8008d0c:	08008e33 	.word	0x08008e33
 8008d10:	08008cc1 	.word	0x08008cc1
 8008d14:	08008cc1 	.word	0x08008cc1
 8008d18:	08008e73 	.word	0x08008e73
 8008d1c:	08008cc1 	.word	0x08008cc1
 8008d20:	08008d75 	.word	0x08008d75
 8008d24:	08008cc1 	.word	0x08008cc1
 8008d28:	08008cc1 	.word	0x08008cc1
 8008d2c:	08008e3b 	.word	0x08008e3b
 8008d30:	682b      	ldr	r3, [r5, #0]
 8008d32:	1d1a      	adds	r2, r3, #4
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	602a      	str	r2, [r5, #0]
 8008d38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d40:	2301      	movs	r3, #1
 8008d42:	e0a3      	b.n	8008e8c <_printf_i+0x1f4>
 8008d44:	6820      	ldr	r0, [r4, #0]
 8008d46:	6829      	ldr	r1, [r5, #0]
 8008d48:	0606      	lsls	r6, r0, #24
 8008d4a:	f101 0304 	add.w	r3, r1, #4
 8008d4e:	d50a      	bpl.n	8008d66 <_printf_i+0xce>
 8008d50:	680e      	ldr	r6, [r1, #0]
 8008d52:	602b      	str	r3, [r5, #0]
 8008d54:	2e00      	cmp	r6, #0
 8008d56:	da03      	bge.n	8008d60 <_printf_i+0xc8>
 8008d58:	232d      	movs	r3, #45	; 0x2d
 8008d5a:	4276      	negs	r6, r6
 8008d5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d60:	485e      	ldr	r0, [pc, #376]	; (8008edc <_printf_i+0x244>)
 8008d62:	230a      	movs	r3, #10
 8008d64:	e019      	b.n	8008d9a <_printf_i+0x102>
 8008d66:	680e      	ldr	r6, [r1, #0]
 8008d68:	602b      	str	r3, [r5, #0]
 8008d6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d6e:	bf18      	it	ne
 8008d70:	b236      	sxthne	r6, r6
 8008d72:	e7ef      	b.n	8008d54 <_printf_i+0xbc>
 8008d74:	682b      	ldr	r3, [r5, #0]
 8008d76:	6820      	ldr	r0, [r4, #0]
 8008d78:	1d19      	adds	r1, r3, #4
 8008d7a:	6029      	str	r1, [r5, #0]
 8008d7c:	0601      	lsls	r1, r0, #24
 8008d7e:	d501      	bpl.n	8008d84 <_printf_i+0xec>
 8008d80:	681e      	ldr	r6, [r3, #0]
 8008d82:	e002      	b.n	8008d8a <_printf_i+0xf2>
 8008d84:	0646      	lsls	r6, r0, #25
 8008d86:	d5fb      	bpl.n	8008d80 <_printf_i+0xe8>
 8008d88:	881e      	ldrh	r6, [r3, #0]
 8008d8a:	4854      	ldr	r0, [pc, #336]	; (8008edc <_printf_i+0x244>)
 8008d8c:	2f6f      	cmp	r7, #111	; 0x6f
 8008d8e:	bf0c      	ite	eq
 8008d90:	2308      	moveq	r3, #8
 8008d92:	230a      	movne	r3, #10
 8008d94:	2100      	movs	r1, #0
 8008d96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d9a:	6865      	ldr	r5, [r4, #4]
 8008d9c:	60a5      	str	r5, [r4, #8]
 8008d9e:	2d00      	cmp	r5, #0
 8008da0:	bfa2      	ittt	ge
 8008da2:	6821      	ldrge	r1, [r4, #0]
 8008da4:	f021 0104 	bicge.w	r1, r1, #4
 8008da8:	6021      	strge	r1, [r4, #0]
 8008daa:	b90e      	cbnz	r6, 8008db0 <_printf_i+0x118>
 8008dac:	2d00      	cmp	r5, #0
 8008dae:	d04d      	beq.n	8008e4c <_printf_i+0x1b4>
 8008db0:	4615      	mov	r5, r2
 8008db2:	fbb6 f1f3 	udiv	r1, r6, r3
 8008db6:	fb03 6711 	mls	r7, r3, r1, r6
 8008dba:	5dc7      	ldrb	r7, [r0, r7]
 8008dbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008dc0:	4637      	mov	r7, r6
 8008dc2:	42bb      	cmp	r3, r7
 8008dc4:	460e      	mov	r6, r1
 8008dc6:	d9f4      	bls.n	8008db2 <_printf_i+0x11a>
 8008dc8:	2b08      	cmp	r3, #8
 8008dca:	d10b      	bne.n	8008de4 <_printf_i+0x14c>
 8008dcc:	6823      	ldr	r3, [r4, #0]
 8008dce:	07de      	lsls	r6, r3, #31
 8008dd0:	d508      	bpl.n	8008de4 <_printf_i+0x14c>
 8008dd2:	6923      	ldr	r3, [r4, #16]
 8008dd4:	6861      	ldr	r1, [r4, #4]
 8008dd6:	4299      	cmp	r1, r3
 8008dd8:	bfde      	ittt	le
 8008dda:	2330      	movle	r3, #48	; 0x30
 8008ddc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008de0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008de4:	1b52      	subs	r2, r2, r5
 8008de6:	6122      	str	r2, [r4, #16]
 8008de8:	f8cd a000 	str.w	sl, [sp]
 8008dec:	464b      	mov	r3, r9
 8008dee:	aa03      	add	r2, sp, #12
 8008df0:	4621      	mov	r1, r4
 8008df2:	4640      	mov	r0, r8
 8008df4:	f7ff fee2 	bl	8008bbc <_printf_common>
 8008df8:	3001      	adds	r0, #1
 8008dfa:	d14c      	bne.n	8008e96 <_printf_i+0x1fe>
 8008dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8008e00:	b004      	add	sp, #16
 8008e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e06:	4835      	ldr	r0, [pc, #212]	; (8008edc <_printf_i+0x244>)
 8008e08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008e0c:	6829      	ldr	r1, [r5, #0]
 8008e0e:	6823      	ldr	r3, [r4, #0]
 8008e10:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e14:	6029      	str	r1, [r5, #0]
 8008e16:	061d      	lsls	r5, r3, #24
 8008e18:	d514      	bpl.n	8008e44 <_printf_i+0x1ac>
 8008e1a:	07df      	lsls	r7, r3, #31
 8008e1c:	bf44      	itt	mi
 8008e1e:	f043 0320 	orrmi.w	r3, r3, #32
 8008e22:	6023      	strmi	r3, [r4, #0]
 8008e24:	b91e      	cbnz	r6, 8008e2e <_printf_i+0x196>
 8008e26:	6823      	ldr	r3, [r4, #0]
 8008e28:	f023 0320 	bic.w	r3, r3, #32
 8008e2c:	6023      	str	r3, [r4, #0]
 8008e2e:	2310      	movs	r3, #16
 8008e30:	e7b0      	b.n	8008d94 <_printf_i+0xfc>
 8008e32:	6823      	ldr	r3, [r4, #0]
 8008e34:	f043 0320 	orr.w	r3, r3, #32
 8008e38:	6023      	str	r3, [r4, #0]
 8008e3a:	2378      	movs	r3, #120	; 0x78
 8008e3c:	4828      	ldr	r0, [pc, #160]	; (8008ee0 <_printf_i+0x248>)
 8008e3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e42:	e7e3      	b.n	8008e0c <_printf_i+0x174>
 8008e44:	0659      	lsls	r1, r3, #25
 8008e46:	bf48      	it	mi
 8008e48:	b2b6      	uxthmi	r6, r6
 8008e4a:	e7e6      	b.n	8008e1a <_printf_i+0x182>
 8008e4c:	4615      	mov	r5, r2
 8008e4e:	e7bb      	b.n	8008dc8 <_printf_i+0x130>
 8008e50:	682b      	ldr	r3, [r5, #0]
 8008e52:	6826      	ldr	r6, [r4, #0]
 8008e54:	6961      	ldr	r1, [r4, #20]
 8008e56:	1d18      	adds	r0, r3, #4
 8008e58:	6028      	str	r0, [r5, #0]
 8008e5a:	0635      	lsls	r5, r6, #24
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	d501      	bpl.n	8008e64 <_printf_i+0x1cc>
 8008e60:	6019      	str	r1, [r3, #0]
 8008e62:	e002      	b.n	8008e6a <_printf_i+0x1d2>
 8008e64:	0670      	lsls	r0, r6, #25
 8008e66:	d5fb      	bpl.n	8008e60 <_printf_i+0x1c8>
 8008e68:	8019      	strh	r1, [r3, #0]
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	6123      	str	r3, [r4, #16]
 8008e6e:	4615      	mov	r5, r2
 8008e70:	e7ba      	b.n	8008de8 <_printf_i+0x150>
 8008e72:	682b      	ldr	r3, [r5, #0]
 8008e74:	1d1a      	adds	r2, r3, #4
 8008e76:	602a      	str	r2, [r5, #0]
 8008e78:	681d      	ldr	r5, [r3, #0]
 8008e7a:	6862      	ldr	r2, [r4, #4]
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	4628      	mov	r0, r5
 8008e80:	f7f7 f9ae 	bl	80001e0 <memchr>
 8008e84:	b108      	cbz	r0, 8008e8a <_printf_i+0x1f2>
 8008e86:	1b40      	subs	r0, r0, r5
 8008e88:	6060      	str	r0, [r4, #4]
 8008e8a:	6863      	ldr	r3, [r4, #4]
 8008e8c:	6123      	str	r3, [r4, #16]
 8008e8e:	2300      	movs	r3, #0
 8008e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e94:	e7a8      	b.n	8008de8 <_printf_i+0x150>
 8008e96:	6923      	ldr	r3, [r4, #16]
 8008e98:	462a      	mov	r2, r5
 8008e9a:	4649      	mov	r1, r9
 8008e9c:	4640      	mov	r0, r8
 8008e9e:	47d0      	blx	sl
 8008ea0:	3001      	adds	r0, #1
 8008ea2:	d0ab      	beq.n	8008dfc <_printf_i+0x164>
 8008ea4:	6823      	ldr	r3, [r4, #0]
 8008ea6:	079b      	lsls	r3, r3, #30
 8008ea8:	d413      	bmi.n	8008ed2 <_printf_i+0x23a>
 8008eaa:	68e0      	ldr	r0, [r4, #12]
 8008eac:	9b03      	ldr	r3, [sp, #12]
 8008eae:	4298      	cmp	r0, r3
 8008eb0:	bfb8      	it	lt
 8008eb2:	4618      	movlt	r0, r3
 8008eb4:	e7a4      	b.n	8008e00 <_printf_i+0x168>
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	4632      	mov	r2, r6
 8008eba:	4649      	mov	r1, r9
 8008ebc:	4640      	mov	r0, r8
 8008ebe:	47d0      	blx	sl
 8008ec0:	3001      	adds	r0, #1
 8008ec2:	d09b      	beq.n	8008dfc <_printf_i+0x164>
 8008ec4:	3501      	adds	r5, #1
 8008ec6:	68e3      	ldr	r3, [r4, #12]
 8008ec8:	9903      	ldr	r1, [sp, #12]
 8008eca:	1a5b      	subs	r3, r3, r1
 8008ecc:	42ab      	cmp	r3, r5
 8008ece:	dcf2      	bgt.n	8008eb6 <_printf_i+0x21e>
 8008ed0:	e7eb      	b.n	8008eaa <_printf_i+0x212>
 8008ed2:	2500      	movs	r5, #0
 8008ed4:	f104 0619 	add.w	r6, r4, #25
 8008ed8:	e7f5      	b.n	8008ec6 <_printf_i+0x22e>
 8008eda:	bf00      	nop
 8008edc:	0800b3c6 	.word	0x0800b3c6
 8008ee0:	0800b3d7 	.word	0x0800b3d7

08008ee4 <cleanup_glue>:
 8008ee4:	b538      	push	{r3, r4, r5, lr}
 8008ee6:	460c      	mov	r4, r1
 8008ee8:	6809      	ldr	r1, [r1, #0]
 8008eea:	4605      	mov	r5, r0
 8008eec:	b109      	cbz	r1, 8008ef2 <cleanup_glue+0xe>
 8008eee:	f7ff fff9 	bl	8008ee4 <cleanup_glue>
 8008ef2:	4621      	mov	r1, r4
 8008ef4:	4628      	mov	r0, r5
 8008ef6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008efa:	f7ff baa9 	b.w	8008450 <_free_r>
	...

08008f00 <_reclaim_reent>:
 8008f00:	4b2c      	ldr	r3, [pc, #176]	; (8008fb4 <_reclaim_reent+0xb4>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4283      	cmp	r3, r0
 8008f06:	b570      	push	{r4, r5, r6, lr}
 8008f08:	4604      	mov	r4, r0
 8008f0a:	d051      	beq.n	8008fb0 <_reclaim_reent+0xb0>
 8008f0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008f0e:	b143      	cbz	r3, 8008f22 <_reclaim_reent+0x22>
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d14a      	bne.n	8008fac <_reclaim_reent+0xac>
 8008f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f18:	6819      	ldr	r1, [r3, #0]
 8008f1a:	b111      	cbz	r1, 8008f22 <_reclaim_reent+0x22>
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	f7ff fa97 	bl	8008450 <_free_r>
 8008f22:	6961      	ldr	r1, [r4, #20]
 8008f24:	b111      	cbz	r1, 8008f2c <_reclaim_reent+0x2c>
 8008f26:	4620      	mov	r0, r4
 8008f28:	f7ff fa92 	bl	8008450 <_free_r>
 8008f2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008f2e:	b111      	cbz	r1, 8008f36 <_reclaim_reent+0x36>
 8008f30:	4620      	mov	r0, r4
 8008f32:	f7ff fa8d 	bl	8008450 <_free_r>
 8008f36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008f38:	b111      	cbz	r1, 8008f40 <_reclaim_reent+0x40>
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	f7ff fa88 	bl	8008450 <_free_r>
 8008f40:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008f42:	b111      	cbz	r1, 8008f4a <_reclaim_reent+0x4a>
 8008f44:	4620      	mov	r0, r4
 8008f46:	f7ff fa83 	bl	8008450 <_free_r>
 8008f4a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008f4c:	b111      	cbz	r1, 8008f54 <_reclaim_reent+0x54>
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f7ff fa7e 	bl	8008450 <_free_r>
 8008f54:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008f56:	b111      	cbz	r1, 8008f5e <_reclaim_reent+0x5e>
 8008f58:	4620      	mov	r0, r4
 8008f5a:	f7ff fa79 	bl	8008450 <_free_r>
 8008f5e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008f60:	b111      	cbz	r1, 8008f68 <_reclaim_reent+0x68>
 8008f62:	4620      	mov	r0, r4
 8008f64:	f7ff fa74 	bl	8008450 <_free_r>
 8008f68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f6a:	b111      	cbz	r1, 8008f72 <_reclaim_reent+0x72>
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	f7ff fa6f 	bl	8008450 <_free_r>
 8008f72:	69a3      	ldr	r3, [r4, #24]
 8008f74:	b1e3      	cbz	r3, 8008fb0 <_reclaim_reent+0xb0>
 8008f76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008f78:	4620      	mov	r0, r4
 8008f7a:	4798      	blx	r3
 8008f7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008f7e:	b1b9      	cbz	r1, 8008fb0 <_reclaim_reent+0xb0>
 8008f80:	4620      	mov	r0, r4
 8008f82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008f86:	f7ff bfad 	b.w	8008ee4 <cleanup_glue>
 8008f8a:	5949      	ldr	r1, [r1, r5]
 8008f8c:	b941      	cbnz	r1, 8008fa0 <_reclaim_reent+0xa0>
 8008f8e:	3504      	adds	r5, #4
 8008f90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f92:	2d80      	cmp	r5, #128	; 0x80
 8008f94:	68d9      	ldr	r1, [r3, #12]
 8008f96:	d1f8      	bne.n	8008f8a <_reclaim_reent+0x8a>
 8008f98:	4620      	mov	r0, r4
 8008f9a:	f7ff fa59 	bl	8008450 <_free_r>
 8008f9e:	e7ba      	b.n	8008f16 <_reclaim_reent+0x16>
 8008fa0:	680e      	ldr	r6, [r1, #0]
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f7ff fa54 	bl	8008450 <_free_r>
 8008fa8:	4631      	mov	r1, r6
 8008faa:	e7ef      	b.n	8008f8c <_reclaim_reent+0x8c>
 8008fac:	2500      	movs	r5, #0
 8008fae:	e7ef      	b.n	8008f90 <_reclaim_reent+0x90>
 8008fb0:	bd70      	pop	{r4, r5, r6, pc}
 8008fb2:	bf00      	nop
 8008fb4:	20000010 	.word	0x20000010

08008fb8 <_sbrk_r>:
 8008fb8:	b538      	push	{r3, r4, r5, lr}
 8008fba:	4d06      	ldr	r5, [pc, #24]	; (8008fd4 <_sbrk_r+0x1c>)
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	4604      	mov	r4, r0
 8008fc0:	4608      	mov	r0, r1
 8008fc2:	602b      	str	r3, [r5, #0]
 8008fc4:	f7f8 fa24 	bl	8001410 <_sbrk>
 8008fc8:	1c43      	adds	r3, r0, #1
 8008fca:	d102      	bne.n	8008fd2 <_sbrk_r+0x1a>
 8008fcc:	682b      	ldr	r3, [r5, #0]
 8008fce:	b103      	cbz	r3, 8008fd2 <_sbrk_r+0x1a>
 8008fd0:	6023      	str	r3, [r4, #0]
 8008fd2:	bd38      	pop	{r3, r4, r5, pc}
 8008fd4:	2000b614 	.word	0x2000b614

08008fd8 <__sread>:
 8008fd8:	b510      	push	{r4, lr}
 8008fda:	460c      	mov	r4, r1
 8008fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fe0:	f001 fcd6 	bl	800a990 <_read_r>
 8008fe4:	2800      	cmp	r0, #0
 8008fe6:	bfab      	itete	ge
 8008fe8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008fea:	89a3      	ldrhlt	r3, [r4, #12]
 8008fec:	181b      	addge	r3, r3, r0
 8008fee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008ff2:	bfac      	ite	ge
 8008ff4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008ff6:	81a3      	strhlt	r3, [r4, #12]
 8008ff8:	bd10      	pop	{r4, pc}

08008ffa <__swrite>:
 8008ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ffe:	461f      	mov	r7, r3
 8009000:	898b      	ldrh	r3, [r1, #12]
 8009002:	05db      	lsls	r3, r3, #23
 8009004:	4605      	mov	r5, r0
 8009006:	460c      	mov	r4, r1
 8009008:	4616      	mov	r6, r2
 800900a:	d505      	bpl.n	8009018 <__swrite+0x1e>
 800900c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009010:	2302      	movs	r3, #2
 8009012:	2200      	movs	r2, #0
 8009014:	f000 ffa8 	bl	8009f68 <_lseek_r>
 8009018:	89a3      	ldrh	r3, [r4, #12]
 800901a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800901e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009022:	81a3      	strh	r3, [r4, #12]
 8009024:	4632      	mov	r2, r6
 8009026:	463b      	mov	r3, r7
 8009028:	4628      	mov	r0, r5
 800902a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800902e:	f000 b837 	b.w	80090a0 <_write_r>

08009032 <__sseek>:
 8009032:	b510      	push	{r4, lr}
 8009034:	460c      	mov	r4, r1
 8009036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800903a:	f000 ff95 	bl	8009f68 <_lseek_r>
 800903e:	1c43      	adds	r3, r0, #1
 8009040:	89a3      	ldrh	r3, [r4, #12]
 8009042:	bf15      	itete	ne
 8009044:	6560      	strne	r0, [r4, #84]	; 0x54
 8009046:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800904a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800904e:	81a3      	strheq	r3, [r4, #12]
 8009050:	bf18      	it	ne
 8009052:	81a3      	strhne	r3, [r4, #12]
 8009054:	bd10      	pop	{r4, pc}

08009056 <__sclose>:
 8009056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800905a:	f000 b833 	b.w	80090c4 <_close_r>
	...

08009060 <_vsiprintf_r>:
 8009060:	b500      	push	{lr}
 8009062:	b09b      	sub	sp, #108	; 0x6c
 8009064:	9100      	str	r1, [sp, #0]
 8009066:	9104      	str	r1, [sp, #16]
 8009068:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800906c:	9105      	str	r1, [sp, #20]
 800906e:	9102      	str	r1, [sp, #8]
 8009070:	4905      	ldr	r1, [pc, #20]	; (8009088 <_vsiprintf_r+0x28>)
 8009072:	9103      	str	r1, [sp, #12]
 8009074:	4669      	mov	r1, sp
 8009076:	f001 fb8b 	bl	800a790 <_svfiprintf_r>
 800907a:	9b00      	ldr	r3, [sp, #0]
 800907c:	2200      	movs	r2, #0
 800907e:	701a      	strb	r2, [r3, #0]
 8009080:	b01b      	add	sp, #108	; 0x6c
 8009082:	f85d fb04 	ldr.w	pc, [sp], #4
 8009086:	bf00      	nop
 8009088:	ffff0208 	.word	0xffff0208

0800908c <vsiprintf>:
 800908c:	4613      	mov	r3, r2
 800908e:	460a      	mov	r2, r1
 8009090:	4601      	mov	r1, r0
 8009092:	4802      	ldr	r0, [pc, #8]	; (800909c <vsiprintf+0x10>)
 8009094:	6800      	ldr	r0, [r0, #0]
 8009096:	f7ff bfe3 	b.w	8009060 <_vsiprintf_r>
 800909a:	bf00      	nop
 800909c:	20000010 	.word	0x20000010

080090a0 <_write_r>:
 80090a0:	b538      	push	{r3, r4, r5, lr}
 80090a2:	4d07      	ldr	r5, [pc, #28]	; (80090c0 <_write_r+0x20>)
 80090a4:	4604      	mov	r4, r0
 80090a6:	4608      	mov	r0, r1
 80090a8:	4611      	mov	r1, r2
 80090aa:	2200      	movs	r2, #0
 80090ac:	602a      	str	r2, [r5, #0]
 80090ae:	461a      	mov	r2, r3
 80090b0:	f7f8 f95d 	bl	800136e <_write>
 80090b4:	1c43      	adds	r3, r0, #1
 80090b6:	d102      	bne.n	80090be <_write_r+0x1e>
 80090b8:	682b      	ldr	r3, [r5, #0]
 80090ba:	b103      	cbz	r3, 80090be <_write_r+0x1e>
 80090bc:	6023      	str	r3, [r4, #0]
 80090be:	bd38      	pop	{r3, r4, r5, pc}
 80090c0:	2000b614 	.word	0x2000b614

080090c4 <_close_r>:
 80090c4:	b538      	push	{r3, r4, r5, lr}
 80090c6:	4d06      	ldr	r5, [pc, #24]	; (80090e0 <_close_r+0x1c>)
 80090c8:	2300      	movs	r3, #0
 80090ca:	4604      	mov	r4, r0
 80090cc:	4608      	mov	r0, r1
 80090ce:	602b      	str	r3, [r5, #0]
 80090d0:	f7f8 f969 	bl	80013a6 <_close>
 80090d4:	1c43      	adds	r3, r0, #1
 80090d6:	d102      	bne.n	80090de <_close_r+0x1a>
 80090d8:	682b      	ldr	r3, [r5, #0]
 80090da:	b103      	cbz	r3, 80090de <_close_r+0x1a>
 80090dc:	6023      	str	r3, [r4, #0]
 80090de:	bd38      	pop	{r3, r4, r5, pc}
 80090e0:	2000b614 	.word	0x2000b614

080090e4 <quorem>:
 80090e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e8:	6903      	ldr	r3, [r0, #16]
 80090ea:	690c      	ldr	r4, [r1, #16]
 80090ec:	42a3      	cmp	r3, r4
 80090ee:	4607      	mov	r7, r0
 80090f0:	f2c0 8081 	blt.w	80091f6 <quorem+0x112>
 80090f4:	3c01      	subs	r4, #1
 80090f6:	f101 0814 	add.w	r8, r1, #20
 80090fa:	f100 0514 	add.w	r5, r0, #20
 80090fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009102:	9301      	str	r3, [sp, #4]
 8009104:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009108:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800910c:	3301      	adds	r3, #1
 800910e:	429a      	cmp	r2, r3
 8009110:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009114:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009118:	fbb2 f6f3 	udiv	r6, r2, r3
 800911c:	d331      	bcc.n	8009182 <quorem+0x9e>
 800911e:	f04f 0e00 	mov.w	lr, #0
 8009122:	4640      	mov	r0, r8
 8009124:	46ac      	mov	ip, r5
 8009126:	46f2      	mov	sl, lr
 8009128:	f850 2b04 	ldr.w	r2, [r0], #4
 800912c:	b293      	uxth	r3, r2
 800912e:	fb06 e303 	mla	r3, r6, r3, lr
 8009132:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009136:	b29b      	uxth	r3, r3
 8009138:	ebaa 0303 	sub.w	r3, sl, r3
 800913c:	f8dc a000 	ldr.w	sl, [ip]
 8009140:	0c12      	lsrs	r2, r2, #16
 8009142:	fa13 f38a 	uxtah	r3, r3, sl
 8009146:	fb06 e202 	mla	r2, r6, r2, lr
 800914a:	9300      	str	r3, [sp, #0]
 800914c:	9b00      	ldr	r3, [sp, #0]
 800914e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009152:	b292      	uxth	r2, r2
 8009154:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009158:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800915c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009160:	4581      	cmp	r9, r0
 8009162:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009166:	f84c 3b04 	str.w	r3, [ip], #4
 800916a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800916e:	d2db      	bcs.n	8009128 <quorem+0x44>
 8009170:	f855 300b 	ldr.w	r3, [r5, fp]
 8009174:	b92b      	cbnz	r3, 8009182 <quorem+0x9e>
 8009176:	9b01      	ldr	r3, [sp, #4]
 8009178:	3b04      	subs	r3, #4
 800917a:	429d      	cmp	r5, r3
 800917c:	461a      	mov	r2, r3
 800917e:	d32e      	bcc.n	80091de <quorem+0xfa>
 8009180:	613c      	str	r4, [r7, #16]
 8009182:	4638      	mov	r0, r7
 8009184:	f001 f990 	bl	800a4a8 <__mcmp>
 8009188:	2800      	cmp	r0, #0
 800918a:	db24      	blt.n	80091d6 <quorem+0xf2>
 800918c:	3601      	adds	r6, #1
 800918e:	4628      	mov	r0, r5
 8009190:	f04f 0c00 	mov.w	ip, #0
 8009194:	f858 2b04 	ldr.w	r2, [r8], #4
 8009198:	f8d0 e000 	ldr.w	lr, [r0]
 800919c:	b293      	uxth	r3, r2
 800919e:	ebac 0303 	sub.w	r3, ip, r3
 80091a2:	0c12      	lsrs	r2, r2, #16
 80091a4:	fa13 f38e 	uxtah	r3, r3, lr
 80091a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80091ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80091b6:	45c1      	cmp	r9, r8
 80091b8:	f840 3b04 	str.w	r3, [r0], #4
 80091bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80091c0:	d2e8      	bcs.n	8009194 <quorem+0xb0>
 80091c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80091c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80091ca:	b922      	cbnz	r2, 80091d6 <quorem+0xf2>
 80091cc:	3b04      	subs	r3, #4
 80091ce:	429d      	cmp	r5, r3
 80091d0:	461a      	mov	r2, r3
 80091d2:	d30a      	bcc.n	80091ea <quorem+0x106>
 80091d4:	613c      	str	r4, [r7, #16]
 80091d6:	4630      	mov	r0, r6
 80091d8:	b003      	add	sp, #12
 80091da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091de:	6812      	ldr	r2, [r2, #0]
 80091e0:	3b04      	subs	r3, #4
 80091e2:	2a00      	cmp	r2, #0
 80091e4:	d1cc      	bne.n	8009180 <quorem+0x9c>
 80091e6:	3c01      	subs	r4, #1
 80091e8:	e7c7      	b.n	800917a <quorem+0x96>
 80091ea:	6812      	ldr	r2, [r2, #0]
 80091ec:	3b04      	subs	r3, #4
 80091ee:	2a00      	cmp	r2, #0
 80091f0:	d1f0      	bne.n	80091d4 <quorem+0xf0>
 80091f2:	3c01      	subs	r4, #1
 80091f4:	e7eb      	b.n	80091ce <quorem+0xea>
 80091f6:	2000      	movs	r0, #0
 80091f8:	e7ee      	b.n	80091d8 <quorem+0xf4>
 80091fa:	0000      	movs	r0, r0
 80091fc:	0000      	movs	r0, r0
	...

08009200 <_dtoa_r>:
 8009200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009204:	ed2d 8b04 	vpush	{d8-d9}
 8009208:	ec57 6b10 	vmov	r6, r7, d0
 800920c:	b093      	sub	sp, #76	; 0x4c
 800920e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009210:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009214:	9106      	str	r1, [sp, #24]
 8009216:	ee10 aa10 	vmov	sl, s0
 800921a:	4604      	mov	r4, r0
 800921c:	9209      	str	r2, [sp, #36]	; 0x24
 800921e:	930c      	str	r3, [sp, #48]	; 0x30
 8009220:	46bb      	mov	fp, r7
 8009222:	b975      	cbnz	r5, 8009242 <_dtoa_r+0x42>
 8009224:	2010      	movs	r0, #16
 8009226:	f7ff f8dd 	bl	80083e4 <malloc>
 800922a:	4602      	mov	r2, r0
 800922c:	6260      	str	r0, [r4, #36]	; 0x24
 800922e:	b920      	cbnz	r0, 800923a <_dtoa_r+0x3a>
 8009230:	4ba7      	ldr	r3, [pc, #668]	; (80094d0 <_dtoa_r+0x2d0>)
 8009232:	21ea      	movs	r1, #234	; 0xea
 8009234:	48a7      	ldr	r0, [pc, #668]	; (80094d4 <_dtoa_r+0x2d4>)
 8009236:	f001 fbbd 	bl	800a9b4 <__assert_func>
 800923a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800923e:	6005      	str	r5, [r0, #0]
 8009240:	60c5      	str	r5, [r0, #12]
 8009242:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009244:	6819      	ldr	r1, [r3, #0]
 8009246:	b151      	cbz	r1, 800925e <_dtoa_r+0x5e>
 8009248:	685a      	ldr	r2, [r3, #4]
 800924a:	604a      	str	r2, [r1, #4]
 800924c:	2301      	movs	r3, #1
 800924e:	4093      	lsls	r3, r2
 8009250:	608b      	str	r3, [r1, #8]
 8009252:	4620      	mov	r0, r4
 8009254:	f000 fee6 	bl	800a024 <_Bfree>
 8009258:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800925a:	2200      	movs	r2, #0
 800925c:	601a      	str	r2, [r3, #0]
 800925e:	1e3b      	subs	r3, r7, #0
 8009260:	bfaa      	itet	ge
 8009262:	2300      	movge	r3, #0
 8009264:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009268:	f8c8 3000 	strge.w	r3, [r8]
 800926c:	4b9a      	ldr	r3, [pc, #616]	; (80094d8 <_dtoa_r+0x2d8>)
 800926e:	bfbc      	itt	lt
 8009270:	2201      	movlt	r2, #1
 8009272:	f8c8 2000 	strlt.w	r2, [r8]
 8009276:	ea33 030b 	bics.w	r3, r3, fp
 800927a:	d11b      	bne.n	80092b4 <_dtoa_r+0xb4>
 800927c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800927e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009282:	6013      	str	r3, [r2, #0]
 8009284:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009288:	4333      	orrs	r3, r6
 800928a:	f000 8592 	beq.w	8009db2 <_dtoa_r+0xbb2>
 800928e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009290:	b963      	cbnz	r3, 80092ac <_dtoa_r+0xac>
 8009292:	4b92      	ldr	r3, [pc, #584]	; (80094dc <_dtoa_r+0x2dc>)
 8009294:	e022      	b.n	80092dc <_dtoa_r+0xdc>
 8009296:	4b92      	ldr	r3, [pc, #584]	; (80094e0 <_dtoa_r+0x2e0>)
 8009298:	9301      	str	r3, [sp, #4]
 800929a:	3308      	adds	r3, #8
 800929c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800929e:	6013      	str	r3, [r2, #0]
 80092a0:	9801      	ldr	r0, [sp, #4]
 80092a2:	b013      	add	sp, #76	; 0x4c
 80092a4:	ecbd 8b04 	vpop	{d8-d9}
 80092a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ac:	4b8b      	ldr	r3, [pc, #556]	; (80094dc <_dtoa_r+0x2dc>)
 80092ae:	9301      	str	r3, [sp, #4]
 80092b0:	3303      	adds	r3, #3
 80092b2:	e7f3      	b.n	800929c <_dtoa_r+0x9c>
 80092b4:	2200      	movs	r2, #0
 80092b6:	2300      	movs	r3, #0
 80092b8:	4650      	mov	r0, sl
 80092ba:	4659      	mov	r1, fp
 80092bc:	f7f7 fc04 	bl	8000ac8 <__aeabi_dcmpeq>
 80092c0:	ec4b ab19 	vmov	d9, sl, fp
 80092c4:	4680      	mov	r8, r0
 80092c6:	b158      	cbz	r0, 80092e0 <_dtoa_r+0xe0>
 80092c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80092ca:	2301      	movs	r3, #1
 80092cc:	6013      	str	r3, [r2, #0]
 80092ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	f000 856b 	beq.w	8009dac <_dtoa_r+0xbac>
 80092d6:	4883      	ldr	r0, [pc, #524]	; (80094e4 <_dtoa_r+0x2e4>)
 80092d8:	6018      	str	r0, [r3, #0]
 80092da:	1e43      	subs	r3, r0, #1
 80092dc:	9301      	str	r3, [sp, #4]
 80092de:	e7df      	b.n	80092a0 <_dtoa_r+0xa0>
 80092e0:	ec4b ab10 	vmov	d0, sl, fp
 80092e4:	aa10      	add	r2, sp, #64	; 0x40
 80092e6:	a911      	add	r1, sp, #68	; 0x44
 80092e8:	4620      	mov	r0, r4
 80092ea:	f001 f983 	bl	800a5f4 <__d2b>
 80092ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80092f2:	ee08 0a10 	vmov	s16, r0
 80092f6:	2d00      	cmp	r5, #0
 80092f8:	f000 8084 	beq.w	8009404 <_dtoa_r+0x204>
 80092fc:	ee19 3a90 	vmov	r3, s19
 8009300:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009304:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009308:	4656      	mov	r6, sl
 800930a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800930e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009312:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009316:	4b74      	ldr	r3, [pc, #464]	; (80094e8 <_dtoa_r+0x2e8>)
 8009318:	2200      	movs	r2, #0
 800931a:	4630      	mov	r0, r6
 800931c:	4639      	mov	r1, r7
 800931e:	f7f6 ffb3 	bl	8000288 <__aeabi_dsub>
 8009322:	a365      	add	r3, pc, #404	; (adr r3, 80094b8 <_dtoa_r+0x2b8>)
 8009324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009328:	f7f7 f966 	bl	80005f8 <__aeabi_dmul>
 800932c:	a364      	add	r3, pc, #400	; (adr r3, 80094c0 <_dtoa_r+0x2c0>)
 800932e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009332:	f7f6 ffab 	bl	800028c <__adddf3>
 8009336:	4606      	mov	r6, r0
 8009338:	4628      	mov	r0, r5
 800933a:	460f      	mov	r7, r1
 800933c:	f7f7 f8f2 	bl	8000524 <__aeabi_i2d>
 8009340:	a361      	add	r3, pc, #388	; (adr r3, 80094c8 <_dtoa_r+0x2c8>)
 8009342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009346:	f7f7 f957 	bl	80005f8 <__aeabi_dmul>
 800934a:	4602      	mov	r2, r0
 800934c:	460b      	mov	r3, r1
 800934e:	4630      	mov	r0, r6
 8009350:	4639      	mov	r1, r7
 8009352:	f7f6 ff9b 	bl	800028c <__adddf3>
 8009356:	4606      	mov	r6, r0
 8009358:	460f      	mov	r7, r1
 800935a:	f7f7 fbfd 	bl	8000b58 <__aeabi_d2iz>
 800935e:	2200      	movs	r2, #0
 8009360:	9000      	str	r0, [sp, #0]
 8009362:	2300      	movs	r3, #0
 8009364:	4630      	mov	r0, r6
 8009366:	4639      	mov	r1, r7
 8009368:	f7f7 fbb8 	bl	8000adc <__aeabi_dcmplt>
 800936c:	b150      	cbz	r0, 8009384 <_dtoa_r+0x184>
 800936e:	9800      	ldr	r0, [sp, #0]
 8009370:	f7f7 f8d8 	bl	8000524 <__aeabi_i2d>
 8009374:	4632      	mov	r2, r6
 8009376:	463b      	mov	r3, r7
 8009378:	f7f7 fba6 	bl	8000ac8 <__aeabi_dcmpeq>
 800937c:	b910      	cbnz	r0, 8009384 <_dtoa_r+0x184>
 800937e:	9b00      	ldr	r3, [sp, #0]
 8009380:	3b01      	subs	r3, #1
 8009382:	9300      	str	r3, [sp, #0]
 8009384:	9b00      	ldr	r3, [sp, #0]
 8009386:	2b16      	cmp	r3, #22
 8009388:	d85a      	bhi.n	8009440 <_dtoa_r+0x240>
 800938a:	9a00      	ldr	r2, [sp, #0]
 800938c:	4b57      	ldr	r3, [pc, #348]	; (80094ec <_dtoa_r+0x2ec>)
 800938e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009396:	ec51 0b19 	vmov	r0, r1, d9
 800939a:	f7f7 fb9f 	bl	8000adc <__aeabi_dcmplt>
 800939e:	2800      	cmp	r0, #0
 80093a0:	d050      	beq.n	8009444 <_dtoa_r+0x244>
 80093a2:	9b00      	ldr	r3, [sp, #0]
 80093a4:	3b01      	subs	r3, #1
 80093a6:	9300      	str	r3, [sp, #0]
 80093a8:	2300      	movs	r3, #0
 80093aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80093ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80093ae:	1b5d      	subs	r5, r3, r5
 80093b0:	1e6b      	subs	r3, r5, #1
 80093b2:	9305      	str	r3, [sp, #20]
 80093b4:	bf45      	ittet	mi
 80093b6:	f1c5 0301 	rsbmi	r3, r5, #1
 80093ba:	9304      	strmi	r3, [sp, #16]
 80093bc:	2300      	movpl	r3, #0
 80093be:	2300      	movmi	r3, #0
 80093c0:	bf4c      	ite	mi
 80093c2:	9305      	strmi	r3, [sp, #20]
 80093c4:	9304      	strpl	r3, [sp, #16]
 80093c6:	9b00      	ldr	r3, [sp, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	db3d      	blt.n	8009448 <_dtoa_r+0x248>
 80093cc:	9b05      	ldr	r3, [sp, #20]
 80093ce:	9a00      	ldr	r2, [sp, #0]
 80093d0:	920a      	str	r2, [sp, #40]	; 0x28
 80093d2:	4413      	add	r3, r2
 80093d4:	9305      	str	r3, [sp, #20]
 80093d6:	2300      	movs	r3, #0
 80093d8:	9307      	str	r3, [sp, #28]
 80093da:	9b06      	ldr	r3, [sp, #24]
 80093dc:	2b09      	cmp	r3, #9
 80093de:	f200 8089 	bhi.w	80094f4 <_dtoa_r+0x2f4>
 80093e2:	2b05      	cmp	r3, #5
 80093e4:	bfc4      	itt	gt
 80093e6:	3b04      	subgt	r3, #4
 80093e8:	9306      	strgt	r3, [sp, #24]
 80093ea:	9b06      	ldr	r3, [sp, #24]
 80093ec:	f1a3 0302 	sub.w	r3, r3, #2
 80093f0:	bfcc      	ite	gt
 80093f2:	2500      	movgt	r5, #0
 80093f4:	2501      	movle	r5, #1
 80093f6:	2b03      	cmp	r3, #3
 80093f8:	f200 8087 	bhi.w	800950a <_dtoa_r+0x30a>
 80093fc:	e8df f003 	tbb	[pc, r3]
 8009400:	59383a2d 	.word	0x59383a2d
 8009404:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009408:	441d      	add	r5, r3
 800940a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800940e:	2b20      	cmp	r3, #32
 8009410:	bfc1      	itttt	gt
 8009412:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009416:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800941a:	fa0b f303 	lslgt.w	r3, fp, r3
 800941e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009422:	bfda      	itte	le
 8009424:	f1c3 0320 	rsble	r3, r3, #32
 8009428:	fa06 f003 	lslle.w	r0, r6, r3
 800942c:	4318      	orrgt	r0, r3
 800942e:	f7f7 f869 	bl	8000504 <__aeabi_ui2d>
 8009432:	2301      	movs	r3, #1
 8009434:	4606      	mov	r6, r0
 8009436:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800943a:	3d01      	subs	r5, #1
 800943c:	930e      	str	r3, [sp, #56]	; 0x38
 800943e:	e76a      	b.n	8009316 <_dtoa_r+0x116>
 8009440:	2301      	movs	r3, #1
 8009442:	e7b2      	b.n	80093aa <_dtoa_r+0x1aa>
 8009444:	900b      	str	r0, [sp, #44]	; 0x2c
 8009446:	e7b1      	b.n	80093ac <_dtoa_r+0x1ac>
 8009448:	9b04      	ldr	r3, [sp, #16]
 800944a:	9a00      	ldr	r2, [sp, #0]
 800944c:	1a9b      	subs	r3, r3, r2
 800944e:	9304      	str	r3, [sp, #16]
 8009450:	4253      	negs	r3, r2
 8009452:	9307      	str	r3, [sp, #28]
 8009454:	2300      	movs	r3, #0
 8009456:	930a      	str	r3, [sp, #40]	; 0x28
 8009458:	e7bf      	b.n	80093da <_dtoa_r+0x1da>
 800945a:	2300      	movs	r3, #0
 800945c:	9308      	str	r3, [sp, #32]
 800945e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009460:	2b00      	cmp	r3, #0
 8009462:	dc55      	bgt.n	8009510 <_dtoa_r+0x310>
 8009464:	2301      	movs	r3, #1
 8009466:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800946a:	461a      	mov	r2, r3
 800946c:	9209      	str	r2, [sp, #36]	; 0x24
 800946e:	e00c      	b.n	800948a <_dtoa_r+0x28a>
 8009470:	2301      	movs	r3, #1
 8009472:	e7f3      	b.n	800945c <_dtoa_r+0x25c>
 8009474:	2300      	movs	r3, #0
 8009476:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009478:	9308      	str	r3, [sp, #32]
 800947a:	9b00      	ldr	r3, [sp, #0]
 800947c:	4413      	add	r3, r2
 800947e:	9302      	str	r3, [sp, #8]
 8009480:	3301      	adds	r3, #1
 8009482:	2b01      	cmp	r3, #1
 8009484:	9303      	str	r3, [sp, #12]
 8009486:	bfb8      	it	lt
 8009488:	2301      	movlt	r3, #1
 800948a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800948c:	2200      	movs	r2, #0
 800948e:	6042      	str	r2, [r0, #4]
 8009490:	2204      	movs	r2, #4
 8009492:	f102 0614 	add.w	r6, r2, #20
 8009496:	429e      	cmp	r6, r3
 8009498:	6841      	ldr	r1, [r0, #4]
 800949a:	d93d      	bls.n	8009518 <_dtoa_r+0x318>
 800949c:	4620      	mov	r0, r4
 800949e:	f000 fd81 	bl	8009fa4 <_Balloc>
 80094a2:	9001      	str	r0, [sp, #4]
 80094a4:	2800      	cmp	r0, #0
 80094a6:	d13b      	bne.n	8009520 <_dtoa_r+0x320>
 80094a8:	4b11      	ldr	r3, [pc, #68]	; (80094f0 <_dtoa_r+0x2f0>)
 80094aa:	4602      	mov	r2, r0
 80094ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80094b0:	e6c0      	b.n	8009234 <_dtoa_r+0x34>
 80094b2:	2301      	movs	r3, #1
 80094b4:	e7df      	b.n	8009476 <_dtoa_r+0x276>
 80094b6:	bf00      	nop
 80094b8:	636f4361 	.word	0x636f4361
 80094bc:	3fd287a7 	.word	0x3fd287a7
 80094c0:	8b60c8b3 	.word	0x8b60c8b3
 80094c4:	3fc68a28 	.word	0x3fc68a28
 80094c8:	509f79fb 	.word	0x509f79fb
 80094cc:	3fd34413 	.word	0x3fd34413
 80094d0:	0800b3f5 	.word	0x0800b3f5
 80094d4:	0800b40c 	.word	0x0800b40c
 80094d8:	7ff00000 	.word	0x7ff00000
 80094dc:	0800b3f1 	.word	0x0800b3f1
 80094e0:	0800b3e8 	.word	0x0800b3e8
 80094e4:	0800b3c5 	.word	0x0800b3c5
 80094e8:	3ff80000 	.word	0x3ff80000
 80094ec:	0800b500 	.word	0x0800b500
 80094f0:	0800b467 	.word	0x0800b467
 80094f4:	2501      	movs	r5, #1
 80094f6:	2300      	movs	r3, #0
 80094f8:	9306      	str	r3, [sp, #24]
 80094fa:	9508      	str	r5, [sp, #32]
 80094fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009500:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009504:	2200      	movs	r2, #0
 8009506:	2312      	movs	r3, #18
 8009508:	e7b0      	b.n	800946c <_dtoa_r+0x26c>
 800950a:	2301      	movs	r3, #1
 800950c:	9308      	str	r3, [sp, #32]
 800950e:	e7f5      	b.n	80094fc <_dtoa_r+0x2fc>
 8009510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009512:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009516:	e7b8      	b.n	800948a <_dtoa_r+0x28a>
 8009518:	3101      	adds	r1, #1
 800951a:	6041      	str	r1, [r0, #4]
 800951c:	0052      	lsls	r2, r2, #1
 800951e:	e7b8      	b.n	8009492 <_dtoa_r+0x292>
 8009520:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009522:	9a01      	ldr	r2, [sp, #4]
 8009524:	601a      	str	r2, [r3, #0]
 8009526:	9b03      	ldr	r3, [sp, #12]
 8009528:	2b0e      	cmp	r3, #14
 800952a:	f200 809d 	bhi.w	8009668 <_dtoa_r+0x468>
 800952e:	2d00      	cmp	r5, #0
 8009530:	f000 809a 	beq.w	8009668 <_dtoa_r+0x468>
 8009534:	9b00      	ldr	r3, [sp, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	dd32      	ble.n	80095a0 <_dtoa_r+0x3a0>
 800953a:	4ab7      	ldr	r2, [pc, #732]	; (8009818 <_dtoa_r+0x618>)
 800953c:	f003 030f 	and.w	r3, r3, #15
 8009540:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009544:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009548:	9b00      	ldr	r3, [sp, #0]
 800954a:	05d8      	lsls	r0, r3, #23
 800954c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009550:	d516      	bpl.n	8009580 <_dtoa_r+0x380>
 8009552:	4bb2      	ldr	r3, [pc, #712]	; (800981c <_dtoa_r+0x61c>)
 8009554:	ec51 0b19 	vmov	r0, r1, d9
 8009558:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800955c:	f7f7 f976 	bl	800084c <__aeabi_ddiv>
 8009560:	f007 070f 	and.w	r7, r7, #15
 8009564:	4682      	mov	sl, r0
 8009566:	468b      	mov	fp, r1
 8009568:	2503      	movs	r5, #3
 800956a:	4eac      	ldr	r6, [pc, #688]	; (800981c <_dtoa_r+0x61c>)
 800956c:	b957      	cbnz	r7, 8009584 <_dtoa_r+0x384>
 800956e:	4642      	mov	r2, r8
 8009570:	464b      	mov	r3, r9
 8009572:	4650      	mov	r0, sl
 8009574:	4659      	mov	r1, fp
 8009576:	f7f7 f969 	bl	800084c <__aeabi_ddiv>
 800957a:	4682      	mov	sl, r0
 800957c:	468b      	mov	fp, r1
 800957e:	e028      	b.n	80095d2 <_dtoa_r+0x3d2>
 8009580:	2502      	movs	r5, #2
 8009582:	e7f2      	b.n	800956a <_dtoa_r+0x36a>
 8009584:	07f9      	lsls	r1, r7, #31
 8009586:	d508      	bpl.n	800959a <_dtoa_r+0x39a>
 8009588:	4640      	mov	r0, r8
 800958a:	4649      	mov	r1, r9
 800958c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009590:	f7f7 f832 	bl	80005f8 <__aeabi_dmul>
 8009594:	3501      	adds	r5, #1
 8009596:	4680      	mov	r8, r0
 8009598:	4689      	mov	r9, r1
 800959a:	107f      	asrs	r7, r7, #1
 800959c:	3608      	adds	r6, #8
 800959e:	e7e5      	b.n	800956c <_dtoa_r+0x36c>
 80095a0:	f000 809b 	beq.w	80096da <_dtoa_r+0x4da>
 80095a4:	9b00      	ldr	r3, [sp, #0]
 80095a6:	4f9d      	ldr	r7, [pc, #628]	; (800981c <_dtoa_r+0x61c>)
 80095a8:	425e      	negs	r6, r3
 80095aa:	4b9b      	ldr	r3, [pc, #620]	; (8009818 <_dtoa_r+0x618>)
 80095ac:	f006 020f 	and.w	r2, r6, #15
 80095b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b8:	ec51 0b19 	vmov	r0, r1, d9
 80095bc:	f7f7 f81c 	bl	80005f8 <__aeabi_dmul>
 80095c0:	1136      	asrs	r6, r6, #4
 80095c2:	4682      	mov	sl, r0
 80095c4:	468b      	mov	fp, r1
 80095c6:	2300      	movs	r3, #0
 80095c8:	2502      	movs	r5, #2
 80095ca:	2e00      	cmp	r6, #0
 80095cc:	d17a      	bne.n	80096c4 <_dtoa_r+0x4c4>
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d1d3      	bne.n	800957a <_dtoa_r+0x37a>
 80095d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	f000 8082 	beq.w	80096de <_dtoa_r+0x4de>
 80095da:	4b91      	ldr	r3, [pc, #580]	; (8009820 <_dtoa_r+0x620>)
 80095dc:	2200      	movs	r2, #0
 80095de:	4650      	mov	r0, sl
 80095e0:	4659      	mov	r1, fp
 80095e2:	f7f7 fa7b 	bl	8000adc <__aeabi_dcmplt>
 80095e6:	2800      	cmp	r0, #0
 80095e8:	d079      	beq.n	80096de <_dtoa_r+0x4de>
 80095ea:	9b03      	ldr	r3, [sp, #12]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d076      	beq.n	80096de <_dtoa_r+0x4de>
 80095f0:	9b02      	ldr	r3, [sp, #8]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	dd36      	ble.n	8009664 <_dtoa_r+0x464>
 80095f6:	9b00      	ldr	r3, [sp, #0]
 80095f8:	4650      	mov	r0, sl
 80095fa:	4659      	mov	r1, fp
 80095fc:	1e5f      	subs	r7, r3, #1
 80095fe:	2200      	movs	r2, #0
 8009600:	4b88      	ldr	r3, [pc, #544]	; (8009824 <_dtoa_r+0x624>)
 8009602:	f7f6 fff9 	bl	80005f8 <__aeabi_dmul>
 8009606:	9e02      	ldr	r6, [sp, #8]
 8009608:	4682      	mov	sl, r0
 800960a:	468b      	mov	fp, r1
 800960c:	3501      	adds	r5, #1
 800960e:	4628      	mov	r0, r5
 8009610:	f7f6 ff88 	bl	8000524 <__aeabi_i2d>
 8009614:	4652      	mov	r2, sl
 8009616:	465b      	mov	r3, fp
 8009618:	f7f6 ffee 	bl	80005f8 <__aeabi_dmul>
 800961c:	4b82      	ldr	r3, [pc, #520]	; (8009828 <_dtoa_r+0x628>)
 800961e:	2200      	movs	r2, #0
 8009620:	f7f6 fe34 	bl	800028c <__adddf3>
 8009624:	46d0      	mov	r8, sl
 8009626:	46d9      	mov	r9, fp
 8009628:	4682      	mov	sl, r0
 800962a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800962e:	2e00      	cmp	r6, #0
 8009630:	d158      	bne.n	80096e4 <_dtoa_r+0x4e4>
 8009632:	4b7e      	ldr	r3, [pc, #504]	; (800982c <_dtoa_r+0x62c>)
 8009634:	2200      	movs	r2, #0
 8009636:	4640      	mov	r0, r8
 8009638:	4649      	mov	r1, r9
 800963a:	f7f6 fe25 	bl	8000288 <__aeabi_dsub>
 800963e:	4652      	mov	r2, sl
 8009640:	465b      	mov	r3, fp
 8009642:	4680      	mov	r8, r0
 8009644:	4689      	mov	r9, r1
 8009646:	f7f7 fa67 	bl	8000b18 <__aeabi_dcmpgt>
 800964a:	2800      	cmp	r0, #0
 800964c:	f040 8295 	bne.w	8009b7a <_dtoa_r+0x97a>
 8009650:	4652      	mov	r2, sl
 8009652:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009656:	4640      	mov	r0, r8
 8009658:	4649      	mov	r1, r9
 800965a:	f7f7 fa3f 	bl	8000adc <__aeabi_dcmplt>
 800965e:	2800      	cmp	r0, #0
 8009660:	f040 8289 	bne.w	8009b76 <_dtoa_r+0x976>
 8009664:	ec5b ab19 	vmov	sl, fp, d9
 8009668:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800966a:	2b00      	cmp	r3, #0
 800966c:	f2c0 8148 	blt.w	8009900 <_dtoa_r+0x700>
 8009670:	9a00      	ldr	r2, [sp, #0]
 8009672:	2a0e      	cmp	r2, #14
 8009674:	f300 8144 	bgt.w	8009900 <_dtoa_r+0x700>
 8009678:	4b67      	ldr	r3, [pc, #412]	; (8009818 <_dtoa_r+0x618>)
 800967a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800967e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009684:	2b00      	cmp	r3, #0
 8009686:	f280 80d5 	bge.w	8009834 <_dtoa_r+0x634>
 800968a:	9b03      	ldr	r3, [sp, #12]
 800968c:	2b00      	cmp	r3, #0
 800968e:	f300 80d1 	bgt.w	8009834 <_dtoa_r+0x634>
 8009692:	f040 826f 	bne.w	8009b74 <_dtoa_r+0x974>
 8009696:	4b65      	ldr	r3, [pc, #404]	; (800982c <_dtoa_r+0x62c>)
 8009698:	2200      	movs	r2, #0
 800969a:	4640      	mov	r0, r8
 800969c:	4649      	mov	r1, r9
 800969e:	f7f6 ffab 	bl	80005f8 <__aeabi_dmul>
 80096a2:	4652      	mov	r2, sl
 80096a4:	465b      	mov	r3, fp
 80096a6:	f7f7 fa2d 	bl	8000b04 <__aeabi_dcmpge>
 80096aa:	9e03      	ldr	r6, [sp, #12]
 80096ac:	4637      	mov	r7, r6
 80096ae:	2800      	cmp	r0, #0
 80096b0:	f040 8245 	bne.w	8009b3e <_dtoa_r+0x93e>
 80096b4:	9d01      	ldr	r5, [sp, #4]
 80096b6:	2331      	movs	r3, #49	; 0x31
 80096b8:	f805 3b01 	strb.w	r3, [r5], #1
 80096bc:	9b00      	ldr	r3, [sp, #0]
 80096be:	3301      	adds	r3, #1
 80096c0:	9300      	str	r3, [sp, #0]
 80096c2:	e240      	b.n	8009b46 <_dtoa_r+0x946>
 80096c4:	07f2      	lsls	r2, r6, #31
 80096c6:	d505      	bpl.n	80096d4 <_dtoa_r+0x4d4>
 80096c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096cc:	f7f6 ff94 	bl	80005f8 <__aeabi_dmul>
 80096d0:	3501      	adds	r5, #1
 80096d2:	2301      	movs	r3, #1
 80096d4:	1076      	asrs	r6, r6, #1
 80096d6:	3708      	adds	r7, #8
 80096d8:	e777      	b.n	80095ca <_dtoa_r+0x3ca>
 80096da:	2502      	movs	r5, #2
 80096dc:	e779      	b.n	80095d2 <_dtoa_r+0x3d2>
 80096de:	9f00      	ldr	r7, [sp, #0]
 80096e0:	9e03      	ldr	r6, [sp, #12]
 80096e2:	e794      	b.n	800960e <_dtoa_r+0x40e>
 80096e4:	9901      	ldr	r1, [sp, #4]
 80096e6:	4b4c      	ldr	r3, [pc, #304]	; (8009818 <_dtoa_r+0x618>)
 80096e8:	4431      	add	r1, r6
 80096ea:	910d      	str	r1, [sp, #52]	; 0x34
 80096ec:	9908      	ldr	r1, [sp, #32]
 80096ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80096f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80096f6:	2900      	cmp	r1, #0
 80096f8:	d043      	beq.n	8009782 <_dtoa_r+0x582>
 80096fa:	494d      	ldr	r1, [pc, #308]	; (8009830 <_dtoa_r+0x630>)
 80096fc:	2000      	movs	r0, #0
 80096fe:	f7f7 f8a5 	bl	800084c <__aeabi_ddiv>
 8009702:	4652      	mov	r2, sl
 8009704:	465b      	mov	r3, fp
 8009706:	f7f6 fdbf 	bl	8000288 <__aeabi_dsub>
 800970a:	9d01      	ldr	r5, [sp, #4]
 800970c:	4682      	mov	sl, r0
 800970e:	468b      	mov	fp, r1
 8009710:	4649      	mov	r1, r9
 8009712:	4640      	mov	r0, r8
 8009714:	f7f7 fa20 	bl	8000b58 <__aeabi_d2iz>
 8009718:	4606      	mov	r6, r0
 800971a:	f7f6 ff03 	bl	8000524 <__aeabi_i2d>
 800971e:	4602      	mov	r2, r0
 8009720:	460b      	mov	r3, r1
 8009722:	4640      	mov	r0, r8
 8009724:	4649      	mov	r1, r9
 8009726:	f7f6 fdaf 	bl	8000288 <__aeabi_dsub>
 800972a:	3630      	adds	r6, #48	; 0x30
 800972c:	f805 6b01 	strb.w	r6, [r5], #1
 8009730:	4652      	mov	r2, sl
 8009732:	465b      	mov	r3, fp
 8009734:	4680      	mov	r8, r0
 8009736:	4689      	mov	r9, r1
 8009738:	f7f7 f9d0 	bl	8000adc <__aeabi_dcmplt>
 800973c:	2800      	cmp	r0, #0
 800973e:	d163      	bne.n	8009808 <_dtoa_r+0x608>
 8009740:	4642      	mov	r2, r8
 8009742:	464b      	mov	r3, r9
 8009744:	4936      	ldr	r1, [pc, #216]	; (8009820 <_dtoa_r+0x620>)
 8009746:	2000      	movs	r0, #0
 8009748:	f7f6 fd9e 	bl	8000288 <__aeabi_dsub>
 800974c:	4652      	mov	r2, sl
 800974e:	465b      	mov	r3, fp
 8009750:	f7f7 f9c4 	bl	8000adc <__aeabi_dcmplt>
 8009754:	2800      	cmp	r0, #0
 8009756:	f040 80b5 	bne.w	80098c4 <_dtoa_r+0x6c4>
 800975a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800975c:	429d      	cmp	r5, r3
 800975e:	d081      	beq.n	8009664 <_dtoa_r+0x464>
 8009760:	4b30      	ldr	r3, [pc, #192]	; (8009824 <_dtoa_r+0x624>)
 8009762:	2200      	movs	r2, #0
 8009764:	4650      	mov	r0, sl
 8009766:	4659      	mov	r1, fp
 8009768:	f7f6 ff46 	bl	80005f8 <__aeabi_dmul>
 800976c:	4b2d      	ldr	r3, [pc, #180]	; (8009824 <_dtoa_r+0x624>)
 800976e:	4682      	mov	sl, r0
 8009770:	468b      	mov	fp, r1
 8009772:	4640      	mov	r0, r8
 8009774:	4649      	mov	r1, r9
 8009776:	2200      	movs	r2, #0
 8009778:	f7f6 ff3e 	bl	80005f8 <__aeabi_dmul>
 800977c:	4680      	mov	r8, r0
 800977e:	4689      	mov	r9, r1
 8009780:	e7c6      	b.n	8009710 <_dtoa_r+0x510>
 8009782:	4650      	mov	r0, sl
 8009784:	4659      	mov	r1, fp
 8009786:	f7f6 ff37 	bl	80005f8 <__aeabi_dmul>
 800978a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800978c:	9d01      	ldr	r5, [sp, #4]
 800978e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009790:	4682      	mov	sl, r0
 8009792:	468b      	mov	fp, r1
 8009794:	4649      	mov	r1, r9
 8009796:	4640      	mov	r0, r8
 8009798:	f7f7 f9de 	bl	8000b58 <__aeabi_d2iz>
 800979c:	4606      	mov	r6, r0
 800979e:	f7f6 fec1 	bl	8000524 <__aeabi_i2d>
 80097a2:	3630      	adds	r6, #48	; 0x30
 80097a4:	4602      	mov	r2, r0
 80097a6:	460b      	mov	r3, r1
 80097a8:	4640      	mov	r0, r8
 80097aa:	4649      	mov	r1, r9
 80097ac:	f7f6 fd6c 	bl	8000288 <__aeabi_dsub>
 80097b0:	f805 6b01 	strb.w	r6, [r5], #1
 80097b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097b6:	429d      	cmp	r5, r3
 80097b8:	4680      	mov	r8, r0
 80097ba:	4689      	mov	r9, r1
 80097bc:	f04f 0200 	mov.w	r2, #0
 80097c0:	d124      	bne.n	800980c <_dtoa_r+0x60c>
 80097c2:	4b1b      	ldr	r3, [pc, #108]	; (8009830 <_dtoa_r+0x630>)
 80097c4:	4650      	mov	r0, sl
 80097c6:	4659      	mov	r1, fp
 80097c8:	f7f6 fd60 	bl	800028c <__adddf3>
 80097cc:	4602      	mov	r2, r0
 80097ce:	460b      	mov	r3, r1
 80097d0:	4640      	mov	r0, r8
 80097d2:	4649      	mov	r1, r9
 80097d4:	f7f7 f9a0 	bl	8000b18 <__aeabi_dcmpgt>
 80097d8:	2800      	cmp	r0, #0
 80097da:	d173      	bne.n	80098c4 <_dtoa_r+0x6c4>
 80097dc:	4652      	mov	r2, sl
 80097de:	465b      	mov	r3, fp
 80097e0:	4913      	ldr	r1, [pc, #76]	; (8009830 <_dtoa_r+0x630>)
 80097e2:	2000      	movs	r0, #0
 80097e4:	f7f6 fd50 	bl	8000288 <__aeabi_dsub>
 80097e8:	4602      	mov	r2, r0
 80097ea:	460b      	mov	r3, r1
 80097ec:	4640      	mov	r0, r8
 80097ee:	4649      	mov	r1, r9
 80097f0:	f7f7 f974 	bl	8000adc <__aeabi_dcmplt>
 80097f4:	2800      	cmp	r0, #0
 80097f6:	f43f af35 	beq.w	8009664 <_dtoa_r+0x464>
 80097fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80097fc:	1e6b      	subs	r3, r5, #1
 80097fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009800:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009804:	2b30      	cmp	r3, #48	; 0x30
 8009806:	d0f8      	beq.n	80097fa <_dtoa_r+0x5fa>
 8009808:	9700      	str	r7, [sp, #0]
 800980a:	e049      	b.n	80098a0 <_dtoa_r+0x6a0>
 800980c:	4b05      	ldr	r3, [pc, #20]	; (8009824 <_dtoa_r+0x624>)
 800980e:	f7f6 fef3 	bl	80005f8 <__aeabi_dmul>
 8009812:	4680      	mov	r8, r0
 8009814:	4689      	mov	r9, r1
 8009816:	e7bd      	b.n	8009794 <_dtoa_r+0x594>
 8009818:	0800b500 	.word	0x0800b500
 800981c:	0800b4d8 	.word	0x0800b4d8
 8009820:	3ff00000 	.word	0x3ff00000
 8009824:	40240000 	.word	0x40240000
 8009828:	401c0000 	.word	0x401c0000
 800982c:	40140000 	.word	0x40140000
 8009830:	3fe00000 	.word	0x3fe00000
 8009834:	9d01      	ldr	r5, [sp, #4]
 8009836:	4656      	mov	r6, sl
 8009838:	465f      	mov	r7, fp
 800983a:	4642      	mov	r2, r8
 800983c:	464b      	mov	r3, r9
 800983e:	4630      	mov	r0, r6
 8009840:	4639      	mov	r1, r7
 8009842:	f7f7 f803 	bl	800084c <__aeabi_ddiv>
 8009846:	f7f7 f987 	bl	8000b58 <__aeabi_d2iz>
 800984a:	4682      	mov	sl, r0
 800984c:	f7f6 fe6a 	bl	8000524 <__aeabi_i2d>
 8009850:	4642      	mov	r2, r8
 8009852:	464b      	mov	r3, r9
 8009854:	f7f6 fed0 	bl	80005f8 <__aeabi_dmul>
 8009858:	4602      	mov	r2, r0
 800985a:	460b      	mov	r3, r1
 800985c:	4630      	mov	r0, r6
 800985e:	4639      	mov	r1, r7
 8009860:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009864:	f7f6 fd10 	bl	8000288 <__aeabi_dsub>
 8009868:	f805 6b01 	strb.w	r6, [r5], #1
 800986c:	9e01      	ldr	r6, [sp, #4]
 800986e:	9f03      	ldr	r7, [sp, #12]
 8009870:	1bae      	subs	r6, r5, r6
 8009872:	42b7      	cmp	r7, r6
 8009874:	4602      	mov	r2, r0
 8009876:	460b      	mov	r3, r1
 8009878:	d135      	bne.n	80098e6 <_dtoa_r+0x6e6>
 800987a:	f7f6 fd07 	bl	800028c <__adddf3>
 800987e:	4642      	mov	r2, r8
 8009880:	464b      	mov	r3, r9
 8009882:	4606      	mov	r6, r0
 8009884:	460f      	mov	r7, r1
 8009886:	f7f7 f947 	bl	8000b18 <__aeabi_dcmpgt>
 800988a:	b9d0      	cbnz	r0, 80098c2 <_dtoa_r+0x6c2>
 800988c:	4642      	mov	r2, r8
 800988e:	464b      	mov	r3, r9
 8009890:	4630      	mov	r0, r6
 8009892:	4639      	mov	r1, r7
 8009894:	f7f7 f918 	bl	8000ac8 <__aeabi_dcmpeq>
 8009898:	b110      	cbz	r0, 80098a0 <_dtoa_r+0x6a0>
 800989a:	f01a 0f01 	tst.w	sl, #1
 800989e:	d110      	bne.n	80098c2 <_dtoa_r+0x6c2>
 80098a0:	4620      	mov	r0, r4
 80098a2:	ee18 1a10 	vmov	r1, s16
 80098a6:	f000 fbbd 	bl	800a024 <_Bfree>
 80098aa:	2300      	movs	r3, #0
 80098ac:	9800      	ldr	r0, [sp, #0]
 80098ae:	702b      	strb	r3, [r5, #0]
 80098b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098b2:	3001      	adds	r0, #1
 80098b4:	6018      	str	r0, [r3, #0]
 80098b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	f43f acf1 	beq.w	80092a0 <_dtoa_r+0xa0>
 80098be:	601d      	str	r5, [r3, #0]
 80098c0:	e4ee      	b.n	80092a0 <_dtoa_r+0xa0>
 80098c2:	9f00      	ldr	r7, [sp, #0]
 80098c4:	462b      	mov	r3, r5
 80098c6:	461d      	mov	r5, r3
 80098c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098cc:	2a39      	cmp	r2, #57	; 0x39
 80098ce:	d106      	bne.n	80098de <_dtoa_r+0x6de>
 80098d0:	9a01      	ldr	r2, [sp, #4]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d1f7      	bne.n	80098c6 <_dtoa_r+0x6c6>
 80098d6:	9901      	ldr	r1, [sp, #4]
 80098d8:	2230      	movs	r2, #48	; 0x30
 80098da:	3701      	adds	r7, #1
 80098dc:	700a      	strb	r2, [r1, #0]
 80098de:	781a      	ldrb	r2, [r3, #0]
 80098e0:	3201      	adds	r2, #1
 80098e2:	701a      	strb	r2, [r3, #0]
 80098e4:	e790      	b.n	8009808 <_dtoa_r+0x608>
 80098e6:	4ba6      	ldr	r3, [pc, #664]	; (8009b80 <_dtoa_r+0x980>)
 80098e8:	2200      	movs	r2, #0
 80098ea:	f7f6 fe85 	bl	80005f8 <__aeabi_dmul>
 80098ee:	2200      	movs	r2, #0
 80098f0:	2300      	movs	r3, #0
 80098f2:	4606      	mov	r6, r0
 80098f4:	460f      	mov	r7, r1
 80098f6:	f7f7 f8e7 	bl	8000ac8 <__aeabi_dcmpeq>
 80098fa:	2800      	cmp	r0, #0
 80098fc:	d09d      	beq.n	800983a <_dtoa_r+0x63a>
 80098fe:	e7cf      	b.n	80098a0 <_dtoa_r+0x6a0>
 8009900:	9a08      	ldr	r2, [sp, #32]
 8009902:	2a00      	cmp	r2, #0
 8009904:	f000 80d7 	beq.w	8009ab6 <_dtoa_r+0x8b6>
 8009908:	9a06      	ldr	r2, [sp, #24]
 800990a:	2a01      	cmp	r2, #1
 800990c:	f300 80ba 	bgt.w	8009a84 <_dtoa_r+0x884>
 8009910:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009912:	2a00      	cmp	r2, #0
 8009914:	f000 80b2 	beq.w	8009a7c <_dtoa_r+0x87c>
 8009918:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800991c:	9e07      	ldr	r6, [sp, #28]
 800991e:	9d04      	ldr	r5, [sp, #16]
 8009920:	9a04      	ldr	r2, [sp, #16]
 8009922:	441a      	add	r2, r3
 8009924:	9204      	str	r2, [sp, #16]
 8009926:	9a05      	ldr	r2, [sp, #20]
 8009928:	2101      	movs	r1, #1
 800992a:	441a      	add	r2, r3
 800992c:	4620      	mov	r0, r4
 800992e:	9205      	str	r2, [sp, #20]
 8009930:	f000 fc30 	bl	800a194 <__i2b>
 8009934:	4607      	mov	r7, r0
 8009936:	2d00      	cmp	r5, #0
 8009938:	dd0c      	ble.n	8009954 <_dtoa_r+0x754>
 800993a:	9b05      	ldr	r3, [sp, #20]
 800993c:	2b00      	cmp	r3, #0
 800993e:	dd09      	ble.n	8009954 <_dtoa_r+0x754>
 8009940:	42ab      	cmp	r3, r5
 8009942:	9a04      	ldr	r2, [sp, #16]
 8009944:	bfa8      	it	ge
 8009946:	462b      	movge	r3, r5
 8009948:	1ad2      	subs	r2, r2, r3
 800994a:	9204      	str	r2, [sp, #16]
 800994c:	9a05      	ldr	r2, [sp, #20]
 800994e:	1aed      	subs	r5, r5, r3
 8009950:	1ad3      	subs	r3, r2, r3
 8009952:	9305      	str	r3, [sp, #20]
 8009954:	9b07      	ldr	r3, [sp, #28]
 8009956:	b31b      	cbz	r3, 80099a0 <_dtoa_r+0x7a0>
 8009958:	9b08      	ldr	r3, [sp, #32]
 800995a:	2b00      	cmp	r3, #0
 800995c:	f000 80af 	beq.w	8009abe <_dtoa_r+0x8be>
 8009960:	2e00      	cmp	r6, #0
 8009962:	dd13      	ble.n	800998c <_dtoa_r+0x78c>
 8009964:	4639      	mov	r1, r7
 8009966:	4632      	mov	r2, r6
 8009968:	4620      	mov	r0, r4
 800996a:	f000 fcd3 	bl	800a314 <__pow5mult>
 800996e:	ee18 2a10 	vmov	r2, s16
 8009972:	4601      	mov	r1, r0
 8009974:	4607      	mov	r7, r0
 8009976:	4620      	mov	r0, r4
 8009978:	f000 fc22 	bl	800a1c0 <__multiply>
 800997c:	ee18 1a10 	vmov	r1, s16
 8009980:	4680      	mov	r8, r0
 8009982:	4620      	mov	r0, r4
 8009984:	f000 fb4e 	bl	800a024 <_Bfree>
 8009988:	ee08 8a10 	vmov	s16, r8
 800998c:	9b07      	ldr	r3, [sp, #28]
 800998e:	1b9a      	subs	r2, r3, r6
 8009990:	d006      	beq.n	80099a0 <_dtoa_r+0x7a0>
 8009992:	ee18 1a10 	vmov	r1, s16
 8009996:	4620      	mov	r0, r4
 8009998:	f000 fcbc 	bl	800a314 <__pow5mult>
 800999c:	ee08 0a10 	vmov	s16, r0
 80099a0:	2101      	movs	r1, #1
 80099a2:	4620      	mov	r0, r4
 80099a4:	f000 fbf6 	bl	800a194 <__i2b>
 80099a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	4606      	mov	r6, r0
 80099ae:	f340 8088 	ble.w	8009ac2 <_dtoa_r+0x8c2>
 80099b2:	461a      	mov	r2, r3
 80099b4:	4601      	mov	r1, r0
 80099b6:	4620      	mov	r0, r4
 80099b8:	f000 fcac 	bl	800a314 <__pow5mult>
 80099bc:	9b06      	ldr	r3, [sp, #24]
 80099be:	2b01      	cmp	r3, #1
 80099c0:	4606      	mov	r6, r0
 80099c2:	f340 8081 	ble.w	8009ac8 <_dtoa_r+0x8c8>
 80099c6:	f04f 0800 	mov.w	r8, #0
 80099ca:	6933      	ldr	r3, [r6, #16]
 80099cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80099d0:	6918      	ldr	r0, [r3, #16]
 80099d2:	f000 fb8f 	bl	800a0f4 <__hi0bits>
 80099d6:	f1c0 0020 	rsb	r0, r0, #32
 80099da:	9b05      	ldr	r3, [sp, #20]
 80099dc:	4418      	add	r0, r3
 80099de:	f010 001f 	ands.w	r0, r0, #31
 80099e2:	f000 8092 	beq.w	8009b0a <_dtoa_r+0x90a>
 80099e6:	f1c0 0320 	rsb	r3, r0, #32
 80099ea:	2b04      	cmp	r3, #4
 80099ec:	f340 808a 	ble.w	8009b04 <_dtoa_r+0x904>
 80099f0:	f1c0 001c 	rsb	r0, r0, #28
 80099f4:	9b04      	ldr	r3, [sp, #16]
 80099f6:	4403      	add	r3, r0
 80099f8:	9304      	str	r3, [sp, #16]
 80099fa:	9b05      	ldr	r3, [sp, #20]
 80099fc:	4403      	add	r3, r0
 80099fe:	4405      	add	r5, r0
 8009a00:	9305      	str	r3, [sp, #20]
 8009a02:	9b04      	ldr	r3, [sp, #16]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	dd07      	ble.n	8009a18 <_dtoa_r+0x818>
 8009a08:	ee18 1a10 	vmov	r1, s16
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	4620      	mov	r0, r4
 8009a10:	f000 fcda 	bl	800a3c8 <__lshift>
 8009a14:	ee08 0a10 	vmov	s16, r0
 8009a18:	9b05      	ldr	r3, [sp, #20]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	dd05      	ble.n	8009a2a <_dtoa_r+0x82a>
 8009a1e:	4631      	mov	r1, r6
 8009a20:	461a      	mov	r2, r3
 8009a22:	4620      	mov	r0, r4
 8009a24:	f000 fcd0 	bl	800a3c8 <__lshift>
 8009a28:	4606      	mov	r6, r0
 8009a2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d06e      	beq.n	8009b0e <_dtoa_r+0x90e>
 8009a30:	ee18 0a10 	vmov	r0, s16
 8009a34:	4631      	mov	r1, r6
 8009a36:	f000 fd37 	bl	800a4a8 <__mcmp>
 8009a3a:	2800      	cmp	r0, #0
 8009a3c:	da67      	bge.n	8009b0e <_dtoa_r+0x90e>
 8009a3e:	9b00      	ldr	r3, [sp, #0]
 8009a40:	3b01      	subs	r3, #1
 8009a42:	ee18 1a10 	vmov	r1, s16
 8009a46:	9300      	str	r3, [sp, #0]
 8009a48:	220a      	movs	r2, #10
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	f000 fb0b 	bl	800a068 <__multadd>
 8009a52:	9b08      	ldr	r3, [sp, #32]
 8009a54:	ee08 0a10 	vmov	s16, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	f000 81b1 	beq.w	8009dc0 <_dtoa_r+0xbc0>
 8009a5e:	2300      	movs	r3, #0
 8009a60:	4639      	mov	r1, r7
 8009a62:	220a      	movs	r2, #10
 8009a64:	4620      	mov	r0, r4
 8009a66:	f000 faff 	bl	800a068 <__multadd>
 8009a6a:	9b02      	ldr	r3, [sp, #8]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	4607      	mov	r7, r0
 8009a70:	f300 808e 	bgt.w	8009b90 <_dtoa_r+0x990>
 8009a74:	9b06      	ldr	r3, [sp, #24]
 8009a76:	2b02      	cmp	r3, #2
 8009a78:	dc51      	bgt.n	8009b1e <_dtoa_r+0x91e>
 8009a7a:	e089      	b.n	8009b90 <_dtoa_r+0x990>
 8009a7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009a82:	e74b      	b.n	800991c <_dtoa_r+0x71c>
 8009a84:	9b03      	ldr	r3, [sp, #12]
 8009a86:	1e5e      	subs	r6, r3, #1
 8009a88:	9b07      	ldr	r3, [sp, #28]
 8009a8a:	42b3      	cmp	r3, r6
 8009a8c:	bfbf      	itttt	lt
 8009a8e:	9b07      	ldrlt	r3, [sp, #28]
 8009a90:	9607      	strlt	r6, [sp, #28]
 8009a92:	1af2      	sublt	r2, r6, r3
 8009a94:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009a96:	bfb6      	itet	lt
 8009a98:	189b      	addlt	r3, r3, r2
 8009a9a:	1b9e      	subge	r6, r3, r6
 8009a9c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009a9e:	9b03      	ldr	r3, [sp, #12]
 8009aa0:	bfb8      	it	lt
 8009aa2:	2600      	movlt	r6, #0
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	bfb7      	itett	lt
 8009aa8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009aac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009ab0:	1a9d      	sublt	r5, r3, r2
 8009ab2:	2300      	movlt	r3, #0
 8009ab4:	e734      	b.n	8009920 <_dtoa_r+0x720>
 8009ab6:	9e07      	ldr	r6, [sp, #28]
 8009ab8:	9d04      	ldr	r5, [sp, #16]
 8009aba:	9f08      	ldr	r7, [sp, #32]
 8009abc:	e73b      	b.n	8009936 <_dtoa_r+0x736>
 8009abe:	9a07      	ldr	r2, [sp, #28]
 8009ac0:	e767      	b.n	8009992 <_dtoa_r+0x792>
 8009ac2:	9b06      	ldr	r3, [sp, #24]
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	dc18      	bgt.n	8009afa <_dtoa_r+0x8fa>
 8009ac8:	f1ba 0f00 	cmp.w	sl, #0
 8009acc:	d115      	bne.n	8009afa <_dtoa_r+0x8fa>
 8009ace:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ad2:	b993      	cbnz	r3, 8009afa <_dtoa_r+0x8fa>
 8009ad4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009ad8:	0d1b      	lsrs	r3, r3, #20
 8009ada:	051b      	lsls	r3, r3, #20
 8009adc:	b183      	cbz	r3, 8009b00 <_dtoa_r+0x900>
 8009ade:	9b04      	ldr	r3, [sp, #16]
 8009ae0:	3301      	adds	r3, #1
 8009ae2:	9304      	str	r3, [sp, #16]
 8009ae4:	9b05      	ldr	r3, [sp, #20]
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	9305      	str	r3, [sp, #20]
 8009aea:	f04f 0801 	mov.w	r8, #1
 8009aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	f47f af6a 	bne.w	80099ca <_dtoa_r+0x7ca>
 8009af6:	2001      	movs	r0, #1
 8009af8:	e76f      	b.n	80099da <_dtoa_r+0x7da>
 8009afa:	f04f 0800 	mov.w	r8, #0
 8009afe:	e7f6      	b.n	8009aee <_dtoa_r+0x8ee>
 8009b00:	4698      	mov	r8, r3
 8009b02:	e7f4      	b.n	8009aee <_dtoa_r+0x8ee>
 8009b04:	f43f af7d 	beq.w	8009a02 <_dtoa_r+0x802>
 8009b08:	4618      	mov	r0, r3
 8009b0a:	301c      	adds	r0, #28
 8009b0c:	e772      	b.n	80099f4 <_dtoa_r+0x7f4>
 8009b0e:	9b03      	ldr	r3, [sp, #12]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	dc37      	bgt.n	8009b84 <_dtoa_r+0x984>
 8009b14:	9b06      	ldr	r3, [sp, #24]
 8009b16:	2b02      	cmp	r3, #2
 8009b18:	dd34      	ble.n	8009b84 <_dtoa_r+0x984>
 8009b1a:	9b03      	ldr	r3, [sp, #12]
 8009b1c:	9302      	str	r3, [sp, #8]
 8009b1e:	9b02      	ldr	r3, [sp, #8]
 8009b20:	b96b      	cbnz	r3, 8009b3e <_dtoa_r+0x93e>
 8009b22:	4631      	mov	r1, r6
 8009b24:	2205      	movs	r2, #5
 8009b26:	4620      	mov	r0, r4
 8009b28:	f000 fa9e 	bl	800a068 <__multadd>
 8009b2c:	4601      	mov	r1, r0
 8009b2e:	4606      	mov	r6, r0
 8009b30:	ee18 0a10 	vmov	r0, s16
 8009b34:	f000 fcb8 	bl	800a4a8 <__mcmp>
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	f73f adbb 	bgt.w	80096b4 <_dtoa_r+0x4b4>
 8009b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b40:	9d01      	ldr	r5, [sp, #4]
 8009b42:	43db      	mvns	r3, r3
 8009b44:	9300      	str	r3, [sp, #0]
 8009b46:	f04f 0800 	mov.w	r8, #0
 8009b4a:	4631      	mov	r1, r6
 8009b4c:	4620      	mov	r0, r4
 8009b4e:	f000 fa69 	bl	800a024 <_Bfree>
 8009b52:	2f00      	cmp	r7, #0
 8009b54:	f43f aea4 	beq.w	80098a0 <_dtoa_r+0x6a0>
 8009b58:	f1b8 0f00 	cmp.w	r8, #0
 8009b5c:	d005      	beq.n	8009b6a <_dtoa_r+0x96a>
 8009b5e:	45b8      	cmp	r8, r7
 8009b60:	d003      	beq.n	8009b6a <_dtoa_r+0x96a>
 8009b62:	4641      	mov	r1, r8
 8009b64:	4620      	mov	r0, r4
 8009b66:	f000 fa5d 	bl	800a024 <_Bfree>
 8009b6a:	4639      	mov	r1, r7
 8009b6c:	4620      	mov	r0, r4
 8009b6e:	f000 fa59 	bl	800a024 <_Bfree>
 8009b72:	e695      	b.n	80098a0 <_dtoa_r+0x6a0>
 8009b74:	2600      	movs	r6, #0
 8009b76:	4637      	mov	r7, r6
 8009b78:	e7e1      	b.n	8009b3e <_dtoa_r+0x93e>
 8009b7a:	9700      	str	r7, [sp, #0]
 8009b7c:	4637      	mov	r7, r6
 8009b7e:	e599      	b.n	80096b4 <_dtoa_r+0x4b4>
 8009b80:	40240000 	.word	0x40240000
 8009b84:	9b08      	ldr	r3, [sp, #32]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	f000 80ca 	beq.w	8009d20 <_dtoa_r+0xb20>
 8009b8c:	9b03      	ldr	r3, [sp, #12]
 8009b8e:	9302      	str	r3, [sp, #8]
 8009b90:	2d00      	cmp	r5, #0
 8009b92:	dd05      	ble.n	8009ba0 <_dtoa_r+0x9a0>
 8009b94:	4639      	mov	r1, r7
 8009b96:	462a      	mov	r2, r5
 8009b98:	4620      	mov	r0, r4
 8009b9a:	f000 fc15 	bl	800a3c8 <__lshift>
 8009b9e:	4607      	mov	r7, r0
 8009ba0:	f1b8 0f00 	cmp.w	r8, #0
 8009ba4:	d05b      	beq.n	8009c5e <_dtoa_r+0xa5e>
 8009ba6:	6879      	ldr	r1, [r7, #4]
 8009ba8:	4620      	mov	r0, r4
 8009baa:	f000 f9fb 	bl	8009fa4 <_Balloc>
 8009bae:	4605      	mov	r5, r0
 8009bb0:	b928      	cbnz	r0, 8009bbe <_dtoa_r+0x9be>
 8009bb2:	4b87      	ldr	r3, [pc, #540]	; (8009dd0 <_dtoa_r+0xbd0>)
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009bba:	f7ff bb3b 	b.w	8009234 <_dtoa_r+0x34>
 8009bbe:	693a      	ldr	r2, [r7, #16]
 8009bc0:	3202      	adds	r2, #2
 8009bc2:	0092      	lsls	r2, r2, #2
 8009bc4:	f107 010c 	add.w	r1, r7, #12
 8009bc8:	300c      	adds	r0, #12
 8009bca:	f7fe fc2b 	bl	8008424 <memcpy>
 8009bce:	2201      	movs	r2, #1
 8009bd0:	4629      	mov	r1, r5
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	f000 fbf8 	bl	800a3c8 <__lshift>
 8009bd8:	9b01      	ldr	r3, [sp, #4]
 8009bda:	f103 0901 	add.w	r9, r3, #1
 8009bde:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009be2:	4413      	add	r3, r2
 8009be4:	9305      	str	r3, [sp, #20]
 8009be6:	f00a 0301 	and.w	r3, sl, #1
 8009bea:	46b8      	mov	r8, r7
 8009bec:	9304      	str	r3, [sp, #16]
 8009bee:	4607      	mov	r7, r0
 8009bf0:	4631      	mov	r1, r6
 8009bf2:	ee18 0a10 	vmov	r0, s16
 8009bf6:	f7ff fa75 	bl	80090e4 <quorem>
 8009bfa:	4641      	mov	r1, r8
 8009bfc:	9002      	str	r0, [sp, #8]
 8009bfe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009c02:	ee18 0a10 	vmov	r0, s16
 8009c06:	f000 fc4f 	bl	800a4a8 <__mcmp>
 8009c0a:	463a      	mov	r2, r7
 8009c0c:	9003      	str	r0, [sp, #12]
 8009c0e:	4631      	mov	r1, r6
 8009c10:	4620      	mov	r0, r4
 8009c12:	f000 fc65 	bl	800a4e0 <__mdiff>
 8009c16:	68c2      	ldr	r2, [r0, #12]
 8009c18:	f109 3bff 	add.w	fp, r9, #4294967295
 8009c1c:	4605      	mov	r5, r0
 8009c1e:	bb02      	cbnz	r2, 8009c62 <_dtoa_r+0xa62>
 8009c20:	4601      	mov	r1, r0
 8009c22:	ee18 0a10 	vmov	r0, s16
 8009c26:	f000 fc3f 	bl	800a4a8 <__mcmp>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	4629      	mov	r1, r5
 8009c2e:	4620      	mov	r0, r4
 8009c30:	9207      	str	r2, [sp, #28]
 8009c32:	f000 f9f7 	bl	800a024 <_Bfree>
 8009c36:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009c3a:	ea43 0102 	orr.w	r1, r3, r2
 8009c3e:	9b04      	ldr	r3, [sp, #16]
 8009c40:	430b      	orrs	r3, r1
 8009c42:	464d      	mov	r5, r9
 8009c44:	d10f      	bne.n	8009c66 <_dtoa_r+0xa66>
 8009c46:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009c4a:	d02a      	beq.n	8009ca2 <_dtoa_r+0xaa2>
 8009c4c:	9b03      	ldr	r3, [sp, #12]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	dd02      	ble.n	8009c58 <_dtoa_r+0xa58>
 8009c52:	9b02      	ldr	r3, [sp, #8]
 8009c54:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009c58:	f88b a000 	strb.w	sl, [fp]
 8009c5c:	e775      	b.n	8009b4a <_dtoa_r+0x94a>
 8009c5e:	4638      	mov	r0, r7
 8009c60:	e7ba      	b.n	8009bd8 <_dtoa_r+0x9d8>
 8009c62:	2201      	movs	r2, #1
 8009c64:	e7e2      	b.n	8009c2c <_dtoa_r+0xa2c>
 8009c66:	9b03      	ldr	r3, [sp, #12]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	db04      	blt.n	8009c76 <_dtoa_r+0xa76>
 8009c6c:	9906      	ldr	r1, [sp, #24]
 8009c6e:	430b      	orrs	r3, r1
 8009c70:	9904      	ldr	r1, [sp, #16]
 8009c72:	430b      	orrs	r3, r1
 8009c74:	d122      	bne.n	8009cbc <_dtoa_r+0xabc>
 8009c76:	2a00      	cmp	r2, #0
 8009c78:	ddee      	ble.n	8009c58 <_dtoa_r+0xa58>
 8009c7a:	ee18 1a10 	vmov	r1, s16
 8009c7e:	2201      	movs	r2, #1
 8009c80:	4620      	mov	r0, r4
 8009c82:	f000 fba1 	bl	800a3c8 <__lshift>
 8009c86:	4631      	mov	r1, r6
 8009c88:	ee08 0a10 	vmov	s16, r0
 8009c8c:	f000 fc0c 	bl	800a4a8 <__mcmp>
 8009c90:	2800      	cmp	r0, #0
 8009c92:	dc03      	bgt.n	8009c9c <_dtoa_r+0xa9c>
 8009c94:	d1e0      	bne.n	8009c58 <_dtoa_r+0xa58>
 8009c96:	f01a 0f01 	tst.w	sl, #1
 8009c9a:	d0dd      	beq.n	8009c58 <_dtoa_r+0xa58>
 8009c9c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009ca0:	d1d7      	bne.n	8009c52 <_dtoa_r+0xa52>
 8009ca2:	2339      	movs	r3, #57	; 0x39
 8009ca4:	f88b 3000 	strb.w	r3, [fp]
 8009ca8:	462b      	mov	r3, r5
 8009caa:	461d      	mov	r5, r3
 8009cac:	3b01      	subs	r3, #1
 8009cae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009cb2:	2a39      	cmp	r2, #57	; 0x39
 8009cb4:	d071      	beq.n	8009d9a <_dtoa_r+0xb9a>
 8009cb6:	3201      	adds	r2, #1
 8009cb8:	701a      	strb	r2, [r3, #0]
 8009cba:	e746      	b.n	8009b4a <_dtoa_r+0x94a>
 8009cbc:	2a00      	cmp	r2, #0
 8009cbe:	dd07      	ble.n	8009cd0 <_dtoa_r+0xad0>
 8009cc0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009cc4:	d0ed      	beq.n	8009ca2 <_dtoa_r+0xaa2>
 8009cc6:	f10a 0301 	add.w	r3, sl, #1
 8009cca:	f88b 3000 	strb.w	r3, [fp]
 8009cce:	e73c      	b.n	8009b4a <_dtoa_r+0x94a>
 8009cd0:	9b05      	ldr	r3, [sp, #20]
 8009cd2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009cd6:	4599      	cmp	r9, r3
 8009cd8:	d047      	beq.n	8009d6a <_dtoa_r+0xb6a>
 8009cda:	ee18 1a10 	vmov	r1, s16
 8009cde:	2300      	movs	r3, #0
 8009ce0:	220a      	movs	r2, #10
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	f000 f9c0 	bl	800a068 <__multadd>
 8009ce8:	45b8      	cmp	r8, r7
 8009cea:	ee08 0a10 	vmov	s16, r0
 8009cee:	f04f 0300 	mov.w	r3, #0
 8009cf2:	f04f 020a 	mov.w	r2, #10
 8009cf6:	4641      	mov	r1, r8
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	d106      	bne.n	8009d0a <_dtoa_r+0xb0a>
 8009cfc:	f000 f9b4 	bl	800a068 <__multadd>
 8009d00:	4680      	mov	r8, r0
 8009d02:	4607      	mov	r7, r0
 8009d04:	f109 0901 	add.w	r9, r9, #1
 8009d08:	e772      	b.n	8009bf0 <_dtoa_r+0x9f0>
 8009d0a:	f000 f9ad 	bl	800a068 <__multadd>
 8009d0e:	4639      	mov	r1, r7
 8009d10:	4680      	mov	r8, r0
 8009d12:	2300      	movs	r3, #0
 8009d14:	220a      	movs	r2, #10
 8009d16:	4620      	mov	r0, r4
 8009d18:	f000 f9a6 	bl	800a068 <__multadd>
 8009d1c:	4607      	mov	r7, r0
 8009d1e:	e7f1      	b.n	8009d04 <_dtoa_r+0xb04>
 8009d20:	9b03      	ldr	r3, [sp, #12]
 8009d22:	9302      	str	r3, [sp, #8]
 8009d24:	9d01      	ldr	r5, [sp, #4]
 8009d26:	ee18 0a10 	vmov	r0, s16
 8009d2a:	4631      	mov	r1, r6
 8009d2c:	f7ff f9da 	bl	80090e4 <quorem>
 8009d30:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009d34:	9b01      	ldr	r3, [sp, #4]
 8009d36:	f805 ab01 	strb.w	sl, [r5], #1
 8009d3a:	1aea      	subs	r2, r5, r3
 8009d3c:	9b02      	ldr	r3, [sp, #8]
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	dd09      	ble.n	8009d56 <_dtoa_r+0xb56>
 8009d42:	ee18 1a10 	vmov	r1, s16
 8009d46:	2300      	movs	r3, #0
 8009d48:	220a      	movs	r2, #10
 8009d4a:	4620      	mov	r0, r4
 8009d4c:	f000 f98c 	bl	800a068 <__multadd>
 8009d50:	ee08 0a10 	vmov	s16, r0
 8009d54:	e7e7      	b.n	8009d26 <_dtoa_r+0xb26>
 8009d56:	9b02      	ldr	r3, [sp, #8]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	bfc8      	it	gt
 8009d5c:	461d      	movgt	r5, r3
 8009d5e:	9b01      	ldr	r3, [sp, #4]
 8009d60:	bfd8      	it	le
 8009d62:	2501      	movle	r5, #1
 8009d64:	441d      	add	r5, r3
 8009d66:	f04f 0800 	mov.w	r8, #0
 8009d6a:	ee18 1a10 	vmov	r1, s16
 8009d6e:	2201      	movs	r2, #1
 8009d70:	4620      	mov	r0, r4
 8009d72:	f000 fb29 	bl	800a3c8 <__lshift>
 8009d76:	4631      	mov	r1, r6
 8009d78:	ee08 0a10 	vmov	s16, r0
 8009d7c:	f000 fb94 	bl	800a4a8 <__mcmp>
 8009d80:	2800      	cmp	r0, #0
 8009d82:	dc91      	bgt.n	8009ca8 <_dtoa_r+0xaa8>
 8009d84:	d102      	bne.n	8009d8c <_dtoa_r+0xb8c>
 8009d86:	f01a 0f01 	tst.w	sl, #1
 8009d8a:	d18d      	bne.n	8009ca8 <_dtoa_r+0xaa8>
 8009d8c:	462b      	mov	r3, r5
 8009d8e:	461d      	mov	r5, r3
 8009d90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d94:	2a30      	cmp	r2, #48	; 0x30
 8009d96:	d0fa      	beq.n	8009d8e <_dtoa_r+0xb8e>
 8009d98:	e6d7      	b.n	8009b4a <_dtoa_r+0x94a>
 8009d9a:	9a01      	ldr	r2, [sp, #4]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d184      	bne.n	8009caa <_dtoa_r+0xaaa>
 8009da0:	9b00      	ldr	r3, [sp, #0]
 8009da2:	3301      	adds	r3, #1
 8009da4:	9300      	str	r3, [sp, #0]
 8009da6:	2331      	movs	r3, #49	; 0x31
 8009da8:	7013      	strb	r3, [r2, #0]
 8009daa:	e6ce      	b.n	8009b4a <_dtoa_r+0x94a>
 8009dac:	4b09      	ldr	r3, [pc, #36]	; (8009dd4 <_dtoa_r+0xbd4>)
 8009dae:	f7ff ba95 	b.w	80092dc <_dtoa_r+0xdc>
 8009db2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	f47f aa6e 	bne.w	8009296 <_dtoa_r+0x96>
 8009dba:	4b07      	ldr	r3, [pc, #28]	; (8009dd8 <_dtoa_r+0xbd8>)
 8009dbc:	f7ff ba8e 	b.w	80092dc <_dtoa_r+0xdc>
 8009dc0:	9b02      	ldr	r3, [sp, #8]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	dcae      	bgt.n	8009d24 <_dtoa_r+0xb24>
 8009dc6:	9b06      	ldr	r3, [sp, #24]
 8009dc8:	2b02      	cmp	r3, #2
 8009dca:	f73f aea8 	bgt.w	8009b1e <_dtoa_r+0x91e>
 8009dce:	e7a9      	b.n	8009d24 <_dtoa_r+0xb24>
 8009dd0:	0800b467 	.word	0x0800b467
 8009dd4:	0800b3c4 	.word	0x0800b3c4
 8009dd8:	0800b3e8 	.word	0x0800b3e8

08009ddc <__sflush_r>:
 8009ddc:	898a      	ldrh	r2, [r1, #12]
 8009dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009de2:	4605      	mov	r5, r0
 8009de4:	0710      	lsls	r0, r2, #28
 8009de6:	460c      	mov	r4, r1
 8009de8:	d458      	bmi.n	8009e9c <__sflush_r+0xc0>
 8009dea:	684b      	ldr	r3, [r1, #4]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	dc05      	bgt.n	8009dfc <__sflush_r+0x20>
 8009df0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	dc02      	bgt.n	8009dfc <__sflush_r+0x20>
 8009df6:	2000      	movs	r0, #0
 8009df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009dfe:	2e00      	cmp	r6, #0
 8009e00:	d0f9      	beq.n	8009df6 <__sflush_r+0x1a>
 8009e02:	2300      	movs	r3, #0
 8009e04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e08:	682f      	ldr	r7, [r5, #0]
 8009e0a:	602b      	str	r3, [r5, #0]
 8009e0c:	d032      	beq.n	8009e74 <__sflush_r+0x98>
 8009e0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e10:	89a3      	ldrh	r3, [r4, #12]
 8009e12:	075a      	lsls	r2, r3, #29
 8009e14:	d505      	bpl.n	8009e22 <__sflush_r+0x46>
 8009e16:	6863      	ldr	r3, [r4, #4]
 8009e18:	1ac0      	subs	r0, r0, r3
 8009e1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e1c:	b10b      	cbz	r3, 8009e22 <__sflush_r+0x46>
 8009e1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e20:	1ac0      	subs	r0, r0, r3
 8009e22:	2300      	movs	r3, #0
 8009e24:	4602      	mov	r2, r0
 8009e26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e28:	6a21      	ldr	r1, [r4, #32]
 8009e2a:	4628      	mov	r0, r5
 8009e2c:	47b0      	blx	r6
 8009e2e:	1c43      	adds	r3, r0, #1
 8009e30:	89a3      	ldrh	r3, [r4, #12]
 8009e32:	d106      	bne.n	8009e42 <__sflush_r+0x66>
 8009e34:	6829      	ldr	r1, [r5, #0]
 8009e36:	291d      	cmp	r1, #29
 8009e38:	d82c      	bhi.n	8009e94 <__sflush_r+0xb8>
 8009e3a:	4a2a      	ldr	r2, [pc, #168]	; (8009ee4 <__sflush_r+0x108>)
 8009e3c:	40ca      	lsrs	r2, r1
 8009e3e:	07d6      	lsls	r6, r2, #31
 8009e40:	d528      	bpl.n	8009e94 <__sflush_r+0xb8>
 8009e42:	2200      	movs	r2, #0
 8009e44:	6062      	str	r2, [r4, #4]
 8009e46:	04d9      	lsls	r1, r3, #19
 8009e48:	6922      	ldr	r2, [r4, #16]
 8009e4a:	6022      	str	r2, [r4, #0]
 8009e4c:	d504      	bpl.n	8009e58 <__sflush_r+0x7c>
 8009e4e:	1c42      	adds	r2, r0, #1
 8009e50:	d101      	bne.n	8009e56 <__sflush_r+0x7a>
 8009e52:	682b      	ldr	r3, [r5, #0]
 8009e54:	b903      	cbnz	r3, 8009e58 <__sflush_r+0x7c>
 8009e56:	6560      	str	r0, [r4, #84]	; 0x54
 8009e58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e5a:	602f      	str	r7, [r5, #0]
 8009e5c:	2900      	cmp	r1, #0
 8009e5e:	d0ca      	beq.n	8009df6 <__sflush_r+0x1a>
 8009e60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e64:	4299      	cmp	r1, r3
 8009e66:	d002      	beq.n	8009e6e <__sflush_r+0x92>
 8009e68:	4628      	mov	r0, r5
 8009e6a:	f7fe faf1 	bl	8008450 <_free_r>
 8009e6e:	2000      	movs	r0, #0
 8009e70:	6360      	str	r0, [r4, #52]	; 0x34
 8009e72:	e7c1      	b.n	8009df8 <__sflush_r+0x1c>
 8009e74:	6a21      	ldr	r1, [r4, #32]
 8009e76:	2301      	movs	r3, #1
 8009e78:	4628      	mov	r0, r5
 8009e7a:	47b0      	blx	r6
 8009e7c:	1c41      	adds	r1, r0, #1
 8009e7e:	d1c7      	bne.n	8009e10 <__sflush_r+0x34>
 8009e80:	682b      	ldr	r3, [r5, #0]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d0c4      	beq.n	8009e10 <__sflush_r+0x34>
 8009e86:	2b1d      	cmp	r3, #29
 8009e88:	d001      	beq.n	8009e8e <__sflush_r+0xb2>
 8009e8a:	2b16      	cmp	r3, #22
 8009e8c:	d101      	bne.n	8009e92 <__sflush_r+0xb6>
 8009e8e:	602f      	str	r7, [r5, #0]
 8009e90:	e7b1      	b.n	8009df6 <__sflush_r+0x1a>
 8009e92:	89a3      	ldrh	r3, [r4, #12]
 8009e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e98:	81a3      	strh	r3, [r4, #12]
 8009e9a:	e7ad      	b.n	8009df8 <__sflush_r+0x1c>
 8009e9c:	690f      	ldr	r7, [r1, #16]
 8009e9e:	2f00      	cmp	r7, #0
 8009ea0:	d0a9      	beq.n	8009df6 <__sflush_r+0x1a>
 8009ea2:	0793      	lsls	r3, r2, #30
 8009ea4:	680e      	ldr	r6, [r1, #0]
 8009ea6:	bf08      	it	eq
 8009ea8:	694b      	ldreq	r3, [r1, #20]
 8009eaa:	600f      	str	r7, [r1, #0]
 8009eac:	bf18      	it	ne
 8009eae:	2300      	movne	r3, #0
 8009eb0:	eba6 0807 	sub.w	r8, r6, r7
 8009eb4:	608b      	str	r3, [r1, #8]
 8009eb6:	f1b8 0f00 	cmp.w	r8, #0
 8009eba:	dd9c      	ble.n	8009df6 <__sflush_r+0x1a>
 8009ebc:	6a21      	ldr	r1, [r4, #32]
 8009ebe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009ec0:	4643      	mov	r3, r8
 8009ec2:	463a      	mov	r2, r7
 8009ec4:	4628      	mov	r0, r5
 8009ec6:	47b0      	blx	r6
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	dc06      	bgt.n	8009eda <__sflush_r+0xfe>
 8009ecc:	89a3      	ldrh	r3, [r4, #12]
 8009ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ed2:	81a3      	strh	r3, [r4, #12]
 8009ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ed8:	e78e      	b.n	8009df8 <__sflush_r+0x1c>
 8009eda:	4407      	add	r7, r0
 8009edc:	eba8 0800 	sub.w	r8, r8, r0
 8009ee0:	e7e9      	b.n	8009eb6 <__sflush_r+0xda>
 8009ee2:	bf00      	nop
 8009ee4:	20400001 	.word	0x20400001

08009ee8 <_fflush_r>:
 8009ee8:	b538      	push	{r3, r4, r5, lr}
 8009eea:	690b      	ldr	r3, [r1, #16]
 8009eec:	4605      	mov	r5, r0
 8009eee:	460c      	mov	r4, r1
 8009ef0:	b913      	cbnz	r3, 8009ef8 <_fflush_r+0x10>
 8009ef2:	2500      	movs	r5, #0
 8009ef4:	4628      	mov	r0, r5
 8009ef6:	bd38      	pop	{r3, r4, r5, pc}
 8009ef8:	b118      	cbz	r0, 8009f02 <_fflush_r+0x1a>
 8009efa:	6983      	ldr	r3, [r0, #24]
 8009efc:	b90b      	cbnz	r3, 8009f02 <_fflush_r+0x1a>
 8009efe:	f7fe f9ab 	bl	8008258 <__sinit>
 8009f02:	4b14      	ldr	r3, [pc, #80]	; (8009f54 <_fflush_r+0x6c>)
 8009f04:	429c      	cmp	r4, r3
 8009f06:	d11b      	bne.n	8009f40 <_fflush_r+0x58>
 8009f08:	686c      	ldr	r4, [r5, #4]
 8009f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d0ef      	beq.n	8009ef2 <_fflush_r+0xa>
 8009f12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f14:	07d0      	lsls	r0, r2, #31
 8009f16:	d404      	bmi.n	8009f22 <_fflush_r+0x3a>
 8009f18:	0599      	lsls	r1, r3, #22
 8009f1a:	d402      	bmi.n	8009f22 <_fflush_r+0x3a>
 8009f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f1e:	f7fe fa5e 	bl	80083de <__retarget_lock_acquire_recursive>
 8009f22:	4628      	mov	r0, r5
 8009f24:	4621      	mov	r1, r4
 8009f26:	f7ff ff59 	bl	8009ddc <__sflush_r>
 8009f2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f2c:	07da      	lsls	r2, r3, #31
 8009f2e:	4605      	mov	r5, r0
 8009f30:	d4e0      	bmi.n	8009ef4 <_fflush_r+0xc>
 8009f32:	89a3      	ldrh	r3, [r4, #12]
 8009f34:	059b      	lsls	r3, r3, #22
 8009f36:	d4dd      	bmi.n	8009ef4 <_fflush_r+0xc>
 8009f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f3a:	f7fe fa51 	bl	80083e0 <__retarget_lock_release_recursive>
 8009f3e:	e7d9      	b.n	8009ef4 <_fflush_r+0xc>
 8009f40:	4b05      	ldr	r3, [pc, #20]	; (8009f58 <_fflush_r+0x70>)
 8009f42:	429c      	cmp	r4, r3
 8009f44:	d101      	bne.n	8009f4a <_fflush_r+0x62>
 8009f46:	68ac      	ldr	r4, [r5, #8]
 8009f48:	e7df      	b.n	8009f0a <_fflush_r+0x22>
 8009f4a:	4b04      	ldr	r3, [pc, #16]	; (8009f5c <_fflush_r+0x74>)
 8009f4c:	429c      	cmp	r4, r3
 8009f4e:	bf08      	it	eq
 8009f50:	68ec      	ldreq	r4, [r5, #12]
 8009f52:	e7da      	b.n	8009f0a <_fflush_r+0x22>
 8009f54:	0800b370 	.word	0x0800b370
 8009f58:	0800b390 	.word	0x0800b390
 8009f5c:	0800b350 	.word	0x0800b350

08009f60 <_localeconv_r>:
 8009f60:	4800      	ldr	r0, [pc, #0]	; (8009f64 <_localeconv_r+0x4>)
 8009f62:	4770      	bx	lr
 8009f64:	20000164 	.word	0x20000164

08009f68 <_lseek_r>:
 8009f68:	b538      	push	{r3, r4, r5, lr}
 8009f6a:	4d07      	ldr	r5, [pc, #28]	; (8009f88 <_lseek_r+0x20>)
 8009f6c:	4604      	mov	r4, r0
 8009f6e:	4608      	mov	r0, r1
 8009f70:	4611      	mov	r1, r2
 8009f72:	2200      	movs	r2, #0
 8009f74:	602a      	str	r2, [r5, #0]
 8009f76:	461a      	mov	r2, r3
 8009f78:	f7f7 fa3c 	bl	80013f4 <_lseek>
 8009f7c:	1c43      	adds	r3, r0, #1
 8009f7e:	d102      	bne.n	8009f86 <_lseek_r+0x1e>
 8009f80:	682b      	ldr	r3, [r5, #0]
 8009f82:	b103      	cbz	r3, 8009f86 <_lseek_r+0x1e>
 8009f84:	6023      	str	r3, [r4, #0]
 8009f86:	bd38      	pop	{r3, r4, r5, pc}
 8009f88:	2000b614 	.word	0x2000b614

08009f8c <__malloc_lock>:
 8009f8c:	4801      	ldr	r0, [pc, #4]	; (8009f94 <__malloc_lock+0x8>)
 8009f8e:	f7fe ba26 	b.w	80083de <__retarget_lock_acquire_recursive>
 8009f92:	bf00      	nop
 8009f94:	2000b608 	.word	0x2000b608

08009f98 <__malloc_unlock>:
 8009f98:	4801      	ldr	r0, [pc, #4]	; (8009fa0 <__malloc_unlock+0x8>)
 8009f9a:	f7fe ba21 	b.w	80083e0 <__retarget_lock_release_recursive>
 8009f9e:	bf00      	nop
 8009fa0:	2000b608 	.word	0x2000b608

08009fa4 <_Balloc>:
 8009fa4:	b570      	push	{r4, r5, r6, lr}
 8009fa6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009fa8:	4604      	mov	r4, r0
 8009faa:	460d      	mov	r5, r1
 8009fac:	b976      	cbnz	r6, 8009fcc <_Balloc+0x28>
 8009fae:	2010      	movs	r0, #16
 8009fb0:	f7fe fa18 	bl	80083e4 <malloc>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	6260      	str	r0, [r4, #36]	; 0x24
 8009fb8:	b920      	cbnz	r0, 8009fc4 <_Balloc+0x20>
 8009fba:	4b18      	ldr	r3, [pc, #96]	; (800a01c <_Balloc+0x78>)
 8009fbc:	4818      	ldr	r0, [pc, #96]	; (800a020 <_Balloc+0x7c>)
 8009fbe:	2166      	movs	r1, #102	; 0x66
 8009fc0:	f000 fcf8 	bl	800a9b4 <__assert_func>
 8009fc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009fc8:	6006      	str	r6, [r0, #0]
 8009fca:	60c6      	str	r6, [r0, #12]
 8009fcc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009fce:	68f3      	ldr	r3, [r6, #12]
 8009fd0:	b183      	cbz	r3, 8009ff4 <_Balloc+0x50>
 8009fd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fd4:	68db      	ldr	r3, [r3, #12]
 8009fd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009fda:	b9b8      	cbnz	r0, 800a00c <_Balloc+0x68>
 8009fdc:	2101      	movs	r1, #1
 8009fde:	fa01 f605 	lsl.w	r6, r1, r5
 8009fe2:	1d72      	adds	r2, r6, #5
 8009fe4:	0092      	lsls	r2, r2, #2
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	f000 fb60 	bl	800a6ac <_calloc_r>
 8009fec:	b160      	cbz	r0, 800a008 <_Balloc+0x64>
 8009fee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ff2:	e00e      	b.n	800a012 <_Balloc+0x6e>
 8009ff4:	2221      	movs	r2, #33	; 0x21
 8009ff6:	2104      	movs	r1, #4
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	f000 fb57 	bl	800a6ac <_calloc_r>
 8009ffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a000:	60f0      	str	r0, [r6, #12]
 800a002:	68db      	ldr	r3, [r3, #12]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d1e4      	bne.n	8009fd2 <_Balloc+0x2e>
 800a008:	2000      	movs	r0, #0
 800a00a:	bd70      	pop	{r4, r5, r6, pc}
 800a00c:	6802      	ldr	r2, [r0, #0]
 800a00e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a012:	2300      	movs	r3, #0
 800a014:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a018:	e7f7      	b.n	800a00a <_Balloc+0x66>
 800a01a:	bf00      	nop
 800a01c:	0800b3f5 	.word	0x0800b3f5
 800a020:	0800b478 	.word	0x0800b478

0800a024 <_Bfree>:
 800a024:	b570      	push	{r4, r5, r6, lr}
 800a026:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a028:	4605      	mov	r5, r0
 800a02a:	460c      	mov	r4, r1
 800a02c:	b976      	cbnz	r6, 800a04c <_Bfree+0x28>
 800a02e:	2010      	movs	r0, #16
 800a030:	f7fe f9d8 	bl	80083e4 <malloc>
 800a034:	4602      	mov	r2, r0
 800a036:	6268      	str	r0, [r5, #36]	; 0x24
 800a038:	b920      	cbnz	r0, 800a044 <_Bfree+0x20>
 800a03a:	4b09      	ldr	r3, [pc, #36]	; (800a060 <_Bfree+0x3c>)
 800a03c:	4809      	ldr	r0, [pc, #36]	; (800a064 <_Bfree+0x40>)
 800a03e:	218a      	movs	r1, #138	; 0x8a
 800a040:	f000 fcb8 	bl	800a9b4 <__assert_func>
 800a044:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a048:	6006      	str	r6, [r0, #0]
 800a04a:	60c6      	str	r6, [r0, #12]
 800a04c:	b13c      	cbz	r4, 800a05e <_Bfree+0x3a>
 800a04e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a050:	6862      	ldr	r2, [r4, #4]
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a058:	6021      	str	r1, [r4, #0]
 800a05a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a05e:	bd70      	pop	{r4, r5, r6, pc}
 800a060:	0800b3f5 	.word	0x0800b3f5
 800a064:	0800b478 	.word	0x0800b478

0800a068 <__multadd>:
 800a068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a06c:	690d      	ldr	r5, [r1, #16]
 800a06e:	4607      	mov	r7, r0
 800a070:	460c      	mov	r4, r1
 800a072:	461e      	mov	r6, r3
 800a074:	f101 0c14 	add.w	ip, r1, #20
 800a078:	2000      	movs	r0, #0
 800a07a:	f8dc 3000 	ldr.w	r3, [ip]
 800a07e:	b299      	uxth	r1, r3
 800a080:	fb02 6101 	mla	r1, r2, r1, r6
 800a084:	0c1e      	lsrs	r6, r3, #16
 800a086:	0c0b      	lsrs	r3, r1, #16
 800a088:	fb02 3306 	mla	r3, r2, r6, r3
 800a08c:	b289      	uxth	r1, r1
 800a08e:	3001      	adds	r0, #1
 800a090:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a094:	4285      	cmp	r5, r0
 800a096:	f84c 1b04 	str.w	r1, [ip], #4
 800a09a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a09e:	dcec      	bgt.n	800a07a <__multadd+0x12>
 800a0a0:	b30e      	cbz	r6, 800a0e6 <__multadd+0x7e>
 800a0a2:	68a3      	ldr	r3, [r4, #8]
 800a0a4:	42ab      	cmp	r3, r5
 800a0a6:	dc19      	bgt.n	800a0dc <__multadd+0x74>
 800a0a8:	6861      	ldr	r1, [r4, #4]
 800a0aa:	4638      	mov	r0, r7
 800a0ac:	3101      	adds	r1, #1
 800a0ae:	f7ff ff79 	bl	8009fa4 <_Balloc>
 800a0b2:	4680      	mov	r8, r0
 800a0b4:	b928      	cbnz	r0, 800a0c2 <__multadd+0x5a>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	4b0c      	ldr	r3, [pc, #48]	; (800a0ec <__multadd+0x84>)
 800a0ba:	480d      	ldr	r0, [pc, #52]	; (800a0f0 <__multadd+0x88>)
 800a0bc:	21b5      	movs	r1, #181	; 0xb5
 800a0be:	f000 fc79 	bl	800a9b4 <__assert_func>
 800a0c2:	6922      	ldr	r2, [r4, #16]
 800a0c4:	3202      	adds	r2, #2
 800a0c6:	f104 010c 	add.w	r1, r4, #12
 800a0ca:	0092      	lsls	r2, r2, #2
 800a0cc:	300c      	adds	r0, #12
 800a0ce:	f7fe f9a9 	bl	8008424 <memcpy>
 800a0d2:	4621      	mov	r1, r4
 800a0d4:	4638      	mov	r0, r7
 800a0d6:	f7ff ffa5 	bl	800a024 <_Bfree>
 800a0da:	4644      	mov	r4, r8
 800a0dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a0e0:	3501      	adds	r5, #1
 800a0e2:	615e      	str	r6, [r3, #20]
 800a0e4:	6125      	str	r5, [r4, #16]
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0ec:	0800b467 	.word	0x0800b467
 800a0f0:	0800b478 	.word	0x0800b478

0800a0f4 <__hi0bits>:
 800a0f4:	0c03      	lsrs	r3, r0, #16
 800a0f6:	041b      	lsls	r3, r3, #16
 800a0f8:	b9d3      	cbnz	r3, 800a130 <__hi0bits+0x3c>
 800a0fa:	0400      	lsls	r0, r0, #16
 800a0fc:	2310      	movs	r3, #16
 800a0fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a102:	bf04      	itt	eq
 800a104:	0200      	lsleq	r0, r0, #8
 800a106:	3308      	addeq	r3, #8
 800a108:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a10c:	bf04      	itt	eq
 800a10e:	0100      	lsleq	r0, r0, #4
 800a110:	3304      	addeq	r3, #4
 800a112:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a116:	bf04      	itt	eq
 800a118:	0080      	lsleq	r0, r0, #2
 800a11a:	3302      	addeq	r3, #2
 800a11c:	2800      	cmp	r0, #0
 800a11e:	db05      	blt.n	800a12c <__hi0bits+0x38>
 800a120:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a124:	f103 0301 	add.w	r3, r3, #1
 800a128:	bf08      	it	eq
 800a12a:	2320      	moveq	r3, #32
 800a12c:	4618      	mov	r0, r3
 800a12e:	4770      	bx	lr
 800a130:	2300      	movs	r3, #0
 800a132:	e7e4      	b.n	800a0fe <__hi0bits+0xa>

0800a134 <__lo0bits>:
 800a134:	6803      	ldr	r3, [r0, #0]
 800a136:	f013 0207 	ands.w	r2, r3, #7
 800a13a:	4601      	mov	r1, r0
 800a13c:	d00b      	beq.n	800a156 <__lo0bits+0x22>
 800a13e:	07da      	lsls	r2, r3, #31
 800a140:	d423      	bmi.n	800a18a <__lo0bits+0x56>
 800a142:	0798      	lsls	r0, r3, #30
 800a144:	bf49      	itett	mi
 800a146:	085b      	lsrmi	r3, r3, #1
 800a148:	089b      	lsrpl	r3, r3, #2
 800a14a:	2001      	movmi	r0, #1
 800a14c:	600b      	strmi	r3, [r1, #0]
 800a14e:	bf5c      	itt	pl
 800a150:	600b      	strpl	r3, [r1, #0]
 800a152:	2002      	movpl	r0, #2
 800a154:	4770      	bx	lr
 800a156:	b298      	uxth	r0, r3
 800a158:	b9a8      	cbnz	r0, 800a186 <__lo0bits+0x52>
 800a15a:	0c1b      	lsrs	r3, r3, #16
 800a15c:	2010      	movs	r0, #16
 800a15e:	b2da      	uxtb	r2, r3
 800a160:	b90a      	cbnz	r2, 800a166 <__lo0bits+0x32>
 800a162:	3008      	adds	r0, #8
 800a164:	0a1b      	lsrs	r3, r3, #8
 800a166:	071a      	lsls	r2, r3, #28
 800a168:	bf04      	itt	eq
 800a16a:	091b      	lsreq	r3, r3, #4
 800a16c:	3004      	addeq	r0, #4
 800a16e:	079a      	lsls	r2, r3, #30
 800a170:	bf04      	itt	eq
 800a172:	089b      	lsreq	r3, r3, #2
 800a174:	3002      	addeq	r0, #2
 800a176:	07da      	lsls	r2, r3, #31
 800a178:	d403      	bmi.n	800a182 <__lo0bits+0x4e>
 800a17a:	085b      	lsrs	r3, r3, #1
 800a17c:	f100 0001 	add.w	r0, r0, #1
 800a180:	d005      	beq.n	800a18e <__lo0bits+0x5a>
 800a182:	600b      	str	r3, [r1, #0]
 800a184:	4770      	bx	lr
 800a186:	4610      	mov	r0, r2
 800a188:	e7e9      	b.n	800a15e <__lo0bits+0x2a>
 800a18a:	2000      	movs	r0, #0
 800a18c:	4770      	bx	lr
 800a18e:	2020      	movs	r0, #32
 800a190:	4770      	bx	lr
	...

0800a194 <__i2b>:
 800a194:	b510      	push	{r4, lr}
 800a196:	460c      	mov	r4, r1
 800a198:	2101      	movs	r1, #1
 800a19a:	f7ff ff03 	bl	8009fa4 <_Balloc>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	b928      	cbnz	r0, 800a1ae <__i2b+0x1a>
 800a1a2:	4b05      	ldr	r3, [pc, #20]	; (800a1b8 <__i2b+0x24>)
 800a1a4:	4805      	ldr	r0, [pc, #20]	; (800a1bc <__i2b+0x28>)
 800a1a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a1aa:	f000 fc03 	bl	800a9b4 <__assert_func>
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	6144      	str	r4, [r0, #20]
 800a1b2:	6103      	str	r3, [r0, #16]
 800a1b4:	bd10      	pop	{r4, pc}
 800a1b6:	bf00      	nop
 800a1b8:	0800b467 	.word	0x0800b467
 800a1bc:	0800b478 	.word	0x0800b478

0800a1c0 <__multiply>:
 800a1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1c4:	4691      	mov	r9, r2
 800a1c6:	690a      	ldr	r2, [r1, #16]
 800a1c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	bfb8      	it	lt
 800a1d0:	460b      	movlt	r3, r1
 800a1d2:	460c      	mov	r4, r1
 800a1d4:	bfbc      	itt	lt
 800a1d6:	464c      	movlt	r4, r9
 800a1d8:	4699      	movlt	r9, r3
 800a1da:	6927      	ldr	r7, [r4, #16]
 800a1dc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a1e0:	68a3      	ldr	r3, [r4, #8]
 800a1e2:	6861      	ldr	r1, [r4, #4]
 800a1e4:	eb07 060a 	add.w	r6, r7, sl
 800a1e8:	42b3      	cmp	r3, r6
 800a1ea:	b085      	sub	sp, #20
 800a1ec:	bfb8      	it	lt
 800a1ee:	3101      	addlt	r1, #1
 800a1f0:	f7ff fed8 	bl	8009fa4 <_Balloc>
 800a1f4:	b930      	cbnz	r0, 800a204 <__multiply+0x44>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	4b44      	ldr	r3, [pc, #272]	; (800a30c <__multiply+0x14c>)
 800a1fa:	4845      	ldr	r0, [pc, #276]	; (800a310 <__multiply+0x150>)
 800a1fc:	f240 115d 	movw	r1, #349	; 0x15d
 800a200:	f000 fbd8 	bl	800a9b4 <__assert_func>
 800a204:	f100 0514 	add.w	r5, r0, #20
 800a208:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a20c:	462b      	mov	r3, r5
 800a20e:	2200      	movs	r2, #0
 800a210:	4543      	cmp	r3, r8
 800a212:	d321      	bcc.n	800a258 <__multiply+0x98>
 800a214:	f104 0314 	add.w	r3, r4, #20
 800a218:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a21c:	f109 0314 	add.w	r3, r9, #20
 800a220:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a224:	9202      	str	r2, [sp, #8]
 800a226:	1b3a      	subs	r2, r7, r4
 800a228:	3a15      	subs	r2, #21
 800a22a:	f022 0203 	bic.w	r2, r2, #3
 800a22e:	3204      	adds	r2, #4
 800a230:	f104 0115 	add.w	r1, r4, #21
 800a234:	428f      	cmp	r7, r1
 800a236:	bf38      	it	cc
 800a238:	2204      	movcc	r2, #4
 800a23a:	9201      	str	r2, [sp, #4]
 800a23c:	9a02      	ldr	r2, [sp, #8]
 800a23e:	9303      	str	r3, [sp, #12]
 800a240:	429a      	cmp	r2, r3
 800a242:	d80c      	bhi.n	800a25e <__multiply+0x9e>
 800a244:	2e00      	cmp	r6, #0
 800a246:	dd03      	ble.n	800a250 <__multiply+0x90>
 800a248:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d05a      	beq.n	800a306 <__multiply+0x146>
 800a250:	6106      	str	r6, [r0, #16]
 800a252:	b005      	add	sp, #20
 800a254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a258:	f843 2b04 	str.w	r2, [r3], #4
 800a25c:	e7d8      	b.n	800a210 <__multiply+0x50>
 800a25e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a262:	f1ba 0f00 	cmp.w	sl, #0
 800a266:	d024      	beq.n	800a2b2 <__multiply+0xf2>
 800a268:	f104 0e14 	add.w	lr, r4, #20
 800a26c:	46a9      	mov	r9, r5
 800a26e:	f04f 0c00 	mov.w	ip, #0
 800a272:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a276:	f8d9 1000 	ldr.w	r1, [r9]
 800a27a:	fa1f fb82 	uxth.w	fp, r2
 800a27e:	b289      	uxth	r1, r1
 800a280:	fb0a 110b 	mla	r1, sl, fp, r1
 800a284:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a288:	f8d9 2000 	ldr.w	r2, [r9]
 800a28c:	4461      	add	r1, ip
 800a28e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a292:	fb0a c20b 	mla	r2, sl, fp, ip
 800a296:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a29a:	b289      	uxth	r1, r1
 800a29c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a2a0:	4577      	cmp	r7, lr
 800a2a2:	f849 1b04 	str.w	r1, [r9], #4
 800a2a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a2aa:	d8e2      	bhi.n	800a272 <__multiply+0xb2>
 800a2ac:	9a01      	ldr	r2, [sp, #4]
 800a2ae:	f845 c002 	str.w	ip, [r5, r2]
 800a2b2:	9a03      	ldr	r2, [sp, #12]
 800a2b4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a2b8:	3304      	adds	r3, #4
 800a2ba:	f1b9 0f00 	cmp.w	r9, #0
 800a2be:	d020      	beq.n	800a302 <__multiply+0x142>
 800a2c0:	6829      	ldr	r1, [r5, #0]
 800a2c2:	f104 0c14 	add.w	ip, r4, #20
 800a2c6:	46ae      	mov	lr, r5
 800a2c8:	f04f 0a00 	mov.w	sl, #0
 800a2cc:	f8bc b000 	ldrh.w	fp, [ip]
 800a2d0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a2d4:	fb09 220b 	mla	r2, r9, fp, r2
 800a2d8:	4492      	add	sl, r2
 800a2da:	b289      	uxth	r1, r1
 800a2dc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a2e0:	f84e 1b04 	str.w	r1, [lr], #4
 800a2e4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a2e8:	f8be 1000 	ldrh.w	r1, [lr]
 800a2ec:	0c12      	lsrs	r2, r2, #16
 800a2ee:	fb09 1102 	mla	r1, r9, r2, r1
 800a2f2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a2f6:	4567      	cmp	r7, ip
 800a2f8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a2fc:	d8e6      	bhi.n	800a2cc <__multiply+0x10c>
 800a2fe:	9a01      	ldr	r2, [sp, #4]
 800a300:	50a9      	str	r1, [r5, r2]
 800a302:	3504      	adds	r5, #4
 800a304:	e79a      	b.n	800a23c <__multiply+0x7c>
 800a306:	3e01      	subs	r6, #1
 800a308:	e79c      	b.n	800a244 <__multiply+0x84>
 800a30a:	bf00      	nop
 800a30c:	0800b467 	.word	0x0800b467
 800a310:	0800b478 	.word	0x0800b478

0800a314 <__pow5mult>:
 800a314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a318:	4615      	mov	r5, r2
 800a31a:	f012 0203 	ands.w	r2, r2, #3
 800a31e:	4606      	mov	r6, r0
 800a320:	460f      	mov	r7, r1
 800a322:	d007      	beq.n	800a334 <__pow5mult+0x20>
 800a324:	4c25      	ldr	r4, [pc, #148]	; (800a3bc <__pow5mult+0xa8>)
 800a326:	3a01      	subs	r2, #1
 800a328:	2300      	movs	r3, #0
 800a32a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a32e:	f7ff fe9b 	bl	800a068 <__multadd>
 800a332:	4607      	mov	r7, r0
 800a334:	10ad      	asrs	r5, r5, #2
 800a336:	d03d      	beq.n	800a3b4 <__pow5mult+0xa0>
 800a338:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a33a:	b97c      	cbnz	r4, 800a35c <__pow5mult+0x48>
 800a33c:	2010      	movs	r0, #16
 800a33e:	f7fe f851 	bl	80083e4 <malloc>
 800a342:	4602      	mov	r2, r0
 800a344:	6270      	str	r0, [r6, #36]	; 0x24
 800a346:	b928      	cbnz	r0, 800a354 <__pow5mult+0x40>
 800a348:	4b1d      	ldr	r3, [pc, #116]	; (800a3c0 <__pow5mult+0xac>)
 800a34a:	481e      	ldr	r0, [pc, #120]	; (800a3c4 <__pow5mult+0xb0>)
 800a34c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a350:	f000 fb30 	bl	800a9b4 <__assert_func>
 800a354:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a358:	6004      	str	r4, [r0, #0]
 800a35a:	60c4      	str	r4, [r0, #12]
 800a35c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a360:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a364:	b94c      	cbnz	r4, 800a37a <__pow5mult+0x66>
 800a366:	f240 2171 	movw	r1, #625	; 0x271
 800a36a:	4630      	mov	r0, r6
 800a36c:	f7ff ff12 	bl	800a194 <__i2b>
 800a370:	2300      	movs	r3, #0
 800a372:	f8c8 0008 	str.w	r0, [r8, #8]
 800a376:	4604      	mov	r4, r0
 800a378:	6003      	str	r3, [r0, #0]
 800a37a:	f04f 0900 	mov.w	r9, #0
 800a37e:	07eb      	lsls	r3, r5, #31
 800a380:	d50a      	bpl.n	800a398 <__pow5mult+0x84>
 800a382:	4639      	mov	r1, r7
 800a384:	4622      	mov	r2, r4
 800a386:	4630      	mov	r0, r6
 800a388:	f7ff ff1a 	bl	800a1c0 <__multiply>
 800a38c:	4639      	mov	r1, r7
 800a38e:	4680      	mov	r8, r0
 800a390:	4630      	mov	r0, r6
 800a392:	f7ff fe47 	bl	800a024 <_Bfree>
 800a396:	4647      	mov	r7, r8
 800a398:	106d      	asrs	r5, r5, #1
 800a39a:	d00b      	beq.n	800a3b4 <__pow5mult+0xa0>
 800a39c:	6820      	ldr	r0, [r4, #0]
 800a39e:	b938      	cbnz	r0, 800a3b0 <__pow5mult+0x9c>
 800a3a0:	4622      	mov	r2, r4
 800a3a2:	4621      	mov	r1, r4
 800a3a4:	4630      	mov	r0, r6
 800a3a6:	f7ff ff0b 	bl	800a1c0 <__multiply>
 800a3aa:	6020      	str	r0, [r4, #0]
 800a3ac:	f8c0 9000 	str.w	r9, [r0]
 800a3b0:	4604      	mov	r4, r0
 800a3b2:	e7e4      	b.n	800a37e <__pow5mult+0x6a>
 800a3b4:	4638      	mov	r0, r7
 800a3b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3ba:	bf00      	nop
 800a3bc:	0800b5c8 	.word	0x0800b5c8
 800a3c0:	0800b3f5 	.word	0x0800b3f5
 800a3c4:	0800b478 	.word	0x0800b478

0800a3c8 <__lshift>:
 800a3c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3cc:	460c      	mov	r4, r1
 800a3ce:	6849      	ldr	r1, [r1, #4]
 800a3d0:	6923      	ldr	r3, [r4, #16]
 800a3d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a3d6:	68a3      	ldr	r3, [r4, #8]
 800a3d8:	4607      	mov	r7, r0
 800a3da:	4691      	mov	r9, r2
 800a3dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a3e0:	f108 0601 	add.w	r6, r8, #1
 800a3e4:	42b3      	cmp	r3, r6
 800a3e6:	db0b      	blt.n	800a400 <__lshift+0x38>
 800a3e8:	4638      	mov	r0, r7
 800a3ea:	f7ff fddb 	bl	8009fa4 <_Balloc>
 800a3ee:	4605      	mov	r5, r0
 800a3f0:	b948      	cbnz	r0, 800a406 <__lshift+0x3e>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	4b2a      	ldr	r3, [pc, #168]	; (800a4a0 <__lshift+0xd8>)
 800a3f6:	482b      	ldr	r0, [pc, #172]	; (800a4a4 <__lshift+0xdc>)
 800a3f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a3fc:	f000 fada 	bl	800a9b4 <__assert_func>
 800a400:	3101      	adds	r1, #1
 800a402:	005b      	lsls	r3, r3, #1
 800a404:	e7ee      	b.n	800a3e4 <__lshift+0x1c>
 800a406:	2300      	movs	r3, #0
 800a408:	f100 0114 	add.w	r1, r0, #20
 800a40c:	f100 0210 	add.w	r2, r0, #16
 800a410:	4618      	mov	r0, r3
 800a412:	4553      	cmp	r3, sl
 800a414:	db37      	blt.n	800a486 <__lshift+0xbe>
 800a416:	6920      	ldr	r0, [r4, #16]
 800a418:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a41c:	f104 0314 	add.w	r3, r4, #20
 800a420:	f019 091f 	ands.w	r9, r9, #31
 800a424:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a428:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a42c:	d02f      	beq.n	800a48e <__lshift+0xc6>
 800a42e:	f1c9 0e20 	rsb	lr, r9, #32
 800a432:	468a      	mov	sl, r1
 800a434:	f04f 0c00 	mov.w	ip, #0
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	fa02 f209 	lsl.w	r2, r2, r9
 800a43e:	ea42 020c 	orr.w	r2, r2, ip
 800a442:	f84a 2b04 	str.w	r2, [sl], #4
 800a446:	f853 2b04 	ldr.w	r2, [r3], #4
 800a44a:	4298      	cmp	r0, r3
 800a44c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a450:	d8f2      	bhi.n	800a438 <__lshift+0x70>
 800a452:	1b03      	subs	r3, r0, r4
 800a454:	3b15      	subs	r3, #21
 800a456:	f023 0303 	bic.w	r3, r3, #3
 800a45a:	3304      	adds	r3, #4
 800a45c:	f104 0215 	add.w	r2, r4, #21
 800a460:	4290      	cmp	r0, r2
 800a462:	bf38      	it	cc
 800a464:	2304      	movcc	r3, #4
 800a466:	f841 c003 	str.w	ip, [r1, r3]
 800a46a:	f1bc 0f00 	cmp.w	ip, #0
 800a46e:	d001      	beq.n	800a474 <__lshift+0xac>
 800a470:	f108 0602 	add.w	r6, r8, #2
 800a474:	3e01      	subs	r6, #1
 800a476:	4638      	mov	r0, r7
 800a478:	612e      	str	r6, [r5, #16]
 800a47a:	4621      	mov	r1, r4
 800a47c:	f7ff fdd2 	bl	800a024 <_Bfree>
 800a480:	4628      	mov	r0, r5
 800a482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a486:	f842 0f04 	str.w	r0, [r2, #4]!
 800a48a:	3301      	adds	r3, #1
 800a48c:	e7c1      	b.n	800a412 <__lshift+0x4a>
 800a48e:	3904      	subs	r1, #4
 800a490:	f853 2b04 	ldr.w	r2, [r3], #4
 800a494:	f841 2f04 	str.w	r2, [r1, #4]!
 800a498:	4298      	cmp	r0, r3
 800a49a:	d8f9      	bhi.n	800a490 <__lshift+0xc8>
 800a49c:	e7ea      	b.n	800a474 <__lshift+0xac>
 800a49e:	bf00      	nop
 800a4a0:	0800b467 	.word	0x0800b467
 800a4a4:	0800b478 	.word	0x0800b478

0800a4a8 <__mcmp>:
 800a4a8:	b530      	push	{r4, r5, lr}
 800a4aa:	6902      	ldr	r2, [r0, #16]
 800a4ac:	690c      	ldr	r4, [r1, #16]
 800a4ae:	1b12      	subs	r2, r2, r4
 800a4b0:	d10e      	bne.n	800a4d0 <__mcmp+0x28>
 800a4b2:	f100 0314 	add.w	r3, r0, #20
 800a4b6:	3114      	adds	r1, #20
 800a4b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a4bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a4c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a4c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a4c8:	42a5      	cmp	r5, r4
 800a4ca:	d003      	beq.n	800a4d4 <__mcmp+0x2c>
 800a4cc:	d305      	bcc.n	800a4da <__mcmp+0x32>
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	4610      	mov	r0, r2
 800a4d2:	bd30      	pop	{r4, r5, pc}
 800a4d4:	4283      	cmp	r3, r0
 800a4d6:	d3f3      	bcc.n	800a4c0 <__mcmp+0x18>
 800a4d8:	e7fa      	b.n	800a4d0 <__mcmp+0x28>
 800a4da:	f04f 32ff 	mov.w	r2, #4294967295
 800a4de:	e7f7      	b.n	800a4d0 <__mcmp+0x28>

0800a4e0 <__mdiff>:
 800a4e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e4:	460c      	mov	r4, r1
 800a4e6:	4606      	mov	r6, r0
 800a4e8:	4611      	mov	r1, r2
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	4690      	mov	r8, r2
 800a4ee:	f7ff ffdb 	bl	800a4a8 <__mcmp>
 800a4f2:	1e05      	subs	r5, r0, #0
 800a4f4:	d110      	bne.n	800a518 <__mdiff+0x38>
 800a4f6:	4629      	mov	r1, r5
 800a4f8:	4630      	mov	r0, r6
 800a4fa:	f7ff fd53 	bl	8009fa4 <_Balloc>
 800a4fe:	b930      	cbnz	r0, 800a50e <__mdiff+0x2e>
 800a500:	4b3a      	ldr	r3, [pc, #232]	; (800a5ec <__mdiff+0x10c>)
 800a502:	4602      	mov	r2, r0
 800a504:	f240 2132 	movw	r1, #562	; 0x232
 800a508:	4839      	ldr	r0, [pc, #228]	; (800a5f0 <__mdiff+0x110>)
 800a50a:	f000 fa53 	bl	800a9b4 <__assert_func>
 800a50e:	2301      	movs	r3, #1
 800a510:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a514:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a518:	bfa4      	itt	ge
 800a51a:	4643      	movge	r3, r8
 800a51c:	46a0      	movge	r8, r4
 800a51e:	4630      	mov	r0, r6
 800a520:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a524:	bfa6      	itte	ge
 800a526:	461c      	movge	r4, r3
 800a528:	2500      	movge	r5, #0
 800a52a:	2501      	movlt	r5, #1
 800a52c:	f7ff fd3a 	bl	8009fa4 <_Balloc>
 800a530:	b920      	cbnz	r0, 800a53c <__mdiff+0x5c>
 800a532:	4b2e      	ldr	r3, [pc, #184]	; (800a5ec <__mdiff+0x10c>)
 800a534:	4602      	mov	r2, r0
 800a536:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a53a:	e7e5      	b.n	800a508 <__mdiff+0x28>
 800a53c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a540:	6926      	ldr	r6, [r4, #16]
 800a542:	60c5      	str	r5, [r0, #12]
 800a544:	f104 0914 	add.w	r9, r4, #20
 800a548:	f108 0514 	add.w	r5, r8, #20
 800a54c:	f100 0e14 	add.w	lr, r0, #20
 800a550:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a554:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a558:	f108 0210 	add.w	r2, r8, #16
 800a55c:	46f2      	mov	sl, lr
 800a55e:	2100      	movs	r1, #0
 800a560:	f859 3b04 	ldr.w	r3, [r9], #4
 800a564:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a568:	fa1f f883 	uxth.w	r8, r3
 800a56c:	fa11 f18b 	uxtah	r1, r1, fp
 800a570:	0c1b      	lsrs	r3, r3, #16
 800a572:	eba1 0808 	sub.w	r8, r1, r8
 800a576:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a57a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a57e:	fa1f f888 	uxth.w	r8, r8
 800a582:	1419      	asrs	r1, r3, #16
 800a584:	454e      	cmp	r6, r9
 800a586:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a58a:	f84a 3b04 	str.w	r3, [sl], #4
 800a58e:	d8e7      	bhi.n	800a560 <__mdiff+0x80>
 800a590:	1b33      	subs	r3, r6, r4
 800a592:	3b15      	subs	r3, #21
 800a594:	f023 0303 	bic.w	r3, r3, #3
 800a598:	3304      	adds	r3, #4
 800a59a:	3415      	adds	r4, #21
 800a59c:	42a6      	cmp	r6, r4
 800a59e:	bf38      	it	cc
 800a5a0:	2304      	movcc	r3, #4
 800a5a2:	441d      	add	r5, r3
 800a5a4:	4473      	add	r3, lr
 800a5a6:	469e      	mov	lr, r3
 800a5a8:	462e      	mov	r6, r5
 800a5aa:	4566      	cmp	r6, ip
 800a5ac:	d30e      	bcc.n	800a5cc <__mdiff+0xec>
 800a5ae:	f10c 0203 	add.w	r2, ip, #3
 800a5b2:	1b52      	subs	r2, r2, r5
 800a5b4:	f022 0203 	bic.w	r2, r2, #3
 800a5b8:	3d03      	subs	r5, #3
 800a5ba:	45ac      	cmp	ip, r5
 800a5bc:	bf38      	it	cc
 800a5be:	2200      	movcc	r2, #0
 800a5c0:	441a      	add	r2, r3
 800a5c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a5c6:	b17b      	cbz	r3, 800a5e8 <__mdiff+0x108>
 800a5c8:	6107      	str	r7, [r0, #16]
 800a5ca:	e7a3      	b.n	800a514 <__mdiff+0x34>
 800a5cc:	f856 8b04 	ldr.w	r8, [r6], #4
 800a5d0:	fa11 f288 	uxtah	r2, r1, r8
 800a5d4:	1414      	asrs	r4, r2, #16
 800a5d6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a5da:	b292      	uxth	r2, r2
 800a5dc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a5e0:	f84e 2b04 	str.w	r2, [lr], #4
 800a5e4:	1421      	asrs	r1, r4, #16
 800a5e6:	e7e0      	b.n	800a5aa <__mdiff+0xca>
 800a5e8:	3f01      	subs	r7, #1
 800a5ea:	e7ea      	b.n	800a5c2 <__mdiff+0xe2>
 800a5ec:	0800b467 	.word	0x0800b467
 800a5f0:	0800b478 	.word	0x0800b478

0800a5f4 <__d2b>:
 800a5f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a5f8:	4689      	mov	r9, r1
 800a5fa:	2101      	movs	r1, #1
 800a5fc:	ec57 6b10 	vmov	r6, r7, d0
 800a600:	4690      	mov	r8, r2
 800a602:	f7ff fccf 	bl	8009fa4 <_Balloc>
 800a606:	4604      	mov	r4, r0
 800a608:	b930      	cbnz	r0, 800a618 <__d2b+0x24>
 800a60a:	4602      	mov	r2, r0
 800a60c:	4b25      	ldr	r3, [pc, #148]	; (800a6a4 <__d2b+0xb0>)
 800a60e:	4826      	ldr	r0, [pc, #152]	; (800a6a8 <__d2b+0xb4>)
 800a610:	f240 310a 	movw	r1, #778	; 0x30a
 800a614:	f000 f9ce 	bl	800a9b4 <__assert_func>
 800a618:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a61c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a620:	bb35      	cbnz	r5, 800a670 <__d2b+0x7c>
 800a622:	2e00      	cmp	r6, #0
 800a624:	9301      	str	r3, [sp, #4]
 800a626:	d028      	beq.n	800a67a <__d2b+0x86>
 800a628:	4668      	mov	r0, sp
 800a62a:	9600      	str	r6, [sp, #0]
 800a62c:	f7ff fd82 	bl	800a134 <__lo0bits>
 800a630:	9900      	ldr	r1, [sp, #0]
 800a632:	b300      	cbz	r0, 800a676 <__d2b+0x82>
 800a634:	9a01      	ldr	r2, [sp, #4]
 800a636:	f1c0 0320 	rsb	r3, r0, #32
 800a63a:	fa02 f303 	lsl.w	r3, r2, r3
 800a63e:	430b      	orrs	r3, r1
 800a640:	40c2      	lsrs	r2, r0
 800a642:	6163      	str	r3, [r4, #20]
 800a644:	9201      	str	r2, [sp, #4]
 800a646:	9b01      	ldr	r3, [sp, #4]
 800a648:	61a3      	str	r3, [r4, #24]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	bf14      	ite	ne
 800a64e:	2202      	movne	r2, #2
 800a650:	2201      	moveq	r2, #1
 800a652:	6122      	str	r2, [r4, #16]
 800a654:	b1d5      	cbz	r5, 800a68c <__d2b+0x98>
 800a656:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a65a:	4405      	add	r5, r0
 800a65c:	f8c9 5000 	str.w	r5, [r9]
 800a660:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a664:	f8c8 0000 	str.w	r0, [r8]
 800a668:	4620      	mov	r0, r4
 800a66a:	b003      	add	sp, #12
 800a66c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a670:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a674:	e7d5      	b.n	800a622 <__d2b+0x2e>
 800a676:	6161      	str	r1, [r4, #20]
 800a678:	e7e5      	b.n	800a646 <__d2b+0x52>
 800a67a:	a801      	add	r0, sp, #4
 800a67c:	f7ff fd5a 	bl	800a134 <__lo0bits>
 800a680:	9b01      	ldr	r3, [sp, #4]
 800a682:	6163      	str	r3, [r4, #20]
 800a684:	2201      	movs	r2, #1
 800a686:	6122      	str	r2, [r4, #16]
 800a688:	3020      	adds	r0, #32
 800a68a:	e7e3      	b.n	800a654 <__d2b+0x60>
 800a68c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a690:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a694:	f8c9 0000 	str.w	r0, [r9]
 800a698:	6918      	ldr	r0, [r3, #16]
 800a69a:	f7ff fd2b 	bl	800a0f4 <__hi0bits>
 800a69e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a6a2:	e7df      	b.n	800a664 <__d2b+0x70>
 800a6a4:	0800b467 	.word	0x0800b467
 800a6a8:	0800b478 	.word	0x0800b478

0800a6ac <_calloc_r>:
 800a6ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a6ae:	fba1 2402 	umull	r2, r4, r1, r2
 800a6b2:	b94c      	cbnz	r4, 800a6c8 <_calloc_r+0x1c>
 800a6b4:	4611      	mov	r1, r2
 800a6b6:	9201      	str	r2, [sp, #4]
 800a6b8:	f7fd ff36 	bl	8008528 <_malloc_r>
 800a6bc:	9a01      	ldr	r2, [sp, #4]
 800a6be:	4605      	mov	r5, r0
 800a6c0:	b930      	cbnz	r0, 800a6d0 <_calloc_r+0x24>
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	b003      	add	sp, #12
 800a6c6:	bd30      	pop	{r4, r5, pc}
 800a6c8:	220c      	movs	r2, #12
 800a6ca:	6002      	str	r2, [r0, #0]
 800a6cc:	2500      	movs	r5, #0
 800a6ce:	e7f8      	b.n	800a6c2 <_calloc_r+0x16>
 800a6d0:	4621      	mov	r1, r4
 800a6d2:	f7fd feb5 	bl	8008440 <memset>
 800a6d6:	e7f4      	b.n	800a6c2 <_calloc_r+0x16>

0800a6d8 <__ssputs_r>:
 800a6d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6dc:	688e      	ldr	r6, [r1, #8]
 800a6de:	429e      	cmp	r6, r3
 800a6e0:	4682      	mov	sl, r0
 800a6e2:	460c      	mov	r4, r1
 800a6e4:	4690      	mov	r8, r2
 800a6e6:	461f      	mov	r7, r3
 800a6e8:	d838      	bhi.n	800a75c <__ssputs_r+0x84>
 800a6ea:	898a      	ldrh	r2, [r1, #12]
 800a6ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a6f0:	d032      	beq.n	800a758 <__ssputs_r+0x80>
 800a6f2:	6825      	ldr	r5, [r4, #0]
 800a6f4:	6909      	ldr	r1, [r1, #16]
 800a6f6:	eba5 0901 	sub.w	r9, r5, r1
 800a6fa:	6965      	ldr	r5, [r4, #20]
 800a6fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a700:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a704:	3301      	adds	r3, #1
 800a706:	444b      	add	r3, r9
 800a708:	106d      	asrs	r5, r5, #1
 800a70a:	429d      	cmp	r5, r3
 800a70c:	bf38      	it	cc
 800a70e:	461d      	movcc	r5, r3
 800a710:	0553      	lsls	r3, r2, #21
 800a712:	d531      	bpl.n	800a778 <__ssputs_r+0xa0>
 800a714:	4629      	mov	r1, r5
 800a716:	f7fd ff07 	bl	8008528 <_malloc_r>
 800a71a:	4606      	mov	r6, r0
 800a71c:	b950      	cbnz	r0, 800a734 <__ssputs_r+0x5c>
 800a71e:	230c      	movs	r3, #12
 800a720:	f8ca 3000 	str.w	r3, [sl]
 800a724:	89a3      	ldrh	r3, [r4, #12]
 800a726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a72a:	81a3      	strh	r3, [r4, #12]
 800a72c:	f04f 30ff 	mov.w	r0, #4294967295
 800a730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a734:	6921      	ldr	r1, [r4, #16]
 800a736:	464a      	mov	r2, r9
 800a738:	f7fd fe74 	bl	8008424 <memcpy>
 800a73c:	89a3      	ldrh	r3, [r4, #12]
 800a73e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a746:	81a3      	strh	r3, [r4, #12]
 800a748:	6126      	str	r6, [r4, #16]
 800a74a:	6165      	str	r5, [r4, #20]
 800a74c:	444e      	add	r6, r9
 800a74e:	eba5 0509 	sub.w	r5, r5, r9
 800a752:	6026      	str	r6, [r4, #0]
 800a754:	60a5      	str	r5, [r4, #8]
 800a756:	463e      	mov	r6, r7
 800a758:	42be      	cmp	r6, r7
 800a75a:	d900      	bls.n	800a75e <__ssputs_r+0x86>
 800a75c:	463e      	mov	r6, r7
 800a75e:	6820      	ldr	r0, [r4, #0]
 800a760:	4632      	mov	r2, r6
 800a762:	4641      	mov	r1, r8
 800a764:	f000 f968 	bl	800aa38 <memmove>
 800a768:	68a3      	ldr	r3, [r4, #8]
 800a76a:	1b9b      	subs	r3, r3, r6
 800a76c:	60a3      	str	r3, [r4, #8]
 800a76e:	6823      	ldr	r3, [r4, #0]
 800a770:	4433      	add	r3, r6
 800a772:	6023      	str	r3, [r4, #0]
 800a774:	2000      	movs	r0, #0
 800a776:	e7db      	b.n	800a730 <__ssputs_r+0x58>
 800a778:	462a      	mov	r2, r5
 800a77a:	f000 f977 	bl	800aa6c <_realloc_r>
 800a77e:	4606      	mov	r6, r0
 800a780:	2800      	cmp	r0, #0
 800a782:	d1e1      	bne.n	800a748 <__ssputs_r+0x70>
 800a784:	6921      	ldr	r1, [r4, #16]
 800a786:	4650      	mov	r0, sl
 800a788:	f7fd fe62 	bl	8008450 <_free_r>
 800a78c:	e7c7      	b.n	800a71e <__ssputs_r+0x46>
	...

0800a790 <_svfiprintf_r>:
 800a790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a794:	4698      	mov	r8, r3
 800a796:	898b      	ldrh	r3, [r1, #12]
 800a798:	061b      	lsls	r3, r3, #24
 800a79a:	b09d      	sub	sp, #116	; 0x74
 800a79c:	4607      	mov	r7, r0
 800a79e:	460d      	mov	r5, r1
 800a7a0:	4614      	mov	r4, r2
 800a7a2:	d50e      	bpl.n	800a7c2 <_svfiprintf_r+0x32>
 800a7a4:	690b      	ldr	r3, [r1, #16]
 800a7a6:	b963      	cbnz	r3, 800a7c2 <_svfiprintf_r+0x32>
 800a7a8:	2140      	movs	r1, #64	; 0x40
 800a7aa:	f7fd febd 	bl	8008528 <_malloc_r>
 800a7ae:	6028      	str	r0, [r5, #0]
 800a7b0:	6128      	str	r0, [r5, #16]
 800a7b2:	b920      	cbnz	r0, 800a7be <_svfiprintf_r+0x2e>
 800a7b4:	230c      	movs	r3, #12
 800a7b6:	603b      	str	r3, [r7, #0]
 800a7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7bc:	e0d1      	b.n	800a962 <_svfiprintf_r+0x1d2>
 800a7be:	2340      	movs	r3, #64	; 0x40
 800a7c0:	616b      	str	r3, [r5, #20]
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	9309      	str	r3, [sp, #36]	; 0x24
 800a7c6:	2320      	movs	r3, #32
 800a7c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7d0:	2330      	movs	r3, #48	; 0x30
 800a7d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a97c <_svfiprintf_r+0x1ec>
 800a7d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7da:	f04f 0901 	mov.w	r9, #1
 800a7de:	4623      	mov	r3, r4
 800a7e0:	469a      	mov	sl, r3
 800a7e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7e6:	b10a      	cbz	r2, 800a7ec <_svfiprintf_r+0x5c>
 800a7e8:	2a25      	cmp	r2, #37	; 0x25
 800a7ea:	d1f9      	bne.n	800a7e0 <_svfiprintf_r+0x50>
 800a7ec:	ebba 0b04 	subs.w	fp, sl, r4
 800a7f0:	d00b      	beq.n	800a80a <_svfiprintf_r+0x7a>
 800a7f2:	465b      	mov	r3, fp
 800a7f4:	4622      	mov	r2, r4
 800a7f6:	4629      	mov	r1, r5
 800a7f8:	4638      	mov	r0, r7
 800a7fa:	f7ff ff6d 	bl	800a6d8 <__ssputs_r>
 800a7fe:	3001      	adds	r0, #1
 800a800:	f000 80aa 	beq.w	800a958 <_svfiprintf_r+0x1c8>
 800a804:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a806:	445a      	add	r2, fp
 800a808:	9209      	str	r2, [sp, #36]	; 0x24
 800a80a:	f89a 3000 	ldrb.w	r3, [sl]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	f000 80a2 	beq.w	800a958 <_svfiprintf_r+0x1c8>
 800a814:	2300      	movs	r3, #0
 800a816:	f04f 32ff 	mov.w	r2, #4294967295
 800a81a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a81e:	f10a 0a01 	add.w	sl, sl, #1
 800a822:	9304      	str	r3, [sp, #16]
 800a824:	9307      	str	r3, [sp, #28]
 800a826:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a82a:	931a      	str	r3, [sp, #104]	; 0x68
 800a82c:	4654      	mov	r4, sl
 800a82e:	2205      	movs	r2, #5
 800a830:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a834:	4851      	ldr	r0, [pc, #324]	; (800a97c <_svfiprintf_r+0x1ec>)
 800a836:	f7f5 fcd3 	bl	80001e0 <memchr>
 800a83a:	9a04      	ldr	r2, [sp, #16]
 800a83c:	b9d8      	cbnz	r0, 800a876 <_svfiprintf_r+0xe6>
 800a83e:	06d0      	lsls	r0, r2, #27
 800a840:	bf44      	itt	mi
 800a842:	2320      	movmi	r3, #32
 800a844:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a848:	0711      	lsls	r1, r2, #28
 800a84a:	bf44      	itt	mi
 800a84c:	232b      	movmi	r3, #43	; 0x2b
 800a84e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a852:	f89a 3000 	ldrb.w	r3, [sl]
 800a856:	2b2a      	cmp	r3, #42	; 0x2a
 800a858:	d015      	beq.n	800a886 <_svfiprintf_r+0xf6>
 800a85a:	9a07      	ldr	r2, [sp, #28]
 800a85c:	4654      	mov	r4, sl
 800a85e:	2000      	movs	r0, #0
 800a860:	f04f 0c0a 	mov.w	ip, #10
 800a864:	4621      	mov	r1, r4
 800a866:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a86a:	3b30      	subs	r3, #48	; 0x30
 800a86c:	2b09      	cmp	r3, #9
 800a86e:	d94e      	bls.n	800a90e <_svfiprintf_r+0x17e>
 800a870:	b1b0      	cbz	r0, 800a8a0 <_svfiprintf_r+0x110>
 800a872:	9207      	str	r2, [sp, #28]
 800a874:	e014      	b.n	800a8a0 <_svfiprintf_r+0x110>
 800a876:	eba0 0308 	sub.w	r3, r0, r8
 800a87a:	fa09 f303 	lsl.w	r3, r9, r3
 800a87e:	4313      	orrs	r3, r2
 800a880:	9304      	str	r3, [sp, #16]
 800a882:	46a2      	mov	sl, r4
 800a884:	e7d2      	b.n	800a82c <_svfiprintf_r+0x9c>
 800a886:	9b03      	ldr	r3, [sp, #12]
 800a888:	1d19      	adds	r1, r3, #4
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	9103      	str	r1, [sp, #12]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	bfbb      	ittet	lt
 800a892:	425b      	neglt	r3, r3
 800a894:	f042 0202 	orrlt.w	r2, r2, #2
 800a898:	9307      	strge	r3, [sp, #28]
 800a89a:	9307      	strlt	r3, [sp, #28]
 800a89c:	bfb8      	it	lt
 800a89e:	9204      	strlt	r2, [sp, #16]
 800a8a0:	7823      	ldrb	r3, [r4, #0]
 800a8a2:	2b2e      	cmp	r3, #46	; 0x2e
 800a8a4:	d10c      	bne.n	800a8c0 <_svfiprintf_r+0x130>
 800a8a6:	7863      	ldrb	r3, [r4, #1]
 800a8a8:	2b2a      	cmp	r3, #42	; 0x2a
 800a8aa:	d135      	bne.n	800a918 <_svfiprintf_r+0x188>
 800a8ac:	9b03      	ldr	r3, [sp, #12]
 800a8ae:	1d1a      	adds	r2, r3, #4
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	9203      	str	r2, [sp, #12]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	bfb8      	it	lt
 800a8b8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a8bc:	3402      	adds	r4, #2
 800a8be:	9305      	str	r3, [sp, #20]
 800a8c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a98c <_svfiprintf_r+0x1fc>
 800a8c4:	7821      	ldrb	r1, [r4, #0]
 800a8c6:	2203      	movs	r2, #3
 800a8c8:	4650      	mov	r0, sl
 800a8ca:	f7f5 fc89 	bl	80001e0 <memchr>
 800a8ce:	b140      	cbz	r0, 800a8e2 <_svfiprintf_r+0x152>
 800a8d0:	2340      	movs	r3, #64	; 0x40
 800a8d2:	eba0 000a 	sub.w	r0, r0, sl
 800a8d6:	fa03 f000 	lsl.w	r0, r3, r0
 800a8da:	9b04      	ldr	r3, [sp, #16]
 800a8dc:	4303      	orrs	r3, r0
 800a8de:	3401      	adds	r4, #1
 800a8e0:	9304      	str	r3, [sp, #16]
 800a8e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8e6:	4826      	ldr	r0, [pc, #152]	; (800a980 <_svfiprintf_r+0x1f0>)
 800a8e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8ec:	2206      	movs	r2, #6
 800a8ee:	f7f5 fc77 	bl	80001e0 <memchr>
 800a8f2:	2800      	cmp	r0, #0
 800a8f4:	d038      	beq.n	800a968 <_svfiprintf_r+0x1d8>
 800a8f6:	4b23      	ldr	r3, [pc, #140]	; (800a984 <_svfiprintf_r+0x1f4>)
 800a8f8:	bb1b      	cbnz	r3, 800a942 <_svfiprintf_r+0x1b2>
 800a8fa:	9b03      	ldr	r3, [sp, #12]
 800a8fc:	3307      	adds	r3, #7
 800a8fe:	f023 0307 	bic.w	r3, r3, #7
 800a902:	3308      	adds	r3, #8
 800a904:	9303      	str	r3, [sp, #12]
 800a906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a908:	4433      	add	r3, r6
 800a90a:	9309      	str	r3, [sp, #36]	; 0x24
 800a90c:	e767      	b.n	800a7de <_svfiprintf_r+0x4e>
 800a90e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a912:	460c      	mov	r4, r1
 800a914:	2001      	movs	r0, #1
 800a916:	e7a5      	b.n	800a864 <_svfiprintf_r+0xd4>
 800a918:	2300      	movs	r3, #0
 800a91a:	3401      	adds	r4, #1
 800a91c:	9305      	str	r3, [sp, #20]
 800a91e:	4619      	mov	r1, r3
 800a920:	f04f 0c0a 	mov.w	ip, #10
 800a924:	4620      	mov	r0, r4
 800a926:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a92a:	3a30      	subs	r2, #48	; 0x30
 800a92c:	2a09      	cmp	r2, #9
 800a92e:	d903      	bls.n	800a938 <_svfiprintf_r+0x1a8>
 800a930:	2b00      	cmp	r3, #0
 800a932:	d0c5      	beq.n	800a8c0 <_svfiprintf_r+0x130>
 800a934:	9105      	str	r1, [sp, #20]
 800a936:	e7c3      	b.n	800a8c0 <_svfiprintf_r+0x130>
 800a938:	fb0c 2101 	mla	r1, ip, r1, r2
 800a93c:	4604      	mov	r4, r0
 800a93e:	2301      	movs	r3, #1
 800a940:	e7f0      	b.n	800a924 <_svfiprintf_r+0x194>
 800a942:	ab03      	add	r3, sp, #12
 800a944:	9300      	str	r3, [sp, #0]
 800a946:	462a      	mov	r2, r5
 800a948:	4b0f      	ldr	r3, [pc, #60]	; (800a988 <_svfiprintf_r+0x1f8>)
 800a94a:	a904      	add	r1, sp, #16
 800a94c:	4638      	mov	r0, r7
 800a94e:	f7fd feff 	bl	8008750 <_printf_float>
 800a952:	1c42      	adds	r2, r0, #1
 800a954:	4606      	mov	r6, r0
 800a956:	d1d6      	bne.n	800a906 <_svfiprintf_r+0x176>
 800a958:	89ab      	ldrh	r3, [r5, #12]
 800a95a:	065b      	lsls	r3, r3, #25
 800a95c:	f53f af2c 	bmi.w	800a7b8 <_svfiprintf_r+0x28>
 800a960:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a962:	b01d      	add	sp, #116	; 0x74
 800a964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a968:	ab03      	add	r3, sp, #12
 800a96a:	9300      	str	r3, [sp, #0]
 800a96c:	462a      	mov	r2, r5
 800a96e:	4b06      	ldr	r3, [pc, #24]	; (800a988 <_svfiprintf_r+0x1f8>)
 800a970:	a904      	add	r1, sp, #16
 800a972:	4638      	mov	r0, r7
 800a974:	f7fe f990 	bl	8008c98 <_printf_i>
 800a978:	e7eb      	b.n	800a952 <_svfiprintf_r+0x1c2>
 800a97a:	bf00      	nop
 800a97c:	0800b5d4 	.word	0x0800b5d4
 800a980:	0800b5de 	.word	0x0800b5de
 800a984:	08008751 	.word	0x08008751
 800a988:	0800a6d9 	.word	0x0800a6d9
 800a98c:	0800b5da 	.word	0x0800b5da

0800a990 <_read_r>:
 800a990:	b538      	push	{r3, r4, r5, lr}
 800a992:	4d07      	ldr	r5, [pc, #28]	; (800a9b0 <_read_r+0x20>)
 800a994:	4604      	mov	r4, r0
 800a996:	4608      	mov	r0, r1
 800a998:	4611      	mov	r1, r2
 800a99a:	2200      	movs	r2, #0
 800a99c:	602a      	str	r2, [r5, #0]
 800a99e:	461a      	mov	r2, r3
 800a9a0:	f7f6 fcc8 	bl	8001334 <_read>
 800a9a4:	1c43      	adds	r3, r0, #1
 800a9a6:	d102      	bne.n	800a9ae <_read_r+0x1e>
 800a9a8:	682b      	ldr	r3, [r5, #0]
 800a9aa:	b103      	cbz	r3, 800a9ae <_read_r+0x1e>
 800a9ac:	6023      	str	r3, [r4, #0]
 800a9ae:	bd38      	pop	{r3, r4, r5, pc}
 800a9b0:	2000b614 	.word	0x2000b614

0800a9b4 <__assert_func>:
 800a9b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a9b6:	4614      	mov	r4, r2
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	4b09      	ldr	r3, [pc, #36]	; (800a9e0 <__assert_func+0x2c>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	4605      	mov	r5, r0
 800a9c0:	68d8      	ldr	r0, [r3, #12]
 800a9c2:	b14c      	cbz	r4, 800a9d8 <__assert_func+0x24>
 800a9c4:	4b07      	ldr	r3, [pc, #28]	; (800a9e4 <__assert_func+0x30>)
 800a9c6:	9100      	str	r1, [sp, #0]
 800a9c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a9cc:	4906      	ldr	r1, [pc, #24]	; (800a9e8 <__assert_func+0x34>)
 800a9ce:	462b      	mov	r3, r5
 800a9d0:	f000 f80e 	bl	800a9f0 <fiprintf>
 800a9d4:	f000 faa0 	bl	800af18 <abort>
 800a9d8:	4b04      	ldr	r3, [pc, #16]	; (800a9ec <__assert_func+0x38>)
 800a9da:	461c      	mov	r4, r3
 800a9dc:	e7f3      	b.n	800a9c6 <__assert_func+0x12>
 800a9de:	bf00      	nop
 800a9e0:	20000010 	.word	0x20000010
 800a9e4:	0800b5e5 	.word	0x0800b5e5
 800a9e8:	0800b5f2 	.word	0x0800b5f2
 800a9ec:	0800b620 	.word	0x0800b620

0800a9f0 <fiprintf>:
 800a9f0:	b40e      	push	{r1, r2, r3}
 800a9f2:	b503      	push	{r0, r1, lr}
 800a9f4:	4601      	mov	r1, r0
 800a9f6:	ab03      	add	r3, sp, #12
 800a9f8:	4805      	ldr	r0, [pc, #20]	; (800aa10 <fiprintf+0x20>)
 800a9fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9fe:	6800      	ldr	r0, [r0, #0]
 800aa00:	9301      	str	r3, [sp, #4]
 800aa02:	f000 f88b 	bl	800ab1c <_vfiprintf_r>
 800aa06:	b002      	add	sp, #8
 800aa08:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa0c:	b003      	add	sp, #12
 800aa0e:	4770      	bx	lr
 800aa10:	20000010 	.word	0x20000010

0800aa14 <__ascii_mbtowc>:
 800aa14:	b082      	sub	sp, #8
 800aa16:	b901      	cbnz	r1, 800aa1a <__ascii_mbtowc+0x6>
 800aa18:	a901      	add	r1, sp, #4
 800aa1a:	b142      	cbz	r2, 800aa2e <__ascii_mbtowc+0x1a>
 800aa1c:	b14b      	cbz	r3, 800aa32 <__ascii_mbtowc+0x1e>
 800aa1e:	7813      	ldrb	r3, [r2, #0]
 800aa20:	600b      	str	r3, [r1, #0]
 800aa22:	7812      	ldrb	r2, [r2, #0]
 800aa24:	1e10      	subs	r0, r2, #0
 800aa26:	bf18      	it	ne
 800aa28:	2001      	movne	r0, #1
 800aa2a:	b002      	add	sp, #8
 800aa2c:	4770      	bx	lr
 800aa2e:	4610      	mov	r0, r2
 800aa30:	e7fb      	b.n	800aa2a <__ascii_mbtowc+0x16>
 800aa32:	f06f 0001 	mvn.w	r0, #1
 800aa36:	e7f8      	b.n	800aa2a <__ascii_mbtowc+0x16>

0800aa38 <memmove>:
 800aa38:	4288      	cmp	r0, r1
 800aa3a:	b510      	push	{r4, lr}
 800aa3c:	eb01 0402 	add.w	r4, r1, r2
 800aa40:	d902      	bls.n	800aa48 <memmove+0x10>
 800aa42:	4284      	cmp	r4, r0
 800aa44:	4623      	mov	r3, r4
 800aa46:	d807      	bhi.n	800aa58 <memmove+0x20>
 800aa48:	1e43      	subs	r3, r0, #1
 800aa4a:	42a1      	cmp	r1, r4
 800aa4c:	d008      	beq.n	800aa60 <memmove+0x28>
 800aa4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa52:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa56:	e7f8      	b.n	800aa4a <memmove+0x12>
 800aa58:	4402      	add	r2, r0
 800aa5a:	4601      	mov	r1, r0
 800aa5c:	428a      	cmp	r2, r1
 800aa5e:	d100      	bne.n	800aa62 <memmove+0x2a>
 800aa60:	bd10      	pop	{r4, pc}
 800aa62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa6a:	e7f7      	b.n	800aa5c <memmove+0x24>

0800aa6c <_realloc_r>:
 800aa6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa70:	4680      	mov	r8, r0
 800aa72:	4614      	mov	r4, r2
 800aa74:	460e      	mov	r6, r1
 800aa76:	b921      	cbnz	r1, 800aa82 <_realloc_r+0x16>
 800aa78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa7c:	4611      	mov	r1, r2
 800aa7e:	f7fd bd53 	b.w	8008528 <_malloc_r>
 800aa82:	b92a      	cbnz	r2, 800aa90 <_realloc_r+0x24>
 800aa84:	f7fd fce4 	bl	8008450 <_free_r>
 800aa88:	4625      	mov	r5, r4
 800aa8a:	4628      	mov	r0, r5
 800aa8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa90:	f000 faae 	bl	800aff0 <_malloc_usable_size_r>
 800aa94:	4284      	cmp	r4, r0
 800aa96:	4607      	mov	r7, r0
 800aa98:	d802      	bhi.n	800aaa0 <_realloc_r+0x34>
 800aa9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aa9e:	d812      	bhi.n	800aac6 <_realloc_r+0x5a>
 800aaa0:	4621      	mov	r1, r4
 800aaa2:	4640      	mov	r0, r8
 800aaa4:	f7fd fd40 	bl	8008528 <_malloc_r>
 800aaa8:	4605      	mov	r5, r0
 800aaaa:	2800      	cmp	r0, #0
 800aaac:	d0ed      	beq.n	800aa8a <_realloc_r+0x1e>
 800aaae:	42bc      	cmp	r4, r7
 800aab0:	4622      	mov	r2, r4
 800aab2:	4631      	mov	r1, r6
 800aab4:	bf28      	it	cs
 800aab6:	463a      	movcs	r2, r7
 800aab8:	f7fd fcb4 	bl	8008424 <memcpy>
 800aabc:	4631      	mov	r1, r6
 800aabe:	4640      	mov	r0, r8
 800aac0:	f7fd fcc6 	bl	8008450 <_free_r>
 800aac4:	e7e1      	b.n	800aa8a <_realloc_r+0x1e>
 800aac6:	4635      	mov	r5, r6
 800aac8:	e7df      	b.n	800aa8a <_realloc_r+0x1e>

0800aaca <__sfputc_r>:
 800aaca:	6893      	ldr	r3, [r2, #8]
 800aacc:	3b01      	subs	r3, #1
 800aace:	2b00      	cmp	r3, #0
 800aad0:	b410      	push	{r4}
 800aad2:	6093      	str	r3, [r2, #8]
 800aad4:	da08      	bge.n	800aae8 <__sfputc_r+0x1e>
 800aad6:	6994      	ldr	r4, [r2, #24]
 800aad8:	42a3      	cmp	r3, r4
 800aada:	db01      	blt.n	800aae0 <__sfputc_r+0x16>
 800aadc:	290a      	cmp	r1, #10
 800aade:	d103      	bne.n	800aae8 <__sfputc_r+0x1e>
 800aae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aae4:	f000 b94a 	b.w	800ad7c <__swbuf_r>
 800aae8:	6813      	ldr	r3, [r2, #0]
 800aaea:	1c58      	adds	r0, r3, #1
 800aaec:	6010      	str	r0, [r2, #0]
 800aaee:	7019      	strb	r1, [r3, #0]
 800aaf0:	4608      	mov	r0, r1
 800aaf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <__sfputs_r>:
 800aaf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aafa:	4606      	mov	r6, r0
 800aafc:	460f      	mov	r7, r1
 800aafe:	4614      	mov	r4, r2
 800ab00:	18d5      	adds	r5, r2, r3
 800ab02:	42ac      	cmp	r4, r5
 800ab04:	d101      	bne.n	800ab0a <__sfputs_r+0x12>
 800ab06:	2000      	movs	r0, #0
 800ab08:	e007      	b.n	800ab1a <__sfputs_r+0x22>
 800ab0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab0e:	463a      	mov	r2, r7
 800ab10:	4630      	mov	r0, r6
 800ab12:	f7ff ffda 	bl	800aaca <__sfputc_r>
 800ab16:	1c43      	adds	r3, r0, #1
 800ab18:	d1f3      	bne.n	800ab02 <__sfputs_r+0xa>
 800ab1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ab1c <_vfiprintf_r>:
 800ab1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab20:	460d      	mov	r5, r1
 800ab22:	b09d      	sub	sp, #116	; 0x74
 800ab24:	4614      	mov	r4, r2
 800ab26:	4698      	mov	r8, r3
 800ab28:	4606      	mov	r6, r0
 800ab2a:	b118      	cbz	r0, 800ab34 <_vfiprintf_r+0x18>
 800ab2c:	6983      	ldr	r3, [r0, #24]
 800ab2e:	b90b      	cbnz	r3, 800ab34 <_vfiprintf_r+0x18>
 800ab30:	f7fd fb92 	bl	8008258 <__sinit>
 800ab34:	4b89      	ldr	r3, [pc, #548]	; (800ad5c <_vfiprintf_r+0x240>)
 800ab36:	429d      	cmp	r5, r3
 800ab38:	d11b      	bne.n	800ab72 <_vfiprintf_r+0x56>
 800ab3a:	6875      	ldr	r5, [r6, #4]
 800ab3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab3e:	07d9      	lsls	r1, r3, #31
 800ab40:	d405      	bmi.n	800ab4e <_vfiprintf_r+0x32>
 800ab42:	89ab      	ldrh	r3, [r5, #12]
 800ab44:	059a      	lsls	r2, r3, #22
 800ab46:	d402      	bmi.n	800ab4e <_vfiprintf_r+0x32>
 800ab48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab4a:	f7fd fc48 	bl	80083de <__retarget_lock_acquire_recursive>
 800ab4e:	89ab      	ldrh	r3, [r5, #12]
 800ab50:	071b      	lsls	r3, r3, #28
 800ab52:	d501      	bpl.n	800ab58 <_vfiprintf_r+0x3c>
 800ab54:	692b      	ldr	r3, [r5, #16]
 800ab56:	b9eb      	cbnz	r3, 800ab94 <_vfiprintf_r+0x78>
 800ab58:	4629      	mov	r1, r5
 800ab5a:	4630      	mov	r0, r6
 800ab5c:	f000 f96e 	bl	800ae3c <__swsetup_r>
 800ab60:	b1c0      	cbz	r0, 800ab94 <_vfiprintf_r+0x78>
 800ab62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab64:	07dc      	lsls	r4, r3, #31
 800ab66:	d50e      	bpl.n	800ab86 <_vfiprintf_r+0x6a>
 800ab68:	f04f 30ff 	mov.w	r0, #4294967295
 800ab6c:	b01d      	add	sp, #116	; 0x74
 800ab6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab72:	4b7b      	ldr	r3, [pc, #492]	; (800ad60 <_vfiprintf_r+0x244>)
 800ab74:	429d      	cmp	r5, r3
 800ab76:	d101      	bne.n	800ab7c <_vfiprintf_r+0x60>
 800ab78:	68b5      	ldr	r5, [r6, #8]
 800ab7a:	e7df      	b.n	800ab3c <_vfiprintf_r+0x20>
 800ab7c:	4b79      	ldr	r3, [pc, #484]	; (800ad64 <_vfiprintf_r+0x248>)
 800ab7e:	429d      	cmp	r5, r3
 800ab80:	bf08      	it	eq
 800ab82:	68f5      	ldreq	r5, [r6, #12]
 800ab84:	e7da      	b.n	800ab3c <_vfiprintf_r+0x20>
 800ab86:	89ab      	ldrh	r3, [r5, #12]
 800ab88:	0598      	lsls	r0, r3, #22
 800ab8a:	d4ed      	bmi.n	800ab68 <_vfiprintf_r+0x4c>
 800ab8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab8e:	f7fd fc27 	bl	80083e0 <__retarget_lock_release_recursive>
 800ab92:	e7e9      	b.n	800ab68 <_vfiprintf_r+0x4c>
 800ab94:	2300      	movs	r3, #0
 800ab96:	9309      	str	r3, [sp, #36]	; 0x24
 800ab98:	2320      	movs	r3, #32
 800ab9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab9e:	f8cd 800c 	str.w	r8, [sp, #12]
 800aba2:	2330      	movs	r3, #48	; 0x30
 800aba4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ad68 <_vfiprintf_r+0x24c>
 800aba8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800abac:	f04f 0901 	mov.w	r9, #1
 800abb0:	4623      	mov	r3, r4
 800abb2:	469a      	mov	sl, r3
 800abb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abb8:	b10a      	cbz	r2, 800abbe <_vfiprintf_r+0xa2>
 800abba:	2a25      	cmp	r2, #37	; 0x25
 800abbc:	d1f9      	bne.n	800abb2 <_vfiprintf_r+0x96>
 800abbe:	ebba 0b04 	subs.w	fp, sl, r4
 800abc2:	d00b      	beq.n	800abdc <_vfiprintf_r+0xc0>
 800abc4:	465b      	mov	r3, fp
 800abc6:	4622      	mov	r2, r4
 800abc8:	4629      	mov	r1, r5
 800abca:	4630      	mov	r0, r6
 800abcc:	f7ff ff94 	bl	800aaf8 <__sfputs_r>
 800abd0:	3001      	adds	r0, #1
 800abd2:	f000 80aa 	beq.w	800ad2a <_vfiprintf_r+0x20e>
 800abd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abd8:	445a      	add	r2, fp
 800abda:	9209      	str	r2, [sp, #36]	; 0x24
 800abdc:	f89a 3000 	ldrb.w	r3, [sl]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	f000 80a2 	beq.w	800ad2a <_vfiprintf_r+0x20e>
 800abe6:	2300      	movs	r3, #0
 800abe8:	f04f 32ff 	mov.w	r2, #4294967295
 800abec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abf0:	f10a 0a01 	add.w	sl, sl, #1
 800abf4:	9304      	str	r3, [sp, #16]
 800abf6:	9307      	str	r3, [sp, #28]
 800abf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abfc:	931a      	str	r3, [sp, #104]	; 0x68
 800abfe:	4654      	mov	r4, sl
 800ac00:	2205      	movs	r2, #5
 800ac02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac06:	4858      	ldr	r0, [pc, #352]	; (800ad68 <_vfiprintf_r+0x24c>)
 800ac08:	f7f5 faea 	bl	80001e0 <memchr>
 800ac0c:	9a04      	ldr	r2, [sp, #16]
 800ac0e:	b9d8      	cbnz	r0, 800ac48 <_vfiprintf_r+0x12c>
 800ac10:	06d1      	lsls	r1, r2, #27
 800ac12:	bf44      	itt	mi
 800ac14:	2320      	movmi	r3, #32
 800ac16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac1a:	0713      	lsls	r3, r2, #28
 800ac1c:	bf44      	itt	mi
 800ac1e:	232b      	movmi	r3, #43	; 0x2b
 800ac20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac24:	f89a 3000 	ldrb.w	r3, [sl]
 800ac28:	2b2a      	cmp	r3, #42	; 0x2a
 800ac2a:	d015      	beq.n	800ac58 <_vfiprintf_r+0x13c>
 800ac2c:	9a07      	ldr	r2, [sp, #28]
 800ac2e:	4654      	mov	r4, sl
 800ac30:	2000      	movs	r0, #0
 800ac32:	f04f 0c0a 	mov.w	ip, #10
 800ac36:	4621      	mov	r1, r4
 800ac38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac3c:	3b30      	subs	r3, #48	; 0x30
 800ac3e:	2b09      	cmp	r3, #9
 800ac40:	d94e      	bls.n	800ace0 <_vfiprintf_r+0x1c4>
 800ac42:	b1b0      	cbz	r0, 800ac72 <_vfiprintf_r+0x156>
 800ac44:	9207      	str	r2, [sp, #28]
 800ac46:	e014      	b.n	800ac72 <_vfiprintf_r+0x156>
 800ac48:	eba0 0308 	sub.w	r3, r0, r8
 800ac4c:	fa09 f303 	lsl.w	r3, r9, r3
 800ac50:	4313      	orrs	r3, r2
 800ac52:	9304      	str	r3, [sp, #16]
 800ac54:	46a2      	mov	sl, r4
 800ac56:	e7d2      	b.n	800abfe <_vfiprintf_r+0xe2>
 800ac58:	9b03      	ldr	r3, [sp, #12]
 800ac5a:	1d19      	adds	r1, r3, #4
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	9103      	str	r1, [sp, #12]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	bfbb      	ittet	lt
 800ac64:	425b      	neglt	r3, r3
 800ac66:	f042 0202 	orrlt.w	r2, r2, #2
 800ac6a:	9307      	strge	r3, [sp, #28]
 800ac6c:	9307      	strlt	r3, [sp, #28]
 800ac6e:	bfb8      	it	lt
 800ac70:	9204      	strlt	r2, [sp, #16]
 800ac72:	7823      	ldrb	r3, [r4, #0]
 800ac74:	2b2e      	cmp	r3, #46	; 0x2e
 800ac76:	d10c      	bne.n	800ac92 <_vfiprintf_r+0x176>
 800ac78:	7863      	ldrb	r3, [r4, #1]
 800ac7a:	2b2a      	cmp	r3, #42	; 0x2a
 800ac7c:	d135      	bne.n	800acea <_vfiprintf_r+0x1ce>
 800ac7e:	9b03      	ldr	r3, [sp, #12]
 800ac80:	1d1a      	adds	r2, r3, #4
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	9203      	str	r2, [sp, #12]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	bfb8      	it	lt
 800ac8a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac8e:	3402      	adds	r4, #2
 800ac90:	9305      	str	r3, [sp, #20]
 800ac92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ad78 <_vfiprintf_r+0x25c>
 800ac96:	7821      	ldrb	r1, [r4, #0]
 800ac98:	2203      	movs	r2, #3
 800ac9a:	4650      	mov	r0, sl
 800ac9c:	f7f5 faa0 	bl	80001e0 <memchr>
 800aca0:	b140      	cbz	r0, 800acb4 <_vfiprintf_r+0x198>
 800aca2:	2340      	movs	r3, #64	; 0x40
 800aca4:	eba0 000a 	sub.w	r0, r0, sl
 800aca8:	fa03 f000 	lsl.w	r0, r3, r0
 800acac:	9b04      	ldr	r3, [sp, #16]
 800acae:	4303      	orrs	r3, r0
 800acb0:	3401      	adds	r4, #1
 800acb2:	9304      	str	r3, [sp, #16]
 800acb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acb8:	482c      	ldr	r0, [pc, #176]	; (800ad6c <_vfiprintf_r+0x250>)
 800acba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800acbe:	2206      	movs	r2, #6
 800acc0:	f7f5 fa8e 	bl	80001e0 <memchr>
 800acc4:	2800      	cmp	r0, #0
 800acc6:	d03f      	beq.n	800ad48 <_vfiprintf_r+0x22c>
 800acc8:	4b29      	ldr	r3, [pc, #164]	; (800ad70 <_vfiprintf_r+0x254>)
 800acca:	bb1b      	cbnz	r3, 800ad14 <_vfiprintf_r+0x1f8>
 800accc:	9b03      	ldr	r3, [sp, #12]
 800acce:	3307      	adds	r3, #7
 800acd0:	f023 0307 	bic.w	r3, r3, #7
 800acd4:	3308      	adds	r3, #8
 800acd6:	9303      	str	r3, [sp, #12]
 800acd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acda:	443b      	add	r3, r7
 800acdc:	9309      	str	r3, [sp, #36]	; 0x24
 800acde:	e767      	b.n	800abb0 <_vfiprintf_r+0x94>
 800ace0:	fb0c 3202 	mla	r2, ip, r2, r3
 800ace4:	460c      	mov	r4, r1
 800ace6:	2001      	movs	r0, #1
 800ace8:	e7a5      	b.n	800ac36 <_vfiprintf_r+0x11a>
 800acea:	2300      	movs	r3, #0
 800acec:	3401      	adds	r4, #1
 800acee:	9305      	str	r3, [sp, #20]
 800acf0:	4619      	mov	r1, r3
 800acf2:	f04f 0c0a 	mov.w	ip, #10
 800acf6:	4620      	mov	r0, r4
 800acf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acfc:	3a30      	subs	r2, #48	; 0x30
 800acfe:	2a09      	cmp	r2, #9
 800ad00:	d903      	bls.n	800ad0a <_vfiprintf_r+0x1ee>
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d0c5      	beq.n	800ac92 <_vfiprintf_r+0x176>
 800ad06:	9105      	str	r1, [sp, #20]
 800ad08:	e7c3      	b.n	800ac92 <_vfiprintf_r+0x176>
 800ad0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad0e:	4604      	mov	r4, r0
 800ad10:	2301      	movs	r3, #1
 800ad12:	e7f0      	b.n	800acf6 <_vfiprintf_r+0x1da>
 800ad14:	ab03      	add	r3, sp, #12
 800ad16:	9300      	str	r3, [sp, #0]
 800ad18:	462a      	mov	r2, r5
 800ad1a:	4b16      	ldr	r3, [pc, #88]	; (800ad74 <_vfiprintf_r+0x258>)
 800ad1c:	a904      	add	r1, sp, #16
 800ad1e:	4630      	mov	r0, r6
 800ad20:	f7fd fd16 	bl	8008750 <_printf_float>
 800ad24:	4607      	mov	r7, r0
 800ad26:	1c78      	adds	r0, r7, #1
 800ad28:	d1d6      	bne.n	800acd8 <_vfiprintf_r+0x1bc>
 800ad2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad2c:	07d9      	lsls	r1, r3, #31
 800ad2e:	d405      	bmi.n	800ad3c <_vfiprintf_r+0x220>
 800ad30:	89ab      	ldrh	r3, [r5, #12]
 800ad32:	059a      	lsls	r2, r3, #22
 800ad34:	d402      	bmi.n	800ad3c <_vfiprintf_r+0x220>
 800ad36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad38:	f7fd fb52 	bl	80083e0 <__retarget_lock_release_recursive>
 800ad3c:	89ab      	ldrh	r3, [r5, #12]
 800ad3e:	065b      	lsls	r3, r3, #25
 800ad40:	f53f af12 	bmi.w	800ab68 <_vfiprintf_r+0x4c>
 800ad44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad46:	e711      	b.n	800ab6c <_vfiprintf_r+0x50>
 800ad48:	ab03      	add	r3, sp, #12
 800ad4a:	9300      	str	r3, [sp, #0]
 800ad4c:	462a      	mov	r2, r5
 800ad4e:	4b09      	ldr	r3, [pc, #36]	; (800ad74 <_vfiprintf_r+0x258>)
 800ad50:	a904      	add	r1, sp, #16
 800ad52:	4630      	mov	r0, r6
 800ad54:	f7fd ffa0 	bl	8008c98 <_printf_i>
 800ad58:	e7e4      	b.n	800ad24 <_vfiprintf_r+0x208>
 800ad5a:	bf00      	nop
 800ad5c:	0800b370 	.word	0x0800b370
 800ad60:	0800b390 	.word	0x0800b390
 800ad64:	0800b350 	.word	0x0800b350
 800ad68:	0800b5d4 	.word	0x0800b5d4
 800ad6c:	0800b5de 	.word	0x0800b5de
 800ad70:	08008751 	.word	0x08008751
 800ad74:	0800aaf9 	.word	0x0800aaf9
 800ad78:	0800b5da 	.word	0x0800b5da

0800ad7c <__swbuf_r>:
 800ad7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad7e:	460e      	mov	r6, r1
 800ad80:	4614      	mov	r4, r2
 800ad82:	4605      	mov	r5, r0
 800ad84:	b118      	cbz	r0, 800ad8e <__swbuf_r+0x12>
 800ad86:	6983      	ldr	r3, [r0, #24]
 800ad88:	b90b      	cbnz	r3, 800ad8e <__swbuf_r+0x12>
 800ad8a:	f7fd fa65 	bl	8008258 <__sinit>
 800ad8e:	4b21      	ldr	r3, [pc, #132]	; (800ae14 <__swbuf_r+0x98>)
 800ad90:	429c      	cmp	r4, r3
 800ad92:	d12b      	bne.n	800adec <__swbuf_r+0x70>
 800ad94:	686c      	ldr	r4, [r5, #4]
 800ad96:	69a3      	ldr	r3, [r4, #24]
 800ad98:	60a3      	str	r3, [r4, #8]
 800ad9a:	89a3      	ldrh	r3, [r4, #12]
 800ad9c:	071a      	lsls	r2, r3, #28
 800ad9e:	d52f      	bpl.n	800ae00 <__swbuf_r+0x84>
 800ada0:	6923      	ldr	r3, [r4, #16]
 800ada2:	b36b      	cbz	r3, 800ae00 <__swbuf_r+0x84>
 800ada4:	6923      	ldr	r3, [r4, #16]
 800ada6:	6820      	ldr	r0, [r4, #0]
 800ada8:	1ac0      	subs	r0, r0, r3
 800adaa:	6963      	ldr	r3, [r4, #20]
 800adac:	b2f6      	uxtb	r6, r6
 800adae:	4283      	cmp	r3, r0
 800adb0:	4637      	mov	r7, r6
 800adb2:	dc04      	bgt.n	800adbe <__swbuf_r+0x42>
 800adb4:	4621      	mov	r1, r4
 800adb6:	4628      	mov	r0, r5
 800adb8:	f7ff f896 	bl	8009ee8 <_fflush_r>
 800adbc:	bb30      	cbnz	r0, 800ae0c <__swbuf_r+0x90>
 800adbe:	68a3      	ldr	r3, [r4, #8]
 800adc0:	3b01      	subs	r3, #1
 800adc2:	60a3      	str	r3, [r4, #8]
 800adc4:	6823      	ldr	r3, [r4, #0]
 800adc6:	1c5a      	adds	r2, r3, #1
 800adc8:	6022      	str	r2, [r4, #0]
 800adca:	701e      	strb	r6, [r3, #0]
 800adcc:	6963      	ldr	r3, [r4, #20]
 800adce:	3001      	adds	r0, #1
 800add0:	4283      	cmp	r3, r0
 800add2:	d004      	beq.n	800adde <__swbuf_r+0x62>
 800add4:	89a3      	ldrh	r3, [r4, #12]
 800add6:	07db      	lsls	r3, r3, #31
 800add8:	d506      	bpl.n	800ade8 <__swbuf_r+0x6c>
 800adda:	2e0a      	cmp	r6, #10
 800addc:	d104      	bne.n	800ade8 <__swbuf_r+0x6c>
 800adde:	4621      	mov	r1, r4
 800ade0:	4628      	mov	r0, r5
 800ade2:	f7ff f881 	bl	8009ee8 <_fflush_r>
 800ade6:	b988      	cbnz	r0, 800ae0c <__swbuf_r+0x90>
 800ade8:	4638      	mov	r0, r7
 800adea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adec:	4b0a      	ldr	r3, [pc, #40]	; (800ae18 <__swbuf_r+0x9c>)
 800adee:	429c      	cmp	r4, r3
 800adf0:	d101      	bne.n	800adf6 <__swbuf_r+0x7a>
 800adf2:	68ac      	ldr	r4, [r5, #8]
 800adf4:	e7cf      	b.n	800ad96 <__swbuf_r+0x1a>
 800adf6:	4b09      	ldr	r3, [pc, #36]	; (800ae1c <__swbuf_r+0xa0>)
 800adf8:	429c      	cmp	r4, r3
 800adfa:	bf08      	it	eq
 800adfc:	68ec      	ldreq	r4, [r5, #12]
 800adfe:	e7ca      	b.n	800ad96 <__swbuf_r+0x1a>
 800ae00:	4621      	mov	r1, r4
 800ae02:	4628      	mov	r0, r5
 800ae04:	f000 f81a 	bl	800ae3c <__swsetup_r>
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	d0cb      	beq.n	800ada4 <__swbuf_r+0x28>
 800ae0c:	f04f 37ff 	mov.w	r7, #4294967295
 800ae10:	e7ea      	b.n	800ade8 <__swbuf_r+0x6c>
 800ae12:	bf00      	nop
 800ae14:	0800b370 	.word	0x0800b370
 800ae18:	0800b390 	.word	0x0800b390
 800ae1c:	0800b350 	.word	0x0800b350

0800ae20 <__ascii_wctomb>:
 800ae20:	b149      	cbz	r1, 800ae36 <__ascii_wctomb+0x16>
 800ae22:	2aff      	cmp	r2, #255	; 0xff
 800ae24:	bf85      	ittet	hi
 800ae26:	238a      	movhi	r3, #138	; 0x8a
 800ae28:	6003      	strhi	r3, [r0, #0]
 800ae2a:	700a      	strbls	r2, [r1, #0]
 800ae2c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ae30:	bf98      	it	ls
 800ae32:	2001      	movls	r0, #1
 800ae34:	4770      	bx	lr
 800ae36:	4608      	mov	r0, r1
 800ae38:	4770      	bx	lr
	...

0800ae3c <__swsetup_r>:
 800ae3c:	4b32      	ldr	r3, [pc, #200]	; (800af08 <__swsetup_r+0xcc>)
 800ae3e:	b570      	push	{r4, r5, r6, lr}
 800ae40:	681d      	ldr	r5, [r3, #0]
 800ae42:	4606      	mov	r6, r0
 800ae44:	460c      	mov	r4, r1
 800ae46:	b125      	cbz	r5, 800ae52 <__swsetup_r+0x16>
 800ae48:	69ab      	ldr	r3, [r5, #24]
 800ae4a:	b913      	cbnz	r3, 800ae52 <__swsetup_r+0x16>
 800ae4c:	4628      	mov	r0, r5
 800ae4e:	f7fd fa03 	bl	8008258 <__sinit>
 800ae52:	4b2e      	ldr	r3, [pc, #184]	; (800af0c <__swsetup_r+0xd0>)
 800ae54:	429c      	cmp	r4, r3
 800ae56:	d10f      	bne.n	800ae78 <__swsetup_r+0x3c>
 800ae58:	686c      	ldr	r4, [r5, #4]
 800ae5a:	89a3      	ldrh	r3, [r4, #12]
 800ae5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae60:	0719      	lsls	r1, r3, #28
 800ae62:	d42c      	bmi.n	800aebe <__swsetup_r+0x82>
 800ae64:	06dd      	lsls	r5, r3, #27
 800ae66:	d411      	bmi.n	800ae8c <__swsetup_r+0x50>
 800ae68:	2309      	movs	r3, #9
 800ae6a:	6033      	str	r3, [r6, #0]
 800ae6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ae70:	81a3      	strh	r3, [r4, #12]
 800ae72:	f04f 30ff 	mov.w	r0, #4294967295
 800ae76:	e03e      	b.n	800aef6 <__swsetup_r+0xba>
 800ae78:	4b25      	ldr	r3, [pc, #148]	; (800af10 <__swsetup_r+0xd4>)
 800ae7a:	429c      	cmp	r4, r3
 800ae7c:	d101      	bne.n	800ae82 <__swsetup_r+0x46>
 800ae7e:	68ac      	ldr	r4, [r5, #8]
 800ae80:	e7eb      	b.n	800ae5a <__swsetup_r+0x1e>
 800ae82:	4b24      	ldr	r3, [pc, #144]	; (800af14 <__swsetup_r+0xd8>)
 800ae84:	429c      	cmp	r4, r3
 800ae86:	bf08      	it	eq
 800ae88:	68ec      	ldreq	r4, [r5, #12]
 800ae8a:	e7e6      	b.n	800ae5a <__swsetup_r+0x1e>
 800ae8c:	0758      	lsls	r0, r3, #29
 800ae8e:	d512      	bpl.n	800aeb6 <__swsetup_r+0x7a>
 800ae90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae92:	b141      	cbz	r1, 800aea6 <__swsetup_r+0x6a>
 800ae94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae98:	4299      	cmp	r1, r3
 800ae9a:	d002      	beq.n	800aea2 <__swsetup_r+0x66>
 800ae9c:	4630      	mov	r0, r6
 800ae9e:	f7fd fad7 	bl	8008450 <_free_r>
 800aea2:	2300      	movs	r3, #0
 800aea4:	6363      	str	r3, [r4, #52]	; 0x34
 800aea6:	89a3      	ldrh	r3, [r4, #12]
 800aea8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aeac:	81a3      	strh	r3, [r4, #12]
 800aeae:	2300      	movs	r3, #0
 800aeb0:	6063      	str	r3, [r4, #4]
 800aeb2:	6923      	ldr	r3, [r4, #16]
 800aeb4:	6023      	str	r3, [r4, #0]
 800aeb6:	89a3      	ldrh	r3, [r4, #12]
 800aeb8:	f043 0308 	orr.w	r3, r3, #8
 800aebc:	81a3      	strh	r3, [r4, #12]
 800aebe:	6923      	ldr	r3, [r4, #16]
 800aec0:	b94b      	cbnz	r3, 800aed6 <__swsetup_r+0x9a>
 800aec2:	89a3      	ldrh	r3, [r4, #12]
 800aec4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aecc:	d003      	beq.n	800aed6 <__swsetup_r+0x9a>
 800aece:	4621      	mov	r1, r4
 800aed0:	4630      	mov	r0, r6
 800aed2:	f000 f84d 	bl	800af70 <__smakebuf_r>
 800aed6:	89a0      	ldrh	r0, [r4, #12]
 800aed8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aedc:	f010 0301 	ands.w	r3, r0, #1
 800aee0:	d00a      	beq.n	800aef8 <__swsetup_r+0xbc>
 800aee2:	2300      	movs	r3, #0
 800aee4:	60a3      	str	r3, [r4, #8]
 800aee6:	6963      	ldr	r3, [r4, #20]
 800aee8:	425b      	negs	r3, r3
 800aeea:	61a3      	str	r3, [r4, #24]
 800aeec:	6923      	ldr	r3, [r4, #16]
 800aeee:	b943      	cbnz	r3, 800af02 <__swsetup_r+0xc6>
 800aef0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aef4:	d1ba      	bne.n	800ae6c <__swsetup_r+0x30>
 800aef6:	bd70      	pop	{r4, r5, r6, pc}
 800aef8:	0781      	lsls	r1, r0, #30
 800aefa:	bf58      	it	pl
 800aefc:	6963      	ldrpl	r3, [r4, #20]
 800aefe:	60a3      	str	r3, [r4, #8]
 800af00:	e7f4      	b.n	800aeec <__swsetup_r+0xb0>
 800af02:	2000      	movs	r0, #0
 800af04:	e7f7      	b.n	800aef6 <__swsetup_r+0xba>
 800af06:	bf00      	nop
 800af08:	20000010 	.word	0x20000010
 800af0c:	0800b370 	.word	0x0800b370
 800af10:	0800b390 	.word	0x0800b390
 800af14:	0800b350 	.word	0x0800b350

0800af18 <abort>:
 800af18:	b508      	push	{r3, lr}
 800af1a:	2006      	movs	r0, #6
 800af1c:	f000 f898 	bl	800b050 <raise>
 800af20:	2001      	movs	r0, #1
 800af22:	f7f6 f9fd 	bl	8001320 <_exit>

0800af26 <__swhatbuf_r>:
 800af26:	b570      	push	{r4, r5, r6, lr}
 800af28:	460e      	mov	r6, r1
 800af2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af2e:	2900      	cmp	r1, #0
 800af30:	b096      	sub	sp, #88	; 0x58
 800af32:	4614      	mov	r4, r2
 800af34:	461d      	mov	r5, r3
 800af36:	da08      	bge.n	800af4a <__swhatbuf_r+0x24>
 800af38:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800af3c:	2200      	movs	r2, #0
 800af3e:	602a      	str	r2, [r5, #0]
 800af40:	061a      	lsls	r2, r3, #24
 800af42:	d410      	bmi.n	800af66 <__swhatbuf_r+0x40>
 800af44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af48:	e00e      	b.n	800af68 <__swhatbuf_r+0x42>
 800af4a:	466a      	mov	r2, sp
 800af4c:	f000 f89c 	bl	800b088 <_fstat_r>
 800af50:	2800      	cmp	r0, #0
 800af52:	dbf1      	blt.n	800af38 <__swhatbuf_r+0x12>
 800af54:	9a01      	ldr	r2, [sp, #4]
 800af56:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800af5a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800af5e:	425a      	negs	r2, r3
 800af60:	415a      	adcs	r2, r3
 800af62:	602a      	str	r2, [r5, #0]
 800af64:	e7ee      	b.n	800af44 <__swhatbuf_r+0x1e>
 800af66:	2340      	movs	r3, #64	; 0x40
 800af68:	2000      	movs	r0, #0
 800af6a:	6023      	str	r3, [r4, #0]
 800af6c:	b016      	add	sp, #88	; 0x58
 800af6e:	bd70      	pop	{r4, r5, r6, pc}

0800af70 <__smakebuf_r>:
 800af70:	898b      	ldrh	r3, [r1, #12]
 800af72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af74:	079d      	lsls	r5, r3, #30
 800af76:	4606      	mov	r6, r0
 800af78:	460c      	mov	r4, r1
 800af7a:	d507      	bpl.n	800af8c <__smakebuf_r+0x1c>
 800af7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af80:	6023      	str	r3, [r4, #0]
 800af82:	6123      	str	r3, [r4, #16]
 800af84:	2301      	movs	r3, #1
 800af86:	6163      	str	r3, [r4, #20]
 800af88:	b002      	add	sp, #8
 800af8a:	bd70      	pop	{r4, r5, r6, pc}
 800af8c:	ab01      	add	r3, sp, #4
 800af8e:	466a      	mov	r2, sp
 800af90:	f7ff ffc9 	bl	800af26 <__swhatbuf_r>
 800af94:	9900      	ldr	r1, [sp, #0]
 800af96:	4605      	mov	r5, r0
 800af98:	4630      	mov	r0, r6
 800af9a:	f7fd fac5 	bl	8008528 <_malloc_r>
 800af9e:	b948      	cbnz	r0, 800afb4 <__smakebuf_r+0x44>
 800afa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afa4:	059a      	lsls	r2, r3, #22
 800afa6:	d4ef      	bmi.n	800af88 <__smakebuf_r+0x18>
 800afa8:	f023 0303 	bic.w	r3, r3, #3
 800afac:	f043 0302 	orr.w	r3, r3, #2
 800afb0:	81a3      	strh	r3, [r4, #12]
 800afb2:	e7e3      	b.n	800af7c <__smakebuf_r+0xc>
 800afb4:	4b0d      	ldr	r3, [pc, #52]	; (800afec <__smakebuf_r+0x7c>)
 800afb6:	62b3      	str	r3, [r6, #40]	; 0x28
 800afb8:	89a3      	ldrh	r3, [r4, #12]
 800afba:	6020      	str	r0, [r4, #0]
 800afbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afc0:	81a3      	strh	r3, [r4, #12]
 800afc2:	9b00      	ldr	r3, [sp, #0]
 800afc4:	6163      	str	r3, [r4, #20]
 800afc6:	9b01      	ldr	r3, [sp, #4]
 800afc8:	6120      	str	r0, [r4, #16]
 800afca:	b15b      	cbz	r3, 800afe4 <__smakebuf_r+0x74>
 800afcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afd0:	4630      	mov	r0, r6
 800afd2:	f000 f86b 	bl	800b0ac <_isatty_r>
 800afd6:	b128      	cbz	r0, 800afe4 <__smakebuf_r+0x74>
 800afd8:	89a3      	ldrh	r3, [r4, #12]
 800afda:	f023 0303 	bic.w	r3, r3, #3
 800afde:	f043 0301 	orr.w	r3, r3, #1
 800afe2:	81a3      	strh	r3, [r4, #12]
 800afe4:	89a0      	ldrh	r0, [r4, #12]
 800afe6:	4305      	orrs	r5, r0
 800afe8:	81a5      	strh	r5, [r4, #12]
 800afea:	e7cd      	b.n	800af88 <__smakebuf_r+0x18>
 800afec:	080081f1 	.word	0x080081f1

0800aff0 <_malloc_usable_size_r>:
 800aff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aff4:	1f18      	subs	r0, r3, #4
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	bfbc      	itt	lt
 800affa:	580b      	ldrlt	r3, [r1, r0]
 800affc:	18c0      	addlt	r0, r0, r3
 800affe:	4770      	bx	lr

0800b000 <_raise_r>:
 800b000:	291f      	cmp	r1, #31
 800b002:	b538      	push	{r3, r4, r5, lr}
 800b004:	4604      	mov	r4, r0
 800b006:	460d      	mov	r5, r1
 800b008:	d904      	bls.n	800b014 <_raise_r+0x14>
 800b00a:	2316      	movs	r3, #22
 800b00c:	6003      	str	r3, [r0, #0]
 800b00e:	f04f 30ff 	mov.w	r0, #4294967295
 800b012:	bd38      	pop	{r3, r4, r5, pc}
 800b014:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b016:	b112      	cbz	r2, 800b01e <_raise_r+0x1e>
 800b018:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b01c:	b94b      	cbnz	r3, 800b032 <_raise_r+0x32>
 800b01e:	4620      	mov	r0, r4
 800b020:	f000 f830 	bl	800b084 <_getpid_r>
 800b024:	462a      	mov	r2, r5
 800b026:	4601      	mov	r1, r0
 800b028:	4620      	mov	r0, r4
 800b02a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b02e:	f000 b817 	b.w	800b060 <_kill_r>
 800b032:	2b01      	cmp	r3, #1
 800b034:	d00a      	beq.n	800b04c <_raise_r+0x4c>
 800b036:	1c59      	adds	r1, r3, #1
 800b038:	d103      	bne.n	800b042 <_raise_r+0x42>
 800b03a:	2316      	movs	r3, #22
 800b03c:	6003      	str	r3, [r0, #0]
 800b03e:	2001      	movs	r0, #1
 800b040:	e7e7      	b.n	800b012 <_raise_r+0x12>
 800b042:	2400      	movs	r4, #0
 800b044:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b048:	4628      	mov	r0, r5
 800b04a:	4798      	blx	r3
 800b04c:	2000      	movs	r0, #0
 800b04e:	e7e0      	b.n	800b012 <_raise_r+0x12>

0800b050 <raise>:
 800b050:	4b02      	ldr	r3, [pc, #8]	; (800b05c <raise+0xc>)
 800b052:	4601      	mov	r1, r0
 800b054:	6818      	ldr	r0, [r3, #0]
 800b056:	f7ff bfd3 	b.w	800b000 <_raise_r>
 800b05a:	bf00      	nop
 800b05c:	20000010 	.word	0x20000010

0800b060 <_kill_r>:
 800b060:	b538      	push	{r3, r4, r5, lr}
 800b062:	4d07      	ldr	r5, [pc, #28]	; (800b080 <_kill_r+0x20>)
 800b064:	2300      	movs	r3, #0
 800b066:	4604      	mov	r4, r0
 800b068:	4608      	mov	r0, r1
 800b06a:	4611      	mov	r1, r2
 800b06c:	602b      	str	r3, [r5, #0]
 800b06e:	f7f6 f947 	bl	8001300 <_kill>
 800b072:	1c43      	adds	r3, r0, #1
 800b074:	d102      	bne.n	800b07c <_kill_r+0x1c>
 800b076:	682b      	ldr	r3, [r5, #0]
 800b078:	b103      	cbz	r3, 800b07c <_kill_r+0x1c>
 800b07a:	6023      	str	r3, [r4, #0]
 800b07c:	bd38      	pop	{r3, r4, r5, pc}
 800b07e:	bf00      	nop
 800b080:	2000b614 	.word	0x2000b614

0800b084 <_getpid_r>:
 800b084:	f7f6 b934 	b.w	80012f0 <_getpid>

0800b088 <_fstat_r>:
 800b088:	b538      	push	{r3, r4, r5, lr}
 800b08a:	4d07      	ldr	r5, [pc, #28]	; (800b0a8 <_fstat_r+0x20>)
 800b08c:	2300      	movs	r3, #0
 800b08e:	4604      	mov	r4, r0
 800b090:	4608      	mov	r0, r1
 800b092:	4611      	mov	r1, r2
 800b094:	602b      	str	r3, [r5, #0]
 800b096:	f7f6 f992 	bl	80013be <_fstat>
 800b09a:	1c43      	adds	r3, r0, #1
 800b09c:	d102      	bne.n	800b0a4 <_fstat_r+0x1c>
 800b09e:	682b      	ldr	r3, [r5, #0]
 800b0a0:	b103      	cbz	r3, 800b0a4 <_fstat_r+0x1c>
 800b0a2:	6023      	str	r3, [r4, #0]
 800b0a4:	bd38      	pop	{r3, r4, r5, pc}
 800b0a6:	bf00      	nop
 800b0a8:	2000b614 	.word	0x2000b614

0800b0ac <_isatty_r>:
 800b0ac:	b538      	push	{r3, r4, r5, lr}
 800b0ae:	4d06      	ldr	r5, [pc, #24]	; (800b0c8 <_isatty_r+0x1c>)
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	4604      	mov	r4, r0
 800b0b4:	4608      	mov	r0, r1
 800b0b6:	602b      	str	r3, [r5, #0]
 800b0b8:	f7f6 f991 	bl	80013de <_isatty>
 800b0bc:	1c43      	adds	r3, r0, #1
 800b0be:	d102      	bne.n	800b0c6 <_isatty_r+0x1a>
 800b0c0:	682b      	ldr	r3, [r5, #0]
 800b0c2:	b103      	cbz	r3, 800b0c6 <_isatty_r+0x1a>
 800b0c4:	6023      	str	r3, [r4, #0]
 800b0c6:	bd38      	pop	{r3, r4, r5, pc}
 800b0c8:	2000b614 	.word	0x2000b614

0800b0cc <_init>:
 800b0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ce:	bf00      	nop
 800b0d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0d2:	bc08      	pop	{r3}
 800b0d4:	469e      	mov	lr, r3
 800b0d6:	4770      	bx	lr

0800b0d8 <_fini>:
 800b0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0da:	bf00      	nop
 800b0dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0de:	bc08      	pop	{r3}
 800b0e0:	469e      	mov	lr, r3
 800b0e2:	4770      	bx	lr
