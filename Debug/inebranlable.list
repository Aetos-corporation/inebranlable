
inebranlable.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005bc  0800aca8  0800aca8  0001aca8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b264  0800b264  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b264  0800b264  0001b264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b26c  0800b26c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b26c  0800b26c  0001b26c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b270  0800b270  0001b270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019f0  200001e0  0800b454  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001bd0  0800b454  00021bd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d439  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004475  00000000  00000000  0003d649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a8  00000000  00000000  00041ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015d0  00000000  00000000  00043268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002540b  00000000  00000000  00044838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000200c5  00000000  00000000  00069c43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d678f  00000000  00000000  00089d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00160497  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071dc  00000000  00000000  001604e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ac8c 	.word	0x0800ac8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800ac8c 	.word	0x0800ac8c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ebc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	4a06      	ldr	r2, [pc, #24]	; (8000edc <vApplicationGetIdleTaskMemory+0x30>)
 8000ec2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2280      	movs	r2, #128	; 0x80
 8000ec8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	200009b8 	.word	0x200009b8
 8000edc:	20000a6c 	.word	0x20000a6c

08000ee0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ee0:	b5b0      	push	{r4, r5, r7, lr}
 8000ee2:	b090      	sub	sp, #64	; 0x40
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of traceMutex */
  osMutexStaticDef(traceMutex, &traceMutexControlBlock);
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	63bb      	str	r3, [r7, #56]	; 0x38
 8000eea:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <MX_FREERTOS_Init+0x80>)
 8000eec:	63fb      	str	r3, [r7, #60]	; 0x3c
  traceMutexHandle = osMutexCreate(osMutex(traceMutex));
 8000eee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f004 fb4b 	bl	800558e <osMutexCreate>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	4a1a      	ldr	r2, [pc, #104]	; (8000f64 <MX_FREERTOS_Init+0x84>)
 8000efc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_MUTEX */
  osMutexRelease(traceMutexHandle);
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <MX_FREERTOS_Init+0x84>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f004 fbaa 	bl	800565c <osMutexRelease>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of blinkTask */
  osThreadStaticDef(blinkTask, StartBlinkTask, osPriorityIdle, 0, 128, blinkTaskBuffer, &blinkTaskControlBlock);
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <MX_FREERTOS_Init+0x88>)
 8000f0a:	f107 041c 	add.w	r4, r7, #28
 8000f0e:	461d      	mov	r5, r3
 8000f10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  blinkTaskHandle = osThreadCreate(osThread(blinkTask), NULL);
 8000f1c:	f107 031c 	add.w	r3, r7, #28
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f004 fad3 	bl	80054ce <osThreadCreate>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4a10      	ldr	r2, [pc, #64]	; (8000f6c <MX_FREERTOS_Init+0x8c>)
 8000f2c:	6013      	str	r3, [r2, #0]

  /* definition and creation of xbeeTask */
  osThreadStaticDef(xbeeTask, StartXbeeTask, osPriorityNormal, 0, 256, XbeeTaskBuffer, &XbeeTaskControlBlock);
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <MX_FREERTOS_Init+0x90>)
 8000f30:	463c      	mov	r4, r7
 8000f32:	461d      	mov	r5, r3
 8000f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  xbeeTaskHandle = osThreadCreate(osThread(xbeeTask), NULL);
 8000f40:	463b      	mov	r3, r7
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f004 fac2 	bl	80054ce <osThreadCreate>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	4a09      	ldr	r2, [pc, #36]	; (8000f74 <MX_FREERTOS_Init+0x94>)
 8000f4e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  PRINT("\n\n\033[2J\033[H/---- StartUp ----/\n\n");
 8000f50:	4809      	ldr	r0, [pc, #36]	; (8000f78 <MX_FREERTOS_Init+0x98>)
 8000f52:	f000 fabb 	bl	80014cc <PRINT>
  /* USER CODE END RTOS_THREADS */

}
 8000f56:	bf00      	nop
 8000f58:	3740      	adds	r7, #64	; 0x40
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000970 	.word	0x20000970
 8000f64:	2000096c 	.word	0x2000096c
 8000f68:	0800ace0 	.word	0x0800ace0
 8000f6c:	200001fc 	.word	0x200001fc
 8000f70:	0800acfc 	.word	0x0800acfc
 8000f74:	200004b4 	.word	0x200004b4
 8000f78:	0800acc0 	.word	0x0800acc0

08000f7c <StartBlinkTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlinkTask */
void StartBlinkTask(void const * argument)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkTask */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000f84:	2108      	movs	r1, #8
 8000f86:	480e      	ldr	r0, [pc, #56]	; (8000fc0 <StartBlinkTask+0x44>)
 8000f88:	f000 ff60 	bl	8001e4c <HAL_GPIO_TogglePin>
    osDelay(100);
 8000f8c:	2064      	movs	r0, #100	; 0x64
 8000f8e:	f004 faea 	bl	8005566 <osDelay>
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000f92:	2108      	movs	r1, #8
 8000f94:	480a      	ldr	r0, [pc, #40]	; (8000fc0 <StartBlinkTask+0x44>)
 8000f96:	f000 ff59 	bl	8001e4c <HAL_GPIO_TogglePin>
    osDelay(100);
 8000f9a:	2064      	movs	r0, #100	; 0x64
 8000f9c:	f004 fae3 	bl	8005566 <osDelay>
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000fa0:	2108      	movs	r1, #8
 8000fa2:	4807      	ldr	r0, [pc, #28]	; (8000fc0 <StartBlinkTask+0x44>)
 8000fa4:	f000 ff52 	bl	8001e4c <HAL_GPIO_TogglePin>
    osDelay(100);
 8000fa8:	2064      	movs	r0, #100	; 0x64
 8000faa:	f004 fadc 	bl	8005566 <osDelay>
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000fae:	2108      	movs	r1, #8
 8000fb0:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <StartBlinkTask+0x44>)
 8000fb2:	f000 ff4b 	bl	8001e4c <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000fb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fba:	f004 fad4 	bl	8005566 <osDelay>
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000fbe:	e7e1      	b.n	8000f84 <StartBlinkTask+0x8>
 8000fc0:	48000400 	.word	0x48000400

08000fc4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fda:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <MX_GPIO_Init+0x8c>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	4a1c      	ldr	r2, [pc, #112]	; (8001050 <MX_GPIO_Init+0x8c>)
 8000fe0:	f043 0304 	orr.w	r3, r3, #4
 8000fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <MX_GPIO_Init+0x8c>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	f003 0304 	and.w	r3, r3, #4
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff2:	4b17      	ldr	r3, [pc, #92]	; (8001050 <MX_GPIO_Init+0x8c>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	4a16      	ldr	r2, [pc, #88]	; (8001050 <MX_GPIO_Init+0x8c>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <MX_GPIO_Init+0x8c>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <MX_GPIO_Init+0x8c>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	4a10      	ldr	r2, [pc, #64]	; (8001050 <MX_GPIO_Init+0x8c>)
 8001010:	f043 0302 	orr.w	r3, r3, #2
 8001014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <MX_GPIO_Init+0x8c>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	2108      	movs	r1, #8
 8001026:	480b      	ldr	r0, [pc, #44]	; (8001054 <MX_GPIO_Init+0x90>)
 8001028:	f000 fef8 	bl	8001e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800102c:	2308      	movs	r3, #8
 800102e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	2301      	movs	r3, #1
 8001032:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	4619      	mov	r1, r3
 8001042:	4804      	ldr	r0, [pc, #16]	; (8001054 <MX_GPIO_Init+0x90>)
 8001044:	f000 fd80 	bl	8001b48 <HAL_GPIO_Init>

}
 8001048:	bf00      	nop
 800104a:	3720      	adds	r7, #32
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40021000 	.word	0x40021000
 8001054:	48000400 	.word	0x48000400

08001058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105c:	f000 fbd9 	bl	8001812 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001060:	f000 f80c 	bl	800107c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001064:	f7ff ffae 	bl	8000fc4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001068:	f000 faa4 	bl	80015b4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800106c:	f000 fa72 	bl	8001554 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001070:	f7ff ff36 	bl	8000ee0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001074:	f004 fa24 	bl	80054c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001078:	e7fe      	b.n	8001078 <main+0x20>
	...

0800107c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b096      	sub	sp, #88	; 0x58
 8001080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	2244      	movs	r2, #68	; 0x44
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f006 ffaf 	bl	8007fee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001090:	463b      	mov	r3, r7
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800109e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010a2:	f000 ff0b 	bl	8001ebc <HAL_PWREx_ControlVoltageScaling>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010ac:	f000 f85a 	bl	8001164 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010b0:	f000 fee6 	bl	8001e80 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010b4:	4b21      	ldr	r3, [pc, #132]	; (800113c <SystemClock_Config+0xc0>)
 80010b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010ba:	4a20      	ldr	r2, [pc, #128]	; (800113c <SystemClock_Config+0xc0>)
 80010bc:	f023 0318 	bic.w	r3, r3, #24
 80010c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80010c4:	2314      	movs	r3, #20
 80010c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010c8:	2301      	movs	r3, #1
 80010ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010cc:	2301      	movs	r3, #1
 80010ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010d4:	2360      	movs	r3, #96	; 0x60
 80010d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d8:	2302      	movs	r3, #2
 80010da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010dc:	2301      	movs	r3, #1
 80010de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010e0:	2301      	movs	r3, #1
 80010e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80010e4:	2328      	movs	r3, #40	; 0x28
 80010e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010e8:	2307      	movs	r3, #7
 80010ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010f0:	2302      	movs	r3, #2
 80010f2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 ff35 	bl	8001f68 <HAL_RCC_OscConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001104:	f000 f82e 	bl	8001164 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001108:	230f      	movs	r3, #15
 800110a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800110c:	2303      	movs	r3, #3
 800110e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800111c:	463b      	mov	r3, r7
 800111e:	2104      	movs	r1, #4
 8001120:	4618      	mov	r0, r3
 8001122:	f001 fb35 	bl	8002790 <HAL_RCC_ClockConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800112c:	f000 f81a 	bl	8001164 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001130:	f001 ff7a 	bl	8003028 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001134:	bf00      	nop
 8001136:	3758      	adds	r7, #88	; 0x58
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40021000 	.word	0x40021000

08001140 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a04      	ldr	r2, [pc, #16]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d101      	bne.n	8001156 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001152:	f000 fb77 	bl	8001844 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40001000 	.word	0x40001000

08001164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001168:	b672      	cpsid	i
}
 800116a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800116c:	e7fe      	b.n	800116c <Error_Handler+0x8>
	...

08001170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001176:	4b11      	ldr	r3, [pc, #68]	; (80011bc <HAL_MspInit+0x4c>)
 8001178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800117a:	4a10      	ldr	r2, [pc, #64]	; (80011bc <HAL_MspInit+0x4c>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6613      	str	r3, [r2, #96]	; 0x60
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <HAL_MspInit+0x4c>)
 8001184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <HAL_MspInit+0x4c>)
 8001190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001192:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <HAL_MspInit+0x4c>)
 8001194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001198:	6593      	str	r3, [r2, #88]	; 0x58
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <HAL_MspInit+0x4c>)
 800119c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a2:	603b      	str	r3, [r7, #0]
 80011a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	210f      	movs	r1, #15
 80011aa:	f06f 0001 	mvn.w	r0, #1
 80011ae:	f000 fc21 	bl	80019f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40021000 	.word	0x40021000

080011c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08c      	sub	sp, #48	; 0x30
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80011d0:	2200      	movs	r2, #0
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	2036      	movs	r0, #54	; 0x36
 80011d6:	f000 fc0d 	bl	80019f4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011da:	2036      	movs	r0, #54	; 0x36
 80011dc:	f000 fc26 	bl	8001a2c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011e0:	4b1e      	ldr	r3, [pc, #120]	; (800125c <HAL_InitTick+0x9c>)
 80011e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e4:	4a1d      	ldr	r2, [pc, #116]	; (800125c <HAL_InitTick+0x9c>)
 80011e6:	f043 0310 	orr.w	r3, r3, #16
 80011ea:	6593      	str	r3, [r2, #88]	; 0x58
 80011ec:	4b1b      	ldr	r3, [pc, #108]	; (800125c <HAL_InitTick+0x9c>)
 80011ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f0:	f003 0310 	and.w	r3, r3, #16
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011f8:	f107 0210 	add.w	r2, r7, #16
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4611      	mov	r1, r2
 8001202:	4618      	mov	r0, r3
 8001204:	f001 fc88 	bl	8002b18 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001208:	f001 fc5a 	bl	8002ac0 <HAL_RCC_GetPCLK1Freq>
 800120c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800120e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001210:	4a13      	ldr	r2, [pc, #76]	; (8001260 <HAL_InitTick+0xa0>)
 8001212:	fba2 2303 	umull	r2, r3, r2, r3
 8001216:	0c9b      	lsrs	r3, r3, #18
 8001218:	3b01      	subs	r3, #1
 800121a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800121c:	4b11      	ldr	r3, [pc, #68]	; (8001264 <HAL_InitTick+0xa4>)
 800121e:	4a12      	ldr	r2, [pc, #72]	; (8001268 <HAL_InitTick+0xa8>)
 8001220:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <HAL_InitTick+0xa4>)
 8001224:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001228:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800122a:	4a0e      	ldr	r2, [pc, #56]	; (8001264 <HAL_InitTick+0xa4>)
 800122c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800122e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <HAL_InitTick+0xa4>)
 8001232:	2200      	movs	r2, #0
 8001234:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001236:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <HAL_InitTick+0xa4>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800123c:	4809      	ldr	r0, [pc, #36]	; (8001264 <HAL_InitTick+0xa4>)
 800123e:	f001 fff5 	bl	800322c <HAL_TIM_Base_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d104      	bne.n	8001252 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001248:	4806      	ldr	r0, [pc, #24]	; (8001264 <HAL_InitTick+0xa4>)
 800124a:	f002 f851 	bl	80032f0 <HAL_TIM_Base_Start_IT>
 800124e:	4603      	mov	r3, r0
 8001250:	e000      	b.n	8001254 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
}
 8001254:	4618      	mov	r0, r3
 8001256:	3730      	adds	r7, #48	; 0x30
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40021000 	.word	0x40021000
 8001260:	431bde83 	.word	0x431bde83
 8001264:	20000c6c 	.word	0x20000c6c
 8001268:	40001000 	.word	0x40001000

0800126c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <NMI_Handler+0x4>

08001272 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001276:	e7fe      	b.n	8001276 <HardFault_Handler+0x4>

08001278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800127c:	e7fe      	b.n	800127c <MemManage_Handler+0x4>

0800127e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001282:	e7fe      	b.n	8001282 <BusFault_Handler+0x4>

08001284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <UsageFault_Handler+0x4>

0800128a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800129c:	4802      	ldr	r0, [pc, #8]	; (80012a8 <USART1_IRQHandler+0x10>)
 800129e:	f002 fb7d 	bl	800399c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000cc0 	.word	0x20000cc0

080012ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012b0:	4802      	ldr	r0, [pc, #8]	; (80012bc <USART2_IRQHandler+0x10>)
 80012b2:	f002 fb73 	bl	800399c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000d44 	.word	0x20000d44

080012c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012c4:	4802      	ldr	r0, [pc, #8]	; (80012d0 <TIM6_DAC_IRQHandler+0x10>)
 80012c6:	f002 f867 	bl	8003398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000c6c 	.word	0x20000c6c

080012d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
	return 1;
 80012d8:	2301      	movs	r3, #1
}
 80012da:	4618      	mov	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <_kill>:

int _kill(int pid, int sig)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80012ee:	f006 fd3d 	bl	8007d6c <__errno>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2216      	movs	r2, #22
 80012f6:	601a      	str	r2, [r3, #0]
	return -1;
 80012f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <_exit>:

void _exit (int status)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800130c:	f04f 31ff 	mov.w	r1, #4294967295
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff ffe7 	bl	80012e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001316:	e7fe      	b.n	8001316 <_exit+0x12>

08001318 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
 8001328:	e00a      	b.n	8001340 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800132a:	f3af 8000 	nop.w
 800132e:	4601      	mov	r1, r0
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	1c5a      	adds	r2, r3, #1
 8001334:	60ba      	str	r2, [r7, #8]
 8001336:	b2ca      	uxtb	r2, r1
 8001338:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	3301      	adds	r3, #1
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	697a      	ldr	r2, [r7, #20]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	429a      	cmp	r2, r3
 8001346:	dbf0      	blt.n	800132a <_read+0x12>
	}

return len;
 8001348:	687b      	ldr	r3, [r7, #4]
}
 800134a:	4618      	mov	r0, r3
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b086      	sub	sp, #24
 8001356:	af00      	add	r7, sp, #0
 8001358:	60f8      	str	r0, [r7, #12]
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	e009      	b.n	8001378 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	1c5a      	adds	r2, r3, #1
 8001368:	60ba      	str	r2, [r7, #8]
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	3301      	adds	r3, #1
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	697a      	ldr	r2, [r7, #20]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	429a      	cmp	r2, r3
 800137e:	dbf1      	blt.n	8001364 <_write+0x12>
	}
	return len;
 8001380:	687b      	ldr	r3, [r7, #4]
}
 8001382:	4618      	mov	r0, r3
 8001384:	3718      	adds	r7, #24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <_close>:

int _close(int file)
{
 800138a:	b480      	push	{r7}
 800138c:	b083      	sub	sp, #12
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
	return -1;
 8001392:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001396:	4618      	mov	r0, r3
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
 80013aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013b2:	605a      	str	r2, [r3, #4]
	return 0;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <_isatty>:

int _isatty(int file)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
	return 1;
 80013ca:	2301      	movs	r3, #1
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
	return 0;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013fc:	4a14      	ldr	r2, [pc, #80]	; (8001450 <_sbrk+0x5c>)
 80013fe:	4b15      	ldr	r3, [pc, #84]	; (8001454 <_sbrk+0x60>)
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001408:	4b13      	ldr	r3, [pc, #76]	; (8001458 <_sbrk+0x64>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d102      	bne.n	8001416 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <_sbrk+0x64>)
 8001412:	4a12      	ldr	r2, [pc, #72]	; (800145c <_sbrk+0x68>)
 8001414:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <_sbrk+0x64>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	429a      	cmp	r2, r3
 8001422:	d207      	bcs.n	8001434 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001424:	f006 fca2 	bl	8007d6c <__errno>
 8001428:	4603      	mov	r3, r0
 800142a:	220c      	movs	r2, #12
 800142c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800142e:	f04f 33ff 	mov.w	r3, #4294967295
 8001432:	e009      	b.n	8001448 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <_sbrk+0x64>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800143a:	4b07      	ldr	r3, [pc, #28]	; (8001458 <_sbrk+0x64>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	4a05      	ldr	r2, [pc, #20]	; (8001458 <_sbrk+0x64>)
 8001444:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001446:	68fb      	ldr	r3, [r7, #12]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3718      	adds	r7, #24
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20010000 	.word	0x20010000
 8001454:	00000400 	.word	0x00000400
 8001458:	20000cb8 	.word	0x20000cb8
 800145c:	20001bd0 	.word	0x20001bd0

08001460 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <SystemInit+0x20>)
 8001466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800146a:	4a05      	ldr	r2, [pc, #20]	; (8001480 <SystemInit+0x20>)
 800146c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001470:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <vprint>:
#include "cmsis_os.h"

extern osMutexId traceMutexHandle;

void vprint(const char *fmt, va_list argp)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b0b4      	sub	sp, #208	; 0xd0
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string,fmt,argp)) // build string
 800148e:	f107 0308 	add.w	r3, r7, #8
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	6879      	ldr	r1, [r7, #4]
 8001496:	4618      	mov	r0, r3
 8001498:	f007 fb84 	bl	8008ba4 <vsiprintf>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	dd0d      	ble.n	80014be <vprint+0x3a>
    {
        HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
 80014a2:	f107 0308 	add.w	r3, r7, #8
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7fe fe92 	bl	80001d0 <strlen>
 80014ac:	4603      	mov	r3, r0
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	f107 0108 	add.w	r1, r7, #8
 80014b4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80014b8:	4803      	ldr	r0, [pc, #12]	; (80014c8 <vprint+0x44>)
 80014ba:	f002 f985 	bl	80037c8 <HAL_UART_Transmit>
    }
}
 80014be:	bf00      	nop
 80014c0:	37d0      	adds	r7, #208	; 0xd0
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000d44 	.word	0x20000d44

080014cc <PRINT>:

void PRINT(const char *fmt, ...) // custom printf() function
{
 80014cc:	b40f      	push	{r0, r1, r2, r3}
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
	va_list argp;

	if( osMutexWait(traceMutexHandle, 0) != osOK)
 80014d4:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <PRINT+0x44>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f004 f870 	bl	80055c0 <osMutexWait>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10c      	bne.n	8001500 <PRINT+0x34>
		return;

    va_start(argp, fmt);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	607b      	str	r3, [r7, #4]
    vprint(fmt, argp);
 80014ec:	6879      	ldr	r1, [r7, #4]
 80014ee:	6938      	ldr	r0, [r7, #16]
 80014f0:	f7ff ffc8 	bl	8001484 <vprint>
    va_end(argp);

	osMutexRelease(traceMutexHandle);
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <PRINT+0x44>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f004 f8af 	bl	800565c <osMutexRelease>
 80014fe:	e000      	b.n	8001502 <PRINT+0x36>
		return;
 8001500:	bf00      	nop
}
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800150a:	b004      	add	sp, #16
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	2000096c 	.word	0x2000096c

08001514 <u2pt_StartReceive>:
#include "xbee.h"

static uint8_t rxByte;

void u2pt_StartReceive(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 8001518:	2201      	movs	r2, #1
 800151a:	4903      	ldr	r1, [pc, #12]	; (8001528 <u2pt_StartReceive+0x14>)
 800151c:	4803      	ldr	r0, [pc, #12]	; (800152c <u2pt_StartReceive+0x18>)
 800151e:	f002 f9e7 	bl	80038f0 <HAL_UART_Receive_IT>
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000cbc 	.word	0x20000cbc
 800152c:	20000d44 	.word	0x20000d44

08001530 <u2pt_rxCallback>:
{
	HAL_UART_AbortReceive_IT(&huart2);
}

void u2pt_rxCallback(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
	xbee_send_data(&rxByte, 1);  //Send data to xbee
 8001534:	2101      	movs	r1, #1
 8001536:	4805      	ldr	r0, [pc, #20]	; (800154c <u2pt_rxCallback+0x1c>)
 8001538:	f003 fd9a 	bl	8005070 <xbee_send_data>
	HAL_UART_Receive_IT(&huart2, &rxByte, 1); //trigger new receive
 800153c:	2201      	movs	r2, #1
 800153e:	4903      	ldr	r1, [pc, #12]	; (800154c <u2pt_rxCallback+0x1c>)
 8001540:	4803      	ldr	r0, [pc, #12]	; (8001550 <u2pt_rxCallback+0x20>)
 8001542:	f002 f9d5 	bl	80038f0 <HAL_UART_Receive_IT>
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000cbc 	.word	0x20000cbc
 8001550:	20000d44 	.word	0x20000d44

08001554 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <MX_USART1_UART_Init+0x58>)
 800155a:	4a15      	ldr	r2, [pc, #84]	; (80015b0 <MX_USART1_UART_Init+0x5c>)
 800155c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800155e:	4b13      	ldr	r3, [pc, #76]	; (80015ac <MX_USART1_UART_Init+0x58>)
 8001560:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001564:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MX_USART1_UART_Init+0x58>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <MX_USART1_UART_Init+0x58>)
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <MX_USART1_UART_Init+0x58>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <MX_USART1_UART_Init+0x58>)
 800157a:	220c      	movs	r2, #12
 800157c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <MX_USART1_UART_Init+0x58>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <MX_USART1_UART_Init+0x58>)
 8001586:	2200      	movs	r2, #0
 8001588:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <MX_USART1_UART_Init+0x58>)
 800158c:	2200      	movs	r2, #0
 800158e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <MX_USART1_UART_Init+0x58>)
 8001592:	2200      	movs	r2, #0
 8001594:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001596:	4805      	ldr	r0, [pc, #20]	; (80015ac <MX_USART1_UART_Init+0x58>)
 8001598:	f002 f8c8 	bl	800372c <HAL_UART_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80015a2:	f7ff fddf 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000cc0 	.word	0x20000cc0
 80015b0:	40013800 	.word	0x40013800

080015b4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015b8:	4b15      	ldr	r3, [pc, #84]	; (8001610 <MX_USART2_UART_Init+0x5c>)
 80015ba:	4a16      	ldr	r2, [pc, #88]	; (8001614 <MX_USART2_UART_Init+0x60>)
 80015bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015be:	4b14      	ldr	r3, [pc, #80]	; (8001610 <MX_USART2_UART_Init+0x5c>)
 80015c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015c6:	4b12      	ldr	r3, [pc, #72]	; (8001610 <MX_USART2_UART_Init+0x5c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015cc:	4b10      	ldr	r3, [pc, #64]	; (8001610 <MX_USART2_UART_Init+0x5c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015d2:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <MX_USART2_UART_Init+0x5c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015d8:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <MX_USART2_UART_Init+0x5c>)
 80015da:	220c      	movs	r2, #12
 80015dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015de:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <MX_USART2_UART_Init+0x5c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e4:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <MX_USART2_UART_Init+0x5c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ea:	4b09      	ldr	r3, [pc, #36]	; (8001610 <MX_USART2_UART_Init+0x5c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015f0:	4b07      	ldr	r3, [pc, #28]	; (8001610 <MX_USART2_UART_Init+0x5c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015f6:	4806      	ldr	r0, [pc, #24]	; (8001610 <MX_USART2_UART_Init+0x5c>)
 80015f8:	f002 f898 	bl	800372c <HAL_UART_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001602:	f7ff fdaf 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  u2pt_StartReceive();
 8001606:	f7ff ff85 	bl	8001514 <u2pt_StartReceive>
  /* USER CODE END USART2_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000d44 	.word	0x20000d44
 8001614:	40004400 	.word	0x40004400

08001618 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b0a0      	sub	sp, #128	; 0x80
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001630:	f107 0318 	add.w	r3, r7, #24
 8001634:	2254      	movs	r2, #84	; 0x54
 8001636:	2100      	movs	r1, #0
 8001638:	4618      	mov	r0, r3
 800163a:	f006 fcd8 	bl	8007fee <memset>
  if(uartHandle->Instance==USART1)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a4f      	ldr	r2, [pc, #316]	; (8001780 <HAL_UART_MspInit+0x168>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d140      	bne.n	80016ca <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001648:	2301      	movs	r3, #1
 800164a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800164c:	2300      	movs	r3, #0
 800164e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001650:	f107 0318 	add.w	r3, r7, #24
 8001654:	4618      	mov	r0, r3
 8001656:	f001 faf1 	bl	8002c3c <HAL_RCCEx_PeriphCLKConfig>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001660:	f7ff fd80 	bl	8001164 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001664:	4b47      	ldr	r3, [pc, #284]	; (8001784 <HAL_UART_MspInit+0x16c>)
 8001666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001668:	4a46      	ldr	r2, [pc, #280]	; (8001784 <HAL_UART_MspInit+0x16c>)
 800166a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800166e:	6613      	str	r3, [r2, #96]	; 0x60
 8001670:	4b44      	ldr	r3, [pc, #272]	; (8001784 <HAL_UART_MspInit+0x16c>)
 8001672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001674:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167c:	4b41      	ldr	r3, [pc, #260]	; (8001784 <HAL_UART_MspInit+0x16c>)
 800167e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001680:	4a40      	ldr	r2, [pc, #256]	; (8001784 <HAL_UART_MspInit+0x16c>)
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001688:	4b3e      	ldr	r3, [pc, #248]	; (8001784 <HAL_UART_MspInit+0x16c>)
 800168a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001694:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001698:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a2:	2303      	movs	r3, #3
 80016a4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016a6:	2307      	movs	r3, #7
 80016a8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016aa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016ae:	4619      	mov	r1, r3
 80016b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b4:	f000 fa48 	bl	8001b48 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2105      	movs	r1, #5
 80016bc:	2025      	movs	r0, #37	; 0x25
 80016be:	f000 f999 	bl	80019f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016c2:	2025      	movs	r0, #37	; 0x25
 80016c4:	f000 f9b2 	bl	8001a2c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80016c8:	e055      	b.n	8001776 <HAL_UART_MspInit+0x15e>
  else if(uartHandle->Instance==USART2)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a2e      	ldr	r2, [pc, #184]	; (8001788 <HAL_UART_MspInit+0x170>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d150      	bne.n	8001776 <HAL_UART_MspInit+0x15e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016d4:	2302      	movs	r3, #2
 80016d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016d8:	2300      	movs	r3, #0
 80016da:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016dc:	f107 0318 	add.w	r3, r7, #24
 80016e0:	4618      	mov	r0, r3
 80016e2:	f001 faab 	bl	8002c3c <HAL_RCCEx_PeriphCLKConfig>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80016ec:	f7ff fd3a 	bl	8001164 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016f0:	4b24      	ldr	r3, [pc, #144]	; (8001784 <HAL_UART_MspInit+0x16c>)
 80016f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f4:	4a23      	ldr	r2, [pc, #140]	; (8001784 <HAL_UART_MspInit+0x16c>)
 80016f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016fa:	6593      	str	r3, [r2, #88]	; 0x58
 80016fc:	4b21      	ldr	r3, [pc, #132]	; (8001784 <HAL_UART_MspInit+0x16c>)
 80016fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001708:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <HAL_UART_MspInit+0x16c>)
 800170a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170c:	4a1d      	ldr	r2, [pc, #116]	; (8001784 <HAL_UART_MspInit+0x16c>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001714:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <HAL_UART_MspInit+0x16c>)
 8001716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001720:	2304      	movs	r3, #4
 8001722:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001724:	2302      	movs	r3, #2
 8001726:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172c:	2303      	movs	r3, #3
 800172e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001730:	2307      	movs	r3, #7
 8001732:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001734:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001738:	4619      	mov	r1, r3
 800173a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173e:	f000 fa03 	bl	8001b48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001746:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001750:	2303      	movs	r3, #3
 8001752:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001754:	2303      	movs	r3, #3
 8001756:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001758:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800175c:	4619      	mov	r1, r3
 800175e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001762:	f000 f9f1 	bl	8001b48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2105      	movs	r1, #5
 800176a:	2026      	movs	r0, #38	; 0x26
 800176c:	f000 f942 	bl	80019f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001770:	2026      	movs	r0, #38	; 0x26
 8001772:	f000 f95b 	bl	8001a2c <HAL_NVIC_EnableIRQ>
}
 8001776:	bf00      	nop
 8001778:	3780      	adds	r7, #128	; 0x80
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40013800 	.word	0x40013800
 8001784:	40021000 	.word	0x40021000
 8001788:	40004400 	.word	0x40004400

0800178c <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a08      	ldr	r2, [pc, #32]	; (80017b8 <HAL_UART_RxCpltCallback+0x2c>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d102      	bne.n	80017a2 <HAL_UART_RxCpltCallback+0x16>
	{
		xbeeSerial_rxCallback();
 800179c:	f003 fe22 	bl	80053e4 <xbeeSerial_rxCallback>
	}
	else if(huart == &huart2)
	{
		u2pt_rxCallback();
	}
}
 80017a0:	e005      	b.n	80017ae <HAL_UART_RxCpltCallback+0x22>
	else if(huart == &huart2)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a05      	ldr	r2, [pc, #20]	; (80017bc <HAL_UART_RxCpltCallback+0x30>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d101      	bne.n	80017ae <HAL_UART_RxCpltCallback+0x22>
		u2pt_rxCallback();
 80017aa:	f7ff fec1 	bl	8001530 <u2pt_rxCallback>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000cc0 	.word	0x20000cc0
 80017bc:	20000d44 	.word	0x20000d44

080017c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017c4:	f7ff fe4c 	bl	8001460 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c8:	480c      	ldr	r0, [pc, #48]	; (80017fc <LoopForever+0x6>)
  ldr r1, =_edata
 80017ca:	490d      	ldr	r1, [pc, #52]	; (8001800 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017cc:	4a0d      	ldr	r2, [pc, #52]	; (8001804 <LoopForever+0xe>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d0:	e002      	b.n	80017d8 <LoopCopyDataInit>

080017d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d6:	3304      	adds	r3, #4

080017d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017dc:	d3f9      	bcc.n	80017d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017de:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017e0:	4c0a      	ldr	r4, [pc, #40]	; (800180c <LoopForever+0x16>)
  movs r3, #0
 80017e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e4:	e001      	b.n	80017ea <LoopFillZerobss>

080017e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e8:	3204      	adds	r2, #4

080017ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ec:	d3fb      	bcc.n	80017e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ee:	f006 fbb9 	bl	8007f64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017f2:	f7ff fc31 	bl	8001058 <main>

080017f6 <LoopForever>:

LoopForever:
    b LoopForever
 80017f6:	e7fe      	b.n	80017f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017f8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80017fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001800:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001804:	0800b274 	.word	0x0800b274
  ldr r2, =_sbss
 8001808:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800180c:	20001bd0 	.word	0x20001bd0

08001810 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001810:	e7fe      	b.n	8001810 <ADC1_IRQHandler>

08001812 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800181c:	2003      	movs	r0, #3
 800181e:	f000 f8de 	bl	80019de <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001822:	200f      	movs	r0, #15
 8001824:	f7ff fccc 	bl	80011c0 <HAL_InitTick>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d002      	beq.n	8001834 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	71fb      	strb	r3, [r7, #7]
 8001832:	e001      	b.n	8001838 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001834:	f7ff fc9c 	bl	8001170 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001838:	79fb      	ldrb	r3, [r7, #7]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_IncTick+0x20>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <HAL_IncTick+0x24>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4413      	add	r3, r2
 8001854:	4a04      	ldr	r2, [pc, #16]	; (8001868 <HAL_IncTick+0x24>)
 8001856:	6013      	str	r3, [r2, #0]
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	20000008 	.word	0x20000008
 8001868:	20000dc8 	.word	0x20000dc8

0800186c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return uwTick;
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <HAL_GetTick+0x14>)
 8001872:	681b      	ldr	r3, [r3, #0]
}
 8001874:	4618      	mov	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	20000dc8 	.word	0x20000dc8

08001884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018a0:	4013      	ands	r3, r2
 80018a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b6:	4a04      	ldr	r2, [pc, #16]	; (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	60d3      	str	r3, [r2, #12]
}
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d0:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <__NVIC_GetPriorityGrouping+0x18>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	0a1b      	lsrs	r3, r3, #8
 80018d6:	f003 0307 	and.w	r3, r3, #7
}
 80018da:	4618      	mov	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	db0b      	blt.n	8001912 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	f003 021f 	and.w	r2, r3, #31
 8001900:	4907      	ldr	r1, [pc, #28]	; (8001920 <__NVIC_EnableIRQ+0x38>)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	095b      	lsrs	r3, r3, #5
 8001908:	2001      	movs	r0, #1
 800190a:	fa00 f202 	lsl.w	r2, r0, r2
 800190e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	e000e100 	.word	0xe000e100

08001924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	6039      	str	r1, [r7, #0]
 800192e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001934:	2b00      	cmp	r3, #0
 8001936:	db0a      	blt.n	800194e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	b2da      	uxtb	r2, r3
 800193c:	490c      	ldr	r1, [pc, #48]	; (8001970 <__NVIC_SetPriority+0x4c>)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	0112      	lsls	r2, r2, #4
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	440b      	add	r3, r1
 8001948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800194c:	e00a      	b.n	8001964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	b2da      	uxtb	r2, r3
 8001952:	4908      	ldr	r1, [pc, #32]	; (8001974 <__NVIC_SetPriority+0x50>)
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	3b04      	subs	r3, #4
 800195c:	0112      	lsls	r2, r2, #4
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	440b      	add	r3, r1
 8001962:	761a      	strb	r2, [r3, #24]
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000e100 	.word	0xe000e100
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001978:	b480      	push	{r7}
 800197a:	b089      	sub	sp, #36	; 0x24
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f1c3 0307 	rsb	r3, r3, #7
 8001992:	2b04      	cmp	r3, #4
 8001994:	bf28      	it	cs
 8001996:	2304      	movcs	r3, #4
 8001998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3304      	adds	r3, #4
 800199e:	2b06      	cmp	r3, #6
 80019a0:	d902      	bls.n	80019a8 <NVIC_EncodePriority+0x30>
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3b03      	subs	r3, #3
 80019a6:	e000      	b.n	80019aa <NVIC_EncodePriority+0x32>
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ac:	f04f 32ff 	mov.w	r2, #4294967295
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43da      	mvns	r2, r3
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	401a      	ands	r2, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c0:	f04f 31ff 	mov.w	r1, #4294967295
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ca:	43d9      	mvns	r1, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d0:	4313      	orrs	r3, r2
         );
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3724      	adds	r7, #36	; 0x24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ff4c 	bl	8001884 <__NVIC_SetPriorityGrouping>
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
 8001a00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a06:	f7ff ff61 	bl	80018cc <__NVIC_GetPriorityGrouping>
 8001a0a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	68b9      	ldr	r1, [r7, #8]
 8001a10:	6978      	ldr	r0, [r7, #20]
 8001a12:	f7ff ffb1 	bl	8001978 <NVIC_EncodePriority>
 8001a16:	4602      	mov	r2, r0
 8001a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff ff80 	bl	8001924 <__NVIC_SetPriority>
}
 8001a24:	bf00      	nop
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff ff54 	bl	80018e8 <__NVIC_EnableIRQ>
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a50:	2300      	movs	r3, #0
 8001a52:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d008      	beq.n	8001a72 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2204      	movs	r2, #4
 8001a64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e022      	b.n	8001ab8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 020e 	bic.w	r2, r2, #14
 8001a80:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 0201 	bic.w	r2, r2, #1
 8001a90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a96:	f003 021c 	and.w	r2, r3, #28
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001acc:	2300      	movs	r3, #0
 8001ace:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d005      	beq.n	8001ae8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2204      	movs	r2, #4
 8001ae0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	73fb      	strb	r3, [r7, #15]
 8001ae6:	e029      	b.n	8001b3c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 020e 	bic.w	r2, r2, #14
 8001af6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0201 	bic.w	r2, r2, #1
 8001b06:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0c:	f003 021c 	and.w	r2, r3, #28
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	2101      	movs	r1, #1
 8001b16:	fa01 f202 	lsl.w	r2, r1, r2
 8001b1a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	4798      	blx	r3
    }
  }
  return status;
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b087      	sub	sp, #28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b56:	e148      	b.n	8001dea <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	fa01 f303 	lsl.w	r3, r1, r3
 8001b64:	4013      	ands	r3, r2
 8001b66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 813a 	beq.w	8001de4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d005      	beq.n	8001b88 <HAL_GPIO_Init+0x40>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d130      	bne.n	8001bea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	2203      	movs	r2, #3
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	68da      	ldr	r2, [r3, #12]
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	091b      	lsrs	r3, r3, #4
 8001bd4:	f003 0201 	and.w	r2, r3, #1
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	2b03      	cmp	r3, #3
 8001bf4:	d017      	beq.n	8001c26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	2203      	movs	r2, #3
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d123      	bne.n	8001c7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	08da      	lsrs	r2, r3, #3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3208      	adds	r2, #8
 8001c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	220f      	movs	r2, #15
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4013      	ands	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	691a      	ldr	r2, [r3, #16]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	08da      	lsrs	r2, r3, #3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3208      	adds	r2, #8
 8001c74:	6939      	ldr	r1, [r7, #16]
 8001c76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	2203      	movs	r2, #3
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 0203 	and.w	r2, r3, #3
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 8094 	beq.w	8001de4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cbc:	4b52      	ldr	r3, [pc, #328]	; (8001e08 <HAL_GPIO_Init+0x2c0>)
 8001cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc0:	4a51      	ldr	r2, [pc, #324]	; (8001e08 <HAL_GPIO_Init+0x2c0>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	6613      	str	r3, [r2, #96]	; 0x60
 8001cc8:	4b4f      	ldr	r3, [pc, #316]	; (8001e08 <HAL_GPIO_Init+0x2c0>)
 8001cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cd4:	4a4d      	ldr	r2, [pc, #308]	; (8001e0c <HAL_GPIO_Init+0x2c4>)
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	089b      	lsrs	r3, r3, #2
 8001cda:	3302      	adds	r3, #2
 8001cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	220f      	movs	r2, #15
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cfe:	d00d      	beq.n	8001d1c <HAL_GPIO_Init+0x1d4>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a43      	ldr	r2, [pc, #268]	; (8001e10 <HAL_GPIO_Init+0x2c8>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d007      	beq.n	8001d18 <HAL_GPIO_Init+0x1d0>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a42      	ldr	r2, [pc, #264]	; (8001e14 <HAL_GPIO_Init+0x2cc>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d101      	bne.n	8001d14 <HAL_GPIO_Init+0x1cc>
 8001d10:	2302      	movs	r3, #2
 8001d12:	e004      	b.n	8001d1e <HAL_GPIO_Init+0x1d6>
 8001d14:	2307      	movs	r3, #7
 8001d16:	e002      	b.n	8001d1e <HAL_GPIO_Init+0x1d6>
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e000      	b.n	8001d1e <HAL_GPIO_Init+0x1d6>
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	f002 0203 	and.w	r2, r2, #3
 8001d24:	0092      	lsls	r2, r2, #2
 8001d26:	4093      	lsls	r3, r2
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d2e:	4937      	ldr	r1, [pc, #220]	; (8001e0c <HAL_GPIO_Init+0x2c4>)
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	089b      	lsrs	r3, r3, #2
 8001d34:	3302      	adds	r3, #2
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d3c:	4b36      	ldr	r3, [pc, #216]	; (8001e18 <HAL_GPIO_Init+0x2d0>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	43db      	mvns	r3, r3
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d60:	4a2d      	ldr	r2, [pc, #180]	; (8001e18 <HAL_GPIO_Init+0x2d0>)
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d66:	4b2c      	ldr	r3, [pc, #176]	; (8001e18 <HAL_GPIO_Init+0x2d0>)
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	4013      	ands	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d8a:	4a23      	ldr	r2, [pc, #140]	; (8001e18 <HAL_GPIO_Init+0x2d0>)
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d90:	4b21      	ldr	r3, [pc, #132]	; (8001e18 <HAL_GPIO_Init+0x2d0>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001db4:	4a18      	ldr	r2, [pc, #96]	; (8001e18 <HAL_GPIO_Init+0x2d0>)
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001dba:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <HAL_GPIO_Init+0x2d0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dde:	4a0e      	ldr	r2, [pc, #56]	; (8001e18 <HAL_GPIO_Init+0x2d0>)
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	3301      	adds	r3, #1
 8001de8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	fa22 f303 	lsr.w	r3, r2, r3
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f47f aeaf 	bne.w	8001b58 <HAL_GPIO_Init+0x10>
  }
}
 8001dfa:	bf00      	nop
 8001dfc:	bf00      	nop
 8001dfe:	371c      	adds	r7, #28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40010000 	.word	0x40010000
 8001e10:	48000400 	.word	0x48000400
 8001e14:	48000800 	.word	0x48000800
 8001e18:	40010400 	.word	0x40010400

08001e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	807b      	strh	r3, [r7, #2]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e2c:	787b      	ldrb	r3, [r7, #1]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e32:	887a      	ldrh	r2, [r7, #2]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e38:	e002      	b.n	8001e40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e3a:	887a      	ldrh	r2, [r7, #2]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e5e:	887a      	ldrh	r2, [r7, #2]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4013      	ands	r3, r2
 8001e64:	041a      	lsls	r2, r3, #16
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	43d9      	mvns	r1, r3
 8001e6a:	887b      	ldrh	r3, [r7, #2]
 8001e6c:	400b      	ands	r3, r1
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	619a      	str	r2, [r3, #24]
}
 8001e74:	bf00      	nop
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e84:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a04      	ldr	r2, [pc, #16]	; (8001e9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8e:	6013      	str	r3, [r2, #0]
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40007000 	.word	0x40007000

08001ea0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ea4:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40007000 	.word	0x40007000

08001ebc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eca:	d130      	bne.n	8001f2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ecc:	4b23      	ldr	r3, [pc, #140]	; (8001f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ed8:	d038      	beq.n	8001f4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eda:	4b20      	ldr	r3, [pc, #128]	; (8001f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ee2:	4a1e      	ldr	r2, [pc, #120]	; (8001f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ee4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ee8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001eea:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2232      	movs	r2, #50	; 0x32
 8001ef0:	fb02 f303 	mul.w	r3, r2, r3
 8001ef4:	4a1b      	ldr	r2, [pc, #108]	; (8001f64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8001efa:	0c9b      	lsrs	r3, r3, #18
 8001efc:	3301      	adds	r3, #1
 8001efe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f00:	e002      	b.n	8001f08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	3b01      	subs	r3, #1
 8001f06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f08:	4b14      	ldr	r3, [pc, #80]	; (8001f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f14:	d102      	bne.n	8001f1c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1f2      	bne.n	8001f02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f28:	d110      	bne.n	8001f4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e00f      	b.n	8001f4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f3a:	d007      	beq.n	8001f4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f3c:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f44:	4a05      	ldr	r2, [pc, #20]	; (8001f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3714      	adds	r7, #20
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	40007000 	.word	0x40007000
 8001f60:	20000000 	.word	0x20000000
 8001f64:	431bde83 	.word	0x431bde83

08001f68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d102      	bne.n	8001f7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	f000 bc02 	b.w	8002780 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f7c:	4b96      	ldr	r3, [pc, #600]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 030c 	and.w	r3, r3, #12
 8001f84:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f86:	4b94      	ldr	r3, [pc, #592]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 80e4 	beq.w	8002166 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d007      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x4c>
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	2b0c      	cmp	r3, #12
 8001fa8:	f040 808b 	bne.w	80020c2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	f040 8087 	bne.w	80020c2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fb4:	4b88      	ldr	r3, [pc, #544]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <HAL_RCC_OscConfig+0x64>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e3d9      	b.n	8002780 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a1a      	ldr	r2, [r3, #32]
 8001fd0:	4b81      	ldr	r3, [pc, #516]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d004      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x7e>
 8001fdc:	4b7e      	ldr	r3, [pc, #504]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fe4:	e005      	b.n	8001ff2 <HAL_RCC_OscConfig+0x8a>
 8001fe6:	4b7c      	ldr	r3, [pc, #496]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 8001fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fec:	091b      	lsrs	r3, r3, #4
 8001fee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d223      	bcs.n	800203e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 fdbe 	bl	8002b7c <RCC_SetFlashLatencyFromMSIRange>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e3ba      	b.n	8002780 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800200a:	4b73      	ldr	r3, [pc, #460]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a72      	ldr	r2, [pc, #456]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 8002010:	f043 0308 	orr.w	r3, r3, #8
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	4b70      	ldr	r3, [pc, #448]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	496d      	ldr	r1, [pc, #436]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 8002024:	4313      	orrs	r3, r2
 8002026:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002028:	4b6b      	ldr	r3, [pc, #428]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	69db      	ldr	r3, [r3, #28]
 8002034:	021b      	lsls	r3, r3, #8
 8002036:	4968      	ldr	r1, [pc, #416]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 8002038:	4313      	orrs	r3, r2
 800203a:	604b      	str	r3, [r1, #4]
 800203c:	e025      	b.n	800208a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800203e:	4b66      	ldr	r3, [pc, #408]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a65      	ldr	r2, [pc, #404]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 8002044:	f043 0308 	orr.w	r3, r3, #8
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	4b63      	ldr	r3, [pc, #396]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	4960      	ldr	r1, [pc, #384]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 8002058:	4313      	orrs	r3, r2
 800205a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800205c:	4b5e      	ldr	r3, [pc, #376]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	021b      	lsls	r3, r3, #8
 800206a:	495b      	ldr	r1, [pc, #364]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 800206c:	4313      	orrs	r3, r2
 800206e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d109      	bne.n	800208a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	4618      	mov	r0, r3
 800207c:	f000 fd7e 	bl	8002b7c <RCC_SetFlashLatencyFromMSIRange>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e37a      	b.n	8002780 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800208a:	f000 fc81 	bl	8002990 <HAL_RCC_GetSysClockFreq>
 800208e:	4602      	mov	r2, r0
 8002090:	4b51      	ldr	r3, [pc, #324]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	091b      	lsrs	r3, r3, #4
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	4950      	ldr	r1, [pc, #320]	; (80021dc <HAL_RCC_OscConfig+0x274>)
 800209c:	5ccb      	ldrb	r3, [r1, r3]
 800209e:	f003 031f 	and.w	r3, r3, #31
 80020a2:	fa22 f303 	lsr.w	r3, r2, r3
 80020a6:	4a4e      	ldr	r2, [pc, #312]	; (80021e0 <HAL_RCC_OscConfig+0x278>)
 80020a8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80020aa:	4b4e      	ldr	r3, [pc, #312]	; (80021e4 <HAL_RCC_OscConfig+0x27c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff f886 	bl	80011c0 <HAL_InitTick>
 80020b4:	4603      	mov	r3, r0
 80020b6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d052      	beq.n	8002164 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80020be:	7bfb      	ldrb	r3, [r7, #15]
 80020c0:	e35e      	b.n	8002780 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d032      	beq.n	8002130 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020ca:	4b43      	ldr	r3, [pc, #268]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a42      	ldr	r2, [pc, #264]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020d6:	f7ff fbc9 	bl	800186c <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020de:	f7ff fbc5 	bl	800186c <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e347      	b.n	8002780 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020f0:	4b39      	ldr	r3, [pc, #228]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0f0      	beq.n	80020de <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020fc:	4b36      	ldr	r3, [pc, #216]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a35      	ldr	r2, [pc, #212]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 8002102:	f043 0308 	orr.w	r3, r3, #8
 8002106:	6013      	str	r3, [r2, #0]
 8002108:	4b33      	ldr	r3, [pc, #204]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	4930      	ldr	r1, [pc, #192]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 8002116:	4313      	orrs	r3, r2
 8002118:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800211a:	4b2f      	ldr	r3, [pc, #188]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	021b      	lsls	r3, r3, #8
 8002128:	492b      	ldr	r1, [pc, #172]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 800212a:	4313      	orrs	r3, r2
 800212c:	604b      	str	r3, [r1, #4]
 800212e:	e01a      	b.n	8002166 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002130:	4b29      	ldr	r3, [pc, #164]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a28      	ldr	r2, [pc, #160]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 8002136:	f023 0301 	bic.w	r3, r3, #1
 800213a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800213c:	f7ff fb96 	bl	800186c <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002144:	f7ff fb92 	bl	800186c <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e314      	b.n	8002780 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002156:	4b20      	ldr	r3, [pc, #128]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x1dc>
 8002162:	e000      	b.n	8002166 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002164:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d073      	beq.n	800225a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	2b08      	cmp	r3, #8
 8002176:	d005      	beq.n	8002184 <HAL_RCC_OscConfig+0x21c>
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	2b0c      	cmp	r3, #12
 800217c:	d10e      	bne.n	800219c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	2b03      	cmp	r3, #3
 8002182:	d10b      	bne.n	800219c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002184:	4b14      	ldr	r3, [pc, #80]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d063      	beq.n	8002258 <HAL_RCC_OscConfig+0x2f0>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d15f      	bne.n	8002258 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e2f1      	b.n	8002780 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a4:	d106      	bne.n	80021b4 <HAL_RCC_OscConfig+0x24c>
 80021a6:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a0b      	ldr	r2, [pc, #44]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 80021ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	e025      	b.n	8002200 <HAL_RCC_OscConfig+0x298>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021bc:	d114      	bne.n	80021e8 <HAL_RCC_OscConfig+0x280>
 80021be:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a05      	ldr	r2, [pc, #20]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 80021c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	4b03      	ldr	r3, [pc, #12]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a02      	ldr	r2, [pc, #8]	; (80021d8 <HAL_RCC_OscConfig+0x270>)
 80021d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	e013      	b.n	8002200 <HAL_RCC_OscConfig+0x298>
 80021d8:	40021000 	.word	0x40021000
 80021dc:	0800ae44 	.word	0x0800ae44
 80021e0:	20000000 	.word	0x20000000
 80021e4:	20000004 	.word	0x20000004
 80021e8:	4ba0      	ldr	r3, [pc, #640]	; (800246c <HAL_RCC_OscConfig+0x504>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a9f      	ldr	r2, [pc, #636]	; (800246c <HAL_RCC_OscConfig+0x504>)
 80021ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	4b9d      	ldr	r3, [pc, #628]	; (800246c <HAL_RCC_OscConfig+0x504>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a9c      	ldr	r2, [pc, #624]	; (800246c <HAL_RCC_OscConfig+0x504>)
 80021fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d013      	beq.n	8002230 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002208:	f7ff fb30 	bl	800186c <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002210:	f7ff fb2c 	bl	800186c <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b64      	cmp	r3, #100	; 0x64
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e2ae      	b.n	8002780 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002222:	4b92      	ldr	r3, [pc, #584]	; (800246c <HAL_RCC_OscConfig+0x504>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0x2a8>
 800222e:	e014      	b.n	800225a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002230:	f7ff fb1c 	bl	800186c <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002238:	f7ff fb18 	bl	800186c <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b64      	cmp	r3, #100	; 0x64
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e29a      	b.n	8002780 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800224a:	4b88      	ldr	r3, [pc, #544]	; (800246c <HAL_RCC_OscConfig+0x504>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0x2d0>
 8002256:	e000      	b.n	800225a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d060      	beq.n	8002328 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	2b04      	cmp	r3, #4
 800226a:	d005      	beq.n	8002278 <HAL_RCC_OscConfig+0x310>
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	2b0c      	cmp	r3, #12
 8002270:	d119      	bne.n	80022a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2b02      	cmp	r3, #2
 8002276:	d116      	bne.n	80022a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002278:	4b7c      	ldr	r3, [pc, #496]	; (800246c <HAL_RCC_OscConfig+0x504>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002280:	2b00      	cmp	r3, #0
 8002282:	d005      	beq.n	8002290 <HAL_RCC_OscConfig+0x328>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e277      	b.n	8002780 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002290:	4b76      	ldr	r3, [pc, #472]	; (800246c <HAL_RCC_OscConfig+0x504>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	061b      	lsls	r3, r3, #24
 800229e:	4973      	ldr	r1, [pc, #460]	; (800246c <HAL_RCC_OscConfig+0x504>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022a4:	e040      	b.n	8002328 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d023      	beq.n	80022f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ae:	4b6f      	ldr	r3, [pc, #444]	; (800246c <HAL_RCC_OscConfig+0x504>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a6e      	ldr	r2, [pc, #440]	; (800246c <HAL_RCC_OscConfig+0x504>)
 80022b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ba:	f7ff fad7 	bl	800186c <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c2:	f7ff fad3 	bl	800186c <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e255      	b.n	8002780 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022d4:	4b65      	ldr	r3, [pc, #404]	; (800246c <HAL_RCC_OscConfig+0x504>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0f0      	beq.n	80022c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e0:	4b62      	ldr	r3, [pc, #392]	; (800246c <HAL_RCC_OscConfig+0x504>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	061b      	lsls	r3, r3, #24
 80022ee:	495f      	ldr	r1, [pc, #380]	; (800246c <HAL_RCC_OscConfig+0x504>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	604b      	str	r3, [r1, #4]
 80022f4:	e018      	b.n	8002328 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022f6:	4b5d      	ldr	r3, [pc, #372]	; (800246c <HAL_RCC_OscConfig+0x504>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a5c      	ldr	r2, [pc, #368]	; (800246c <HAL_RCC_OscConfig+0x504>)
 80022fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002300:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002302:	f7ff fab3 	bl	800186c <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800230a:	f7ff faaf 	bl	800186c <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e231      	b.n	8002780 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800231c:	4b53      	ldr	r3, [pc, #332]	; (800246c <HAL_RCC_OscConfig+0x504>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1f0      	bne.n	800230a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	2b00      	cmp	r3, #0
 8002332:	d03c      	beq.n	80023ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d01c      	beq.n	8002376 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800233c:	4b4b      	ldr	r3, [pc, #300]	; (800246c <HAL_RCC_OscConfig+0x504>)
 800233e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002342:	4a4a      	ldr	r2, [pc, #296]	; (800246c <HAL_RCC_OscConfig+0x504>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234c:	f7ff fa8e 	bl	800186c <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002354:	f7ff fa8a 	bl	800186c <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e20c      	b.n	8002780 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002366:	4b41      	ldr	r3, [pc, #260]	; (800246c <HAL_RCC_OscConfig+0x504>)
 8002368:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0ef      	beq.n	8002354 <HAL_RCC_OscConfig+0x3ec>
 8002374:	e01b      	b.n	80023ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002376:	4b3d      	ldr	r3, [pc, #244]	; (800246c <HAL_RCC_OscConfig+0x504>)
 8002378:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800237c:	4a3b      	ldr	r2, [pc, #236]	; (800246c <HAL_RCC_OscConfig+0x504>)
 800237e:	f023 0301 	bic.w	r3, r3, #1
 8002382:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002386:	f7ff fa71 	bl	800186c <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800238e:	f7ff fa6d 	bl	800186c <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e1ef      	b.n	8002780 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023a0:	4b32      	ldr	r3, [pc, #200]	; (800246c <HAL_RCC_OscConfig+0x504>)
 80023a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1ef      	bne.n	800238e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 80a6 	beq.w	8002508 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023bc:	2300      	movs	r3, #0
 80023be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80023c0:	4b2a      	ldr	r3, [pc, #168]	; (800246c <HAL_RCC_OscConfig+0x504>)
 80023c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10d      	bne.n	80023e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023cc:	4b27      	ldr	r3, [pc, #156]	; (800246c <HAL_RCC_OscConfig+0x504>)
 80023ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d0:	4a26      	ldr	r2, [pc, #152]	; (800246c <HAL_RCC_OscConfig+0x504>)
 80023d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d6:	6593      	str	r3, [r2, #88]	; 0x58
 80023d8:	4b24      	ldr	r3, [pc, #144]	; (800246c <HAL_RCC_OscConfig+0x504>)
 80023da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e0:	60bb      	str	r3, [r7, #8]
 80023e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023e4:	2301      	movs	r3, #1
 80023e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023e8:	4b21      	ldr	r3, [pc, #132]	; (8002470 <HAL_RCC_OscConfig+0x508>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d118      	bne.n	8002426 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023f4:	4b1e      	ldr	r3, [pc, #120]	; (8002470 <HAL_RCC_OscConfig+0x508>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a1d      	ldr	r2, [pc, #116]	; (8002470 <HAL_RCC_OscConfig+0x508>)
 80023fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002400:	f7ff fa34 	bl	800186c <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002408:	f7ff fa30 	bl	800186c <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e1b2      	b.n	8002780 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800241a:	4b15      	ldr	r3, [pc, #84]	; (8002470 <HAL_RCC_OscConfig+0x508>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0f0      	beq.n	8002408 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d108      	bne.n	8002440 <HAL_RCC_OscConfig+0x4d8>
 800242e:	4b0f      	ldr	r3, [pc, #60]	; (800246c <HAL_RCC_OscConfig+0x504>)
 8002430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002434:	4a0d      	ldr	r2, [pc, #52]	; (800246c <HAL_RCC_OscConfig+0x504>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800243e:	e029      	b.n	8002494 <HAL_RCC_OscConfig+0x52c>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	2b05      	cmp	r3, #5
 8002446:	d115      	bne.n	8002474 <HAL_RCC_OscConfig+0x50c>
 8002448:	4b08      	ldr	r3, [pc, #32]	; (800246c <HAL_RCC_OscConfig+0x504>)
 800244a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244e:	4a07      	ldr	r2, [pc, #28]	; (800246c <HAL_RCC_OscConfig+0x504>)
 8002450:	f043 0304 	orr.w	r3, r3, #4
 8002454:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002458:	4b04      	ldr	r3, [pc, #16]	; (800246c <HAL_RCC_OscConfig+0x504>)
 800245a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245e:	4a03      	ldr	r2, [pc, #12]	; (800246c <HAL_RCC_OscConfig+0x504>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002468:	e014      	b.n	8002494 <HAL_RCC_OscConfig+0x52c>
 800246a:	bf00      	nop
 800246c:	40021000 	.word	0x40021000
 8002470:	40007000 	.word	0x40007000
 8002474:	4b9a      	ldr	r3, [pc, #616]	; (80026e0 <HAL_RCC_OscConfig+0x778>)
 8002476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247a:	4a99      	ldr	r2, [pc, #612]	; (80026e0 <HAL_RCC_OscConfig+0x778>)
 800247c:	f023 0301 	bic.w	r3, r3, #1
 8002480:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002484:	4b96      	ldr	r3, [pc, #600]	; (80026e0 <HAL_RCC_OscConfig+0x778>)
 8002486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248a:	4a95      	ldr	r2, [pc, #596]	; (80026e0 <HAL_RCC_OscConfig+0x778>)
 800248c:	f023 0304 	bic.w	r3, r3, #4
 8002490:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d016      	beq.n	80024ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249c:	f7ff f9e6 	bl	800186c <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024a2:	e00a      	b.n	80024ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a4:	f7ff f9e2 	bl	800186c <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e162      	b.n	8002780 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ba:	4b89      	ldr	r3, [pc, #548]	; (80026e0 <HAL_RCC_OscConfig+0x778>)
 80024bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0ed      	beq.n	80024a4 <HAL_RCC_OscConfig+0x53c>
 80024c8:	e015      	b.n	80024f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ca:	f7ff f9cf 	bl	800186c <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024d0:	e00a      	b.n	80024e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d2:	f7ff f9cb 	bl	800186c <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e14b      	b.n	8002780 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024e8:	4b7d      	ldr	r3, [pc, #500]	; (80026e0 <HAL_RCC_OscConfig+0x778>)
 80024ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1ed      	bne.n	80024d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024f6:	7ffb      	ldrb	r3, [r7, #31]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d105      	bne.n	8002508 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024fc:	4b78      	ldr	r3, [pc, #480]	; (80026e0 <HAL_RCC_OscConfig+0x778>)
 80024fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002500:	4a77      	ldr	r2, [pc, #476]	; (80026e0 <HAL_RCC_OscConfig+0x778>)
 8002502:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002506:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0320 	and.w	r3, r3, #32
 8002510:	2b00      	cmp	r3, #0
 8002512:	d03c      	beq.n	800258e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	2b00      	cmp	r3, #0
 800251a:	d01c      	beq.n	8002556 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800251c:	4b70      	ldr	r3, [pc, #448]	; (80026e0 <HAL_RCC_OscConfig+0x778>)
 800251e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002522:	4a6f      	ldr	r2, [pc, #444]	; (80026e0 <HAL_RCC_OscConfig+0x778>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252c:	f7ff f99e 	bl	800186c <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002534:	f7ff f99a 	bl	800186c <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e11c      	b.n	8002780 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002546:	4b66      	ldr	r3, [pc, #408]	; (80026e0 <HAL_RCC_OscConfig+0x778>)
 8002548:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0ef      	beq.n	8002534 <HAL_RCC_OscConfig+0x5cc>
 8002554:	e01b      	b.n	800258e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002556:	4b62      	ldr	r3, [pc, #392]	; (80026e0 <HAL_RCC_OscConfig+0x778>)
 8002558:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800255c:	4a60      	ldr	r2, [pc, #384]	; (80026e0 <HAL_RCC_OscConfig+0x778>)
 800255e:	f023 0301 	bic.w	r3, r3, #1
 8002562:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002566:	f7ff f981 	bl	800186c <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800256e:	f7ff f97d 	bl	800186c <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e0ff      	b.n	8002780 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002580:	4b57      	ldr	r3, [pc, #348]	; (80026e0 <HAL_RCC_OscConfig+0x778>)
 8002582:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1ef      	bne.n	800256e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002592:	2b00      	cmp	r3, #0
 8002594:	f000 80f3 	beq.w	800277e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259c:	2b02      	cmp	r3, #2
 800259e:	f040 80c9 	bne.w	8002734 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80025a2:	4b4f      	ldr	r3, [pc, #316]	; (80026e0 <HAL_RCC_OscConfig+0x778>)
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f003 0203 	and.w	r2, r3, #3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d12c      	bne.n	8002610 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c0:	3b01      	subs	r3, #1
 80025c2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d123      	bne.n	8002610 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d11b      	bne.n	8002610 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d113      	bne.n	8002610 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f2:	085b      	lsrs	r3, r3, #1
 80025f4:	3b01      	subs	r3, #1
 80025f6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d109      	bne.n	8002610 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	085b      	lsrs	r3, r3, #1
 8002608:	3b01      	subs	r3, #1
 800260a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800260c:	429a      	cmp	r2, r3
 800260e:	d06b      	beq.n	80026e8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	2b0c      	cmp	r3, #12
 8002614:	d062      	beq.n	80026dc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002616:	4b32      	ldr	r3, [pc, #200]	; (80026e0 <HAL_RCC_OscConfig+0x778>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e0ac      	b.n	8002780 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002626:	4b2e      	ldr	r3, [pc, #184]	; (80026e0 <HAL_RCC_OscConfig+0x778>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a2d      	ldr	r2, [pc, #180]	; (80026e0 <HAL_RCC_OscConfig+0x778>)
 800262c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002630:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002632:	f7ff f91b 	bl	800186c <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263a:	f7ff f917 	bl	800186c <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e099      	b.n	8002780 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800264c:	4b24      	ldr	r3, [pc, #144]	; (80026e0 <HAL_RCC_OscConfig+0x778>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1f0      	bne.n	800263a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002658:	4b21      	ldr	r3, [pc, #132]	; (80026e0 <HAL_RCC_OscConfig+0x778>)
 800265a:	68da      	ldr	r2, [r3, #12]
 800265c:	4b21      	ldr	r3, [pc, #132]	; (80026e4 <HAL_RCC_OscConfig+0x77c>)
 800265e:	4013      	ands	r3, r2
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002668:	3a01      	subs	r2, #1
 800266a:	0112      	lsls	r2, r2, #4
 800266c:	4311      	orrs	r1, r2
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002672:	0212      	lsls	r2, r2, #8
 8002674:	4311      	orrs	r1, r2
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800267a:	0852      	lsrs	r2, r2, #1
 800267c:	3a01      	subs	r2, #1
 800267e:	0552      	lsls	r2, r2, #21
 8002680:	4311      	orrs	r1, r2
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002686:	0852      	lsrs	r2, r2, #1
 8002688:	3a01      	subs	r2, #1
 800268a:	0652      	lsls	r2, r2, #25
 800268c:	4311      	orrs	r1, r2
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002692:	06d2      	lsls	r2, r2, #27
 8002694:	430a      	orrs	r2, r1
 8002696:	4912      	ldr	r1, [pc, #72]	; (80026e0 <HAL_RCC_OscConfig+0x778>)
 8002698:	4313      	orrs	r3, r2
 800269a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800269c:	4b10      	ldr	r3, [pc, #64]	; (80026e0 <HAL_RCC_OscConfig+0x778>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a0f      	ldr	r2, [pc, #60]	; (80026e0 <HAL_RCC_OscConfig+0x778>)
 80026a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026a8:	4b0d      	ldr	r3, [pc, #52]	; (80026e0 <HAL_RCC_OscConfig+0x778>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	4a0c      	ldr	r2, [pc, #48]	; (80026e0 <HAL_RCC_OscConfig+0x778>)
 80026ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026b4:	f7ff f8da 	bl	800186c <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026bc:	f7ff f8d6 	bl	800186c <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e058      	b.n	8002780 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ce:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <HAL_RCC_OscConfig+0x778>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026da:	e050      	b.n	800277e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e04f      	b.n	8002780 <HAL_RCC_OscConfig+0x818>
 80026e0:	40021000 	.word	0x40021000
 80026e4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026e8:	4b27      	ldr	r3, [pc, #156]	; (8002788 <HAL_RCC_OscConfig+0x820>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d144      	bne.n	800277e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80026f4:	4b24      	ldr	r3, [pc, #144]	; (8002788 <HAL_RCC_OscConfig+0x820>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a23      	ldr	r2, [pc, #140]	; (8002788 <HAL_RCC_OscConfig+0x820>)
 80026fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002700:	4b21      	ldr	r3, [pc, #132]	; (8002788 <HAL_RCC_OscConfig+0x820>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	4a20      	ldr	r2, [pc, #128]	; (8002788 <HAL_RCC_OscConfig+0x820>)
 8002706:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800270a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800270c:	f7ff f8ae 	bl	800186c <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002714:	f7ff f8aa 	bl	800186c <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e02c      	b.n	8002780 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002726:	4b18      	ldr	r3, [pc, #96]	; (8002788 <HAL_RCC_OscConfig+0x820>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f0      	beq.n	8002714 <HAL_RCC_OscConfig+0x7ac>
 8002732:	e024      	b.n	800277e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	2b0c      	cmp	r3, #12
 8002738:	d01f      	beq.n	800277a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800273a:	4b13      	ldr	r3, [pc, #76]	; (8002788 <HAL_RCC_OscConfig+0x820>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a12      	ldr	r2, [pc, #72]	; (8002788 <HAL_RCC_OscConfig+0x820>)
 8002740:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002746:	f7ff f891 	bl	800186c <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800274e:	f7ff f88d 	bl	800186c <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e00f      	b.n	8002780 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002760:	4b09      	ldr	r3, [pc, #36]	; (8002788 <HAL_RCC_OscConfig+0x820>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1f0      	bne.n	800274e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800276c:	4b06      	ldr	r3, [pc, #24]	; (8002788 <HAL_RCC_OscConfig+0x820>)
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	4905      	ldr	r1, [pc, #20]	; (8002788 <HAL_RCC_OscConfig+0x820>)
 8002772:	4b06      	ldr	r3, [pc, #24]	; (800278c <HAL_RCC_OscConfig+0x824>)
 8002774:	4013      	ands	r3, r2
 8002776:	60cb      	str	r3, [r1, #12]
 8002778:	e001      	b.n	800277e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3720      	adds	r7, #32
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40021000 	.word	0x40021000
 800278c:	feeefffc 	.word	0xfeeefffc

08002790 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e0e7      	b.n	8002974 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027a4:	4b75      	ldr	r3, [pc, #468]	; (800297c <HAL_RCC_ClockConfig+0x1ec>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d910      	bls.n	80027d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b2:	4b72      	ldr	r3, [pc, #456]	; (800297c <HAL_RCC_ClockConfig+0x1ec>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 0207 	bic.w	r2, r3, #7
 80027ba:	4970      	ldr	r1, [pc, #448]	; (800297c <HAL_RCC_ClockConfig+0x1ec>)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	4313      	orrs	r3, r2
 80027c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c2:	4b6e      	ldr	r3, [pc, #440]	; (800297c <HAL_RCC_ClockConfig+0x1ec>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d001      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0cf      	b.n	8002974 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d010      	beq.n	8002802 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	4b66      	ldr	r3, [pc, #408]	; (8002980 <HAL_RCC_ClockConfig+0x1f0>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d908      	bls.n	8002802 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f0:	4b63      	ldr	r3, [pc, #396]	; (8002980 <HAL_RCC_ClockConfig+0x1f0>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	4960      	ldr	r1, [pc, #384]	; (8002980 <HAL_RCC_ClockConfig+0x1f0>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d04c      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b03      	cmp	r3, #3
 8002814:	d107      	bne.n	8002826 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002816:	4b5a      	ldr	r3, [pc, #360]	; (8002980 <HAL_RCC_ClockConfig+0x1f0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d121      	bne.n	8002866 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e0a6      	b.n	8002974 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d107      	bne.n	800283e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800282e:	4b54      	ldr	r3, [pc, #336]	; (8002980 <HAL_RCC_ClockConfig+0x1f0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d115      	bne.n	8002866 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e09a      	b.n	8002974 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d107      	bne.n	8002856 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002846:	4b4e      	ldr	r3, [pc, #312]	; (8002980 <HAL_RCC_ClockConfig+0x1f0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e08e      	b.n	8002974 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002856:	4b4a      	ldr	r3, [pc, #296]	; (8002980 <HAL_RCC_ClockConfig+0x1f0>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e086      	b.n	8002974 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002866:	4b46      	ldr	r3, [pc, #280]	; (8002980 <HAL_RCC_ClockConfig+0x1f0>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f023 0203 	bic.w	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	4943      	ldr	r1, [pc, #268]	; (8002980 <HAL_RCC_ClockConfig+0x1f0>)
 8002874:	4313      	orrs	r3, r2
 8002876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002878:	f7fe fff8 	bl	800186c <HAL_GetTick>
 800287c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287e:	e00a      	b.n	8002896 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002880:	f7fe fff4 	bl	800186c <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	f241 3288 	movw	r2, #5000	; 0x1388
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e06e      	b.n	8002974 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002896:	4b3a      	ldr	r3, [pc, #232]	; (8002980 <HAL_RCC_ClockConfig+0x1f0>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 020c 	and.w	r2, r3, #12
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d1eb      	bne.n	8002880 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d010      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	4b31      	ldr	r3, [pc, #196]	; (8002980 <HAL_RCC_ClockConfig+0x1f0>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d208      	bcs.n	80028d6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c4:	4b2e      	ldr	r3, [pc, #184]	; (8002980 <HAL_RCC_ClockConfig+0x1f0>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	492b      	ldr	r1, [pc, #172]	; (8002980 <HAL_RCC_ClockConfig+0x1f0>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028d6:	4b29      	ldr	r3, [pc, #164]	; (800297c <HAL_RCC_ClockConfig+0x1ec>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d210      	bcs.n	8002906 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e4:	4b25      	ldr	r3, [pc, #148]	; (800297c <HAL_RCC_ClockConfig+0x1ec>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f023 0207 	bic.w	r2, r3, #7
 80028ec:	4923      	ldr	r1, [pc, #140]	; (800297c <HAL_RCC_ClockConfig+0x1ec>)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f4:	4b21      	ldr	r3, [pc, #132]	; (800297c <HAL_RCC_ClockConfig+0x1ec>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d001      	beq.n	8002906 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e036      	b.n	8002974 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	2b00      	cmp	r3, #0
 8002910:	d008      	beq.n	8002924 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002912:	4b1b      	ldr	r3, [pc, #108]	; (8002980 <HAL_RCC_ClockConfig+0x1f0>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	4918      	ldr	r1, [pc, #96]	; (8002980 <HAL_RCC_ClockConfig+0x1f0>)
 8002920:	4313      	orrs	r3, r2
 8002922:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d009      	beq.n	8002944 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002930:	4b13      	ldr	r3, [pc, #76]	; (8002980 <HAL_RCC_ClockConfig+0x1f0>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	4910      	ldr	r1, [pc, #64]	; (8002980 <HAL_RCC_ClockConfig+0x1f0>)
 8002940:	4313      	orrs	r3, r2
 8002942:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002944:	f000 f824 	bl	8002990 <HAL_RCC_GetSysClockFreq>
 8002948:	4602      	mov	r2, r0
 800294a:	4b0d      	ldr	r3, [pc, #52]	; (8002980 <HAL_RCC_ClockConfig+0x1f0>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	091b      	lsrs	r3, r3, #4
 8002950:	f003 030f 	and.w	r3, r3, #15
 8002954:	490b      	ldr	r1, [pc, #44]	; (8002984 <HAL_RCC_ClockConfig+0x1f4>)
 8002956:	5ccb      	ldrb	r3, [r1, r3]
 8002958:	f003 031f 	and.w	r3, r3, #31
 800295c:	fa22 f303 	lsr.w	r3, r2, r3
 8002960:	4a09      	ldr	r2, [pc, #36]	; (8002988 <HAL_RCC_ClockConfig+0x1f8>)
 8002962:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002964:	4b09      	ldr	r3, [pc, #36]	; (800298c <HAL_RCC_ClockConfig+0x1fc>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f7fe fc29 	bl	80011c0 <HAL_InitTick>
 800296e:	4603      	mov	r3, r0
 8002970:	72fb      	strb	r3, [r7, #11]

  return status;
 8002972:	7afb      	ldrb	r3, [r7, #11]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40022000 	.word	0x40022000
 8002980:	40021000 	.word	0x40021000
 8002984:	0800ae44 	.word	0x0800ae44
 8002988:	20000000 	.word	0x20000000
 800298c:	20000004 	.word	0x20000004

08002990 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002990:	b480      	push	{r7}
 8002992:	b089      	sub	sp, #36	; 0x24
 8002994:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002996:	2300      	movs	r3, #0
 8002998:	61fb      	str	r3, [r7, #28]
 800299a:	2300      	movs	r3, #0
 800299c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800299e:	4b3e      	ldr	r3, [pc, #248]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x108>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 030c 	and.w	r3, r3, #12
 80029a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029a8:	4b3b      	ldr	r3, [pc, #236]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x108>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_RCC_GetSysClockFreq+0x34>
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	2b0c      	cmp	r3, #12
 80029bc:	d121      	bne.n	8002a02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d11e      	bne.n	8002a02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029c4:	4b34      	ldr	r3, [pc, #208]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x108>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d107      	bne.n	80029e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029d0:	4b31      	ldr	r3, [pc, #196]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x108>)
 80029d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029d6:	0a1b      	lsrs	r3, r3, #8
 80029d8:	f003 030f 	and.w	r3, r3, #15
 80029dc:	61fb      	str	r3, [r7, #28]
 80029de:	e005      	b.n	80029ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029e0:	4b2d      	ldr	r3, [pc, #180]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x108>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	091b      	lsrs	r3, r3, #4
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029ec:	4a2b      	ldr	r2, [pc, #172]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x10c>)
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10d      	bne.n	8002a18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a00:	e00a      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d102      	bne.n	8002a0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a08:	4b25      	ldr	r3, [pc, #148]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a0a:	61bb      	str	r3, [r7, #24]
 8002a0c:	e004      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d101      	bne.n	8002a18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a14:	4b23      	ldr	r3, [pc, #140]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	2b0c      	cmp	r3, #12
 8002a1c:	d134      	bne.n	8002a88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a1e:	4b1e      	ldr	r3, [pc, #120]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d003      	beq.n	8002a36 <HAL_RCC_GetSysClockFreq+0xa6>
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d003      	beq.n	8002a3c <HAL_RCC_GetSysClockFreq+0xac>
 8002a34:	e005      	b.n	8002a42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a36:	4b1a      	ldr	r3, [pc, #104]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a38:	617b      	str	r3, [r7, #20]
      break;
 8002a3a:	e005      	b.n	8002a48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a3c:	4b19      	ldr	r3, [pc, #100]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a3e:	617b      	str	r3, [r7, #20]
      break;
 8002a40:	e002      	b.n	8002a48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	617b      	str	r3, [r7, #20]
      break;
 8002a46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a48:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	091b      	lsrs	r3, r3, #4
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	3301      	adds	r3, #1
 8002a54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a56:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	0a1b      	lsrs	r3, r3, #8
 8002a5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	fb03 f202 	mul.w	r2, r3, r2
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a6e:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	0e5b      	lsrs	r3, r3, #25
 8002a74:	f003 0303 	and.w	r3, r3, #3
 8002a78:	3301      	adds	r3, #1
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a88:	69bb      	ldr	r3, [r7, #24]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3724      	adds	r7, #36	; 0x24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	0800ae5c 	.word	0x0800ae5c
 8002aa0:	00f42400 	.word	0x00f42400
 8002aa4:	007a1200 	.word	0x007a1200

08002aa8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aac:	4b03      	ldr	r3, [pc, #12]	; (8002abc <HAL_RCC_GetHCLKFreq+0x14>)
 8002aae:	681b      	ldr	r3, [r3, #0]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	20000000 	.word	0x20000000

08002ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ac4:	f7ff fff0 	bl	8002aa8 <HAL_RCC_GetHCLKFreq>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	0a1b      	lsrs	r3, r3, #8
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	4904      	ldr	r1, [pc, #16]	; (8002ae8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ad6:	5ccb      	ldrb	r3, [r1, r3]
 8002ad8:	f003 031f 	and.w	r3, r3, #31
 8002adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	0800ae54 	.word	0x0800ae54

08002aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002af0:	f7ff ffda 	bl	8002aa8 <HAL_RCC_GetHCLKFreq>
 8002af4:	4602      	mov	r2, r0
 8002af6:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	0adb      	lsrs	r3, r3, #11
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	4904      	ldr	r1, [pc, #16]	; (8002b14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b02:	5ccb      	ldrb	r3, [r1, r3]
 8002b04:	f003 031f 	and.w	r3, r3, #31
 8002b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40021000 	.word	0x40021000
 8002b14:	0800ae54 	.word	0x0800ae54

08002b18 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	220f      	movs	r2, #15
 8002b26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002b28:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <HAL_RCC_GetClockConfig+0x5c>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 0203 	and.w	r2, r3, #3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002b34:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <HAL_RCC_GetClockConfig+0x5c>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002b40:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <HAL_RCC_GetClockConfig+0x5c>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002b4c:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <HAL_RCC_GetClockConfig+0x5c>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	08db      	lsrs	r3, r3, #3
 8002b52:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002b5a:	4b07      	ldr	r3, [pc, #28]	; (8002b78 <HAL_RCC_GetClockConfig+0x60>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0207 	and.w	r2, r3, #7
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	601a      	str	r2, [r3, #0]
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40021000 	.word	0x40021000
 8002b78:	40022000 	.word	0x40022000

08002b7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b84:	2300      	movs	r3, #0
 8002b86:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b88:	4b2a      	ldr	r3, [pc, #168]	; (8002c34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b94:	f7ff f984 	bl	8001ea0 <HAL_PWREx_GetVoltageRange>
 8002b98:	6178      	str	r0, [r7, #20]
 8002b9a:	e014      	b.n	8002bc6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b9c:	4b25      	ldr	r3, [pc, #148]	; (8002c34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba0:	4a24      	ldr	r2, [pc, #144]	; (8002c34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ba8:	4b22      	ldr	r3, [pc, #136]	; (8002c34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002bb4:	f7ff f974 	bl	8001ea0 <HAL_PWREx_GetVoltageRange>
 8002bb8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002bba:	4b1e      	ldr	r3, [pc, #120]	; (8002c34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bbe:	4a1d      	ldr	r2, [pc, #116]	; (8002c34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bc4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bcc:	d10b      	bne.n	8002be6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b80      	cmp	r3, #128	; 0x80
 8002bd2:	d919      	bls.n	8002c08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2ba0      	cmp	r3, #160	; 0xa0
 8002bd8:	d902      	bls.n	8002be0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bda:	2302      	movs	r3, #2
 8002bdc:	613b      	str	r3, [r7, #16]
 8002bde:	e013      	b.n	8002c08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002be0:	2301      	movs	r3, #1
 8002be2:	613b      	str	r3, [r7, #16]
 8002be4:	e010      	b.n	8002c08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b80      	cmp	r3, #128	; 0x80
 8002bea:	d902      	bls.n	8002bf2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002bec:	2303      	movs	r3, #3
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	e00a      	b.n	8002c08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b80      	cmp	r3, #128	; 0x80
 8002bf6:	d102      	bne.n	8002bfe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	613b      	str	r3, [r7, #16]
 8002bfc:	e004      	b.n	8002c08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b70      	cmp	r3, #112	; 0x70
 8002c02:	d101      	bne.n	8002c08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c04:	2301      	movs	r3, #1
 8002c06:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c08:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f023 0207 	bic.w	r2, r3, #7
 8002c10:	4909      	ldr	r1, [pc, #36]	; (8002c38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c18:	4b07      	ldr	r3, [pc, #28]	; (8002c38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d001      	beq.n	8002c2a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40021000 	.word	0x40021000
 8002c38:	40022000 	.word	0x40022000

08002c3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c44:	2300      	movs	r3, #0
 8002c46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c48:	2300      	movs	r3, #0
 8002c4a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d031      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c60:	d01a      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002c62:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c66:	d814      	bhi.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d009      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c70:	d10f      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002c72:	4b5d      	ldr	r3, [pc, #372]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	4a5c      	ldr	r2, [pc, #368]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c7c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c7e:	e00c      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3304      	adds	r3, #4
 8002c84:	2100      	movs	r1, #0
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 f9de 	bl	8003048 <RCCEx_PLLSAI1_Config>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c90:	e003      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	74fb      	strb	r3, [r7, #19]
      break;
 8002c96:	e000      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002c98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c9a:	7cfb      	ldrb	r3, [r7, #19]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10b      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ca0:	4b51      	ldr	r3, [pc, #324]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cae:	494e      	ldr	r1, [pc, #312]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002cb6:	e001      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb8:	7cfb      	ldrb	r3, [r7, #19]
 8002cba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 809e 	beq.w	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cce:	4b46      	ldr	r3, [pc, #280]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002cde:	2300      	movs	r3, #0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00d      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce4:	4b40      	ldr	r3, [pc, #256]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce8:	4a3f      	ldr	r2, [pc, #252]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cee:	6593      	str	r3, [r2, #88]	; 0x58
 8002cf0:	4b3d      	ldr	r3, [pc, #244]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf8:	60bb      	str	r3, [r7, #8]
 8002cfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d00:	4b3a      	ldr	r3, [pc, #232]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a39      	ldr	r2, [pc, #228]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d0c:	f7fe fdae 	bl	800186c <HAL_GetTick>
 8002d10:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d12:	e009      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d14:	f7fe fdaa 	bl	800186c <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d902      	bls.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	74fb      	strb	r3, [r7, #19]
        break;
 8002d26:	e005      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d28:	4b30      	ldr	r3, [pc, #192]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0ef      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002d34:	7cfb      	ldrb	r3, [r7, #19]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d15a      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d3a:	4b2b      	ldr	r3, [pc, #172]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d44:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d01e      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d019      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d56:	4b24      	ldr	r3, [pc, #144]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d60:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d62:	4b21      	ldr	r3, [pc, #132]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d68:	4a1f      	ldr	r2, [pc, #124]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d72:	4b1d      	ldr	r3, [pc, #116]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d78:	4a1b      	ldr	r2, [pc, #108]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d82:	4a19      	ldr	r2, [pc, #100]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d016      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d94:	f7fe fd6a 	bl	800186c <HAL_GetTick>
 8002d98:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d9a:	e00b      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d9c:	f7fe fd66 	bl	800186c <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d902      	bls.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	74fb      	strb	r3, [r7, #19]
            break;
 8002db2:	e006      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002db4:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0ec      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002dc2:	7cfb      	ldrb	r3, [r7, #19]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10b      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dc8:	4b07      	ldr	r3, [pc, #28]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dd6:	4904      	ldr	r1, [pc, #16]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002dde:	e009      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002de0:	7cfb      	ldrb	r3, [r7, #19]
 8002de2:	74bb      	strb	r3, [r7, #18]
 8002de4:	e006      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002de6:	bf00      	nop
 8002de8:	40021000 	.word	0x40021000
 8002dec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df0:	7cfb      	ldrb	r3, [r7, #19]
 8002df2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002df4:	7c7b      	ldrb	r3, [r7, #17]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d105      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dfa:	4b8a      	ldr	r3, [pc, #552]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfe:	4a89      	ldr	r2, [pc, #548]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00a      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e12:	4b84      	ldr	r3, [pc, #528]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e18:	f023 0203 	bic.w	r2, r3, #3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	4980      	ldr	r1, [pc, #512]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00a      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e34:	4b7b      	ldr	r3, [pc, #492]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3a:	f023 020c 	bic.w	r2, r3, #12
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e42:	4978      	ldr	r1, [pc, #480]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0320 	and.w	r3, r3, #32
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e56:	4b73      	ldr	r3, [pc, #460]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e5c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e64:	496f      	ldr	r1, [pc, #444]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00a      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e78:	4b6a      	ldr	r3, [pc, #424]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e86:	4967      	ldr	r1, [pc, #412]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00a      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e9a:	4b62      	ldr	r3, [pc, #392]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea8:	495e      	ldr	r1, [pc, #376]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00a      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ebc:	4b59      	ldr	r3, [pc, #356]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eca:	4956      	ldr	r1, [pc, #344]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ede:	4b51      	ldr	r3, [pc, #324]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eec:	494d      	ldr	r1, [pc, #308]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d028      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f00:	4b48      	ldr	r3, [pc, #288]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	4945      	ldr	r1, [pc, #276]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f1e:	d106      	bne.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f20:	4b40      	ldr	r3, [pc, #256]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	4a3f      	ldr	r2, [pc, #252]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f2a:	60d3      	str	r3, [r2, #12]
 8002f2c:	e011      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f36:	d10c      	bne.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3304      	adds	r3, #4
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 f882 	bl	8003048 <RCCEx_PLLSAI1_Config>
 8002f44:	4603      	mov	r3, r0
 8002f46:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f48:	7cfb      	ldrb	r3, [r7, #19]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002f4e:	7cfb      	ldrb	r3, [r7, #19]
 8002f50:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d028      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f5e:	4b31      	ldr	r3, [pc, #196]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f64:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6c:	492d      	ldr	r1, [pc, #180]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f7c:	d106      	bne.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f7e:	4b29      	ldr	r3, [pc, #164]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	4a28      	ldr	r2, [pc, #160]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f88:	60d3      	str	r3, [r2, #12]
 8002f8a:	e011      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f94:	d10c      	bne.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	3304      	adds	r3, #4
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 f853 	bl	8003048 <RCCEx_PLLSAI1_Config>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fa6:	7cfb      	ldrb	r3, [r7, #19]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002fac:	7cfb      	ldrb	r3, [r7, #19]
 8002fae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d01c      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fbc:	4b19      	ldr	r3, [pc, #100]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fca:	4916      	ldr	r1, [pc, #88]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fda:	d10c      	bne.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3304      	adds	r3, #4
 8002fe0:	2102      	movs	r1, #2
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 f830 	bl	8003048 <RCCEx_PLLSAI1_Config>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fec:	7cfb      	ldrb	r3, [r7, #19]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002ff2:	7cfb      	ldrb	r3, [r7, #19]
 8002ff4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00a      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003002:	4b08      	ldr	r3, [pc, #32]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003008:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003010:	4904      	ldr	r1, [pc, #16]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003012:	4313      	orrs	r3, r2
 8003014:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003018:	7cbb      	ldrb	r3, [r7, #18]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40021000 	.word	0x40021000

08003028 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800302c:	4b05      	ldr	r3, [pc, #20]	; (8003044 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a04      	ldr	r2, [pc, #16]	; (8003044 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003032:	f043 0304 	orr.w	r3, r3, #4
 8003036:	6013      	str	r3, [r2, #0]
}
 8003038:	bf00      	nop
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	40021000 	.word	0x40021000

08003048 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003056:	4b74      	ldr	r3, [pc, #464]	; (8003228 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d018      	beq.n	8003094 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003062:	4b71      	ldr	r3, [pc, #452]	; (8003228 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f003 0203 	and.w	r2, r3, #3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	429a      	cmp	r2, r3
 8003070:	d10d      	bne.n	800308e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
       ||
 8003076:	2b00      	cmp	r3, #0
 8003078:	d009      	beq.n	800308e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800307a:	4b6b      	ldr	r3, [pc, #428]	; (8003228 <RCCEx_PLLSAI1_Config+0x1e0>)
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	091b      	lsrs	r3, r3, #4
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	1c5a      	adds	r2, r3, #1
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
       ||
 800308a:	429a      	cmp	r2, r3
 800308c:	d047      	beq.n	800311e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	73fb      	strb	r3, [r7, #15]
 8003092:	e044      	b.n	800311e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b03      	cmp	r3, #3
 800309a:	d018      	beq.n	80030ce <RCCEx_PLLSAI1_Config+0x86>
 800309c:	2b03      	cmp	r3, #3
 800309e:	d825      	bhi.n	80030ec <RCCEx_PLLSAI1_Config+0xa4>
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d002      	beq.n	80030aa <RCCEx_PLLSAI1_Config+0x62>
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d009      	beq.n	80030bc <RCCEx_PLLSAI1_Config+0x74>
 80030a8:	e020      	b.n	80030ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030aa:	4b5f      	ldr	r3, [pc, #380]	; (8003228 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d11d      	bne.n	80030f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ba:	e01a      	b.n	80030f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030bc:	4b5a      	ldr	r3, [pc, #360]	; (8003228 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d116      	bne.n	80030f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030cc:	e013      	b.n	80030f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030ce:	4b56      	ldr	r3, [pc, #344]	; (8003228 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10f      	bne.n	80030fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030da:	4b53      	ldr	r3, [pc, #332]	; (8003228 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d109      	bne.n	80030fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030ea:	e006      	b.n	80030fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	73fb      	strb	r3, [r7, #15]
      break;
 80030f0:	e004      	b.n	80030fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030f2:	bf00      	nop
 80030f4:	e002      	b.n	80030fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030f6:	bf00      	nop
 80030f8:	e000      	b.n	80030fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10d      	bne.n	800311e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003102:	4b49      	ldr	r3, [pc, #292]	; (8003228 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6819      	ldr	r1, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	3b01      	subs	r3, #1
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	430b      	orrs	r3, r1
 8003118:	4943      	ldr	r1, [pc, #268]	; (8003228 <RCCEx_PLLSAI1_Config+0x1e0>)
 800311a:	4313      	orrs	r3, r2
 800311c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800311e:	7bfb      	ldrb	r3, [r7, #15]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d17c      	bne.n	800321e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003124:	4b40      	ldr	r3, [pc, #256]	; (8003228 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a3f      	ldr	r2, [pc, #252]	; (8003228 <RCCEx_PLLSAI1_Config+0x1e0>)
 800312a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800312e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003130:	f7fe fb9c 	bl	800186c <HAL_GetTick>
 8003134:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003136:	e009      	b.n	800314c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003138:	f7fe fb98 	bl	800186c <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d902      	bls.n	800314c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	73fb      	strb	r3, [r7, #15]
        break;
 800314a:	e005      	b.n	8003158 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800314c:	4b36      	ldr	r3, [pc, #216]	; (8003228 <RCCEx_PLLSAI1_Config+0x1e0>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1ef      	bne.n	8003138 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003158:	7bfb      	ldrb	r3, [r7, #15]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d15f      	bne.n	800321e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d110      	bne.n	8003186 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003164:	4b30      	ldr	r3, [pc, #192]	; (8003228 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800316c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6892      	ldr	r2, [r2, #8]
 8003174:	0211      	lsls	r1, r2, #8
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	68d2      	ldr	r2, [r2, #12]
 800317a:	06d2      	lsls	r2, r2, #27
 800317c:	430a      	orrs	r2, r1
 800317e:	492a      	ldr	r1, [pc, #168]	; (8003228 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003180:	4313      	orrs	r3, r2
 8003182:	610b      	str	r3, [r1, #16]
 8003184:	e027      	b.n	80031d6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d112      	bne.n	80031b2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800318c:	4b26      	ldr	r3, [pc, #152]	; (8003228 <RCCEx_PLLSAI1_Config+0x1e0>)
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003194:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6892      	ldr	r2, [r2, #8]
 800319c:	0211      	lsls	r1, r2, #8
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6912      	ldr	r2, [r2, #16]
 80031a2:	0852      	lsrs	r2, r2, #1
 80031a4:	3a01      	subs	r2, #1
 80031a6:	0552      	lsls	r2, r2, #21
 80031a8:	430a      	orrs	r2, r1
 80031aa:	491f      	ldr	r1, [pc, #124]	; (8003228 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	610b      	str	r3, [r1, #16]
 80031b0:	e011      	b.n	80031d6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031b2:	4b1d      	ldr	r3, [pc, #116]	; (8003228 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6892      	ldr	r2, [r2, #8]
 80031c2:	0211      	lsls	r1, r2, #8
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6952      	ldr	r2, [r2, #20]
 80031c8:	0852      	lsrs	r2, r2, #1
 80031ca:	3a01      	subs	r2, #1
 80031cc:	0652      	lsls	r2, r2, #25
 80031ce:	430a      	orrs	r2, r1
 80031d0:	4915      	ldr	r1, [pc, #84]	; (8003228 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80031d6:	4b14      	ldr	r3, [pc, #80]	; (8003228 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a13      	ldr	r2, [pc, #76]	; (8003228 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031e0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e2:	f7fe fb43 	bl	800186c <HAL_GetTick>
 80031e6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031e8:	e009      	b.n	80031fe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031ea:	f7fe fb3f 	bl	800186c <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d902      	bls.n	80031fe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	73fb      	strb	r3, [r7, #15]
          break;
 80031fc:	e005      	b.n	800320a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031fe:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0ef      	beq.n	80031ea <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800320a:	7bfb      	ldrb	r3, [r7, #15]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d106      	bne.n	800321e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003210:	4b05      	ldr	r3, [pc, #20]	; (8003228 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003212:	691a      	ldr	r2, [r3, #16]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	4903      	ldr	r1, [pc, #12]	; (8003228 <RCCEx_PLLSAI1_Config+0x1e0>)
 800321a:	4313      	orrs	r3, r2
 800321c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800321e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40021000 	.word	0x40021000

0800322c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e049      	b.n	80032d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d106      	bne.n	8003258 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f841 	bl	80032da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2202      	movs	r2, #2
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3304      	adds	r3, #4
 8003268:	4619      	mov	r1, r3
 800326a:	4610      	mov	r0, r2
 800326c:	f000 f9dc 	bl	8003628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
	...

080032f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b01      	cmp	r3, #1
 8003302:	d001      	beq.n	8003308 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e03b      	b.n	8003380 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a19      	ldr	r2, [pc, #100]	; (800338c <HAL_TIM_Base_Start_IT+0x9c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d009      	beq.n	800333e <HAL_TIM_Base_Start_IT+0x4e>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003332:	d004      	beq.n	800333e <HAL_TIM_Base_Start_IT+0x4e>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a15      	ldr	r2, [pc, #84]	; (8003390 <HAL_TIM_Base_Start_IT+0xa0>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d115      	bne.n	800336a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	4b13      	ldr	r3, [pc, #76]	; (8003394 <HAL_TIM_Base_Start_IT+0xa4>)
 8003346:	4013      	ands	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2b06      	cmp	r3, #6
 800334e:	d015      	beq.n	800337c <HAL_TIM_Base_Start_IT+0x8c>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003356:	d011      	beq.n	800337c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0201 	orr.w	r2, r2, #1
 8003366:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003368:	e008      	b.n	800337c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f042 0201 	orr.w	r2, r2, #1
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	e000      	b.n	800337e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800337c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	40012c00 	.word	0x40012c00
 8003390:	40014000 	.word	0x40014000
 8003394:	00010007 	.word	0x00010007

08003398 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d122      	bne.n	80033f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d11b      	bne.n	80033f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f06f 0202 	mvn.w	r2, #2
 80033c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f905 	bl	80035ea <HAL_TIM_IC_CaptureCallback>
 80033e0:	e005      	b.n	80033ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f8f7 	bl	80035d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 f908 	bl	80035fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	f003 0304 	and.w	r3, r3, #4
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d122      	bne.n	8003448 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b04      	cmp	r3, #4
 800340e:	d11b      	bne.n	8003448 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f06f 0204 	mvn.w	r2, #4
 8003418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2202      	movs	r2, #2
 800341e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f8db 	bl	80035ea <HAL_TIM_IC_CaptureCallback>
 8003434:	e005      	b.n	8003442 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f8cd 	bl	80035d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f8de 	bl	80035fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	f003 0308 	and.w	r3, r3, #8
 8003452:	2b08      	cmp	r3, #8
 8003454:	d122      	bne.n	800349c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f003 0308 	and.w	r3, r3, #8
 8003460:	2b08      	cmp	r3, #8
 8003462:	d11b      	bne.n	800349c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f06f 0208 	mvn.w	r2, #8
 800346c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2204      	movs	r2, #4
 8003472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f8b1 	bl	80035ea <HAL_TIM_IC_CaptureCallback>
 8003488:	e005      	b.n	8003496 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f8a3 	bl	80035d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 f8b4 	bl	80035fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	f003 0310 	and.w	r3, r3, #16
 80034a6:	2b10      	cmp	r3, #16
 80034a8:	d122      	bne.n	80034f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	f003 0310 	and.w	r3, r3, #16
 80034b4:	2b10      	cmp	r3, #16
 80034b6:	d11b      	bne.n	80034f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f06f 0210 	mvn.w	r2, #16
 80034c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2208      	movs	r2, #8
 80034c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f887 	bl	80035ea <HAL_TIM_IC_CaptureCallback>
 80034dc:	e005      	b.n	80034ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f879 	bl	80035d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f88a 	bl	80035fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d10e      	bne.n	800351c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b01      	cmp	r3, #1
 800350a:	d107      	bne.n	800351c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f06f 0201 	mvn.w	r2, #1
 8003514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7fd fe12 	bl	8001140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003526:	2b80      	cmp	r3, #128	; 0x80
 8003528:	d10e      	bne.n	8003548 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003534:	2b80      	cmp	r3, #128	; 0x80
 8003536:	d107      	bne.n	8003548 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f8de 	bl	8003704 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003556:	d10e      	bne.n	8003576 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003562:	2b80      	cmp	r3, #128	; 0x80
 8003564:	d107      	bne.n	8003576 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800356e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f8d1 	bl	8003718 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003580:	2b40      	cmp	r3, #64	; 0x40
 8003582:	d10e      	bne.n	80035a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358e:	2b40      	cmp	r3, #64	; 0x40
 8003590:	d107      	bne.n	80035a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800359a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f838 	bl	8003612 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	f003 0320 	and.w	r3, r3, #32
 80035ac:	2b20      	cmp	r3, #32
 80035ae:	d10e      	bne.n	80035ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	f003 0320 	and.w	r3, r3, #32
 80035ba:	2b20      	cmp	r3, #32
 80035bc:	d107      	bne.n	80035ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f06f 0220 	mvn.w	r2, #32
 80035c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f891 	bl	80036f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035fe:	b480      	push	{r7}
 8003600:	b083      	sub	sp, #12
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
	...

08003628 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a2a      	ldr	r2, [pc, #168]	; (80036e4 <TIM_Base_SetConfig+0xbc>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d003      	beq.n	8003648 <TIM_Base_SetConfig+0x20>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003646:	d108      	bne.n	800365a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800364e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4313      	orrs	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a21      	ldr	r2, [pc, #132]	; (80036e4 <TIM_Base_SetConfig+0xbc>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00b      	beq.n	800367a <TIM_Base_SetConfig+0x52>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003668:	d007      	beq.n	800367a <TIM_Base_SetConfig+0x52>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a1e      	ldr	r2, [pc, #120]	; (80036e8 <TIM_Base_SetConfig+0xc0>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d003      	beq.n	800367a <TIM_Base_SetConfig+0x52>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a1d      	ldr	r2, [pc, #116]	; (80036ec <TIM_Base_SetConfig+0xc4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d108      	bne.n	800368c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003680:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	4313      	orrs	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	4313      	orrs	r3, r2
 8003698:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a0c      	ldr	r2, [pc, #48]	; (80036e4 <TIM_Base_SetConfig+0xbc>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d007      	beq.n	80036c8 <TIM_Base_SetConfig+0xa0>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a0b      	ldr	r2, [pc, #44]	; (80036e8 <TIM_Base_SetConfig+0xc0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d003      	beq.n	80036c8 <TIM_Base_SetConfig+0xa0>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a0a      	ldr	r2, [pc, #40]	; (80036ec <TIM_Base_SetConfig+0xc4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d103      	bne.n	80036d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	615a      	str	r2, [r3, #20]
}
 80036d6:	bf00      	nop
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40012c00 	.word	0x40012c00
 80036e8:	40014000 	.word	0x40014000
 80036ec:	40014400 	.word	0x40014400

080036f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e040      	b.n	80037c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003742:	2b00      	cmp	r3, #0
 8003744:	d106      	bne.n	8003754 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7fd ff62 	bl	8001618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2224      	movs	r2, #36	; 0x24
 8003758:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0201 	bic.w	r2, r2, #1
 8003768:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 fc18 	bl	8003fa0 <UART_SetConfig>
 8003770:	4603      	mov	r3, r0
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e022      	b.n	80037c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fe38 	bl	80043f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003796:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0201 	orr.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 febf 	bl	800453c <UART_CheckIdleState>
 80037be:	4603      	mov	r3, r0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08a      	sub	sp, #40	; 0x28
 80037cc:	af02      	add	r7, sp, #8
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	603b      	str	r3, [r7, #0]
 80037d4:	4613      	mov	r3, r2
 80037d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037dc:	2b20      	cmp	r3, #32
 80037de:	f040 8082 	bne.w	80038e6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d002      	beq.n	80037ee <HAL_UART_Transmit+0x26>
 80037e8:	88fb      	ldrh	r3, [r7, #6]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e07a      	b.n	80038e8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_UART_Transmit+0x38>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e073      	b.n	80038e8 <HAL_UART_Transmit+0x120>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2221      	movs	r2, #33	; 0x21
 8003814:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003816:	f7fe f829 	bl	800186c <HAL_GetTick>
 800381a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	88fa      	ldrh	r2, [r7, #6]
 8003820:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	88fa      	ldrh	r2, [r7, #6]
 8003828:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003834:	d108      	bne.n	8003848 <HAL_UART_Transmit+0x80>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d104      	bne.n	8003848 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800383e:	2300      	movs	r3, #0
 8003840:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	61bb      	str	r3, [r7, #24]
 8003846:	e003      	b.n	8003850 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800384c:	2300      	movs	r3, #0
 800384e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003858:	e02d      	b.n	80038b6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	2200      	movs	r2, #0
 8003862:	2180      	movs	r1, #128	; 0x80
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 feb2 	bl	80045ce <UART_WaitOnFlagUntilTimeout>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e039      	b.n	80038e8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10b      	bne.n	8003892 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	881a      	ldrh	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003886:	b292      	uxth	r2, r2
 8003888:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	3302      	adds	r3, #2
 800388e:	61bb      	str	r3, [r7, #24]
 8003890:	e008      	b.n	80038a4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	781a      	ldrb	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	b292      	uxth	r2, r2
 800389c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	3301      	adds	r3, #1
 80038a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038bc:	b29b      	uxth	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1cb      	bne.n	800385a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2200      	movs	r2, #0
 80038ca:	2140      	movs	r1, #64	; 0x40
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 fe7e 	bl	80045ce <UART_WaitOnFlagUntilTimeout>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e005      	b.n	80038e8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2220      	movs	r2, #32
 80038e0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80038e2:	2300      	movs	r3, #0
 80038e4:	e000      	b.n	80038e8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80038e6:	2302      	movs	r3, #2
  }
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3720      	adds	r7, #32
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b08a      	sub	sp, #40	; 0x28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	4613      	mov	r3, r2
 80038fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003902:	2b20      	cmp	r3, #32
 8003904:	d142      	bne.n	800398c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d002      	beq.n	8003912 <HAL_UART_Receive_IT+0x22>
 800390c:	88fb      	ldrh	r3, [r7, #6]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e03b      	b.n	800398e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800391c:	2b01      	cmp	r3, #1
 800391e:	d101      	bne.n	8003924 <HAL_UART_Receive_IT+0x34>
 8003920:	2302      	movs	r3, #2
 8003922:	e034      	b.n	800398e <HAL_UART_Receive_IT+0x9e>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a18      	ldr	r2, [pc, #96]	; (8003998 <HAL_UART_Receive_IT+0xa8>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d01f      	beq.n	800397c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d018      	beq.n	800397c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	e853 3f00 	ldrex	r3, [r3]
 8003956:	613b      	str	r3, [r7, #16]
   return(result);
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800395e:	627b      	str	r3, [r7, #36]	; 0x24
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	461a      	mov	r2, r3
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	623b      	str	r3, [r7, #32]
 800396a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396c:	69f9      	ldr	r1, [r7, #28]
 800396e:	6a3a      	ldr	r2, [r7, #32]
 8003970:	e841 2300 	strex	r3, r2, [r1]
 8003974:	61bb      	str	r3, [r7, #24]
   return(result);
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1e6      	bne.n	800394a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800397c:	88fb      	ldrh	r3, [r7, #6]
 800397e:	461a      	mov	r2, r3
 8003980:	68b9      	ldr	r1, [r7, #8]
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 fee8 	bl	8004758 <UART_Start_Receive_IT>
 8003988:	4603      	mov	r3, r0
 800398a:	e000      	b.n	800398e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800398c:	2302      	movs	r3, #2
  }
}
 800398e:	4618      	mov	r0, r3
 8003990:	3728      	adds	r7, #40	; 0x28
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40008000 	.word	0x40008000

0800399c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b0ba      	sub	sp, #232	; 0xe8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80039c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80039c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80039ca:	4013      	ands	r3, r2
 80039cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80039d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d115      	bne.n	8003a04 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80039d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039dc:	f003 0320 	and.w	r3, r3, #32
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00f      	beq.n	8003a04 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039e8:	f003 0320 	and.w	r3, r3, #32
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d009      	beq.n	8003a04 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 82a6 	beq.w	8003f46 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	4798      	blx	r3
      }
      return;
 8003a02:	e2a0      	b.n	8003f46 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003a04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 8117 	beq.w	8003c3c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003a0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d106      	bne.n	8003a28 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003a1a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003a1e:	4b85      	ldr	r3, [pc, #532]	; (8003c34 <HAL_UART_IRQHandler+0x298>)
 8003a20:	4013      	ands	r3, r2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 810a 	beq.w	8003c3c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d011      	beq.n	8003a58 <HAL_UART_IRQHandler+0xbc>
 8003a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00b      	beq.n	8003a58 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2201      	movs	r2, #1
 8003a46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a4e:	f043 0201 	orr.w	r2, r3, #1
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d011      	beq.n	8003a88 <HAL_UART_IRQHandler+0xec>
 8003a64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00b      	beq.n	8003a88 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2202      	movs	r2, #2
 8003a76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a7e:	f043 0204 	orr.w	r2, r3, #4
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d011      	beq.n	8003ab8 <HAL_UART_IRQHandler+0x11c>
 8003a94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00b      	beq.n	8003ab8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2204      	movs	r2, #4
 8003aa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aae:	f043 0202 	orr.w	r2, r3, #2
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d017      	beq.n	8003af4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ac8:	f003 0320 	and.w	r3, r3, #32
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d105      	bne.n	8003adc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003ad0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ad4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00b      	beq.n	8003af4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2208      	movs	r2, #8
 8003ae2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aea:	f043 0208 	orr.w	r2, r3, #8
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003af8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d012      	beq.n	8003b26 <HAL_UART_IRQHandler+0x18a>
 8003b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00c      	beq.n	8003b26 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b1c:	f043 0220 	orr.w	r2, r3, #32
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 820c 	beq.w	8003f4a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b36:	f003 0320 	and.w	r3, r3, #32
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00d      	beq.n	8003b5a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b42:	f003 0320 	and.w	r3, r3, #32
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d007      	beq.n	8003b5a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6e:	2b40      	cmp	r3, #64	; 0x40
 8003b70:	d005      	beq.n	8003b7e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003b72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b76:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d04f      	beq.n	8003c1e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 feb4 	bl	80048ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8e:	2b40      	cmp	r3, #64	; 0x40
 8003b90:	d141      	bne.n	8003c16 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3308      	adds	r3, #8
 8003b98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ba0:	e853 3f00 	ldrex	r3, [r3]
 8003ba4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ba8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	3308      	adds	r3, #8
 8003bba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003bc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003bca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003bce:	e841 2300 	strex	r3, r2, [r1]
 8003bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003bd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1d9      	bne.n	8003b92 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d013      	beq.n	8003c0e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bea:	4a13      	ldr	r2, [pc, #76]	; (8003c38 <HAL_UART_IRQHandler+0x29c>)
 8003bec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fd ff66 	bl	8001ac4 <HAL_DMA_Abort_IT>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d017      	beq.n	8003c2e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003c08:	4610      	mov	r0, r2
 8003c0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c0c:	e00f      	b.n	8003c2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f9b0 	bl	8003f74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c14:	e00b      	b.n	8003c2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f9ac 	bl	8003f74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c1c:	e007      	b.n	8003c2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f9a8 	bl	8003f74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003c2c:	e18d      	b.n	8003f4a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c2e:	bf00      	nop
    return;
 8003c30:	e18b      	b.n	8003f4a <HAL_UART_IRQHandler+0x5ae>
 8003c32:	bf00      	nop
 8003c34:	04000120 	.word	0x04000120
 8003c38:	080049b3 	.word	0x080049b3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	f040 8146 	bne.w	8003ed2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c4a:	f003 0310 	and.w	r3, r3, #16
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 813f 	beq.w	8003ed2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c58:	f003 0310 	and.w	r3, r3, #16
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 8138 	beq.w	8003ed2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2210      	movs	r2, #16
 8003c68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c74:	2b40      	cmp	r3, #64	; 0x40
 8003c76:	f040 80b4 	bne.w	8003de2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c86:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 815f 	beq.w	8003f4e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003c96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	f080 8157 	bcs.w	8003f4e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ca6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0320 	and.w	r3, r3, #32
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f040 8085 	bne.w	8003dc6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cc8:	e853 3f00 	ldrex	r3, [r3]
 8003ccc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003cd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003ce6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003cea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003cf2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003cf6:	e841 2300 	strex	r3, r2, [r1]
 8003cfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003cfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1da      	bne.n	8003cbc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	3308      	adds	r3, #8
 8003d0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d10:	e853 3f00 	ldrex	r3, [r3]
 8003d14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d18:	f023 0301 	bic.w	r3, r3, #1
 8003d1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	3308      	adds	r3, #8
 8003d26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d36:	e841 2300 	strex	r3, r2, [r1]
 8003d3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1e1      	bne.n	8003d06 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	3308      	adds	r3, #8
 8003d48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d4c:	e853 3f00 	ldrex	r3, [r3]
 8003d50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	3308      	adds	r3, #8
 8003d62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d6e:	e841 2300 	strex	r3, r2, [r1]
 8003d72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1e3      	bne.n	8003d42 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d8e:	e853 3f00 	ldrex	r3, [r3]
 8003d92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d96:	f023 0310 	bic.w	r3, r3, #16
 8003d9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	461a      	mov	r2, r3
 8003da4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003da8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003daa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003db0:	e841 2300 	strex	r3, r2, [r1]
 8003db4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1e4      	bne.n	8003d86 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fd fe41 	bl	8001a48 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	4619      	mov	r1, r3
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f8d4 	bl	8003f88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003de0:	e0b5      	b.n	8003f4e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 80a7 	beq.w	8003f52 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003e04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 80a2 	beq.w	8003f52 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e16:	e853 3f00 	ldrex	r3, [r3]
 8003e1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e30:	647b      	str	r3, [r7, #68]	; 0x44
 8003e32:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e38:	e841 2300 	strex	r3, r2, [r1]
 8003e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1e4      	bne.n	8003e0e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	3308      	adds	r3, #8
 8003e4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	e853 3f00 	ldrex	r3, [r3]
 8003e52:	623b      	str	r3, [r7, #32]
   return(result);
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	f023 0301 	bic.w	r3, r3, #1
 8003e5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	3308      	adds	r3, #8
 8003e64:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e68:	633a      	str	r2, [r7, #48]	; 0x30
 8003e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e70:	e841 2300 	strex	r3, r2, [r1]
 8003e74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1e3      	bne.n	8003e44 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	e853 3f00 	ldrex	r3, [r3]
 8003e9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 0310 	bic.w	r3, r3, #16
 8003ea2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003eb0:	61fb      	str	r3, [r7, #28]
 8003eb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb4:	69b9      	ldr	r1, [r7, #24]
 8003eb6:	69fa      	ldr	r2, [r7, #28]
 8003eb8:	e841 2300 	strex	r3, r2, [r1]
 8003ebc:	617b      	str	r3, [r7, #20]
   return(result);
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1e4      	bne.n	8003e8e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ec4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ec8:	4619      	mov	r1, r3
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f85c 	bl	8003f88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ed0:	e03f      	b.n	8003f52 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00e      	beq.n	8003efc <HAL_UART_IRQHandler+0x560>
 8003ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d008      	beq.n	8003efc <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ef2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 fefc 	bl	8004cf2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003efa:	e02d      	b.n	8003f58 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00e      	beq.n	8003f26 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d008      	beq.n	8003f26 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d01c      	beq.n	8003f56 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	4798      	blx	r3
    }
    return;
 8003f24:	e017      	b.n	8003f56 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d012      	beq.n	8003f58 <HAL_UART_IRQHandler+0x5bc>
 8003f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00c      	beq.n	8003f58 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 fd4d 	bl	80049de <UART_EndTransmit_IT>
    return;
 8003f44:	e008      	b.n	8003f58 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003f46:	bf00      	nop
 8003f48:	e006      	b.n	8003f58 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003f4a:	bf00      	nop
 8003f4c:	e004      	b.n	8003f58 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003f4e:	bf00      	nop
 8003f50:	e002      	b.n	8003f58 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003f52:	bf00      	nop
 8003f54:	e000      	b.n	8003f58 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003f56:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003f58:	37e8      	adds	r7, #232	; 0xe8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop

08003f60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fa4:	b08a      	sub	sp, #40	; 0x28
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	69db      	ldr	r3, [r3, #28]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	4bb4      	ldr	r3, [pc, #720]	; (80042a0 <UART_SetConfig+0x300>)
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	6812      	ldr	r2, [r2, #0]
 8003fd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fd8:	430b      	orrs	r3, r1
 8003fda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	68da      	ldr	r2, [r3, #12]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4aa9      	ldr	r2, [pc, #676]	; (80042a4 <UART_SetConfig+0x304>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d004      	beq.n	800400c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004008:	4313      	orrs	r3, r2
 800400a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800401c:	430a      	orrs	r2, r1
 800401e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4aa0      	ldr	r2, [pc, #640]	; (80042a8 <UART_SetConfig+0x308>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d126      	bne.n	8004078 <UART_SetConfig+0xd8>
 800402a:	4ba0      	ldr	r3, [pc, #640]	; (80042ac <UART_SetConfig+0x30c>)
 800402c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004030:	f003 0303 	and.w	r3, r3, #3
 8004034:	2b03      	cmp	r3, #3
 8004036:	d81b      	bhi.n	8004070 <UART_SetConfig+0xd0>
 8004038:	a201      	add	r2, pc, #4	; (adr r2, 8004040 <UART_SetConfig+0xa0>)
 800403a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403e:	bf00      	nop
 8004040:	08004051 	.word	0x08004051
 8004044:	08004061 	.word	0x08004061
 8004048:	08004059 	.word	0x08004059
 800404c:	08004069 	.word	0x08004069
 8004050:	2301      	movs	r3, #1
 8004052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004056:	e080      	b.n	800415a <UART_SetConfig+0x1ba>
 8004058:	2302      	movs	r3, #2
 800405a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800405e:	e07c      	b.n	800415a <UART_SetConfig+0x1ba>
 8004060:	2304      	movs	r3, #4
 8004062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004066:	e078      	b.n	800415a <UART_SetConfig+0x1ba>
 8004068:	2308      	movs	r3, #8
 800406a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800406e:	e074      	b.n	800415a <UART_SetConfig+0x1ba>
 8004070:	2310      	movs	r3, #16
 8004072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004076:	e070      	b.n	800415a <UART_SetConfig+0x1ba>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a8c      	ldr	r2, [pc, #560]	; (80042b0 <UART_SetConfig+0x310>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d138      	bne.n	80040f4 <UART_SetConfig+0x154>
 8004082:	4b8a      	ldr	r3, [pc, #552]	; (80042ac <UART_SetConfig+0x30c>)
 8004084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004088:	f003 030c 	and.w	r3, r3, #12
 800408c:	2b0c      	cmp	r3, #12
 800408e:	d82d      	bhi.n	80040ec <UART_SetConfig+0x14c>
 8004090:	a201      	add	r2, pc, #4	; (adr r2, 8004098 <UART_SetConfig+0xf8>)
 8004092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004096:	bf00      	nop
 8004098:	080040cd 	.word	0x080040cd
 800409c:	080040ed 	.word	0x080040ed
 80040a0:	080040ed 	.word	0x080040ed
 80040a4:	080040ed 	.word	0x080040ed
 80040a8:	080040dd 	.word	0x080040dd
 80040ac:	080040ed 	.word	0x080040ed
 80040b0:	080040ed 	.word	0x080040ed
 80040b4:	080040ed 	.word	0x080040ed
 80040b8:	080040d5 	.word	0x080040d5
 80040bc:	080040ed 	.word	0x080040ed
 80040c0:	080040ed 	.word	0x080040ed
 80040c4:	080040ed 	.word	0x080040ed
 80040c8:	080040e5 	.word	0x080040e5
 80040cc:	2300      	movs	r3, #0
 80040ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040d2:	e042      	b.n	800415a <UART_SetConfig+0x1ba>
 80040d4:	2302      	movs	r3, #2
 80040d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040da:	e03e      	b.n	800415a <UART_SetConfig+0x1ba>
 80040dc:	2304      	movs	r3, #4
 80040de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040e2:	e03a      	b.n	800415a <UART_SetConfig+0x1ba>
 80040e4:	2308      	movs	r3, #8
 80040e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040ea:	e036      	b.n	800415a <UART_SetConfig+0x1ba>
 80040ec:	2310      	movs	r3, #16
 80040ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040f2:	e032      	b.n	800415a <UART_SetConfig+0x1ba>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a6a      	ldr	r2, [pc, #424]	; (80042a4 <UART_SetConfig+0x304>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d12a      	bne.n	8004154 <UART_SetConfig+0x1b4>
 80040fe:	4b6b      	ldr	r3, [pc, #428]	; (80042ac <UART_SetConfig+0x30c>)
 8004100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004104:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004108:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800410c:	d01a      	beq.n	8004144 <UART_SetConfig+0x1a4>
 800410e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004112:	d81b      	bhi.n	800414c <UART_SetConfig+0x1ac>
 8004114:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004118:	d00c      	beq.n	8004134 <UART_SetConfig+0x194>
 800411a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800411e:	d815      	bhi.n	800414c <UART_SetConfig+0x1ac>
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <UART_SetConfig+0x18c>
 8004124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004128:	d008      	beq.n	800413c <UART_SetConfig+0x19c>
 800412a:	e00f      	b.n	800414c <UART_SetConfig+0x1ac>
 800412c:	2300      	movs	r3, #0
 800412e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004132:	e012      	b.n	800415a <UART_SetConfig+0x1ba>
 8004134:	2302      	movs	r3, #2
 8004136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800413a:	e00e      	b.n	800415a <UART_SetConfig+0x1ba>
 800413c:	2304      	movs	r3, #4
 800413e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004142:	e00a      	b.n	800415a <UART_SetConfig+0x1ba>
 8004144:	2308      	movs	r3, #8
 8004146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800414a:	e006      	b.n	800415a <UART_SetConfig+0x1ba>
 800414c:	2310      	movs	r3, #16
 800414e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004152:	e002      	b.n	800415a <UART_SetConfig+0x1ba>
 8004154:	2310      	movs	r3, #16
 8004156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a51      	ldr	r2, [pc, #324]	; (80042a4 <UART_SetConfig+0x304>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d17a      	bne.n	800425a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004164:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004168:	2b08      	cmp	r3, #8
 800416a:	d824      	bhi.n	80041b6 <UART_SetConfig+0x216>
 800416c:	a201      	add	r2, pc, #4	; (adr r2, 8004174 <UART_SetConfig+0x1d4>)
 800416e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004172:	bf00      	nop
 8004174:	08004199 	.word	0x08004199
 8004178:	080041b7 	.word	0x080041b7
 800417c:	080041a1 	.word	0x080041a1
 8004180:	080041b7 	.word	0x080041b7
 8004184:	080041a7 	.word	0x080041a7
 8004188:	080041b7 	.word	0x080041b7
 800418c:	080041b7 	.word	0x080041b7
 8004190:	080041b7 	.word	0x080041b7
 8004194:	080041af 	.word	0x080041af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004198:	f7fe fc92 	bl	8002ac0 <HAL_RCC_GetPCLK1Freq>
 800419c:	61f8      	str	r0, [r7, #28]
        break;
 800419e:	e010      	b.n	80041c2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041a0:	4b44      	ldr	r3, [pc, #272]	; (80042b4 <UART_SetConfig+0x314>)
 80041a2:	61fb      	str	r3, [r7, #28]
        break;
 80041a4:	e00d      	b.n	80041c2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041a6:	f7fe fbf3 	bl	8002990 <HAL_RCC_GetSysClockFreq>
 80041aa:	61f8      	str	r0, [r7, #28]
        break;
 80041ac:	e009      	b.n	80041c2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041b2:	61fb      	str	r3, [r7, #28]
        break;
 80041b4:	e005      	b.n	80041c2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80041c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 8107 	beq.w	80043d8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	4613      	mov	r3, r2
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	4413      	add	r3, r2
 80041d4:	69fa      	ldr	r2, [r7, #28]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d305      	bcc.n	80041e6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041e0:	69fa      	ldr	r2, [r7, #28]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d903      	bls.n	80041ee <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80041ec:	e0f4      	b.n	80043d8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	2200      	movs	r2, #0
 80041f2:	461c      	mov	r4, r3
 80041f4:	4615      	mov	r5, r2
 80041f6:	f04f 0200 	mov.w	r2, #0
 80041fa:	f04f 0300 	mov.w	r3, #0
 80041fe:	022b      	lsls	r3, r5, #8
 8004200:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004204:	0222      	lsls	r2, r4, #8
 8004206:	68f9      	ldr	r1, [r7, #12]
 8004208:	6849      	ldr	r1, [r1, #4]
 800420a:	0849      	lsrs	r1, r1, #1
 800420c:	2000      	movs	r0, #0
 800420e:	4688      	mov	r8, r1
 8004210:	4681      	mov	r9, r0
 8004212:	eb12 0a08 	adds.w	sl, r2, r8
 8004216:	eb43 0b09 	adc.w	fp, r3, r9
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	603b      	str	r3, [r7, #0]
 8004222:	607a      	str	r2, [r7, #4]
 8004224:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004228:	4650      	mov	r0, sl
 800422a:	4659      	mov	r1, fp
 800422c:	f7fc fcbc 	bl	8000ba8 <__aeabi_uldivmod>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	4613      	mov	r3, r2
 8004236:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800423e:	d308      	bcc.n	8004252 <UART_SetConfig+0x2b2>
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004246:	d204      	bcs.n	8004252 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	60da      	str	r2, [r3, #12]
 8004250:	e0c2      	b.n	80043d8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004258:	e0be      	b.n	80043d8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004262:	d16a      	bne.n	800433a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004264:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004268:	2b08      	cmp	r3, #8
 800426a:	d834      	bhi.n	80042d6 <UART_SetConfig+0x336>
 800426c:	a201      	add	r2, pc, #4	; (adr r2, 8004274 <UART_SetConfig+0x2d4>)
 800426e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004272:	bf00      	nop
 8004274:	08004299 	.word	0x08004299
 8004278:	080042b9 	.word	0x080042b9
 800427c:	080042c1 	.word	0x080042c1
 8004280:	080042d7 	.word	0x080042d7
 8004284:	080042c7 	.word	0x080042c7
 8004288:	080042d7 	.word	0x080042d7
 800428c:	080042d7 	.word	0x080042d7
 8004290:	080042d7 	.word	0x080042d7
 8004294:	080042cf 	.word	0x080042cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004298:	f7fe fc12 	bl	8002ac0 <HAL_RCC_GetPCLK1Freq>
 800429c:	61f8      	str	r0, [r7, #28]
        break;
 800429e:	e020      	b.n	80042e2 <UART_SetConfig+0x342>
 80042a0:	efff69f3 	.word	0xefff69f3
 80042a4:	40008000 	.word	0x40008000
 80042a8:	40013800 	.word	0x40013800
 80042ac:	40021000 	.word	0x40021000
 80042b0:	40004400 	.word	0x40004400
 80042b4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042b8:	f7fe fc18 	bl	8002aec <HAL_RCC_GetPCLK2Freq>
 80042bc:	61f8      	str	r0, [r7, #28]
        break;
 80042be:	e010      	b.n	80042e2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042c0:	4b4c      	ldr	r3, [pc, #304]	; (80043f4 <UART_SetConfig+0x454>)
 80042c2:	61fb      	str	r3, [r7, #28]
        break;
 80042c4:	e00d      	b.n	80042e2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042c6:	f7fe fb63 	bl	8002990 <HAL_RCC_GetSysClockFreq>
 80042ca:	61f8      	str	r0, [r7, #28]
        break;
 80042cc:	e009      	b.n	80042e2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042d2:	61fb      	str	r3, [r7, #28]
        break;
 80042d4:	e005      	b.n	80042e2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80042d6:	2300      	movs	r3, #0
 80042d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80042e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d077      	beq.n	80043d8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	005a      	lsls	r2, r3, #1
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	085b      	lsrs	r3, r3, #1
 80042f2:	441a      	add	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042fc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	2b0f      	cmp	r3, #15
 8004302:	d916      	bls.n	8004332 <UART_SetConfig+0x392>
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800430a:	d212      	bcs.n	8004332 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	b29b      	uxth	r3, r3
 8004310:	f023 030f 	bic.w	r3, r3, #15
 8004314:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	085b      	lsrs	r3, r3, #1
 800431a:	b29b      	uxth	r3, r3
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	b29a      	uxth	r2, r3
 8004322:	8afb      	ldrh	r3, [r7, #22]
 8004324:	4313      	orrs	r3, r2
 8004326:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	8afa      	ldrh	r2, [r7, #22]
 800432e:	60da      	str	r2, [r3, #12]
 8004330:	e052      	b.n	80043d8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004338:	e04e      	b.n	80043d8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800433a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800433e:	2b08      	cmp	r3, #8
 8004340:	d827      	bhi.n	8004392 <UART_SetConfig+0x3f2>
 8004342:	a201      	add	r2, pc, #4	; (adr r2, 8004348 <UART_SetConfig+0x3a8>)
 8004344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004348:	0800436d 	.word	0x0800436d
 800434c:	08004375 	.word	0x08004375
 8004350:	0800437d 	.word	0x0800437d
 8004354:	08004393 	.word	0x08004393
 8004358:	08004383 	.word	0x08004383
 800435c:	08004393 	.word	0x08004393
 8004360:	08004393 	.word	0x08004393
 8004364:	08004393 	.word	0x08004393
 8004368:	0800438b 	.word	0x0800438b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800436c:	f7fe fba8 	bl	8002ac0 <HAL_RCC_GetPCLK1Freq>
 8004370:	61f8      	str	r0, [r7, #28]
        break;
 8004372:	e014      	b.n	800439e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004374:	f7fe fbba 	bl	8002aec <HAL_RCC_GetPCLK2Freq>
 8004378:	61f8      	str	r0, [r7, #28]
        break;
 800437a:	e010      	b.n	800439e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800437c:	4b1d      	ldr	r3, [pc, #116]	; (80043f4 <UART_SetConfig+0x454>)
 800437e:	61fb      	str	r3, [r7, #28]
        break;
 8004380:	e00d      	b.n	800439e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004382:	f7fe fb05 	bl	8002990 <HAL_RCC_GetSysClockFreq>
 8004386:	61f8      	str	r0, [r7, #28]
        break;
 8004388:	e009      	b.n	800439e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800438a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800438e:	61fb      	str	r3, [r7, #28]
        break;
 8004390:	e005      	b.n	800439e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004392:	2300      	movs	r3, #0
 8004394:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800439c:	bf00      	nop
    }

    if (pclk != 0U)
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d019      	beq.n	80043d8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	085a      	lsrs	r2, r3, #1
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	441a      	add	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	2b0f      	cmp	r3, #15
 80043bc:	d909      	bls.n	80043d2 <UART_SetConfig+0x432>
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c4:	d205      	bcs.n	80043d2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	60da      	str	r2, [r3, #12]
 80043d0:	e002      	b.n	80043d8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80043e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3728      	adds	r7, #40	; 0x28
 80043ec:	46bd      	mov	sp, r7
 80043ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043f2:	bf00      	nop
 80043f4:	00f42400 	.word	0x00f42400

080043f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00a      	beq.n	8004422 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00a      	beq.n	8004444 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00a      	beq.n	8004466 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00a      	beq.n	8004488 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448c:	f003 0310 	and.w	r3, r3, #16
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00a      	beq.n	80044aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	f003 0320 	and.w	r3, r3, #32
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00a      	beq.n	80044cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d01a      	beq.n	800450e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044f6:	d10a      	bne.n	800450e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00a      	beq.n	8004530 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	605a      	str	r2, [r3, #4]
  }
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af02      	add	r7, sp, #8
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800454c:	f7fd f98e 	bl	800186c <HAL_GetTick>
 8004550:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0308 	and.w	r3, r3, #8
 800455c:	2b08      	cmp	r3, #8
 800455e:	d10e      	bne.n	800457e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004560:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f82d 	bl	80045ce <UART_WaitOnFlagUntilTimeout>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e023      	b.n	80045c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b04      	cmp	r3, #4
 800458a:	d10e      	bne.n	80045aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800458c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f817 	bl	80045ce <UART_WaitOnFlagUntilTimeout>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e00d      	b.n	80045c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2220      	movs	r2, #32
 80045ae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2220      	movs	r2, #32
 80045b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b09c      	sub	sp, #112	; 0x70
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	60f8      	str	r0, [r7, #12]
 80045d6:	60b9      	str	r1, [r7, #8]
 80045d8:	603b      	str	r3, [r7, #0]
 80045da:	4613      	mov	r3, r2
 80045dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045de:	e0a5      	b.n	800472c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e6:	f000 80a1 	beq.w	800472c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ea:	f7fd f93f 	bl	800186c <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d302      	bcc.n	8004600 <UART_WaitOnFlagUntilTimeout+0x32>
 80045fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d13e      	bne.n	800467e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004608:	e853 3f00 	ldrex	r3, [r3]
 800460c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800460e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004610:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004614:	667b      	str	r3, [r7, #100]	; 0x64
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	461a      	mov	r2, r3
 800461c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800461e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004620:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004622:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004624:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004626:	e841 2300 	strex	r3, r2, [r1]
 800462a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800462c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1e6      	bne.n	8004600 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	3308      	adds	r3, #8
 8004638:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800463c:	e853 3f00 	ldrex	r3, [r3]
 8004640:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004644:	f023 0301 	bic.w	r3, r3, #1
 8004648:	663b      	str	r3, [r7, #96]	; 0x60
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	3308      	adds	r3, #8
 8004650:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004652:	64ba      	str	r2, [r7, #72]	; 0x48
 8004654:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004656:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004658:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800465a:	e841 2300 	strex	r3, r2, [r1]
 800465e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1e5      	bne.n	8004632 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2220      	movs	r2, #32
 800466a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2220      	movs	r2, #32
 8004670:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e067      	b.n	800474e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b00      	cmp	r3, #0
 800468a:	d04f      	beq.n	800472c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004696:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800469a:	d147      	bne.n	800472c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046a4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ae:	e853 3f00 	ldrex	r3, [r3]
 80046b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	461a      	mov	r2, r3
 80046c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c4:	637b      	str	r3, [r7, #52]	; 0x34
 80046c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046cc:	e841 2300 	strex	r3, r2, [r1]
 80046d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1e6      	bne.n	80046a6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3308      	adds	r3, #8
 80046de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	e853 3f00 	ldrex	r3, [r3]
 80046e6:	613b      	str	r3, [r7, #16]
   return(result);
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	f023 0301 	bic.w	r3, r3, #1
 80046ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3308      	adds	r3, #8
 80046f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80046f8:	623a      	str	r2, [r7, #32]
 80046fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fc:	69f9      	ldr	r1, [r7, #28]
 80046fe:	6a3a      	ldr	r2, [r7, #32]
 8004700:	e841 2300 	strex	r3, r2, [r1]
 8004704:	61bb      	str	r3, [r7, #24]
   return(result);
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1e5      	bne.n	80046d8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2220      	movs	r2, #32
 8004710:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2220      	movs	r2, #32
 8004716:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2220      	movs	r2, #32
 800471c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e010      	b.n	800474e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	69da      	ldr	r2, [r3, #28]
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	4013      	ands	r3, r2
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	429a      	cmp	r2, r3
 800473a:	bf0c      	ite	eq
 800473c:	2301      	moveq	r3, #1
 800473e:	2300      	movne	r3, #0
 8004740:	b2db      	uxtb	r3, r3
 8004742:	461a      	mov	r2, r3
 8004744:	79fb      	ldrb	r3, [r7, #7]
 8004746:	429a      	cmp	r2, r3
 8004748:	f43f af4a 	beq.w	80045e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3770      	adds	r7, #112	; 0x70
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
	...

08004758 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004758:	b480      	push	{r7}
 800475a:	b097      	sub	sp, #92	; 0x5c
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	4613      	mov	r3, r2
 8004764:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	88fa      	ldrh	r2, [r7, #6]
 8004770:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	88fa      	ldrh	r2, [r7, #6]
 8004778:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800478a:	d10e      	bne.n	80047aa <UART_Start_Receive_IT+0x52>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d105      	bne.n	80047a0 <UART_Start_Receive_IT+0x48>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f240 12ff 	movw	r2, #511	; 0x1ff
 800479a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800479e:	e02d      	b.n	80047fc <UART_Start_Receive_IT+0xa4>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	22ff      	movs	r2, #255	; 0xff
 80047a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047a8:	e028      	b.n	80047fc <UART_Start_Receive_IT+0xa4>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10d      	bne.n	80047ce <UART_Start_Receive_IT+0x76>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d104      	bne.n	80047c4 <UART_Start_Receive_IT+0x6c>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	22ff      	movs	r2, #255	; 0xff
 80047be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047c2:	e01b      	b.n	80047fc <UART_Start_Receive_IT+0xa4>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	227f      	movs	r2, #127	; 0x7f
 80047c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047cc:	e016      	b.n	80047fc <UART_Start_Receive_IT+0xa4>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047d6:	d10d      	bne.n	80047f4 <UART_Start_Receive_IT+0x9c>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d104      	bne.n	80047ea <UART_Start_Receive_IT+0x92>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	227f      	movs	r2, #127	; 0x7f
 80047e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047e8:	e008      	b.n	80047fc <UART_Start_Receive_IT+0xa4>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	223f      	movs	r2, #63	; 0x3f
 80047ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047f2:	e003      	b.n	80047fc <UART_Start_Receive_IT+0xa4>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2222      	movs	r2, #34	; 0x22
 8004808:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3308      	adds	r3, #8
 8004810:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004814:	e853 3f00 	ldrex	r3, [r3]
 8004818:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800481a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800481c:	f043 0301 	orr.w	r3, r3, #1
 8004820:	657b      	str	r3, [r7, #84]	; 0x54
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	3308      	adds	r3, #8
 8004828:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800482a:	64ba      	str	r2, [r7, #72]	; 0x48
 800482c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004830:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004832:	e841 2300 	strex	r3, r2, [r1]
 8004836:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1e5      	bne.n	800480a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004846:	d107      	bne.n	8004858 <UART_Start_Receive_IT+0x100>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d103      	bne.n	8004858 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4a24      	ldr	r2, [pc, #144]	; (80048e4 <UART_Start_Receive_IT+0x18c>)
 8004854:	665a      	str	r2, [r3, #100]	; 0x64
 8004856:	e002      	b.n	800485e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	4a23      	ldr	r2, [pc, #140]	; (80048e8 <UART_Start_Receive_IT+0x190>)
 800485c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d019      	beq.n	80048a2 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004876:	e853 3f00 	ldrex	r3, [r3]
 800487a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004882:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	461a      	mov	r2, r3
 800488a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800488c:	637b      	str	r3, [r7, #52]	; 0x34
 800488e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004890:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004892:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004894:	e841 2300 	strex	r3, r2, [r1]
 8004898:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800489a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1e6      	bne.n	800486e <UART_Start_Receive_IT+0x116>
 80048a0:	e018      	b.n	80048d4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	e853 3f00 	ldrex	r3, [r3]
 80048ae:	613b      	str	r3, [r7, #16]
   return(result);
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	f043 0320 	orr.w	r3, r3, #32
 80048b6:	653b      	str	r3, [r7, #80]	; 0x50
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	461a      	mov	r2, r3
 80048be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048c0:	623b      	str	r3, [r7, #32]
 80048c2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c4:	69f9      	ldr	r1, [r7, #28]
 80048c6:	6a3a      	ldr	r2, [r7, #32]
 80048c8:	e841 2300 	strex	r3, r2, [r1]
 80048cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1e6      	bne.n	80048a2 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	375c      	adds	r7, #92	; 0x5c
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	08004b93 	.word	0x08004b93
 80048e8:	08004a33 	.word	0x08004a33

080048ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b095      	sub	sp, #84	; 0x54
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048fc:	e853 3f00 	ldrex	r3, [r3]
 8004900:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004904:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004908:	64fb      	str	r3, [r7, #76]	; 0x4c
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	461a      	mov	r2, r3
 8004910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004912:	643b      	str	r3, [r7, #64]	; 0x40
 8004914:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004916:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004918:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800491a:	e841 2300 	strex	r3, r2, [r1]
 800491e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1e6      	bne.n	80048f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	3308      	adds	r3, #8
 800492c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	e853 3f00 	ldrex	r3, [r3]
 8004934:	61fb      	str	r3, [r7, #28]
   return(result);
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	f023 0301 	bic.w	r3, r3, #1
 800493c:	64bb      	str	r3, [r7, #72]	; 0x48
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	3308      	adds	r3, #8
 8004944:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004946:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004948:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800494c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800494e:	e841 2300 	strex	r3, r2, [r1]
 8004952:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1e5      	bne.n	8004926 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800495e:	2b01      	cmp	r3, #1
 8004960:	d118      	bne.n	8004994 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	e853 3f00 	ldrex	r3, [r3]
 800496e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	f023 0310 	bic.w	r3, r3, #16
 8004976:	647b      	str	r3, [r7, #68]	; 0x44
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	461a      	mov	r2, r3
 800497e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004980:	61bb      	str	r3, [r7, #24]
 8004982:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004984:	6979      	ldr	r1, [r7, #20]
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	e841 2300 	strex	r3, r2, [r1]
 800498c:	613b      	str	r3, [r7, #16]
   return(result);
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1e6      	bne.n	8004962 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2220      	movs	r2, #32
 8004998:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80049a6:	bf00      	nop
 80049a8:	3754      	adds	r7, #84	; 0x54
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b084      	sub	sp, #16
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f7ff facf 	bl	8003f74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049d6:	bf00      	nop
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b088      	sub	sp, #32
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	e853 3f00 	ldrex	r3, [r3]
 80049f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049fa:	61fb      	str	r3, [r7, #28]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	461a      	mov	r2, r3
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	61bb      	str	r3, [r7, #24]
 8004a06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a08:	6979      	ldr	r1, [r7, #20]
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	e841 2300 	strex	r3, r2, [r1]
 8004a10:	613b      	str	r3, [r7, #16]
   return(result);
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1e6      	bne.n	80049e6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7ff fa9b 	bl	8003f60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a2a:	bf00      	nop
 8004a2c:	3720      	adds	r7, #32
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b096      	sub	sp, #88	; 0x58
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a40:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a48:	2b22      	cmp	r3, #34	; 0x22
 8004a4a:	f040 8094 	bne.w	8004b76 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004a54:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004a58:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004a5c:	b2d9      	uxtb	r1, r3
 8004a5e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004a62:	b2da      	uxtb	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a68:	400a      	ands	r2, r1
 8004a6a:	b2d2      	uxtb	r2, r2
 8004a6c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a72:	1c5a      	adds	r2, r3, #1
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	3b01      	subs	r3, #1
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d179      	bne.n	8004b8a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9e:	e853 3f00 	ldrex	r3, [r3]
 8004aa2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004aaa:	653b      	str	r3, [r7, #80]	; 0x50
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ab4:	647b      	str	r3, [r7, #68]	; 0x44
 8004ab6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004aba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004abc:	e841 2300 	strex	r3, r2, [r1]
 8004ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1e6      	bne.n	8004a96 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	3308      	adds	r3, #8
 8004ace:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	e853 3f00 	ldrex	r3, [r3]
 8004ad6:	623b      	str	r3, [r7, #32]
   return(result);
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	f023 0301 	bic.w	r3, r3, #1
 8004ade:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	3308      	adds	r3, #8
 8004ae6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ae8:	633a      	str	r2, [r7, #48]	; 0x30
 8004aea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004aee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004af0:	e841 2300 	strex	r3, r2, [r1]
 8004af4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1e5      	bne.n	8004ac8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2220      	movs	r2, #32
 8004b00:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d12e      	bne.n	8004b6e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	e853 3f00 	ldrex	r3, [r3]
 8004b22:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f023 0310 	bic.w	r3, r3, #16
 8004b2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	461a      	mov	r2, r3
 8004b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b34:	61fb      	str	r3, [r7, #28]
 8004b36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b38:	69b9      	ldr	r1, [r7, #24]
 8004b3a:	69fa      	ldr	r2, [r7, #28]
 8004b3c:	e841 2300 	strex	r3, r2, [r1]
 8004b40:	617b      	str	r3, [r7, #20]
   return(result);
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1e6      	bne.n	8004b16 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	f003 0310 	and.w	r3, r3, #16
 8004b52:	2b10      	cmp	r3, #16
 8004b54:	d103      	bne.n	8004b5e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2210      	movs	r2, #16
 8004b5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b64:	4619      	mov	r1, r3
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7ff fa0e 	bl	8003f88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b6c:	e00d      	b.n	8004b8a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fc fe0c 	bl	800178c <HAL_UART_RxCpltCallback>
}
 8004b74:	e009      	b.n	8004b8a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	8b1b      	ldrh	r3, [r3, #24]
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0208 	orr.w	r2, r2, #8
 8004b86:	b292      	uxth	r2, r2
 8004b88:	831a      	strh	r2, [r3, #24]
}
 8004b8a:	bf00      	nop
 8004b8c:	3758      	adds	r7, #88	; 0x58
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b096      	sub	sp, #88	; 0x58
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004ba0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ba8:	2b22      	cmp	r3, #34	; 0x22
 8004baa:	f040 8094 	bne.w	8004cd6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004bb4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bbc:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004bbe:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004bc2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bcc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd2:	1c9a      	adds	r2, r3, #2
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	3b01      	subs	r3, #1
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d179      	bne.n	8004cea <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bfe:	e853 3f00 	ldrex	r3, [r3]
 8004c02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	461a      	mov	r2, r3
 8004c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c14:	643b      	str	r3, [r7, #64]	; 0x40
 8004c16:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c1c:	e841 2300 	strex	r3, r2, [r1]
 8004c20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1e6      	bne.n	8004bf6 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	3308      	adds	r3, #8
 8004c2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c30:	6a3b      	ldr	r3, [r7, #32]
 8004c32:	e853 3f00 	ldrex	r3, [r3]
 8004c36:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	f023 0301 	bic.w	r3, r3, #1
 8004c3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	3308      	adds	r3, #8
 8004c46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c50:	e841 2300 	strex	r3, r2, [r1]
 8004c54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1e5      	bne.n	8004c28 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d12e      	bne.n	8004cce <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	e853 3f00 	ldrex	r3, [r3]
 8004c82:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f023 0310 	bic.w	r3, r3, #16
 8004c8a:	647b      	str	r3, [r7, #68]	; 0x44
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	461a      	mov	r2, r3
 8004c92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c94:	61bb      	str	r3, [r7, #24]
 8004c96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c98:	6979      	ldr	r1, [r7, #20]
 8004c9a:	69ba      	ldr	r2, [r7, #24]
 8004c9c:	e841 2300 	strex	r3, r2, [r1]
 8004ca0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1e6      	bne.n	8004c76 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	f003 0310 	and.w	r3, r3, #16
 8004cb2:	2b10      	cmp	r3, #16
 8004cb4:	d103      	bne.n	8004cbe <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2210      	movs	r2, #16
 8004cbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7ff f95e 	bl	8003f88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ccc:	e00d      	b.n	8004cea <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7fc fd5c 	bl	800178c <HAL_UART_RxCpltCallback>
}
 8004cd4:	e009      	b.n	8004cea <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	8b1b      	ldrh	r3, [r3, #24]
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 0208 	orr.w	r2, r2, #8
 8004ce6:	b292      	uxth	r2, r2
 8004ce8:	831a      	strh	r2, [r3, #24]
}
 8004cea:	bf00      	nop
 8004cec:	3758      	adds	r7, #88	; 0x58
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b083      	sub	sp, #12
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004cfa:	bf00      	nop
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
	...

08004d08 <StartXbeeTask>:
 * @brief FreeRTOS Task
 * Setup : config xbee module and start receiving
 * Loop : Process incoming messages
 */
void StartXbeeTask(void const * argument)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
	PRINT("XBee Start Task\n");
 8004d10:	480b      	ldr	r0, [pc, #44]	; (8004d40 <StartXbeeTask+0x38>)
 8004d12:	f7fc fbdb 	bl	80014cc <PRINT>

	if(xbee_init(&huart1) != 0)
 8004d16:	480b      	ldr	r0, [pc, #44]	; (8004d44 <StartXbeeTask+0x3c>)
 8004d18:	f000 f818 	bl	8004d4c <xbee_init>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d004      	beq.n	8004d2c <StartXbeeTask+0x24>
		vTaskDelete(xbeeTaskHandle);
 8004d22:	4b09      	ldr	r3, [pc, #36]	; (8004d48 <StartXbeeTask+0x40>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f001 fcf2 	bl	8006710 <vTaskDelete>

	osDelay(1000);
 8004d2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d30:	f000 fc19 	bl	8005566 <osDelay>

//Loop
	for(;;)
	{
		xbee_process();
 8004d34:	f000 f86c 	bl	8004e10 <xbee_process>
		osDelay(100);
 8004d38:	2064      	movs	r0, #100	; 0x64
 8004d3a:	f000 fc14 	bl	8005566 <osDelay>
		xbee_process();
 8004d3e:	e7f9      	b.n	8004d34 <StartXbeeTask+0x2c>
 8004d40:	0800ad18 	.word	0x0800ad18
 8004d44:	20000cc0 	.word	0x20000cc0
 8004d48:	200004b4 	.word	0x200004b4

08004d4c <xbee_init>:

// Initialiser l'interface de communication avec le module XBee
// Return 0 if ok,
//		  1 if else
uint8_t xbee_init(UART_HandleTypeDef* uartHandle)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 8004d54:	2300      	movs	r3, #0
 8004d56:	73fb      	strb	r3, [r7, #15]

	PRINT("Init xbeeSerial...");
 8004d58:	4825      	ldr	r0, [pc, #148]	; (8004df0 <xbee_init+0xa4>)
 8004d5a:	f7fc fbb7 	bl	80014cc <PRINT>
	xbeeSerial_Init(uartHandle);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 fa70 	bl	8005244 <xbeeSerial_Init>

	enteringCmdMode = 0;
 8004d64:	4b23      	ldr	r3, [pc, #140]	; (8004df4 <xbee_init+0xa8>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	701a      	strb	r2, [r3, #0]
	_ResetFrame();
 8004d6a:	f000 fa21 	bl	80051b0 <_ResetFrame>

	_EnterCmdMode();
 8004d6e:	f000 f9b9 	bl	80050e4 <_EnterCmdMode>

	if(ret != 0)
 8004d72:	7bfb      	ldrb	r3, [r7, #15]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <xbee_init+0x30>
		return ret;
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
 8004d7a:	e035      	b.n	8004de8 <xbee_init+0x9c>

	// Configuration PAN ID
	xbee_send_at_command("ID", "30");
 8004d7c:	491e      	ldr	r1, [pc, #120]	; (8004df8 <xbee_init+0xac>)
 8004d7e:	481f      	ldr	r0, [pc, #124]	; (8004dfc <xbee_init+0xb0>)
 8004d80:	f000 f860 	bl	8004e44 <xbee_send_at_command>
	ret = xbee_wait_for_AT_response();
 8004d84:	f000 f8d8 	bl	8004f38 <xbee_wait_for_AT_response>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	73fb      	strb	r3, [r7, #15]
	_processStatus(ret);
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 fa36 	bl	8005200 <_processStatus>
	if(ret != 0)
 8004d94:	7bfb      	ldrb	r3, [r7, #15]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <xbee_init+0x52>
		return ret;
 8004d9a:	7bfb      	ldrb	r3, [r7, #15]
 8004d9c:	e024      	b.n	8004de8 <xbee_init+0x9c>

	// Configuration adresse de destination du second module XBee
	xbee_send_at_command("DH", "13A200");
 8004d9e:	4918      	ldr	r1, [pc, #96]	; (8004e00 <xbee_init+0xb4>)
 8004da0:	4818      	ldr	r0, [pc, #96]	; (8004e04 <xbee_init+0xb8>)
 8004da2:	f000 f84f 	bl	8004e44 <xbee_send_at_command>
	ret = xbee_wait_for_AT_response();
 8004da6:	f000 f8c7 	bl	8004f38 <xbee_wait_for_AT_response>
 8004daa:	4603      	mov	r3, r0
 8004dac:	73fb      	strb	r3, [r7, #15]
	_processStatus(ret);
 8004dae:	7bfb      	ldrb	r3, [r7, #15]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f000 fa25 	bl	8005200 <_processStatus>
	if(ret != 0)
 8004db6:	7bfb      	ldrb	r3, [r7, #15]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <xbee_init+0x74>
		return ret;
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]
 8004dbe:	e013      	b.n	8004de8 <xbee_init+0x9c>

	xbee_send_at_command("DL", "420D3B79");
 8004dc0:	4911      	ldr	r1, [pc, #68]	; (8004e08 <xbee_init+0xbc>)
 8004dc2:	4812      	ldr	r0, [pc, #72]	; (8004e0c <xbee_init+0xc0>)
 8004dc4:	f000 f83e 	bl	8004e44 <xbee_send_at_command>
	ret = xbee_wait_for_AT_response();
 8004dc8:	f000 f8b6 	bl	8004f38 <xbee_wait_for_AT_response>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	73fb      	strb	r3, [r7, #15]
	_processStatus(ret);
 8004dd0:	7bfb      	ldrb	r3, [r7, #15]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 fa14 	bl	8005200 <_processStatus>
	if(ret != 0)
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <xbee_init+0x96>
		return ret;
 8004dde:	7bfb      	ldrb	r3, [r7, #15]
 8004de0:	e002      	b.n	8004de8 <xbee_init+0x9c>

	_ExitCmdMode();
 8004de2:	f000 f9b9 	bl	8005158 <_ExitCmdMode>

	return ret;
 8004de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	0800ad2c 	.word	0x0800ad2c
 8004df4:	20000dcd 	.word	0x20000dcd
 8004df8:	0800ad40 	.word	0x0800ad40
 8004dfc:	0800ad44 	.word	0x0800ad44
 8004e00:	0800ad48 	.word	0x0800ad48
 8004e04:	0800ad50 	.word	0x0800ad50
 8004e08:	0800ad54 	.word	0x0800ad54
 8004e0c:	0800ad60 	.word	0x0800ad60

08004e10 <xbee_process>:

//Main process du module xbee
//Devrait être appelé toutes les 100ms
void xbee_process(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
	static uint32_t startTime = 0;
	uint32_t currTime = HAL_GetTick();
 8004e16:	f7fc fd29 	bl	800186c <HAL_GetTick>
 8004e1a:	6078      	str	r0, [r7, #4]

	//time gate, vérifie que 1sec est passée afin d'être non-bloquant
	if( (currTime - startTime) <= 1000 )
 8004e1c:	4b08      	ldr	r3, [pc, #32]	; (8004e40 <xbee_process+0x30>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e28:	d905      	bls.n	8004e36 <xbee_process+0x26>
		return;
	else
		startTime = HAL_GetTick();
 8004e2a:	f7fc fd1f 	bl	800186c <HAL_GetTick>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	4a03      	ldr	r2, [pc, #12]	; (8004e40 <xbee_process+0x30>)
 8004e32:	6013      	str	r3, [r2, #0]
 8004e34:	e000      	b.n	8004e38 <xbee_process+0x28>
		return;
 8004e36:	bf00      	nop

//	uint8_t msg[] = "Here!\n";
//	xbee_send_data(msg, 6);
}
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	20000e38 	.word	0x20000e38

08004e44 <xbee_send_at_command>:
// Copy command to frame buffer
// User must execute 'xbee_wait_for_AT_response' to send the issued AT request
// Return 0 if ok
//		  1 if buffer overflow
uint8_t xbee_send_at_command(const char *command, const char* param)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
	if(!isCmdMode)
 8004e4e:	4b35      	ldr	r3, [pc, #212]	; (8004f24 <xbee_send_at_command+0xe0>)
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <xbee_send_at_command+0x16>
		_EnterCmdMode();
 8004e56:	f000 f945 	bl	80050e4 <_EnterCmdMode>

	// add comma if daisy chained commands
	if(_size != 0)
 8004e5a:	4b33      	ldr	r3, [pc, #204]	; (8004f28 <xbee_send_at_command+0xe4>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00f      	beq.n	8004e82 <xbee_send_at_command+0x3e>
	{
		if(_allocateFrame(1))
 8004e62:	2001      	movs	r0, #1
 8004e64:	f000 f9b4 	bl	80051d0 <_allocateFrame>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <xbee_send_at_command+0x2e>
			return 1;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e053      	b.n	8004f1a <xbee_send_at_command+0xd6>
		_frame[_size++] = ',';
 8004e72:	4b2d      	ldr	r3, [pc, #180]	; (8004f28 <xbee_send_at_command+0xe4>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	1c5a      	adds	r2, r3, #1
 8004e78:	492b      	ldr	r1, [pc, #172]	; (8004f28 <xbee_send_at_command+0xe4>)
 8004e7a:	600a      	str	r2, [r1, #0]
 8004e7c:	4a2b      	ldr	r2, [pc, #172]	; (8004f2c <xbee_send_at_command+0xe8>)
 8004e7e:	212c      	movs	r1, #44	; 0x2c
 8004e80:	54d1      	strb	r1, [r2, r3]
	}

	if(_allocateFrame(4))
 8004e82:	2004      	movs	r0, #4
 8004e84:	f000 f9a4 	bl	80051d0 <_allocateFrame>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <xbee_send_at_command+0x4e>
		return 1;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e043      	b.n	8004f1a <xbee_send_at_command+0xd6>

	memcpy(&_frame[_size], "AT", 2);
 8004e92:	4b25      	ldr	r3, [pc, #148]	; (8004f28 <xbee_send_at_command+0xe4>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a25      	ldr	r2, [pc, #148]	; (8004f2c <xbee_send_at_command+0xe8>)
 8004e98:	4413      	add	r3, r2
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	4924      	ldr	r1, [pc, #144]	; (8004f30 <xbee_send_at_command+0xec>)
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f003 f897 	bl	8007fd2 <memcpy>
	_size += 2;
 8004ea4:	4b20      	ldr	r3, [pc, #128]	; (8004f28 <xbee_send_at_command+0xe4>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	3302      	adds	r3, #2
 8004eaa:	4a1f      	ldr	r2, [pc, #124]	; (8004f28 <xbee_send_at_command+0xe4>)
 8004eac:	6013      	str	r3, [r2, #0]
	memcpy(&_frame[_size], command, 2);
 8004eae:	4b1e      	ldr	r3, [pc, #120]	; (8004f28 <xbee_send_at_command+0xe4>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a1e      	ldr	r2, [pc, #120]	; (8004f2c <xbee_send_at_command+0xe8>)
 8004eb4:	4413      	add	r3, r2
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	8812      	ldrh	r2, [r2, #0]
 8004eba:	b292      	uxth	r2, r2
 8004ebc:	801a      	strh	r2, [r3, #0]
	_size += 2;
 8004ebe:	4b1a      	ldr	r3, [pc, #104]	; (8004f28 <xbee_send_at_command+0xe4>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3302      	adds	r3, #2
 8004ec4:	4a18      	ldr	r2, [pc, #96]	; (8004f28 <xbee_send_at_command+0xe4>)
 8004ec6:	6013      	str	r3, [r2, #0]

	uint8_t i = 0;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	73fb      	strb	r3, [r7, #15]
	uint8_t currByte = param[i];
 8004ecc:	7bfb      	ldrb	r3, [r7, #15]
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	73bb      	strb	r3, [r7, #14]
	while(currByte != '\0')
 8004ed6:	e017      	b.n	8004f08 <xbee_send_at_command+0xc4>
	{
		if(_allocateFrame(1))
 8004ed8:	2001      	movs	r0, #1
 8004eda:	f000 f979 	bl	80051d0 <_allocateFrame>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d001      	beq.n	8004ee8 <xbee_send_at_command+0xa4>
			return 1;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e018      	b.n	8004f1a <xbee_send_at_command+0xd6>

		_frame[_size++] = currByte;
 8004ee8:	4b0f      	ldr	r3, [pc, #60]	; (8004f28 <xbee_send_at_command+0xe4>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	1c5a      	adds	r2, r3, #1
 8004eee:	490e      	ldr	r1, [pc, #56]	; (8004f28 <xbee_send_at_command+0xe4>)
 8004ef0:	600a      	str	r2, [r1, #0]
 8004ef2:	490e      	ldr	r1, [pc, #56]	; (8004f2c <xbee_send_at_command+0xe8>)
 8004ef4:	7bba      	ldrb	r2, [r7, #14]
 8004ef6:	54ca      	strb	r2, [r1, r3]
		currByte =  param[++i];
 8004ef8:	7bfb      	ldrb	r3, [r7, #15]
 8004efa:	3301      	adds	r3, #1
 8004efc:	73fb      	strb	r3, [r7, #15]
 8004efe:	7bfb      	ldrb	r3, [r7, #15]
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	4413      	add	r3, r2
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	73bb      	strb	r3, [r7, #14]
	while(currByte != '\0')
 8004f08:	7bbb      	ldrb	r3, [r7, #14]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1e4      	bne.n	8004ed8 <xbee_send_at_command+0x94>
	}

	PRINT("Command issued : AT %s %s\n", command, param); //Log
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	6879      	ldr	r1, [r7, #4]
 8004f12:	4808      	ldr	r0, [pc, #32]	; (8004f34 <xbee_send_at_command+0xf0>)
 8004f14:	f7fc fada 	bl	80014cc <PRINT>

	return 0;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	20000dcc 	.word	0x20000dcc
 8004f28:	20000e34 	.word	0x20000e34
 8004f2c:	20000dd0 	.word	0x20000dd0
 8004f30:	0800ad64 	.word	0x0800ad64
 8004f34:	0800ad68 	.word	0x0800ad68

08004f38 <xbee_wait_for_AT_response>:
// Wait for 'OK\r' response
// Return   0 if ok
//		    1 if timeout
//		    2 if response incorrect
uint8_t xbee_wait_for_AT_response(void)
{
 8004f38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f3c:	b087      	sub	sp, #28
 8004f3e:	af00      	add	r7, sp, #0
	uint32_t startTime, currTime;

	if(!isCmdMode)
 8004f40:	4b44      	ldr	r3, [pc, #272]	; (8005054 <xbee_wait_for_AT_response+0x11c>)
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <xbee_wait_for_AT_response+0x14>
		return 0;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	e07e      	b.n	800504a <xbee_wait_for_AT_response+0x112>

	//If in command mode
	if(!enteringCmdMode)
 8004f4c:	4b42      	ldr	r3, [pc, #264]	; (8005058 <xbee_wait_for_AT_response+0x120>)
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d11f      	bne.n	8004f94 <xbee_wait_for_AT_response+0x5c>
	{
		if(_allocateFrame(1))
 8004f54:	2001      	movs	r0, #1
 8004f56:	f000 f93b 	bl	80051d0 <_allocateFrame>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <xbee_wait_for_AT_response+0x2c>
			return 1;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e072      	b.n	800504a <xbee_wait_for_AT_response+0x112>

		PRINT("Sending frame  : %.*s\n", _size, _frame); //log _frame. '\r' is not printed
 8004f64:	4b3d      	ldr	r3, [pc, #244]	; (800505c <xbee_wait_for_AT_response+0x124>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a3d      	ldr	r2, [pc, #244]	; (8005060 <xbee_wait_for_AT_response+0x128>)
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	483d      	ldr	r0, [pc, #244]	; (8005064 <xbee_wait_for_AT_response+0x12c>)
 8004f6e:	f7fc faad 	bl	80014cc <PRINT>
		PRINT("...");
 8004f72:	483d      	ldr	r0, [pc, #244]	; (8005068 <xbee_wait_for_AT_response+0x130>)
 8004f74:	f7fc faaa 	bl	80014cc <PRINT>
		_frame[_size++] = '\r';  //wrap up _frame
 8004f78:	4b38      	ldr	r3, [pc, #224]	; (800505c <xbee_wait_for_AT_response+0x124>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	1c5a      	adds	r2, r3, #1
 8004f7e:	4937      	ldr	r1, [pc, #220]	; (800505c <xbee_wait_for_AT_response+0x124>)
 8004f80:	600a      	str	r2, [r1, #0]
 8004f82:	4a37      	ldr	r2, [pc, #220]	; (8005060 <xbee_wait_for_AT_response+0x128>)
 8004f84:	210d      	movs	r1, #13
 8004f86:	54d1      	strb	r1, [r2, r3]

		xbeeSerial_Transmit(_frame, _size);  //Send _frame
 8004f88:	4b34      	ldr	r3, [pc, #208]	; (800505c <xbee_wait_for_AT_response+0x124>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4834      	ldr	r0, [pc, #208]	; (8005060 <xbee_wait_for_AT_response+0x128>)
 8004f90:	f000 f9e2 	bl	8005358 <xbeeSerial_Transmit>
	}

	//Check timeout
	startTime = HAL_GetTick();
 8004f94:	f7fc fc6a 	bl	800186c <HAL_GetTick>
 8004f98:	6178      	str	r0, [r7, #20]
	while(!xbeeSerial_isMessageReceived())
 8004f9a:	e00c      	b.n	8004fb6 <xbee_wait_for_AT_response+0x7e>
	{
		currTime = HAL_GetTick();
 8004f9c:	f7fc fc66 	bl	800186c <HAL_GetTick>
 8004fa0:	6078      	str	r0, [r7, #4]
		//wait time over 1 second
		if((currTime - startTime) > 2000)
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004fac:	d903      	bls.n	8004fb6 <xbee_wait_for_AT_response+0x7e>
		{
			//Timeout, module failed to respond
			_ResetFrame();
 8004fae:	f000 f8ff 	bl	80051b0 <_ResetFrame>
			return 1;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e049      	b.n	800504a <xbee_wait_for_AT_response+0x112>
	while(!xbeeSerial_isMessageReceived())
 8004fb6:	f000 f9e3 	bl	8005380 <xbeeSerial_isMessageReceived>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0ed      	beq.n	8004f9c <xbee_wait_for_AT_response+0x64>
		}
	}

	//Get response
	uint8_t correctBuffer[3] = "OK\r";
 8004fc0:	4a2a      	ldr	r2, [pc, #168]	; (800506c <xbee_wait_for_AT_response+0x134>)
 8004fc2:	463b      	mov	r3, r7
 8004fc4:	6812      	ldr	r2, [r2, #0]
 8004fc6:	4611      	mov	r1, r2
 8004fc8:	8019      	strh	r1, [r3, #0]
 8004fca:	3302      	adds	r3, #2
 8004fcc:	0c12      	lsrs	r2, r2, #16
 8004fce:	701a      	strb	r2, [r3, #0]
	uint32_t rxBufferSize = xbeeSerial_getBufferSize();
 8004fd0:	f000 f9a0 	bl	8005314 <xbeeSerial_getBufferSize>
 8004fd4:	6138      	str	r0, [r7, #16]
	uint8_t rxBuffer[rxBufferSize];
 8004fd6:	6939      	ldr	r1, [r7, #16]
 8004fd8:	466b      	mov	r3, sp
 8004fda:	461e      	mov	r6, r3
 8004fdc:	460b      	mov	r3, r1
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	60fb      	str	r3, [r7, #12]
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	4688      	mov	r8, r1
 8004fe6:	4699      	mov	r9, r3
 8004fe8:	f04f 0200 	mov.w	r2, #0
 8004fec:	f04f 0300 	mov.w	r3, #0
 8004ff0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ff4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ff8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	460c      	mov	r4, r1
 8005000:	461d      	mov	r5, r3
 8005002:	f04f 0200 	mov.w	r2, #0
 8005006:	f04f 0300 	mov.w	r3, #0
 800500a:	00eb      	lsls	r3, r5, #3
 800500c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005010:	00e2      	lsls	r2, r4, #3
 8005012:	1dcb      	adds	r3, r1, #7
 8005014:	08db      	lsrs	r3, r3, #3
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	ebad 0d03 	sub.w	sp, sp, r3
 800501c:	466b      	mov	r3, sp
 800501e:	3300      	adds	r3, #0
 8005020:	60bb      	str	r3, [r7, #8]

	xbeeSerial_getBuffer(rxBuffer);
 8005022:	68b8      	ldr	r0, [r7, #8]
 8005024:	f000 f92e 	bl	8005284 <xbeeSerial_getBuffer>
	if(memcmp(rxBuffer, correctBuffer, 3) != 0)
 8005028:	463b      	mov	r3, r7
 800502a:	2203      	movs	r2, #3
 800502c:	4619      	mov	r1, r3
 800502e:	68b8      	ldr	r0, [r7, #8]
 8005030:	f002 ffbf 	bl	8007fb2 <memcmp>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d003      	beq.n	8005042 <xbee_wait_for_AT_response+0x10a>
	{
		//Response is incorrect
		_ResetFrame();
 800503a:	f000 f8b9 	bl	80051b0 <_ResetFrame>
		return 2;
 800503e:	2302      	movs	r3, #2
 8005040:	e002      	b.n	8005048 <xbee_wait_for_AT_response+0x110>
	}

	_ResetFrame();
 8005042:	f000 f8b5 	bl	80051b0 <_ResetFrame>
	return 0;
 8005046:	2300      	movs	r3, #0
 8005048:	46b5      	mov	sp, r6
}
 800504a:	4618      	mov	r0, r3
 800504c:	371c      	adds	r7, #28
 800504e:	46bd      	mov	sp, r7
 8005050:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005054:	20000dcc 	.word	0x20000dcc
 8005058:	20000dcd 	.word	0x20000dcd
 800505c:	20000e34 	.word	0x20000e34
 8005060:	20000dd0 	.word	0x20000dd0
 8005064:	0800ad84 	.word	0x0800ad84
 8005068:	0800ad9c 	.word	0x0800ad9c
 800506c:	0800ada0 	.word	0x0800ada0

08005070 <xbee_send_data>:

// Envoyer des données au module XBee en mode transparent
void xbee_send_data(const uint8_t *data, int length)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
	if(isCmdMode)
 800507a:	4b0c      	ldr	r3, [pc, #48]	; (80050ac <xbee_send_data+0x3c>)
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d005      	beq.n	800508e <xbee_send_data+0x1e>
		_processStatus(_ExitCmdMode());
 8005082:	f000 f869 	bl	8005158 <_ExitCmdMode>
 8005086:	4603      	mov	r3, r0
 8005088:	4618      	mov	r0, r3
 800508a:	f000 f8b9 	bl	8005200 <_processStatus>

	//TODO convert to ascii
	PRINT("%.s", length, data);
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	6839      	ldr	r1, [r7, #0]
 8005092:	4807      	ldr	r0, [pc, #28]	; (80050b0 <xbee_send_data+0x40>)
 8005094:	f7fc fa1a 	bl	80014cc <PRINT>

	xbeeSerial_Transmit(data, length); //Send to module
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	4619      	mov	r1, r3
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f95b 	bl	8005358 <xbeeSerial_Transmit>
}
 80050a2:	bf00      	nop
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	20000dcc 	.word	0x20000dcc
 80050b0:	0800ada4 	.word	0x0800ada4

080050b4 <xbee_byteRcvCallback>:

//Byte receive callback in transparent mode
//User should implement this
__weak void xbee_byteRcvCallback(const uint8_t byte)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	4603      	mov	r3, r0
 80050bc:	71fb      	strb	r3, [r7, #7]
	PRINT("%c", byte);
 80050be:	79fb      	ldrb	r3, [r7, #7]
 80050c0:	4619      	mov	r1, r3
 80050c2:	4806      	ldr	r0, [pc, #24]	; (80050dc <xbee_byteRcvCallback+0x28>)
 80050c4:	f7fc fa02 	bl	80014cc <PRINT>
	if(byte == '\r')
 80050c8:	79fb      	ldrb	r3, [r7, #7]
 80050ca:	2b0d      	cmp	r3, #13
 80050cc:	d102      	bne.n	80050d4 <xbee_byteRcvCallback+0x20>
		PRINT("\n");
 80050ce:	4804      	ldr	r0, [pc, #16]	; (80050e0 <xbee_byteRcvCallback+0x2c>)
 80050d0:	f7fc f9fc 	bl	80014cc <PRINT>
}
 80050d4:	bf00      	nop
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	0800ada8 	.word	0x0800ada8
 80050e0:	0800adac 	.word	0x0800adac

080050e4 <_EnterCmdMode>:


//Enter command mode function.
//Return 0 if OK, 1 else
uint8_t _EnterCmdMode(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
	uint8_t ret = 1;
 80050ea:	2301      	movs	r3, #1
 80050ec:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[3] = "+++";
 80050ee:	4a16      	ldr	r2, [pc, #88]	; (8005148 <_EnterCmdMode+0x64>)
 80050f0:	1d3b      	adds	r3, r7, #4
 80050f2:	6812      	ldr	r2, [r2, #0]
 80050f4:	4611      	mov	r1, r2
 80050f6:	8019      	strh	r1, [r3, #0]
 80050f8:	3302      	adds	r3, #2
 80050fa:	0c12      	lsrs	r2, r2, #16
 80050fc:	701a      	strb	r2, [r3, #0]

	//We need to set CmdMode in order for callback to work
	//Variable is reset later if fail
	isCmdMode = 1;
 80050fe:	4b13      	ldr	r3, [pc, #76]	; (800514c <_EnterCmdMode+0x68>)
 8005100:	2201      	movs	r2, #1
 8005102:	701a      	strb	r2, [r3, #0]
	enteringCmdMode = 1;
 8005104:	4b12      	ldr	r3, [pc, #72]	; (8005150 <_EnterCmdMode+0x6c>)
 8005106:	2201      	movs	r2, #1
 8005108:	701a      	strb	r2, [r3, #0]

	xbeeSerial_Transmit(cmd, 3);
 800510a:	1d3b      	adds	r3, r7, #4
 800510c:	2103      	movs	r1, #3
 800510e:	4618      	mov	r0, r3
 8005110:	f000 f922 	bl	8005358 <xbeeSerial_Transmit>
	ret = xbee_wait_for_AT_response();
 8005114:	f7ff ff10 	bl	8004f38 <xbee_wait_for_AT_response>
 8005118:	4603      	mov	r3, r0
 800511a:	71fb      	strb	r3, [r7, #7]
	_processStatus(ret);
 800511c:	79fb      	ldrb	r3, [r7, #7]
 800511e:	4618      	mov	r0, r3
 8005120:	f000 f86e 	bl	8005200 <_processStatus>
	if(ret != 0)
 8005124:	79fb      	ldrb	r3, [r7, #7]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <_EnterCmdMode+0x4e>
		isCmdMode = 0;
 800512a:	4b08      	ldr	r3, [pc, #32]	; (800514c <_EnterCmdMode+0x68>)
 800512c:	2200      	movs	r2, #0
 800512e:	701a      	strb	r2, [r3, #0]
 8005130:	e002      	b.n	8005138 <_EnterCmdMode+0x54>
	else
		PRINT("  - CMD MODE\n");
 8005132:	4808      	ldr	r0, [pc, #32]	; (8005154 <_EnterCmdMode+0x70>)
 8005134:	f7fc f9ca 	bl	80014cc <PRINT>

	enteringCmdMode = 0;
 8005138:	4b05      	ldr	r3, [pc, #20]	; (8005150 <_EnterCmdMode+0x6c>)
 800513a:	2200      	movs	r2, #0
 800513c:	701a      	strb	r2, [r3, #0]

	return ret;
 800513e:	79fb      	ldrb	r3, [r7, #7]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3708      	adds	r7, #8
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	0800adc0 	.word	0x0800adc0
 800514c:	20000dcc 	.word	0x20000dcc
 8005150:	20000dcd 	.word	0x20000dcd
 8005154:	0800adb0 	.word	0x0800adb0

08005158 <_ExitCmdMode>:

uint8_t _ExitCmdMode(void)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
	uint8_t ret = 1;
 800515e:	2301      	movs	r3, #1
 8005160:	71fb      	strb	r3, [r7, #7]
	
	isCmdMode = 1;
 8005162:	4b0f      	ldr	r3, [pc, #60]	; (80051a0 <_ExitCmdMode+0x48>)
 8005164:	2201      	movs	r2, #1
 8005166:	701a      	strb	r2, [r3, #0]

	xbee_send_at_command("CN", "");
 8005168:	490e      	ldr	r1, [pc, #56]	; (80051a4 <_ExitCmdMode+0x4c>)
 800516a:	480f      	ldr	r0, [pc, #60]	; (80051a8 <_ExitCmdMode+0x50>)
 800516c:	f7ff fe6a 	bl	8004e44 <xbee_send_at_command>
	ret = xbee_wait_for_AT_response();
 8005170:	f7ff fee2 	bl	8004f38 <xbee_wait_for_AT_response>
 8005174:	4603      	mov	r3, r0
 8005176:	71fb      	strb	r3, [r7, #7]
	_processStatus(ret);
 8005178:	79fb      	ldrb	r3, [r7, #7]
 800517a:	4618      	mov	r0, r3
 800517c:	f000 f840 	bl	8005200 <_processStatus>
	if(ret == 0)
 8005180:	79fb      	ldrb	r3, [r7, #7]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d107      	bne.n	8005196 <_ExitCmdMode+0x3e>
	{
		ret = 0;
 8005186:	2300      	movs	r3, #0
 8005188:	71fb      	strb	r3, [r7, #7]
		isCmdMode = 0;
 800518a:	4b05      	ldr	r3, [pc, #20]	; (80051a0 <_ExitCmdMode+0x48>)
 800518c:	2200      	movs	r2, #0
 800518e:	701a      	strb	r2, [r3, #0]
		PRINT("  - TRANSPARENT MODE\n");
 8005190:	4806      	ldr	r0, [pc, #24]	; (80051ac <_ExitCmdMode+0x54>)
 8005192:	f7fc f99b 	bl	80014cc <PRINT>
	}

	return ret;
 8005196:	79fb      	ldrb	r3, [r7, #7]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	20000dcc 	.word	0x20000dcc
 80051a4:	0800adc4 	.word	0x0800adc4
 80051a8:	0800adc8 	.word	0x0800adc8
 80051ac:	0800adcc 	.word	0x0800adcc

080051b0 <_ResetFrame>:

void _ResetFrame(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0
	memset(_frame, 0, TX_FRAME_SIZE);
 80051b4:	2264      	movs	r2, #100	; 0x64
 80051b6:	2100      	movs	r1, #0
 80051b8:	4803      	ldr	r0, [pc, #12]	; (80051c8 <_ResetFrame+0x18>)
 80051ba:	f002 ff18 	bl	8007fee <memset>
	_size = 0;
 80051be:	4b03      	ldr	r3, [pc, #12]	; (80051cc <_ResetFrame+0x1c>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	601a      	str	r2, [r3, #0]
}
 80051c4:	bf00      	nop
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	20000dd0 	.word	0x20000dd0
 80051cc:	20000e34 	.word	0x20000e34

080051d0 <_allocateFrame>:
//Comme on rempli le buffer de données variable,
//permet de checker que le buffer n'overflow pas.
//Return 1 if _frame overflow
//		 0 else
uint8_t _allocateFrame(uint32_t nbBytes)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 80051d8:	2300      	movs	r3, #0
 80051da:	73fb      	strb	r3, [r7, #15]
	if((_size+nbBytes) > TX_FRAME_SIZE) //check size
 80051dc:	4b07      	ldr	r3, [pc, #28]	; (80051fc <_allocateFrame+0x2c>)
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4413      	add	r3, r2
 80051e4:	2b64      	cmp	r3, #100	; 0x64
 80051e6:	d903      	bls.n	80051f0 <_allocateFrame+0x20>
	{
		//buffer overflow, erase _frame and return
		_ResetFrame();
 80051e8:	f7ff ffe2 	bl	80051b0 <_ResetFrame>
		ret = 1;
 80051ec:	2301      	movs	r3, #1
 80051ee:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 80051f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	20000e34 	.word	0x20000e34

08005200 <_processStatus>:

void _processStatus(uint8_t status)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	4603      	mov	r3, r0
 8005208:	71fb      	strb	r3, [r7, #7]
	switch(status)
 800520a:	79fb      	ldrb	r3, [r7, #7]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d002      	beq.n	8005216 <_processStatus+0x16>
 8005210:	2b02      	cmp	r3, #2
 8005212:	d008      	beq.n	8005226 <_processStatus+0x26>
 8005214:	e003      	b.n	800521e <_processStatus+0x1e>
	{
	case 0:
		PRINT("done\n\n");
 8005216:	4808      	ldr	r0, [pc, #32]	; (8005238 <_processStatus+0x38>)
 8005218:	f7fc f958 	bl	80014cc <PRINT>
		break;
 800521c:	e007      	b.n	800522e <_processStatus+0x2e>

	default:
	case 1:
		PRINT("/!\\ Timeout, communication failed!\n");
 800521e:	4807      	ldr	r0, [pc, #28]	; (800523c <_processStatus+0x3c>)
 8005220:	f7fc f954 	bl	80014cc <PRINT>
		break;
 8005224:	e003      	b.n	800522e <_processStatus+0x2e>

	case 2:
		PRINT("/!\\ Bad response, communication failed!\n");
 8005226:	4806      	ldr	r0, [pc, #24]	; (8005240 <_processStatus+0x40>)
 8005228:	f7fc f950 	bl	80014cc <PRINT>
		break;
 800522c:	bf00      	nop
	}
}
 800522e:	bf00      	nop
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	0800ade4 	.word	0x0800ade4
 800523c:	0800adec 	.word	0x0800adec
 8005240:	0800ae10 	.word	0x0800ae10

08005244 <xbeeSerial_Init>:
extern uint8_t isCmdMode;	//Boolean, is command mode active. Global variable
extern uint8_t enteringCmdMode;


void xbeeSerial_Init(UART_HandleTypeDef* huart)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
	uart = huart;
 800524c:	4a09      	ldr	r2, [pc, #36]	; (8005274 <xbeeSerial_Init+0x30>)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6013      	str	r3, [r2, #0]
	head = tail = rxByte = 0;
 8005252:	4b09      	ldr	r3, [pc, #36]	; (8005278 <xbeeSerial_Init+0x34>)
 8005254:	2200      	movs	r2, #0
 8005256:	701a      	strb	r2, [r3, #0]
 8005258:	4b08      	ldr	r3, [pc, #32]	; (800527c <xbeeSerial_Init+0x38>)
 800525a:	2200      	movs	r2, #0
 800525c:	601a      	str	r2, [r3, #0]
 800525e:	4b07      	ldr	r3, [pc, #28]	; (800527c <xbeeSerial_Init+0x38>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a07      	ldr	r2, [pc, #28]	; (8005280 <xbeeSerial_Init+0x3c>)
 8005264:	6013      	str	r3, [r2, #0]

	_ReceiveStart();
 8005266:	f000 f897 	bl	8005398 <_ReceiveStart>
}
 800526a:	bf00      	nop
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	20000e3c 	.word	0x20000e3c
 8005278:	20000e40 	.word	0x20000e40
 800527c:	20000eac 	.word	0x20000eac
 8005280:	20000ea8 	.word	0x20000ea8

08005284 <xbeeSerial_getBuffer>:

/*
 * Copy received buffer to destination
 */
void xbeeSerial_getBuffer(uint8_t* destination)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
	int32_t msgSize;
	if(head < tail)
 800528c:	4b1e      	ldr	r3, [pc, #120]	; (8005308 <xbeeSerial_getBuffer+0x84>)
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	4b1e      	ldr	r3, [pc, #120]	; (800530c <xbeeSerial_getBuffer+0x88>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	429a      	cmp	r2, r3
 8005296:	d21f      	bcs.n	80052d8 <xbeeSerial_getBuffer+0x54>
	{
		//message is splitted in buffer, copy in two time
		msgSize = RING_BUFFER_SIZE - tail + head;
 8005298:	4b1b      	ldr	r3, [pc, #108]	; (8005308 <xbeeSerial_getBuffer+0x84>)
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	4b1b      	ldr	r3, [pc, #108]	; (800530c <xbeeSerial_getBuffer+0x88>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	3364      	adds	r3, #100	; 0x64
 80052a4:	60fb      	str	r3, [r7, #12]
		uint8_t halfSize = RING_BUFFER_SIZE - tail;
 80052a6:	4b19      	ldr	r3, [pc, #100]	; (800530c <xbeeSerial_getBuffer+0x88>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80052b0:	72fb      	strb	r3, [r7, #11]
		memcpy(destination, &ringBuffer[tail], halfSize);
 80052b2:	4b16      	ldr	r3, [pc, #88]	; (800530c <xbeeSerial_getBuffer+0x88>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a16      	ldr	r2, [pc, #88]	; (8005310 <xbeeSerial_getBuffer+0x8c>)
 80052b8:	4413      	add	r3, r2
 80052ba:	7afa      	ldrb	r2, [r7, #11]
 80052bc:	4619      	mov	r1, r3
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f002 fe87 	bl	8007fd2 <memcpy>
		memcpy(&destination[halfSize], ringBuffer, head);
 80052c4:	7afb      	ldrb	r3, [r7, #11]
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	4413      	add	r3, r2
 80052ca:	4a0f      	ldr	r2, [pc, #60]	; (8005308 <xbeeSerial_getBuffer+0x84>)
 80052cc:	6812      	ldr	r2, [r2, #0]
 80052ce:	4910      	ldr	r1, [pc, #64]	; (8005310 <xbeeSerial_getBuffer+0x8c>)
 80052d0:	4618      	mov	r0, r3
 80052d2:	f002 fe7e 	bl	8007fd2 <memcpy>
 80052d6:	e00e      	b.n	80052f6 <xbeeSerial_getBuffer+0x72>
	}
	else
	{
		//Message is not splitted, regular copy
		msgSize = head - tail;
 80052d8:	4b0b      	ldr	r3, [pc, #44]	; (8005308 <xbeeSerial_getBuffer+0x84>)
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	4b0b      	ldr	r3, [pc, #44]	; (800530c <xbeeSerial_getBuffer+0x88>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	60fb      	str	r3, [r7, #12]
		memcpy(destination, &ringBuffer[tail], msgSize);
 80052e4:	4b09      	ldr	r3, [pc, #36]	; (800530c <xbeeSerial_getBuffer+0x88>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a09      	ldr	r2, [pc, #36]	; (8005310 <xbeeSerial_getBuffer+0x8c>)
 80052ea:	4413      	add	r3, r2
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	4619      	mov	r1, r3
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f002 fe6e 	bl	8007fd2 <memcpy>
	}

	//Update index
	tail = head;
 80052f6:	4b04      	ldr	r3, [pc, #16]	; (8005308 <xbeeSerial_getBuffer+0x84>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a04      	ldr	r2, [pc, #16]	; (800530c <xbeeSerial_getBuffer+0x88>)
 80052fc:	6013      	str	r3, [r2, #0]
}
 80052fe:	bf00      	nop
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20000ea8 	.word	0x20000ea8
 800530c:	20000eac 	.word	0x20000eac
 8005310:	20000e44 	.word	0x20000e44

08005314 <xbeeSerial_getBufferSize>:

/*
 * get amount of received bytes
 */
uint32_t xbeeSerial_getBufferSize(void)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
	uint32_t size;
	if(head < tail)
 800531a:	4b0d      	ldr	r3, [pc, #52]	; (8005350 <xbeeSerial_getBufferSize+0x3c>)
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	4b0d      	ldr	r3, [pc, #52]	; (8005354 <xbeeSerial_getBufferSize+0x40>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	429a      	cmp	r2, r3
 8005324:	d207      	bcs.n	8005336 <xbeeSerial_getBufferSize+0x22>
		size = RING_BUFFER_SIZE - tail + head;
 8005326:	4b0a      	ldr	r3, [pc, #40]	; (8005350 <xbeeSerial_getBufferSize+0x3c>)
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	4b0a      	ldr	r3, [pc, #40]	; (8005354 <xbeeSerial_getBufferSize+0x40>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	3364      	adds	r3, #100	; 0x64
 8005332:	607b      	str	r3, [r7, #4]
 8005334:	e005      	b.n	8005342 <xbeeSerial_getBufferSize+0x2e>
	else
		size = head - tail;
 8005336:	4b06      	ldr	r3, [pc, #24]	; (8005350 <xbeeSerial_getBufferSize+0x3c>)
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	4b06      	ldr	r3, [pc, #24]	; (8005354 <xbeeSerial_getBufferSize+0x40>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	607b      	str	r3, [r7, #4]
	return size;
 8005342:	687b      	ldr	r3, [r7, #4]
}
 8005344:	4618      	mov	r0, r3
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr
 8005350:	20000ea8 	.word	0x20000ea8
 8005354:	20000eac 	.word	0x20000eac

08005358 <xbeeSerial_Transmit>:

/*
 * UART transmit blocking mode
 */
void xbeeSerial_Transmit(const uint8_t* txBuffer, const uint32_t size)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(uart, txBuffer, size, 100);
 8005362:	4b06      	ldr	r3, [pc, #24]	; (800537c <xbeeSerial_Transmit+0x24>)
 8005364:	6818      	ldr	r0, [r3, #0]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	b29a      	uxth	r2, r3
 800536a:	2364      	movs	r3, #100	; 0x64
 800536c:	6879      	ldr	r1, [r7, #4]
 800536e:	f7fe fa2b 	bl	80037c8 <HAL_UART_Transmit>
}
 8005372:	bf00      	nop
 8005374:	3708      	adds	r7, #8
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	20000e3c 	.word	0x20000e3c

08005380 <xbeeSerial_isMessageReceived>:

uint8_t xbeeSerial_isMessageReceived(void)
{
 8005380:	b480      	push	{r7}
 8005382:	af00      	add	r7, sp, #0
	return msgReceived;
 8005384:	4b03      	ldr	r3, [pc, #12]	; (8005394 <xbeeSerial_isMessageReceived+0x14>)
 8005386:	781b      	ldrb	r3, [r3, #0]
}
 8005388:	4618      	mov	r0, r3
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	20000eb0 	.word	0x20000eb0

08005398 <_ReceiveStart>:

/*** Private functions ***/
void _ReceiveStart(void)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	af00      	add	r7, sp, #0
	head = 0;
 800539c:	4b0b      	ldr	r3, [pc, #44]	; (80053cc <_ReceiveStart+0x34>)
 800539e:	2200      	movs	r2, #0
 80053a0:	601a      	str	r2, [r3, #0]
	tail = 0;
 80053a2:	4b0b      	ldr	r3, [pc, #44]	; (80053d0 <_ReceiveStart+0x38>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	601a      	str	r2, [r3, #0]
	msgReceived = 0;
 80053a8:	4b0a      	ldr	r3, [pc, #40]	; (80053d4 <_ReceiveStart+0x3c>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	701a      	strb	r2, [r3, #0]

	memset(ringBuffer, 0, RING_BUFFER_SIZE);
 80053ae:	2264      	movs	r2, #100	; 0x64
 80053b0:	2100      	movs	r1, #0
 80053b2:	4809      	ldr	r0, [pc, #36]	; (80053d8 <_ReceiveStart+0x40>)
 80053b4:	f002 fe1b 	bl	8007fee <memset>

	HAL_UART_Receive_IT(uart, &rxByte, 1);
 80053b8:	4b08      	ldr	r3, [pc, #32]	; (80053dc <_ReceiveStart+0x44>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2201      	movs	r2, #1
 80053be:	4908      	ldr	r1, [pc, #32]	; (80053e0 <_ReceiveStart+0x48>)
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7fe fa95 	bl	80038f0 <HAL_UART_Receive_IT>
}
 80053c6:	bf00      	nop
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	20000ea8 	.word	0x20000ea8
 80053d0:	20000eac 	.word	0x20000eac
 80053d4:	20000eb0 	.word	0x20000eb0
 80053d8:	20000e44 	.word	0x20000e44
 80053dc:	20000e3c 	.word	0x20000e3c
 80053e0:	20000e40 	.word	0x20000e40

080053e4 <xbeeSerial_rxCallback>:


/*** Interrupt routines ***/

void xbeeSerial_rxCallback(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	af00      	add	r7, sp, #0
	if(isCmdMode | enteringCmdMode)
 80053e8:	4b18      	ldr	r3, [pc, #96]	; (800544c <xbeeSerial_rxCallback+0x68>)
 80053ea:	781a      	ldrb	r2, [r3, #0]
 80053ec:	4b18      	ldr	r3, [pc, #96]	; (8005450 <xbeeSerial_rxCallback+0x6c>)
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d01a      	beq.n	800542e <xbeeSerial_rxCallback+0x4a>
	{
		if(rxByte == 0xD) // rxByte == '\r'
 80053f8:	4b16      	ldr	r3, [pc, #88]	; (8005454 <xbeeSerial_rxCallback+0x70>)
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	2b0d      	cmp	r3, #13
 80053fe:	d102      	bne.n	8005406 <xbeeSerial_rxCallback+0x22>
			msgReceived = 1;
 8005400:	4b15      	ldr	r3, [pc, #84]	; (8005458 <xbeeSerial_rxCallback+0x74>)
 8005402:	2201      	movs	r2, #1
 8005404:	701a      	strb	r2, [r3, #0]

		ringBuffer[head] = rxByte;
 8005406:	4b15      	ldr	r3, [pc, #84]	; (800545c <xbeeSerial_rxCallback+0x78>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a12      	ldr	r2, [pc, #72]	; (8005454 <xbeeSerial_rxCallback+0x70>)
 800540c:	7811      	ldrb	r1, [r2, #0]
 800540e:	4a14      	ldr	r2, [pc, #80]	; (8005460 <xbeeSerial_rxCallback+0x7c>)
 8005410:	54d1      	strb	r1, [r2, r3]
		head = (head+1) % RING_BUFFER_SIZE; //update index
 8005412:	4b12      	ldr	r3, [pc, #72]	; (800545c <xbeeSerial_rxCallback+0x78>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	1c5a      	adds	r2, r3, #1
 8005418:	4b12      	ldr	r3, [pc, #72]	; (8005464 <xbeeSerial_rxCallback+0x80>)
 800541a:	fba3 1302 	umull	r1, r3, r3, r2
 800541e:	095b      	lsrs	r3, r3, #5
 8005420:	2164      	movs	r1, #100	; 0x64
 8005422:	fb01 f303 	mul.w	r3, r1, r3
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	4a0c      	ldr	r2, [pc, #48]	; (800545c <xbeeSerial_rxCallback+0x78>)
 800542a:	6013      	str	r3, [r2, #0]
 800542c:	e004      	b.n	8005438 <xbeeSerial_rxCallback+0x54>
	}
	else
		xbee_byteRcvCallback(rxByte);
 800542e:	4b09      	ldr	r3, [pc, #36]	; (8005454 <xbeeSerial_rxCallback+0x70>)
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	4618      	mov	r0, r3
 8005434:	f7ff fe3e 	bl	80050b4 <xbee_byteRcvCallback>

	HAL_UART_Receive_IT(uart, &rxByte, 1);
 8005438:	4b0b      	ldr	r3, [pc, #44]	; (8005468 <xbeeSerial_rxCallback+0x84>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2201      	movs	r2, #1
 800543e:	4905      	ldr	r1, [pc, #20]	; (8005454 <xbeeSerial_rxCallback+0x70>)
 8005440:	4618      	mov	r0, r3
 8005442:	f7fe fa55 	bl	80038f0 <HAL_UART_Receive_IT>
}
 8005446:	bf00      	nop
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	20000dcc 	.word	0x20000dcc
 8005450:	20000dcd 	.word	0x20000dcd
 8005454:	20000e40 	.word	0x20000e40
 8005458:	20000eb0 	.word	0x20000eb0
 800545c:	20000ea8 	.word	0x20000ea8
 8005460:	20000e44 	.word	0x20000e44
 8005464:	51eb851f 	.word	0x51eb851f
 8005468:	20000e3c 	.word	0x20000e3c

0800546c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	4603      	mov	r3, r0
 8005474:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005476:	2300      	movs	r3, #0
 8005478:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800547a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800547e:	2b84      	cmp	r3, #132	; 0x84
 8005480:	d005      	beq.n	800548e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005482:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4413      	add	r3, r2
 800548a:	3303      	adds	r3, #3
 800548c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800548e:	68fb      	ldr	r3, [r7, #12]
}
 8005490:	4618      	mov	r0, r3
 8005492:	3714      	adds	r7, #20
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054a2:	f3ef 8305 	mrs	r3, IPSR
 80054a6:	607b      	str	r3, [r7, #4]
  return(result);
 80054a8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	bf14      	ite	ne
 80054ae:	2301      	movne	r3, #1
 80054b0:	2300      	moveq	r3, #0
 80054b2:	b2db      	uxtb	r3, r3
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80054c4:	f001 f9e8 	bl	8006898 <vTaskStartScheduler>
  
  return osOK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	bd80      	pop	{r7, pc}

080054ce <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80054ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054d0:	b089      	sub	sp, #36	; 0x24
 80054d2:	af04      	add	r7, sp, #16
 80054d4:	6078      	str	r0, [r7, #4]
 80054d6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d020      	beq.n	8005522 <osThreadCreate+0x54>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d01c      	beq.n	8005522 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685c      	ldr	r4, [r3, #4]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681d      	ldr	r5, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	691e      	ldr	r6, [r3, #16]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7ff ffb6 	bl	800546c <makeFreeRtosPriority>
 8005500:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800550a:	9202      	str	r2, [sp, #8]
 800550c:	9301      	str	r3, [sp, #4]
 800550e:	9100      	str	r1, [sp, #0]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	4632      	mov	r2, r6
 8005514:	4629      	mov	r1, r5
 8005516:	4620      	mov	r0, r4
 8005518:	f000 ff50 	bl	80063bc <xTaskCreateStatic>
 800551c:	4603      	mov	r3, r0
 800551e:	60fb      	str	r3, [r7, #12]
 8005520:	e01c      	b.n	800555c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685c      	ldr	r4, [r3, #4]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800552e:	b29e      	uxth	r6, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005536:	4618      	mov	r0, r3
 8005538:	f7ff ff98 	bl	800546c <makeFreeRtosPriority>
 800553c:	4602      	mov	r2, r0
 800553e:	f107 030c 	add.w	r3, r7, #12
 8005542:	9301      	str	r3, [sp, #4]
 8005544:	9200      	str	r2, [sp, #0]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	4632      	mov	r2, r6
 800554a:	4629      	mov	r1, r5
 800554c:	4620      	mov	r0, r4
 800554e:	f000 ff92 	bl	8006476 <xTaskCreate>
 8005552:	4603      	mov	r3, r0
 8005554:	2b01      	cmp	r3, #1
 8005556:	d001      	beq.n	800555c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005558:	2300      	movs	r3, #0
 800555a:	e000      	b.n	800555e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800555c:	68fb      	ldr	r3, [r7, #12]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3714      	adds	r7, #20
 8005562:	46bd      	mov	sp, r7
 8005564:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005566 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b084      	sub	sp, #16
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d001      	beq.n	800557c <osDelay+0x16>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	e000      	b.n	800557e <osDelay+0x18>
 800557c:	2301      	movs	r3, #1
 800557e:	4618      	mov	r0, r3
 8005580:	f001 f956 	bl	8006830 <vTaskDelay>
  
  return osOK;
 8005584:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b082      	sub	sp, #8
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d007      	beq.n	80055ae <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	4619      	mov	r1, r3
 80055a4:	2001      	movs	r0, #1
 80055a6:	f000 faae 	bl	8005b06 <xQueueCreateMutexStatic>
 80055aa:	4603      	mov	r3, r0
 80055ac:	e003      	b.n	80055b6 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80055ae:	2001      	movs	r0, #1
 80055b0:	f000 fa91 	bl	8005ad6 <xQueueCreateMutex>
 80055b4:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
	...

080055c0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80055ca:	2300      	movs	r3, #0
 80055cc:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <osMutexWait+0x18>
    return osErrorParameter;
 80055d4:	2380      	movs	r3, #128	; 0x80
 80055d6:	e03a      	b.n	800564e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80055d8:	2300      	movs	r3, #0
 80055da:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e2:	d103      	bne.n	80055ec <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80055e4:	f04f 33ff 	mov.w	r3, #4294967295
 80055e8:	60fb      	str	r3, [r7, #12]
 80055ea:	e009      	b.n	8005600 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d006      	beq.n	8005600 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <osMutexWait+0x40>
      ticks = 1;
 80055fc:	2301      	movs	r3, #1
 80055fe:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005600:	f7ff ff4c 	bl	800549c <inHandlerMode>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d017      	beq.n	800563a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800560a:	f107 0308 	add.w	r3, r7, #8
 800560e:	461a      	mov	r2, r3
 8005610:	2100      	movs	r1, #0
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 fd2a 	bl	800606c <xQueueReceiveFromISR>
 8005618:	4603      	mov	r3, r0
 800561a:	2b01      	cmp	r3, #1
 800561c:	d001      	beq.n	8005622 <osMutexWait+0x62>
      return osErrorOS;
 800561e:	23ff      	movs	r3, #255	; 0xff
 8005620:	e015      	b.n	800564e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d011      	beq.n	800564c <osMutexWait+0x8c>
 8005628:	4b0b      	ldr	r3, [pc, #44]	; (8005658 <osMutexWait+0x98>)
 800562a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	e008      	b.n	800564c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800563a:	68f9      	ldr	r1, [r7, #12]
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 fc09 	bl	8005e54 <xQueueSemaphoreTake>
 8005642:	4603      	mov	r3, r0
 8005644:	2b01      	cmp	r3, #1
 8005646:	d001      	beq.n	800564c <osMutexWait+0x8c>
    return osErrorOS;
 8005648:	23ff      	movs	r3, #255	; 0xff
 800564a:	e000      	b.n	800564e <osMutexWait+0x8e>
  }
  
  return osOK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	e000ed04 	.word	0xe000ed04

0800565c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005664:	2300      	movs	r3, #0
 8005666:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005668:	2300      	movs	r3, #0
 800566a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800566c:	f7ff ff16 	bl	800549c <inHandlerMode>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d016      	beq.n	80056a4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005676:	f107 0308 	add.w	r3, r7, #8
 800567a:	4619      	mov	r1, r3
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 fb5b 	bl	8005d38 <xQueueGiveFromISR>
 8005682:	4603      	mov	r3, r0
 8005684:	2b01      	cmp	r3, #1
 8005686:	d001      	beq.n	800568c <osMutexRelease+0x30>
      return osErrorOS;
 8005688:	23ff      	movs	r3, #255	; 0xff
 800568a:	e017      	b.n	80056bc <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d013      	beq.n	80056ba <osMutexRelease+0x5e>
 8005692:	4b0c      	ldr	r3, [pc, #48]	; (80056c4 <osMutexRelease+0x68>)
 8005694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005698:	601a      	str	r2, [r3, #0]
 800569a:	f3bf 8f4f 	dsb	sy
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	e00a      	b.n	80056ba <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80056a4:	2300      	movs	r3, #0
 80056a6:	2200      	movs	r2, #0
 80056a8:	2100      	movs	r1, #0
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 fa46 	bl	8005b3c <xQueueGenericSend>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d001      	beq.n	80056ba <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80056b6:	23ff      	movs	r3, #255	; 0xff
 80056b8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80056ba:	68fb      	ldr	r3, [r7, #12]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	e000ed04 	.word	0xe000ed04

080056c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f103 0208 	add.w	r2, r3, #8
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f04f 32ff 	mov.w	r2, #4294967295
 80056e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f103 0208 	add.w	r2, r3, #8
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f103 0208 	add.w	r2, r3, #8
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005716:	bf00      	nop
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005722:	b480      	push	{r7}
 8005724:	b085      	sub	sp, #20
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
 800572a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	683a      	ldr	r2, [r7, #0]
 8005746:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	1c5a      	adds	r2, r3, #1
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	601a      	str	r2, [r3, #0]
}
 800575e:	bf00      	nop
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800576a:	b480      	push	{r7}
 800576c:	b085      	sub	sp, #20
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
 8005772:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005780:	d103      	bne.n	800578a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	60fb      	str	r3, [r7, #12]
 8005788:	e00c      	b.n	80057a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	3308      	adds	r3, #8
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	e002      	b.n	8005798 <vListInsert+0x2e>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	60fb      	str	r3, [r7, #12]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d2f6      	bcs.n	8005792 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	683a      	ldr	r2, [r7, #0]
 80057be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	1c5a      	adds	r2, r3, #1
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	601a      	str	r2, [r3, #0]
}
 80057d0:	bf00      	nop
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	6892      	ldr	r2, [r2, #8]
 80057f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	6852      	ldr	r2, [r2, #4]
 80057fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	429a      	cmp	r2, r3
 8005806:	d103      	bne.n	8005810 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	689a      	ldr	r2, [r3, #8]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	1e5a      	subs	r2, r3, #1
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d10a      	bne.n	800585a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005848:	f383 8811 	msr	BASEPRI, r3
 800584c:	f3bf 8f6f 	isb	sy
 8005850:	f3bf 8f4f 	dsb	sy
 8005854:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005856:	bf00      	nop
 8005858:	e7fe      	b.n	8005858 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800585a:	f001 ff7b 	bl	8007754 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005866:	68f9      	ldr	r1, [r7, #12]
 8005868:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800586a:	fb01 f303 	mul.w	r3, r1, r3
 800586e:	441a      	add	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800588a:	3b01      	subs	r3, #1
 800588c:	68f9      	ldr	r1, [r7, #12]
 800588e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005890:	fb01 f303 	mul.w	r3, r1, r3
 8005894:	441a      	add	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	22ff      	movs	r2, #255	; 0xff
 800589e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	22ff      	movs	r2, #255	; 0xff
 80058a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d114      	bne.n	80058da <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d01a      	beq.n	80058ee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	3310      	adds	r3, #16
 80058bc:	4618      	mov	r0, r3
 80058be:	f001 fa3d 	bl	8006d3c <xTaskRemoveFromEventList>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d012      	beq.n	80058ee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80058c8:	4b0c      	ldr	r3, [pc, #48]	; (80058fc <xQueueGenericReset+0xcc>)
 80058ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ce:	601a      	str	r2, [r3, #0]
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	f3bf 8f6f 	isb	sy
 80058d8:	e009      	b.n	80058ee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	3310      	adds	r3, #16
 80058de:	4618      	mov	r0, r3
 80058e0:	f7ff fef2 	bl	80056c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	3324      	adds	r3, #36	; 0x24
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7ff feed 	bl	80056c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80058ee:	f001 ff61 	bl	80077b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80058f2:	2301      	movs	r3, #1
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	e000ed04 	.word	0xe000ed04

08005900 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005900:	b580      	push	{r7, lr}
 8005902:	b08e      	sub	sp, #56	; 0x38
 8005904:	af02      	add	r7, sp, #8
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
 800590c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10a      	bne.n	800592a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005918:	f383 8811 	msr	BASEPRI, r3
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005926:	bf00      	nop
 8005928:	e7fe      	b.n	8005928 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d10a      	bne.n	8005946 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005934:	f383 8811 	msr	BASEPRI, r3
 8005938:	f3bf 8f6f 	isb	sy
 800593c:	f3bf 8f4f 	dsb	sy
 8005940:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005942:	bf00      	nop
 8005944:	e7fe      	b.n	8005944 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d002      	beq.n	8005952 <xQueueGenericCreateStatic+0x52>
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d001      	beq.n	8005956 <xQueueGenericCreateStatic+0x56>
 8005952:	2301      	movs	r3, #1
 8005954:	e000      	b.n	8005958 <xQueueGenericCreateStatic+0x58>
 8005956:	2300      	movs	r3, #0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10a      	bne.n	8005972 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800595c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	623b      	str	r3, [r7, #32]
}
 800596e:	bf00      	nop
 8005970:	e7fe      	b.n	8005970 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d102      	bne.n	800597e <xQueueGenericCreateStatic+0x7e>
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <xQueueGenericCreateStatic+0x82>
 800597e:	2301      	movs	r3, #1
 8005980:	e000      	b.n	8005984 <xQueueGenericCreateStatic+0x84>
 8005982:	2300      	movs	r3, #0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10a      	bne.n	800599e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598c:	f383 8811 	msr	BASEPRI, r3
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	61fb      	str	r3, [r7, #28]
}
 800599a:	bf00      	nop
 800599c:	e7fe      	b.n	800599c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800599e:	2348      	movs	r3, #72	; 0x48
 80059a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2b48      	cmp	r3, #72	; 0x48
 80059a6:	d00a      	beq.n	80059be <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80059a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ac:	f383 8811 	msr	BASEPRI, r3
 80059b0:	f3bf 8f6f 	isb	sy
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	61bb      	str	r3, [r7, #24]
}
 80059ba:	bf00      	nop
 80059bc:	e7fe      	b.n	80059bc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80059be:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80059c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00d      	beq.n	80059e6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80059ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80059d2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80059d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	4613      	mov	r3, r2
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	68b9      	ldr	r1, [r7, #8]
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 f83f 	bl	8005a64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80059e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3730      	adds	r7, #48	; 0x30
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b08a      	sub	sp, #40	; 0x28
 80059f4:	af02      	add	r7, sp, #8
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	4613      	mov	r3, r2
 80059fc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10a      	bne.n	8005a1a <xQueueGenericCreate+0x2a>
	__asm volatile
 8005a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	613b      	str	r3, [r7, #16]
}
 8005a16:	bf00      	nop
 8005a18:	e7fe      	b.n	8005a18 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	fb02 f303 	mul.w	r3, r2, r3
 8005a22:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	3348      	adds	r3, #72	; 0x48
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f001 ffb5 	bl	8007998 <pvPortMalloc>
 8005a2e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d011      	beq.n	8005a5a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	3348      	adds	r3, #72	; 0x48
 8005a3e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a48:	79fa      	ldrb	r2, [r7, #7]
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	68b9      	ldr	r1, [r7, #8]
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f000 f805 	bl	8005a64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a5a:	69bb      	ldr	r3, [r7, #24]
	}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3720      	adds	r7, #32
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
 8005a70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d103      	bne.n	8005a80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	601a      	str	r2, [r3, #0]
 8005a7e:	e002      	b.n	8005a86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a92:	2101      	movs	r1, #1
 8005a94:	69b8      	ldr	r0, [r7, #24]
 8005a96:	f7ff fecb 	bl	8005830 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a9a:	bf00      	nop
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b082      	sub	sp, #8
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00e      	beq.n	8005ace <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	2100      	movs	r1, #0
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f837 	bl	8005b3c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005ace:	bf00      	nop
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b086      	sub	sp, #24
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	4603      	mov	r3, r0
 8005ade:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	617b      	str	r3, [r7, #20]
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005ae8:	79fb      	ldrb	r3, [r7, #7]
 8005aea:	461a      	mov	r2, r3
 8005aec:	6939      	ldr	r1, [r7, #16]
 8005aee:	6978      	ldr	r0, [r7, #20]
 8005af0:	f7ff ff7e 	bl	80059f0 <xQueueGenericCreate>
 8005af4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f7ff ffd3 	bl	8005aa2 <prvInitialiseMutex>

		return xNewQueue;
 8005afc:	68fb      	ldr	r3, [r7, #12]
	}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3718      	adds	r7, #24
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b088      	sub	sp, #32
 8005b0a:	af02      	add	r7, sp, #8
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	6039      	str	r1, [r7, #0]
 8005b10:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005b12:	2301      	movs	r3, #1
 8005b14:	617b      	str	r3, [r7, #20]
 8005b16:	2300      	movs	r3, #0
 8005b18:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005b1a:	79fb      	ldrb	r3, [r7, #7]
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2200      	movs	r2, #0
 8005b22:	6939      	ldr	r1, [r7, #16]
 8005b24:	6978      	ldr	r0, [r7, #20]
 8005b26:	f7ff feeb 	bl	8005900 <xQueueGenericCreateStatic>
 8005b2a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f7ff ffb8 	bl	8005aa2 <prvInitialiseMutex>

		return xNewQueue;
 8005b32:	68fb      	ldr	r3, [r7, #12]
	}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3718      	adds	r7, #24
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b08e      	sub	sp, #56	; 0x38
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
 8005b48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10a      	bne.n	8005b6e <xQueueGenericSend+0x32>
	__asm volatile
 8005b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5c:	f383 8811 	msr	BASEPRI, r3
 8005b60:	f3bf 8f6f 	isb	sy
 8005b64:	f3bf 8f4f 	dsb	sy
 8005b68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b6a:	bf00      	nop
 8005b6c:	e7fe      	b.n	8005b6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d103      	bne.n	8005b7c <xQueueGenericSend+0x40>
 8005b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d101      	bne.n	8005b80 <xQueueGenericSend+0x44>
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e000      	b.n	8005b82 <xQueueGenericSend+0x46>
 8005b80:	2300      	movs	r3, #0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d10a      	bne.n	8005b9c <xQueueGenericSend+0x60>
	__asm volatile
 8005b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8a:	f383 8811 	msr	BASEPRI, r3
 8005b8e:	f3bf 8f6f 	isb	sy
 8005b92:	f3bf 8f4f 	dsb	sy
 8005b96:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b98:	bf00      	nop
 8005b9a:	e7fe      	b.n	8005b9a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d103      	bne.n	8005baa <xQueueGenericSend+0x6e>
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d101      	bne.n	8005bae <xQueueGenericSend+0x72>
 8005baa:	2301      	movs	r3, #1
 8005bac:	e000      	b.n	8005bb0 <xQueueGenericSend+0x74>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10a      	bne.n	8005bca <xQueueGenericSend+0x8e>
	__asm volatile
 8005bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb8:	f383 8811 	msr	BASEPRI, r3
 8005bbc:	f3bf 8f6f 	isb	sy
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	623b      	str	r3, [r7, #32]
}
 8005bc6:	bf00      	nop
 8005bc8:	e7fe      	b.n	8005bc8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bca:	f001 fa77 	bl	80070bc <xTaskGetSchedulerState>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d102      	bne.n	8005bda <xQueueGenericSend+0x9e>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <xQueueGenericSend+0xa2>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e000      	b.n	8005be0 <xQueueGenericSend+0xa4>
 8005bde:	2300      	movs	r3, #0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10a      	bne.n	8005bfa <xQueueGenericSend+0xbe>
	__asm volatile
 8005be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be8:	f383 8811 	msr	BASEPRI, r3
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	61fb      	str	r3, [r7, #28]
}
 8005bf6:	bf00      	nop
 8005bf8:	e7fe      	b.n	8005bf8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005bfa:	f001 fdab 	bl	8007754 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d302      	bcc.n	8005c10 <xQueueGenericSend+0xd4>
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d129      	bne.n	8005c64 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c10:	683a      	ldr	r2, [r7, #0]
 8005c12:	68b9      	ldr	r1, [r7, #8]
 8005c14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c16:	f000 fac1 	bl	800619c <prvCopyDataToQueue>
 8005c1a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d010      	beq.n	8005c46 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c26:	3324      	adds	r3, #36	; 0x24
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f001 f887 	bl	8006d3c <xTaskRemoveFromEventList>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d013      	beq.n	8005c5c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005c34:	4b3f      	ldr	r3, [pc, #252]	; (8005d34 <xQueueGenericSend+0x1f8>)
 8005c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c3a:	601a      	str	r2, [r3, #0]
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	f3bf 8f6f 	isb	sy
 8005c44:	e00a      	b.n	8005c5c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d007      	beq.n	8005c5c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005c4c:	4b39      	ldr	r3, [pc, #228]	; (8005d34 <xQueueGenericSend+0x1f8>)
 8005c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c52:	601a      	str	r2, [r3, #0]
 8005c54:	f3bf 8f4f 	dsb	sy
 8005c58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005c5c:	f001 fdaa 	bl	80077b4 <vPortExitCritical>
				return pdPASS;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e063      	b.n	8005d2c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d103      	bne.n	8005c72 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c6a:	f001 fda3 	bl	80077b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	e05c      	b.n	8005d2c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d106      	bne.n	8005c86 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c78:	f107 0314 	add.w	r3, r7, #20
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f001 f8bf 	bl	8006e00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c82:	2301      	movs	r3, #1
 8005c84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c86:	f001 fd95 	bl	80077b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c8a:	f000 fe6f 	bl	800696c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c8e:	f001 fd61 	bl	8007754 <vPortEnterCritical>
 8005c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c98:	b25b      	sxtb	r3, r3
 8005c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9e:	d103      	bne.n	8005ca8 <xQueueGenericSend+0x16c>
 8005ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005caa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cae:	b25b      	sxtb	r3, r3
 8005cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb4:	d103      	bne.n	8005cbe <xQueueGenericSend+0x182>
 8005cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cbe:	f001 fd79 	bl	80077b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cc2:	1d3a      	adds	r2, r7, #4
 8005cc4:	f107 0314 	add.w	r3, r7, #20
 8005cc8:	4611      	mov	r1, r2
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f001 f8ae 	bl	8006e2c <xTaskCheckForTimeOut>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d124      	bne.n	8005d20 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005cd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cd8:	f000 fb58 	bl	800638c <prvIsQueueFull>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d018      	beq.n	8005d14 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce4:	3310      	adds	r3, #16
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	4611      	mov	r1, r2
 8005cea:	4618      	mov	r0, r3
 8005cec:	f001 f802 	bl	8006cf4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005cf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cf2:	f000 fae3 	bl	80062bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005cf6:	f000 fe47 	bl	8006988 <xTaskResumeAll>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f47f af7c 	bne.w	8005bfa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005d02:	4b0c      	ldr	r3, [pc, #48]	; (8005d34 <xQueueGenericSend+0x1f8>)
 8005d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	f3bf 8f6f 	isb	sy
 8005d12:	e772      	b.n	8005bfa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005d14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d16:	f000 fad1 	bl	80062bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d1a:	f000 fe35 	bl	8006988 <xTaskResumeAll>
 8005d1e:	e76c      	b.n	8005bfa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005d20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d22:	f000 facb 	bl	80062bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d26:	f000 fe2f 	bl	8006988 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005d2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3738      	adds	r7, #56	; 0x38
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	e000ed04 	.word	0xe000ed04

08005d38 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b08e      	sub	sp, #56	; 0x38
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d10a      	bne.n	8005d62 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d50:	f383 8811 	msr	BASEPRI, r3
 8005d54:	f3bf 8f6f 	isb	sy
 8005d58:	f3bf 8f4f 	dsb	sy
 8005d5c:	623b      	str	r3, [r7, #32]
}
 8005d5e:	bf00      	nop
 8005d60:	e7fe      	b.n	8005d60 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00a      	beq.n	8005d80 <xQueueGiveFromISR+0x48>
	__asm volatile
 8005d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6e:	f383 8811 	msr	BASEPRI, r3
 8005d72:	f3bf 8f6f 	isb	sy
 8005d76:	f3bf 8f4f 	dsb	sy
 8005d7a:	61fb      	str	r3, [r7, #28]
}
 8005d7c:	bf00      	nop
 8005d7e:	e7fe      	b.n	8005d7e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d103      	bne.n	8005d90 <xQueueGiveFromISR+0x58>
 8005d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d101      	bne.n	8005d94 <xQueueGiveFromISR+0x5c>
 8005d90:	2301      	movs	r3, #1
 8005d92:	e000      	b.n	8005d96 <xQueueGiveFromISR+0x5e>
 8005d94:	2300      	movs	r3, #0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10a      	bne.n	8005db0 <xQueueGiveFromISR+0x78>
	__asm volatile
 8005d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9e:	f383 8811 	msr	BASEPRI, r3
 8005da2:	f3bf 8f6f 	isb	sy
 8005da6:	f3bf 8f4f 	dsb	sy
 8005daa:	61bb      	str	r3, [r7, #24]
}
 8005dac:	bf00      	nop
 8005dae:	e7fe      	b.n	8005dae <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005db0:	f001 fdb2 	bl	8007918 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005db4:	f3ef 8211 	mrs	r2, BASEPRI
 8005db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbc:	f383 8811 	msr	BASEPRI, r3
 8005dc0:	f3bf 8f6f 	isb	sy
 8005dc4:	f3bf 8f4f 	dsb	sy
 8005dc8:	617a      	str	r2, [r7, #20]
 8005dca:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005dcc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005dce:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d22b      	bcs.n	8005e38 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005de6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dec:	1c5a      	adds	r2, r3, #1
 8005dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005df2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfa:	d112      	bne.n	8005e22 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d016      	beq.n	8005e32 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e06:	3324      	adds	r3, #36	; 0x24
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f000 ff97 	bl	8006d3c <xTaskRemoveFromEventList>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00e      	beq.n	8005e32 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00b      	beq.n	8005e32 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	601a      	str	r2, [r3, #0]
 8005e20:	e007      	b.n	8005e32 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e26:	3301      	adds	r3, #1
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	b25a      	sxtb	r2, r3
 8005e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005e32:	2301      	movs	r3, #1
 8005e34:	637b      	str	r3, [r7, #52]	; 0x34
 8005e36:	e001      	b.n	8005e3c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	637b      	str	r3, [r7, #52]	; 0x34
 8005e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e46:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3738      	adds	r7, #56	; 0x38
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
	...

08005e54 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b08e      	sub	sp, #56	; 0x38
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005e66:	2300      	movs	r3, #0
 8005e68:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10a      	bne.n	8005e86 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e74:	f383 8811 	msr	BASEPRI, r3
 8005e78:	f3bf 8f6f 	isb	sy
 8005e7c:	f3bf 8f4f 	dsb	sy
 8005e80:	623b      	str	r3, [r7, #32]
}
 8005e82:	bf00      	nop
 8005e84:	e7fe      	b.n	8005e84 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00a      	beq.n	8005ea4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e92:	f383 8811 	msr	BASEPRI, r3
 8005e96:	f3bf 8f6f 	isb	sy
 8005e9a:	f3bf 8f4f 	dsb	sy
 8005e9e:	61fb      	str	r3, [r7, #28]
}
 8005ea0:	bf00      	nop
 8005ea2:	e7fe      	b.n	8005ea2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ea4:	f001 f90a 	bl	80070bc <xTaskGetSchedulerState>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d102      	bne.n	8005eb4 <xQueueSemaphoreTake+0x60>
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d101      	bne.n	8005eb8 <xQueueSemaphoreTake+0x64>
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e000      	b.n	8005eba <xQueueSemaphoreTake+0x66>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10a      	bne.n	8005ed4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec2:	f383 8811 	msr	BASEPRI, r3
 8005ec6:	f3bf 8f6f 	isb	sy
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	61bb      	str	r3, [r7, #24]
}
 8005ed0:	bf00      	nop
 8005ed2:	e7fe      	b.n	8005ed2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ed4:	f001 fc3e 	bl	8007754 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005edc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d024      	beq.n	8005f2e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee6:	1e5a      	subs	r2, r3, #1
 8005ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eea:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d104      	bne.n	8005efe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005ef4:	f001 fa8a 	bl	800740c <pvTaskIncrementMutexHeldCount>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00f      	beq.n	8005f26 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f08:	3310      	adds	r3, #16
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f000 ff16 	bl	8006d3c <xTaskRemoveFromEventList>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d007      	beq.n	8005f26 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005f16:	4b54      	ldr	r3, [pc, #336]	; (8006068 <xQueueSemaphoreTake+0x214>)
 8005f18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f1c:	601a      	str	r2, [r3, #0]
 8005f1e:	f3bf 8f4f 	dsb	sy
 8005f22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005f26:	f001 fc45 	bl	80077b4 <vPortExitCritical>
				return pdPASS;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e097      	b.n	800605e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d111      	bne.n	8005f58 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00a      	beq.n	8005f50 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3e:	f383 8811 	msr	BASEPRI, r3
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	617b      	str	r3, [r7, #20]
}
 8005f4c:	bf00      	nop
 8005f4e:	e7fe      	b.n	8005f4e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005f50:	f001 fc30 	bl	80077b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f54:	2300      	movs	r3, #0
 8005f56:	e082      	b.n	800605e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d106      	bne.n	8005f6c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f5e:	f107 030c 	add.w	r3, r7, #12
 8005f62:	4618      	mov	r0, r3
 8005f64:	f000 ff4c 	bl	8006e00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f6c:	f001 fc22 	bl	80077b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f70:	f000 fcfc 	bl	800696c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f74:	f001 fbee 	bl	8007754 <vPortEnterCritical>
 8005f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f7e:	b25b      	sxtb	r3, r3
 8005f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f84:	d103      	bne.n	8005f8e <xQueueSemaphoreTake+0x13a>
 8005f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f94:	b25b      	sxtb	r3, r3
 8005f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9a:	d103      	bne.n	8005fa4 <xQueueSemaphoreTake+0x150>
 8005f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fa4:	f001 fc06 	bl	80077b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005fa8:	463a      	mov	r2, r7
 8005faa:	f107 030c 	add.w	r3, r7, #12
 8005fae:	4611      	mov	r1, r2
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f000 ff3b 	bl	8006e2c <xTaskCheckForTimeOut>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d132      	bne.n	8006022 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fbe:	f000 f9cf 	bl	8006360 <prvIsQueueEmpty>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d026      	beq.n	8006016 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d109      	bne.n	8005fe4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005fd0:	f001 fbc0 	bl	8007754 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f001 f88d 	bl	80070f8 <xTaskPriorityInherit>
 8005fde:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005fe0:	f001 fbe8 	bl	80077b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe6:	3324      	adds	r3, #36	; 0x24
 8005fe8:	683a      	ldr	r2, [r7, #0]
 8005fea:	4611      	mov	r1, r2
 8005fec:	4618      	mov	r0, r3
 8005fee:	f000 fe81 	bl	8006cf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ff2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ff4:	f000 f962 	bl	80062bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ff8:	f000 fcc6 	bl	8006988 <xTaskResumeAll>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	f47f af68 	bne.w	8005ed4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006004:	4b18      	ldr	r3, [pc, #96]	; (8006068 <xQueueSemaphoreTake+0x214>)
 8006006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800600a:	601a      	str	r2, [r3, #0]
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	f3bf 8f6f 	isb	sy
 8006014:	e75e      	b.n	8005ed4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006016:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006018:	f000 f950 	bl	80062bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800601c:	f000 fcb4 	bl	8006988 <xTaskResumeAll>
 8006020:	e758      	b.n	8005ed4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006022:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006024:	f000 f94a 	bl	80062bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006028:	f000 fcae 	bl	8006988 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800602c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800602e:	f000 f997 	bl	8006360 <prvIsQueueEmpty>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	f43f af4d 	beq.w	8005ed4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800603a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00d      	beq.n	800605c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006040:	f001 fb88 	bl	8007754 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006044:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006046:	f000 f891 	bl	800616c <prvGetDisinheritPriorityAfterTimeout>
 800604a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800604c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006052:	4618      	mov	r0, r3
 8006054:	f001 f94c 	bl	80072f0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006058:	f001 fbac 	bl	80077b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800605c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800605e:	4618      	mov	r0, r3
 8006060:	3738      	adds	r7, #56	; 0x38
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	e000ed04 	.word	0xe000ed04

0800606c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b08e      	sub	sp, #56	; 0x38
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800607c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10a      	bne.n	8006098 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	623b      	str	r3, [r7, #32]
}
 8006094:	bf00      	nop
 8006096:	e7fe      	b.n	8006096 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d103      	bne.n	80060a6 <xQueueReceiveFromISR+0x3a>
 800609e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d101      	bne.n	80060aa <xQueueReceiveFromISR+0x3e>
 80060a6:	2301      	movs	r3, #1
 80060a8:	e000      	b.n	80060ac <xQueueReceiveFromISR+0x40>
 80060aa:	2300      	movs	r3, #0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10a      	bne.n	80060c6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80060b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	61fb      	str	r3, [r7, #28]
}
 80060c2:	bf00      	nop
 80060c4:	e7fe      	b.n	80060c4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060c6:	f001 fc27 	bl	8007918 <vPortValidateInterruptPriority>
	__asm volatile
 80060ca:	f3ef 8211 	mrs	r2, BASEPRI
 80060ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	61ba      	str	r2, [r7, #24]
 80060e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80060e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80060e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d02f      	beq.n	8006152 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80060f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80060fc:	68b9      	ldr	r1, [r7, #8]
 80060fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006100:	f000 f8b6 	bl	8006270 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006106:	1e5a      	subs	r2, r3, #1
 8006108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800610c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006114:	d112      	bne.n	800613c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d016      	beq.n	800614c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800611e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006120:	3310      	adds	r3, #16
 8006122:	4618      	mov	r0, r3
 8006124:	f000 fe0a 	bl	8006d3c <xTaskRemoveFromEventList>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00e      	beq.n	800614c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00b      	beq.n	800614c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	601a      	str	r2, [r3, #0]
 800613a:	e007      	b.n	800614c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800613c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006140:	3301      	adds	r3, #1
 8006142:	b2db      	uxtb	r3, r3
 8006144:	b25a      	sxtb	r2, r3
 8006146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800614c:	2301      	movs	r3, #1
 800614e:	637b      	str	r3, [r7, #52]	; 0x34
 8006150:	e001      	b.n	8006156 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006152:	2300      	movs	r3, #0
 8006154:	637b      	str	r3, [r7, #52]	; 0x34
 8006156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006158:	613b      	str	r3, [r7, #16]
	__asm volatile
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	f383 8811 	msr	BASEPRI, r3
}
 8006160:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006164:	4618      	mov	r0, r3
 8006166:	3738      	adds	r7, #56	; 0x38
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006178:	2b00      	cmp	r3, #0
 800617a:	d006      	beq.n	800618a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f1c3 0307 	rsb	r3, r3, #7
 8006186:	60fb      	str	r3, [r7, #12]
 8006188:	e001      	b.n	800618e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800618a:	2300      	movs	r3, #0
 800618c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800618e:	68fb      	ldr	r3, [r7, #12]
	}
 8006190:	4618      	mov	r0, r3
 8006192:	3714      	adds	r7, #20
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b086      	sub	sp, #24
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80061a8:	2300      	movs	r3, #0
 80061aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10d      	bne.n	80061d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d14d      	bne.n	800625e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	4618      	mov	r0, r3
 80061c8:	f001 f80c 	bl	80071e4 <xTaskPriorityDisinherit>
 80061cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	609a      	str	r2, [r3, #8]
 80061d4:	e043      	b.n	800625e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d119      	bne.n	8006210 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6858      	ldr	r0, [r3, #4]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e4:	461a      	mov	r2, r3
 80061e6:	68b9      	ldr	r1, [r7, #8]
 80061e8:	f001 fef3 	bl	8007fd2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f4:	441a      	add	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	429a      	cmp	r2, r3
 8006204:	d32b      	bcc.n	800625e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	605a      	str	r2, [r3, #4]
 800620e:	e026      	b.n	800625e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	68d8      	ldr	r0, [r3, #12]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006218:	461a      	mov	r2, r3
 800621a:	68b9      	ldr	r1, [r7, #8]
 800621c:	f001 fed9 	bl	8007fd2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	68da      	ldr	r2, [r3, #12]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006228:	425b      	negs	r3, r3
 800622a:	441a      	add	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	68da      	ldr	r2, [r3, #12]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	429a      	cmp	r2, r3
 800623a:	d207      	bcs.n	800624c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	689a      	ldr	r2, [r3, #8]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006244:	425b      	negs	r3, r3
 8006246:	441a      	add	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b02      	cmp	r3, #2
 8006250:	d105      	bne.n	800625e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d002      	beq.n	800625e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	3b01      	subs	r3, #1
 800625c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	1c5a      	adds	r2, r3, #1
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006266:	697b      	ldr	r3, [r7, #20]
}
 8006268:	4618      	mov	r0, r3
 800626a:	3718      	adds	r7, #24
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627e:	2b00      	cmp	r3, #0
 8006280:	d018      	beq.n	80062b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68da      	ldr	r2, [r3, #12]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628a:	441a      	add	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	68da      	ldr	r2, [r3, #12]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	429a      	cmp	r2, r3
 800629a:	d303      	bcc.n	80062a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	68d9      	ldr	r1, [r3, #12]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ac:	461a      	mov	r2, r3
 80062ae:	6838      	ldr	r0, [r7, #0]
 80062b0:	f001 fe8f 	bl	8007fd2 <memcpy>
	}
}
 80062b4:	bf00      	nop
 80062b6:	3708      	adds	r7, #8
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80062c4:	f001 fa46 	bl	8007754 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80062d0:	e011      	b.n	80062f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d012      	beq.n	8006300 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	3324      	adds	r3, #36	; 0x24
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 fd2c 	bl	8006d3c <xTaskRemoveFromEventList>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d001      	beq.n	80062ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80062ea:	f000 fe01 	bl	8006ef0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80062ee:	7bfb      	ldrb	r3, [r7, #15]
 80062f0:	3b01      	subs	r3, #1
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80062f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	dce9      	bgt.n	80062d2 <prvUnlockQueue+0x16>
 80062fe:	e000      	b.n	8006302 <prvUnlockQueue+0x46>
					break;
 8006300:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	22ff      	movs	r2, #255	; 0xff
 8006306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800630a:	f001 fa53 	bl	80077b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800630e:	f001 fa21 	bl	8007754 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006318:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800631a:	e011      	b.n	8006340 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d012      	beq.n	800634a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	3310      	adds	r3, #16
 8006328:	4618      	mov	r0, r3
 800632a:	f000 fd07 	bl	8006d3c <xTaskRemoveFromEventList>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d001      	beq.n	8006338 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006334:	f000 fddc 	bl	8006ef0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006338:	7bbb      	ldrb	r3, [r7, #14]
 800633a:	3b01      	subs	r3, #1
 800633c:	b2db      	uxtb	r3, r3
 800633e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006340:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006344:	2b00      	cmp	r3, #0
 8006346:	dce9      	bgt.n	800631c <prvUnlockQueue+0x60>
 8006348:	e000      	b.n	800634c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800634a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	22ff      	movs	r2, #255	; 0xff
 8006350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006354:	f001 fa2e 	bl	80077b4 <vPortExitCritical>
}
 8006358:	bf00      	nop
 800635a:	3710      	adds	r7, #16
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006368:	f001 f9f4 	bl	8007754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006370:	2b00      	cmp	r3, #0
 8006372:	d102      	bne.n	800637a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006374:	2301      	movs	r3, #1
 8006376:	60fb      	str	r3, [r7, #12]
 8006378:	e001      	b.n	800637e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800637a:	2300      	movs	r3, #0
 800637c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800637e:	f001 fa19 	bl	80077b4 <vPortExitCritical>

	return xReturn;
 8006382:	68fb      	ldr	r3, [r7, #12]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3710      	adds	r7, #16
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006394:	f001 f9de 	bl	8007754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d102      	bne.n	80063aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80063a4:	2301      	movs	r3, #1
 80063a6:	60fb      	str	r3, [r7, #12]
 80063a8:	e001      	b.n	80063ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80063aa:	2300      	movs	r3, #0
 80063ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80063ae:	f001 fa01 	bl	80077b4 <vPortExitCritical>

	return xReturn;
 80063b2:	68fb      	ldr	r3, [r7, #12]
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3710      	adds	r7, #16
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b08e      	sub	sp, #56	; 0x38
 80063c0:	af04      	add	r7, sp, #16
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
 80063c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80063ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10a      	bne.n	80063e6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80063d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	623b      	str	r3, [r7, #32]
}
 80063e2:	bf00      	nop
 80063e4:	e7fe      	b.n	80063e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80063e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10a      	bne.n	8006402 <xTaskCreateStatic+0x46>
	__asm volatile
 80063ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f0:	f383 8811 	msr	BASEPRI, r3
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	61fb      	str	r3, [r7, #28]
}
 80063fe:	bf00      	nop
 8006400:	e7fe      	b.n	8006400 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006402:	23b4      	movs	r3, #180	; 0xb4
 8006404:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	2bb4      	cmp	r3, #180	; 0xb4
 800640a:	d00a      	beq.n	8006422 <xTaskCreateStatic+0x66>
	__asm volatile
 800640c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	61bb      	str	r3, [r7, #24]
}
 800641e:	bf00      	nop
 8006420:	e7fe      	b.n	8006420 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006422:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006426:	2b00      	cmp	r3, #0
 8006428:	d01e      	beq.n	8006468 <xTaskCreateStatic+0xac>
 800642a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800642c:	2b00      	cmp	r3, #0
 800642e:	d01b      	beq.n	8006468 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006432:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006436:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006438:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800643a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643c:	2202      	movs	r2, #2
 800643e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006442:	2300      	movs	r3, #0
 8006444:	9303      	str	r3, [sp, #12]
 8006446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006448:	9302      	str	r3, [sp, #8]
 800644a:	f107 0314 	add.w	r3, r7, #20
 800644e:	9301      	str	r3, [sp, #4]
 8006450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	68b9      	ldr	r1, [r7, #8]
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f000 f850 	bl	8006500 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006460:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006462:	f000 f8eb 	bl	800663c <prvAddNewTaskToReadyList>
 8006466:	e001      	b.n	800646c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006468:	2300      	movs	r3, #0
 800646a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800646c:	697b      	ldr	r3, [r7, #20]
	}
 800646e:	4618      	mov	r0, r3
 8006470:	3728      	adds	r7, #40	; 0x28
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006476:	b580      	push	{r7, lr}
 8006478:	b08c      	sub	sp, #48	; 0x30
 800647a:	af04      	add	r7, sp, #16
 800647c:	60f8      	str	r0, [r7, #12]
 800647e:	60b9      	str	r1, [r7, #8]
 8006480:	603b      	str	r3, [r7, #0]
 8006482:	4613      	mov	r3, r2
 8006484:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006486:	88fb      	ldrh	r3, [r7, #6]
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	4618      	mov	r0, r3
 800648c:	f001 fa84 	bl	8007998 <pvPortMalloc>
 8006490:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00e      	beq.n	80064b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006498:	20b4      	movs	r0, #180	; 0xb4
 800649a:	f001 fa7d 	bl	8007998 <pvPortMalloc>
 800649e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	631a      	str	r2, [r3, #48]	; 0x30
 80064ac:	e005      	b.n	80064ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80064ae:	6978      	ldr	r0, [r7, #20]
 80064b0:	f001 fb3e 	bl	8007b30 <vPortFree>
 80064b4:	e001      	b.n	80064ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80064b6:	2300      	movs	r3, #0
 80064b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d017      	beq.n	80064f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80064c8:	88fa      	ldrh	r2, [r7, #6]
 80064ca:	2300      	movs	r3, #0
 80064cc:	9303      	str	r3, [sp, #12]
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	9302      	str	r3, [sp, #8]
 80064d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d4:	9301      	str	r3, [sp, #4]
 80064d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	68b9      	ldr	r1, [r7, #8]
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f000 f80e 	bl	8006500 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064e4:	69f8      	ldr	r0, [r7, #28]
 80064e6:	f000 f8a9 	bl	800663c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80064ea:	2301      	movs	r3, #1
 80064ec:	61bb      	str	r3, [r7, #24]
 80064ee:	e002      	b.n	80064f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80064f0:	f04f 33ff 	mov.w	r3, #4294967295
 80064f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80064f6:	69bb      	ldr	r3, [r7, #24]
	}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3720      	adds	r7, #32
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b088      	sub	sp, #32
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
 800650c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800650e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006510:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006518:	3b01      	subs	r3, #1
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	f023 0307 	bic.w	r3, r3, #7
 8006526:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	f003 0307 	and.w	r3, r3, #7
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00a      	beq.n	8006548 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	617b      	str	r3, [r7, #20]
}
 8006544:	bf00      	nop
 8006546:	e7fe      	b.n	8006546 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d01f      	beq.n	800658e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800654e:	2300      	movs	r3, #0
 8006550:	61fb      	str	r3, [r7, #28]
 8006552:	e012      	b.n	800657a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	4413      	add	r3, r2
 800655a:	7819      	ldrb	r1, [r3, #0]
 800655c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	4413      	add	r3, r2
 8006562:	3334      	adds	r3, #52	; 0x34
 8006564:	460a      	mov	r2, r1
 8006566:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	4413      	add	r3, r2
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d006      	beq.n	8006582 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	3301      	adds	r3, #1
 8006578:	61fb      	str	r3, [r7, #28]
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	2b0f      	cmp	r3, #15
 800657e:	d9e9      	bls.n	8006554 <prvInitialiseNewTask+0x54>
 8006580:	e000      	b.n	8006584 <prvInitialiseNewTask+0x84>
			{
				break;
 8006582:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006586:	2200      	movs	r2, #0
 8006588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800658c:	e003      	b.n	8006596 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800658e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006590:	2200      	movs	r2, #0
 8006592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006598:	2b06      	cmp	r3, #6
 800659a:	d901      	bls.n	80065a0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800659c:	2306      	movs	r3, #6
 800659e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80065a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80065a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065aa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80065ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ae:	2200      	movs	r2, #0
 80065b0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80065b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b4:	3304      	adds	r3, #4
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7ff f8a6 	bl	8005708 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80065bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065be:	3318      	adds	r3, #24
 80065c0:	4618      	mov	r0, r3
 80065c2:	f7ff f8a1 	bl	8005708 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80065c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ce:	f1c3 0207 	rsb	r2, r3, #7
 80065d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80065d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80065dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065de:	2200      	movs	r2, #0
 80065e0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80065e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80065ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ee:	334c      	adds	r3, #76	; 0x4c
 80065f0:	2260      	movs	r2, #96	; 0x60
 80065f2:	2100      	movs	r1, #0
 80065f4:	4618      	mov	r0, r3
 80065f6:	f001 fcfa 	bl	8007fee <memset>
 80065fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fc:	4a0c      	ldr	r2, [pc, #48]	; (8006630 <prvInitialiseNewTask+0x130>)
 80065fe:	651a      	str	r2, [r3, #80]	; 0x50
 8006600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006602:	4a0c      	ldr	r2, [pc, #48]	; (8006634 <prvInitialiseNewTask+0x134>)
 8006604:	655a      	str	r2, [r3, #84]	; 0x54
 8006606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006608:	4a0b      	ldr	r2, [pc, #44]	; (8006638 <prvInitialiseNewTask+0x138>)
 800660a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	68f9      	ldr	r1, [r7, #12]
 8006610:	69b8      	ldr	r0, [r7, #24]
 8006612:	f000 ff75 	bl	8007500 <pxPortInitialiseStack>
 8006616:	4602      	mov	r2, r0
 8006618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800661c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661e:	2b00      	cmp	r3, #0
 8006620:	d002      	beq.n	8006628 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006626:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006628:	bf00      	nop
 800662a:	3720      	adds	r7, #32
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	0800aeac 	.word	0x0800aeac
 8006634:	0800aecc 	.word	0x0800aecc
 8006638:	0800ae8c 	.word	0x0800ae8c

0800663c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006644:	f001 f886 	bl	8007754 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006648:	4b2a      	ldr	r3, [pc, #168]	; (80066f4 <prvAddNewTaskToReadyList+0xb8>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	3301      	adds	r3, #1
 800664e:	4a29      	ldr	r2, [pc, #164]	; (80066f4 <prvAddNewTaskToReadyList+0xb8>)
 8006650:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006652:	4b29      	ldr	r3, [pc, #164]	; (80066f8 <prvAddNewTaskToReadyList+0xbc>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d109      	bne.n	800666e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800665a:	4a27      	ldr	r2, [pc, #156]	; (80066f8 <prvAddNewTaskToReadyList+0xbc>)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006660:	4b24      	ldr	r3, [pc, #144]	; (80066f4 <prvAddNewTaskToReadyList+0xb8>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d110      	bne.n	800668a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006668:	f000 fc66 	bl	8006f38 <prvInitialiseTaskLists>
 800666c:	e00d      	b.n	800668a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800666e:	4b23      	ldr	r3, [pc, #140]	; (80066fc <prvAddNewTaskToReadyList+0xc0>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d109      	bne.n	800668a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006676:	4b20      	ldr	r3, [pc, #128]	; (80066f8 <prvAddNewTaskToReadyList+0xbc>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006680:	429a      	cmp	r2, r3
 8006682:	d802      	bhi.n	800668a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006684:	4a1c      	ldr	r2, [pc, #112]	; (80066f8 <prvAddNewTaskToReadyList+0xbc>)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800668a:	4b1d      	ldr	r3, [pc, #116]	; (8006700 <prvAddNewTaskToReadyList+0xc4>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	3301      	adds	r3, #1
 8006690:	4a1b      	ldr	r2, [pc, #108]	; (8006700 <prvAddNewTaskToReadyList+0xc4>)
 8006692:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006698:	2201      	movs	r2, #1
 800669a:	409a      	lsls	r2, r3
 800669c:	4b19      	ldr	r3, [pc, #100]	; (8006704 <prvAddNewTaskToReadyList+0xc8>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	4a18      	ldr	r2, [pc, #96]	; (8006704 <prvAddNewTaskToReadyList+0xc8>)
 80066a4:	6013      	str	r3, [r2, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066aa:	4613      	mov	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4a15      	ldr	r2, [pc, #84]	; (8006708 <prvAddNewTaskToReadyList+0xcc>)
 80066b4:	441a      	add	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	3304      	adds	r3, #4
 80066ba:	4619      	mov	r1, r3
 80066bc:	4610      	mov	r0, r2
 80066be:	f7ff f830 	bl	8005722 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80066c2:	f001 f877 	bl	80077b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80066c6:	4b0d      	ldr	r3, [pc, #52]	; (80066fc <prvAddNewTaskToReadyList+0xc0>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00e      	beq.n	80066ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80066ce:	4b0a      	ldr	r3, [pc, #40]	; (80066f8 <prvAddNewTaskToReadyList+0xbc>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d8:	429a      	cmp	r2, r3
 80066da:	d207      	bcs.n	80066ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80066dc:	4b0b      	ldr	r3, [pc, #44]	; (800670c <prvAddNewTaskToReadyList+0xd0>)
 80066de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066e2:	601a      	str	r2, [r3, #0]
 80066e4:	f3bf 8f4f 	dsb	sy
 80066e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066ec:	bf00      	nop
 80066ee:	3708      	adds	r7, #8
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	20000fb4 	.word	0x20000fb4
 80066f8:	20000eb4 	.word	0x20000eb4
 80066fc:	20000fc0 	.word	0x20000fc0
 8006700:	20000fd0 	.word	0x20000fd0
 8006704:	20000fbc 	.word	0x20000fbc
 8006708:	20000eb8 	.word	0x20000eb8
 800670c:	e000ed04 	.word	0xe000ed04

08006710 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006718:	f001 f81c 	bl	8007754 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d102      	bne.n	8006728 <vTaskDelete+0x18>
 8006722:	4b39      	ldr	r3, [pc, #228]	; (8006808 <vTaskDelete+0xf8>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	e000      	b.n	800672a <vTaskDelete+0x1a>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	3304      	adds	r3, #4
 8006730:	4618      	mov	r0, r3
 8006732:	f7ff f853 	bl	80057dc <uxListRemove>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d115      	bne.n	8006768 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006740:	4932      	ldr	r1, [pc, #200]	; (800680c <vTaskDelete+0xfc>)
 8006742:	4613      	mov	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	4413      	add	r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	440b      	add	r3, r1
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10a      	bne.n	8006768 <vTaskDelete+0x58>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006756:	2201      	movs	r2, #1
 8006758:	fa02 f303 	lsl.w	r3, r2, r3
 800675c:	43da      	mvns	r2, r3
 800675e:	4b2c      	ldr	r3, [pc, #176]	; (8006810 <vTaskDelete+0x100>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4013      	ands	r3, r2
 8006764:	4a2a      	ldr	r2, [pc, #168]	; (8006810 <vTaskDelete+0x100>)
 8006766:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676c:	2b00      	cmp	r3, #0
 800676e:	d004      	beq.n	800677a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	3318      	adds	r3, #24
 8006774:	4618      	mov	r0, r3
 8006776:	f7ff f831 	bl	80057dc <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800677a:	4b26      	ldr	r3, [pc, #152]	; (8006814 <vTaskDelete+0x104>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	3301      	adds	r3, #1
 8006780:	4a24      	ldr	r2, [pc, #144]	; (8006814 <vTaskDelete+0x104>)
 8006782:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8006784:	4b20      	ldr	r3, [pc, #128]	; (8006808 <vTaskDelete+0xf8>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	429a      	cmp	r2, r3
 800678c:	d10b      	bne.n	80067a6 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	3304      	adds	r3, #4
 8006792:	4619      	mov	r1, r3
 8006794:	4820      	ldr	r0, [pc, #128]	; (8006818 <vTaskDelete+0x108>)
 8006796:	f7fe ffc4 	bl	8005722 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800679a:	4b20      	ldr	r3, [pc, #128]	; (800681c <vTaskDelete+0x10c>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	3301      	adds	r3, #1
 80067a0:	4a1e      	ldr	r2, [pc, #120]	; (800681c <vTaskDelete+0x10c>)
 80067a2:	6013      	str	r3, [r2, #0]
 80067a4:	e009      	b.n	80067ba <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80067a6:	4b1e      	ldr	r3, [pc, #120]	; (8006820 <vTaskDelete+0x110>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3b01      	subs	r3, #1
 80067ac:	4a1c      	ldr	r2, [pc, #112]	; (8006820 <vTaskDelete+0x110>)
 80067ae:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f000 fc2f 	bl	8007014 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80067b6:	f000 fc61 	bl	800707c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80067ba:	f000 fffb 	bl	80077b4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80067be:	4b19      	ldr	r3, [pc, #100]	; (8006824 <vTaskDelete+0x114>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d01b      	beq.n	80067fe <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 80067c6:	4b10      	ldr	r3, [pc, #64]	; (8006808 <vTaskDelete+0xf8>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d116      	bne.n	80067fe <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80067d0:	4b15      	ldr	r3, [pc, #84]	; (8006828 <vTaskDelete+0x118>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00a      	beq.n	80067ee <vTaskDelete+0xde>
	__asm volatile
 80067d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067dc:	f383 8811 	msr	BASEPRI, r3
 80067e0:	f3bf 8f6f 	isb	sy
 80067e4:	f3bf 8f4f 	dsb	sy
 80067e8:	60bb      	str	r3, [r7, #8]
}
 80067ea:	bf00      	nop
 80067ec:	e7fe      	b.n	80067ec <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 80067ee:	4b0f      	ldr	r3, [pc, #60]	; (800682c <vTaskDelete+0x11c>)
 80067f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067f4:	601a      	str	r2, [r3, #0]
 80067f6:	f3bf 8f4f 	dsb	sy
 80067fa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80067fe:	bf00      	nop
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	20000eb4 	.word	0x20000eb4
 800680c:	20000eb8 	.word	0x20000eb8
 8006810:	20000fbc 	.word	0x20000fbc
 8006814:	20000fd0 	.word	0x20000fd0
 8006818:	20000f88 	.word	0x20000f88
 800681c:	20000f9c 	.word	0x20000f9c
 8006820:	20000fb4 	.word	0x20000fb4
 8006824:	20000fc0 	.word	0x20000fc0
 8006828:	20000fdc 	.word	0x20000fdc
 800682c:	e000ed04 	.word	0xe000ed04

08006830 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006838:	2300      	movs	r3, #0
 800683a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d017      	beq.n	8006872 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006842:	4b13      	ldr	r3, [pc, #76]	; (8006890 <vTaskDelay+0x60>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <vTaskDelay+0x30>
	__asm volatile
 800684a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684e:	f383 8811 	msr	BASEPRI, r3
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	60bb      	str	r3, [r7, #8]
}
 800685c:	bf00      	nop
 800685e:	e7fe      	b.n	800685e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006860:	f000 f884 	bl	800696c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006864:	2100      	movs	r1, #0
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fde4 	bl	8007434 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800686c:	f000 f88c 	bl	8006988 <xTaskResumeAll>
 8006870:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d107      	bne.n	8006888 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006878:	4b06      	ldr	r3, [pc, #24]	; (8006894 <vTaskDelay+0x64>)
 800687a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800687e:	601a      	str	r2, [r3, #0]
 8006880:	f3bf 8f4f 	dsb	sy
 8006884:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006888:	bf00      	nop
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	20000fdc 	.word	0x20000fdc
 8006894:	e000ed04 	.word	0xe000ed04

08006898 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b08a      	sub	sp, #40	; 0x28
 800689c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800689e:	2300      	movs	r3, #0
 80068a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80068a2:	2300      	movs	r3, #0
 80068a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80068a6:	463a      	mov	r2, r7
 80068a8:	1d39      	adds	r1, r7, #4
 80068aa:	f107 0308 	add.w	r3, r7, #8
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7fa fafc 	bl	8000eac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80068b4:	6839      	ldr	r1, [r7, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	9202      	str	r2, [sp, #8]
 80068bc:	9301      	str	r3, [sp, #4]
 80068be:	2300      	movs	r3, #0
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	2300      	movs	r3, #0
 80068c4:	460a      	mov	r2, r1
 80068c6:	4921      	ldr	r1, [pc, #132]	; (800694c <vTaskStartScheduler+0xb4>)
 80068c8:	4821      	ldr	r0, [pc, #132]	; (8006950 <vTaskStartScheduler+0xb8>)
 80068ca:	f7ff fd77 	bl	80063bc <xTaskCreateStatic>
 80068ce:	4603      	mov	r3, r0
 80068d0:	4a20      	ldr	r2, [pc, #128]	; (8006954 <vTaskStartScheduler+0xbc>)
 80068d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80068d4:	4b1f      	ldr	r3, [pc, #124]	; (8006954 <vTaskStartScheduler+0xbc>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d002      	beq.n	80068e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80068dc:	2301      	movs	r3, #1
 80068de:	617b      	str	r3, [r7, #20]
 80068e0:	e001      	b.n	80068e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80068e2:	2300      	movs	r3, #0
 80068e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d11b      	bne.n	8006924 <vTaskStartScheduler+0x8c>
	__asm volatile
 80068ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f0:	f383 8811 	msr	BASEPRI, r3
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	613b      	str	r3, [r7, #16]
}
 80068fe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006900:	4b15      	ldr	r3, [pc, #84]	; (8006958 <vTaskStartScheduler+0xc0>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	334c      	adds	r3, #76	; 0x4c
 8006906:	4a15      	ldr	r2, [pc, #84]	; (800695c <vTaskStartScheduler+0xc4>)
 8006908:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800690a:	4b15      	ldr	r3, [pc, #84]	; (8006960 <vTaskStartScheduler+0xc8>)
 800690c:	f04f 32ff 	mov.w	r2, #4294967295
 8006910:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006912:	4b14      	ldr	r3, [pc, #80]	; (8006964 <vTaskStartScheduler+0xcc>)
 8006914:	2201      	movs	r2, #1
 8006916:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006918:	4b13      	ldr	r3, [pc, #76]	; (8006968 <vTaskStartScheduler+0xd0>)
 800691a:	2200      	movs	r2, #0
 800691c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800691e:	f000 fe77 	bl	8007610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006922:	e00e      	b.n	8006942 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692a:	d10a      	bne.n	8006942 <vTaskStartScheduler+0xaa>
	__asm volatile
 800692c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006930:	f383 8811 	msr	BASEPRI, r3
 8006934:	f3bf 8f6f 	isb	sy
 8006938:	f3bf 8f4f 	dsb	sy
 800693c:	60fb      	str	r3, [r7, #12]
}
 800693e:	bf00      	nop
 8006940:	e7fe      	b.n	8006940 <vTaskStartScheduler+0xa8>
}
 8006942:	bf00      	nop
 8006944:	3718      	adds	r7, #24
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	0800ae3c 	.word	0x0800ae3c
 8006950:	08006f09 	.word	0x08006f09
 8006954:	20000fd8 	.word	0x20000fd8
 8006958:	20000eb4 	.word	0x20000eb4
 800695c:	20000010 	.word	0x20000010
 8006960:	20000fd4 	.word	0x20000fd4
 8006964:	20000fc0 	.word	0x20000fc0
 8006968:	20000fb8 	.word	0x20000fb8

0800696c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800696c:	b480      	push	{r7}
 800696e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006970:	4b04      	ldr	r3, [pc, #16]	; (8006984 <vTaskSuspendAll+0x18>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	3301      	adds	r3, #1
 8006976:	4a03      	ldr	r2, [pc, #12]	; (8006984 <vTaskSuspendAll+0x18>)
 8006978:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800697a:	bf00      	nop
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr
 8006984:	20000fdc 	.word	0x20000fdc

08006988 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800698e:	2300      	movs	r3, #0
 8006990:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006992:	2300      	movs	r3, #0
 8006994:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006996:	4b41      	ldr	r3, [pc, #260]	; (8006a9c <xTaskResumeAll+0x114>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10a      	bne.n	80069b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800699e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a2:	f383 8811 	msr	BASEPRI, r3
 80069a6:	f3bf 8f6f 	isb	sy
 80069aa:	f3bf 8f4f 	dsb	sy
 80069ae:	603b      	str	r3, [r7, #0]
}
 80069b0:	bf00      	nop
 80069b2:	e7fe      	b.n	80069b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80069b4:	f000 fece 	bl	8007754 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80069b8:	4b38      	ldr	r3, [pc, #224]	; (8006a9c <xTaskResumeAll+0x114>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	3b01      	subs	r3, #1
 80069be:	4a37      	ldr	r2, [pc, #220]	; (8006a9c <xTaskResumeAll+0x114>)
 80069c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069c2:	4b36      	ldr	r3, [pc, #216]	; (8006a9c <xTaskResumeAll+0x114>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d161      	bne.n	8006a8e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80069ca:	4b35      	ldr	r3, [pc, #212]	; (8006aa0 <xTaskResumeAll+0x118>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d05d      	beq.n	8006a8e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069d2:	e02e      	b.n	8006a32 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069d4:	4b33      	ldr	r3, [pc, #204]	; (8006aa4 <xTaskResumeAll+0x11c>)
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	3318      	adds	r3, #24
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7fe fefb 	bl	80057dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	3304      	adds	r3, #4
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7fe fef6 	bl	80057dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f4:	2201      	movs	r2, #1
 80069f6:	409a      	lsls	r2, r3
 80069f8:	4b2b      	ldr	r3, [pc, #172]	; (8006aa8 <xTaskResumeAll+0x120>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	4a2a      	ldr	r2, [pc, #168]	; (8006aa8 <xTaskResumeAll+0x120>)
 8006a00:	6013      	str	r3, [r2, #0]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a06:	4613      	mov	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	4a27      	ldr	r2, [pc, #156]	; (8006aac <xTaskResumeAll+0x124>)
 8006a10:	441a      	add	r2, r3
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	3304      	adds	r3, #4
 8006a16:	4619      	mov	r1, r3
 8006a18:	4610      	mov	r0, r2
 8006a1a:	f7fe fe82 	bl	8005722 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a22:	4b23      	ldr	r3, [pc, #140]	; (8006ab0 <xTaskResumeAll+0x128>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d302      	bcc.n	8006a32 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006a2c:	4b21      	ldr	r3, [pc, #132]	; (8006ab4 <xTaskResumeAll+0x12c>)
 8006a2e:	2201      	movs	r2, #1
 8006a30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a32:	4b1c      	ldr	r3, [pc, #112]	; (8006aa4 <xTaskResumeAll+0x11c>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1cc      	bne.n	80069d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d001      	beq.n	8006a44 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006a40:	f000 fb1c 	bl	800707c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006a44:	4b1c      	ldr	r3, [pc, #112]	; (8006ab8 <xTaskResumeAll+0x130>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d010      	beq.n	8006a72 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006a50:	f000 f836 	bl	8006ac0 <xTaskIncrementTick>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d002      	beq.n	8006a60 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006a5a:	4b16      	ldr	r3, [pc, #88]	; (8006ab4 <xTaskResumeAll+0x12c>)
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	3b01      	subs	r3, #1
 8006a64:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1f1      	bne.n	8006a50 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006a6c:	4b12      	ldr	r3, [pc, #72]	; (8006ab8 <xTaskResumeAll+0x130>)
 8006a6e:	2200      	movs	r2, #0
 8006a70:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a72:	4b10      	ldr	r3, [pc, #64]	; (8006ab4 <xTaskResumeAll+0x12c>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d009      	beq.n	8006a8e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a7e:	4b0f      	ldr	r3, [pc, #60]	; (8006abc <xTaskResumeAll+0x134>)
 8006a80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a84:	601a      	str	r2, [r3, #0]
 8006a86:	f3bf 8f4f 	dsb	sy
 8006a8a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a8e:	f000 fe91 	bl	80077b4 <vPortExitCritical>

	return xAlreadyYielded;
 8006a92:	68bb      	ldr	r3, [r7, #8]
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	20000fdc 	.word	0x20000fdc
 8006aa0:	20000fb4 	.word	0x20000fb4
 8006aa4:	20000f74 	.word	0x20000f74
 8006aa8:	20000fbc 	.word	0x20000fbc
 8006aac:	20000eb8 	.word	0x20000eb8
 8006ab0:	20000eb4 	.word	0x20000eb4
 8006ab4:	20000fc8 	.word	0x20000fc8
 8006ab8:	20000fc4 	.word	0x20000fc4
 8006abc:	e000ed04 	.word	0xe000ed04

08006ac0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aca:	4b4e      	ldr	r3, [pc, #312]	; (8006c04 <xTaskIncrementTick+0x144>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f040 808e 	bne.w	8006bf0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ad4:	4b4c      	ldr	r3, [pc, #304]	; (8006c08 <xTaskIncrementTick+0x148>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006adc:	4a4a      	ldr	r2, [pc, #296]	; (8006c08 <xTaskIncrementTick+0x148>)
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d120      	bne.n	8006b2a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006ae8:	4b48      	ldr	r3, [pc, #288]	; (8006c0c <xTaskIncrementTick+0x14c>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00a      	beq.n	8006b08 <xTaskIncrementTick+0x48>
	__asm volatile
 8006af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af6:	f383 8811 	msr	BASEPRI, r3
 8006afa:	f3bf 8f6f 	isb	sy
 8006afe:	f3bf 8f4f 	dsb	sy
 8006b02:	603b      	str	r3, [r7, #0]
}
 8006b04:	bf00      	nop
 8006b06:	e7fe      	b.n	8006b06 <xTaskIncrementTick+0x46>
 8006b08:	4b40      	ldr	r3, [pc, #256]	; (8006c0c <xTaskIncrementTick+0x14c>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	60fb      	str	r3, [r7, #12]
 8006b0e:	4b40      	ldr	r3, [pc, #256]	; (8006c10 <xTaskIncrementTick+0x150>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a3e      	ldr	r2, [pc, #248]	; (8006c0c <xTaskIncrementTick+0x14c>)
 8006b14:	6013      	str	r3, [r2, #0]
 8006b16:	4a3e      	ldr	r2, [pc, #248]	; (8006c10 <xTaskIncrementTick+0x150>)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6013      	str	r3, [r2, #0]
 8006b1c:	4b3d      	ldr	r3, [pc, #244]	; (8006c14 <xTaskIncrementTick+0x154>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	3301      	adds	r3, #1
 8006b22:	4a3c      	ldr	r2, [pc, #240]	; (8006c14 <xTaskIncrementTick+0x154>)
 8006b24:	6013      	str	r3, [r2, #0]
 8006b26:	f000 faa9 	bl	800707c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006b2a:	4b3b      	ldr	r3, [pc, #236]	; (8006c18 <xTaskIncrementTick+0x158>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d348      	bcc.n	8006bc6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b34:	4b35      	ldr	r3, [pc, #212]	; (8006c0c <xTaskIncrementTick+0x14c>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d104      	bne.n	8006b48 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b3e:	4b36      	ldr	r3, [pc, #216]	; (8006c18 <xTaskIncrementTick+0x158>)
 8006b40:	f04f 32ff 	mov.w	r2, #4294967295
 8006b44:	601a      	str	r2, [r3, #0]
					break;
 8006b46:	e03e      	b.n	8006bc6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b48:	4b30      	ldr	r3, [pc, #192]	; (8006c0c <xTaskIncrementTick+0x14c>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d203      	bcs.n	8006b68 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b60:	4a2d      	ldr	r2, [pc, #180]	; (8006c18 <xTaskIncrementTick+0x158>)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006b66:	e02e      	b.n	8006bc6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	3304      	adds	r3, #4
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7fe fe35 	bl	80057dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d004      	beq.n	8006b84 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	3318      	adds	r3, #24
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7fe fe2c 	bl	80057dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b88:	2201      	movs	r2, #1
 8006b8a:	409a      	lsls	r2, r3
 8006b8c:	4b23      	ldr	r3, [pc, #140]	; (8006c1c <xTaskIncrementTick+0x15c>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	4a22      	ldr	r2, [pc, #136]	; (8006c1c <xTaskIncrementTick+0x15c>)
 8006b94:	6013      	str	r3, [r2, #0]
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4413      	add	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4a1f      	ldr	r2, [pc, #124]	; (8006c20 <xTaskIncrementTick+0x160>)
 8006ba4:	441a      	add	r2, r3
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	3304      	adds	r3, #4
 8006baa:	4619      	mov	r1, r3
 8006bac:	4610      	mov	r0, r2
 8006bae:	f7fe fdb8 	bl	8005722 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb6:	4b1b      	ldr	r3, [pc, #108]	; (8006c24 <xTaskIncrementTick+0x164>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d3b9      	bcc.n	8006b34 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bc4:	e7b6      	b.n	8006b34 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006bc6:	4b17      	ldr	r3, [pc, #92]	; (8006c24 <xTaskIncrementTick+0x164>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bcc:	4914      	ldr	r1, [pc, #80]	; (8006c20 <xTaskIncrementTick+0x160>)
 8006bce:	4613      	mov	r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	4413      	add	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	440b      	add	r3, r1
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d901      	bls.n	8006be2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006bde:	2301      	movs	r3, #1
 8006be0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006be2:	4b11      	ldr	r3, [pc, #68]	; (8006c28 <xTaskIncrementTick+0x168>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d007      	beq.n	8006bfa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006bea:	2301      	movs	r3, #1
 8006bec:	617b      	str	r3, [r7, #20]
 8006bee:	e004      	b.n	8006bfa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006bf0:	4b0e      	ldr	r3, [pc, #56]	; (8006c2c <xTaskIncrementTick+0x16c>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	4a0d      	ldr	r2, [pc, #52]	; (8006c2c <xTaskIncrementTick+0x16c>)
 8006bf8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006bfa:	697b      	ldr	r3, [r7, #20]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3718      	adds	r7, #24
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	20000fdc 	.word	0x20000fdc
 8006c08:	20000fb8 	.word	0x20000fb8
 8006c0c:	20000f6c 	.word	0x20000f6c
 8006c10:	20000f70 	.word	0x20000f70
 8006c14:	20000fcc 	.word	0x20000fcc
 8006c18:	20000fd4 	.word	0x20000fd4
 8006c1c:	20000fbc 	.word	0x20000fbc
 8006c20:	20000eb8 	.word	0x20000eb8
 8006c24:	20000eb4 	.word	0x20000eb4
 8006c28:	20000fc8 	.word	0x20000fc8
 8006c2c:	20000fc4 	.word	0x20000fc4

08006c30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c30:	b480      	push	{r7}
 8006c32:	b087      	sub	sp, #28
 8006c34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c36:	4b29      	ldr	r3, [pc, #164]	; (8006cdc <vTaskSwitchContext+0xac>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d003      	beq.n	8006c46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c3e:	4b28      	ldr	r3, [pc, #160]	; (8006ce0 <vTaskSwitchContext+0xb0>)
 8006c40:	2201      	movs	r2, #1
 8006c42:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c44:	e044      	b.n	8006cd0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006c46:	4b26      	ldr	r3, [pc, #152]	; (8006ce0 <vTaskSwitchContext+0xb0>)
 8006c48:	2200      	movs	r2, #0
 8006c4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c4c:	4b25      	ldr	r3, [pc, #148]	; (8006ce4 <vTaskSwitchContext+0xb4>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	fab3 f383 	clz	r3, r3
 8006c58:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006c5a:	7afb      	ldrb	r3, [r7, #11]
 8006c5c:	f1c3 031f 	rsb	r3, r3, #31
 8006c60:	617b      	str	r3, [r7, #20]
 8006c62:	4921      	ldr	r1, [pc, #132]	; (8006ce8 <vTaskSwitchContext+0xb8>)
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	4613      	mov	r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	440b      	add	r3, r1
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d10a      	bne.n	8006c8c <vTaskSwitchContext+0x5c>
	__asm volatile
 8006c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7a:	f383 8811 	msr	BASEPRI, r3
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	f3bf 8f4f 	dsb	sy
 8006c86:	607b      	str	r3, [r7, #4]
}
 8006c88:	bf00      	nop
 8006c8a:	e7fe      	b.n	8006c8a <vTaskSwitchContext+0x5a>
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4413      	add	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4a14      	ldr	r2, [pc, #80]	; (8006ce8 <vTaskSwitchContext+0xb8>)
 8006c98:	4413      	add	r3, r2
 8006c9a:	613b      	str	r3, [r7, #16]
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	685a      	ldr	r2, [r3, #4]
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	605a      	str	r2, [r3, #4]
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	685a      	ldr	r2, [r3, #4]
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	3308      	adds	r3, #8
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d104      	bne.n	8006cbc <vTaskSwitchContext+0x8c>
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	685a      	ldr	r2, [r3, #4]
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	605a      	str	r2, [r3, #4]
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	4a0a      	ldr	r2, [pc, #40]	; (8006cec <vTaskSwitchContext+0xbc>)
 8006cc4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006cc6:	4b09      	ldr	r3, [pc, #36]	; (8006cec <vTaskSwitchContext+0xbc>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	334c      	adds	r3, #76	; 0x4c
 8006ccc:	4a08      	ldr	r2, [pc, #32]	; (8006cf0 <vTaskSwitchContext+0xc0>)
 8006cce:	6013      	str	r3, [r2, #0]
}
 8006cd0:	bf00      	nop
 8006cd2:	371c      	adds	r7, #28
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr
 8006cdc:	20000fdc 	.word	0x20000fdc
 8006ce0:	20000fc8 	.word	0x20000fc8
 8006ce4:	20000fbc 	.word	0x20000fbc
 8006ce8:	20000eb8 	.word	0x20000eb8
 8006cec:	20000eb4 	.word	0x20000eb4
 8006cf0:	20000010 	.word	0x20000010

08006cf4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d10a      	bne.n	8006d1a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d08:	f383 8811 	msr	BASEPRI, r3
 8006d0c:	f3bf 8f6f 	isb	sy
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	60fb      	str	r3, [r7, #12]
}
 8006d16:	bf00      	nop
 8006d18:	e7fe      	b.n	8006d18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d1a:	4b07      	ldr	r3, [pc, #28]	; (8006d38 <vTaskPlaceOnEventList+0x44>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	3318      	adds	r3, #24
 8006d20:	4619      	mov	r1, r3
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7fe fd21 	bl	800576a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d28:	2101      	movs	r1, #1
 8006d2a:	6838      	ldr	r0, [r7, #0]
 8006d2c:	f000 fb82 	bl	8007434 <prvAddCurrentTaskToDelayedList>
}
 8006d30:	bf00      	nop
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	20000eb4 	.word	0x20000eb4

08006d3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10a      	bne.n	8006d68 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d56:	f383 8811 	msr	BASEPRI, r3
 8006d5a:	f3bf 8f6f 	isb	sy
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	60fb      	str	r3, [r7, #12]
}
 8006d64:	bf00      	nop
 8006d66:	e7fe      	b.n	8006d66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	3318      	adds	r3, #24
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7fe fd35 	bl	80057dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d72:	4b1d      	ldr	r3, [pc, #116]	; (8006de8 <xTaskRemoveFromEventList+0xac>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d11c      	bne.n	8006db4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	3304      	adds	r3, #4
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fe fd2c 	bl	80057dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d88:	2201      	movs	r2, #1
 8006d8a:	409a      	lsls	r2, r3
 8006d8c:	4b17      	ldr	r3, [pc, #92]	; (8006dec <xTaskRemoveFromEventList+0xb0>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	4a16      	ldr	r2, [pc, #88]	; (8006dec <xTaskRemoveFromEventList+0xb0>)
 8006d94:	6013      	str	r3, [r2, #0]
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4413      	add	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4a13      	ldr	r2, [pc, #76]	; (8006df0 <xTaskRemoveFromEventList+0xb4>)
 8006da4:	441a      	add	r2, r3
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	3304      	adds	r3, #4
 8006daa:	4619      	mov	r1, r3
 8006dac:	4610      	mov	r0, r2
 8006dae:	f7fe fcb8 	bl	8005722 <vListInsertEnd>
 8006db2:	e005      	b.n	8006dc0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	3318      	adds	r3, #24
 8006db8:	4619      	mov	r1, r3
 8006dba:	480e      	ldr	r0, [pc, #56]	; (8006df4 <xTaskRemoveFromEventList+0xb8>)
 8006dbc:	f7fe fcb1 	bl	8005722 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc4:	4b0c      	ldr	r3, [pc, #48]	; (8006df8 <xTaskRemoveFromEventList+0xbc>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d905      	bls.n	8006dda <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006dd2:	4b0a      	ldr	r3, [pc, #40]	; (8006dfc <xTaskRemoveFromEventList+0xc0>)
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	601a      	str	r2, [r3, #0]
 8006dd8:	e001      	b.n	8006dde <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006dde:	697b      	ldr	r3, [r7, #20]
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3718      	adds	r7, #24
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	20000fdc 	.word	0x20000fdc
 8006dec:	20000fbc 	.word	0x20000fbc
 8006df0:	20000eb8 	.word	0x20000eb8
 8006df4:	20000f74 	.word	0x20000f74
 8006df8:	20000eb4 	.word	0x20000eb4
 8006dfc:	20000fc8 	.word	0x20000fc8

08006e00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006e08:	4b06      	ldr	r3, [pc, #24]	; (8006e24 <vTaskInternalSetTimeOutState+0x24>)
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006e10:	4b05      	ldr	r3, [pc, #20]	; (8006e28 <vTaskInternalSetTimeOutState+0x28>)
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	605a      	str	r2, [r3, #4]
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr
 8006e24:	20000fcc 	.word	0x20000fcc
 8006e28:	20000fb8 	.word	0x20000fb8

08006e2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b088      	sub	sp, #32
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d10a      	bne.n	8006e52 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e40:	f383 8811 	msr	BASEPRI, r3
 8006e44:	f3bf 8f6f 	isb	sy
 8006e48:	f3bf 8f4f 	dsb	sy
 8006e4c:	613b      	str	r3, [r7, #16]
}
 8006e4e:	bf00      	nop
 8006e50:	e7fe      	b.n	8006e50 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d10a      	bne.n	8006e6e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5c:	f383 8811 	msr	BASEPRI, r3
 8006e60:	f3bf 8f6f 	isb	sy
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	60fb      	str	r3, [r7, #12]
}
 8006e6a:	bf00      	nop
 8006e6c:	e7fe      	b.n	8006e6c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006e6e:	f000 fc71 	bl	8007754 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006e72:	4b1d      	ldr	r3, [pc, #116]	; (8006ee8 <xTaskCheckForTimeOut+0xbc>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	69ba      	ldr	r2, [r7, #24]
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e8a:	d102      	bne.n	8006e92 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	61fb      	str	r3, [r7, #28]
 8006e90:	e023      	b.n	8006eda <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	4b15      	ldr	r3, [pc, #84]	; (8006eec <xTaskCheckForTimeOut+0xc0>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d007      	beq.n	8006eae <xTaskCheckForTimeOut+0x82>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	69ba      	ldr	r2, [r7, #24]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d302      	bcc.n	8006eae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	61fb      	str	r3, [r7, #28]
 8006eac:	e015      	b.n	8006eda <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d20b      	bcs.n	8006ed0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	1ad2      	subs	r2, r2, r3
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f7ff ff9b 	bl	8006e00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	61fb      	str	r3, [r7, #28]
 8006ece:	e004      	b.n	8006eda <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006eda:	f000 fc6b 	bl	80077b4 <vPortExitCritical>

	return xReturn;
 8006ede:	69fb      	ldr	r3, [r7, #28]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3720      	adds	r7, #32
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	20000fb8 	.word	0x20000fb8
 8006eec:	20000fcc 	.word	0x20000fcc

08006ef0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006ef4:	4b03      	ldr	r3, [pc, #12]	; (8006f04 <vTaskMissedYield+0x14>)
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	601a      	str	r2, [r3, #0]
}
 8006efa:	bf00      	nop
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr
 8006f04:	20000fc8 	.word	0x20000fc8

08006f08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006f10:	f000 f852 	bl	8006fb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f14:	4b06      	ldr	r3, [pc, #24]	; (8006f30 <prvIdleTask+0x28>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d9f9      	bls.n	8006f10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006f1c:	4b05      	ldr	r3, [pc, #20]	; (8006f34 <prvIdleTask+0x2c>)
 8006f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f22:	601a      	str	r2, [r3, #0]
 8006f24:	f3bf 8f4f 	dsb	sy
 8006f28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006f2c:	e7f0      	b.n	8006f10 <prvIdleTask+0x8>
 8006f2e:	bf00      	nop
 8006f30:	20000eb8 	.word	0x20000eb8
 8006f34:	e000ed04 	.word	0xe000ed04

08006f38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f3e:	2300      	movs	r3, #0
 8006f40:	607b      	str	r3, [r7, #4]
 8006f42:	e00c      	b.n	8006f5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	4613      	mov	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	4413      	add	r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4a12      	ldr	r2, [pc, #72]	; (8006f98 <prvInitialiseTaskLists+0x60>)
 8006f50:	4413      	add	r3, r2
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7fe fbb8 	bl	80056c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	607b      	str	r3, [r7, #4]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2b06      	cmp	r3, #6
 8006f62:	d9ef      	bls.n	8006f44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f64:	480d      	ldr	r0, [pc, #52]	; (8006f9c <prvInitialiseTaskLists+0x64>)
 8006f66:	f7fe fbaf 	bl	80056c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f6a:	480d      	ldr	r0, [pc, #52]	; (8006fa0 <prvInitialiseTaskLists+0x68>)
 8006f6c:	f7fe fbac 	bl	80056c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f70:	480c      	ldr	r0, [pc, #48]	; (8006fa4 <prvInitialiseTaskLists+0x6c>)
 8006f72:	f7fe fba9 	bl	80056c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f76:	480c      	ldr	r0, [pc, #48]	; (8006fa8 <prvInitialiseTaskLists+0x70>)
 8006f78:	f7fe fba6 	bl	80056c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f7c:	480b      	ldr	r0, [pc, #44]	; (8006fac <prvInitialiseTaskLists+0x74>)
 8006f7e:	f7fe fba3 	bl	80056c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f82:	4b0b      	ldr	r3, [pc, #44]	; (8006fb0 <prvInitialiseTaskLists+0x78>)
 8006f84:	4a05      	ldr	r2, [pc, #20]	; (8006f9c <prvInitialiseTaskLists+0x64>)
 8006f86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f88:	4b0a      	ldr	r3, [pc, #40]	; (8006fb4 <prvInitialiseTaskLists+0x7c>)
 8006f8a:	4a05      	ldr	r2, [pc, #20]	; (8006fa0 <prvInitialiseTaskLists+0x68>)
 8006f8c:	601a      	str	r2, [r3, #0]
}
 8006f8e:	bf00      	nop
 8006f90:	3708      	adds	r7, #8
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	20000eb8 	.word	0x20000eb8
 8006f9c:	20000f44 	.word	0x20000f44
 8006fa0:	20000f58 	.word	0x20000f58
 8006fa4:	20000f74 	.word	0x20000f74
 8006fa8:	20000f88 	.word	0x20000f88
 8006fac:	20000fa0 	.word	0x20000fa0
 8006fb0:	20000f6c 	.word	0x20000f6c
 8006fb4:	20000f70 	.word	0x20000f70

08006fb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fbe:	e019      	b.n	8006ff4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006fc0:	f000 fbc8 	bl	8007754 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fc4:	4b10      	ldr	r3, [pc, #64]	; (8007008 <prvCheckTasksWaitingTermination+0x50>)
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	3304      	adds	r3, #4
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7fe fc03 	bl	80057dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006fd6:	4b0d      	ldr	r3, [pc, #52]	; (800700c <prvCheckTasksWaitingTermination+0x54>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	4a0b      	ldr	r2, [pc, #44]	; (800700c <prvCheckTasksWaitingTermination+0x54>)
 8006fde:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006fe0:	4b0b      	ldr	r3, [pc, #44]	; (8007010 <prvCheckTasksWaitingTermination+0x58>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	4a0a      	ldr	r2, [pc, #40]	; (8007010 <prvCheckTasksWaitingTermination+0x58>)
 8006fe8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006fea:	f000 fbe3 	bl	80077b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f810 	bl	8007014 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ff4:	4b06      	ldr	r3, [pc, #24]	; (8007010 <prvCheckTasksWaitingTermination+0x58>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1e1      	bne.n	8006fc0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ffc:	bf00      	nop
 8006ffe:	bf00      	nop
 8007000:	3708      	adds	r7, #8
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	20000f88 	.word	0x20000f88
 800700c:	20000fb4 	.word	0x20000fb4
 8007010:	20000f9c 	.word	0x20000f9c

08007014 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	334c      	adds	r3, #76	; 0x4c
 8007020:	4618      	mov	r0, r3
 8007022:	f001 fcf9 	bl	8008a18 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800702c:	2b00      	cmp	r3, #0
 800702e:	d108      	bne.n	8007042 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007034:	4618      	mov	r0, r3
 8007036:	f000 fd7b 	bl	8007b30 <vPortFree>
				vPortFree( pxTCB );
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fd78 	bl	8007b30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007040:	e018      	b.n	8007074 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007048:	2b01      	cmp	r3, #1
 800704a:	d103      	bne.n	8007054 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fd6f 	bl	8007b30 <vPortFree>
	}
 8007052:	e00f      	b.n	8007074 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800705a:	2b02      	cmp	r3, #2
 800705c:	d00a      	beq.n	8007074 <prvDeleteTCB+0x60>
	__asm volatile
 800705e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007062:	f383 8811 	msr	BASEPRI, r3
 8007066:	f3bf 8f6f 	isb	sy
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	60fb      	str	r3, [r7, #12]
}
 8007070:	bf00      	nop
 8007072:	e7fe      	b.n	8007072 <prvDeleteTCB+0x5e>
	}
 8007074:	bf00      	nop
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007082:	4b0c      	ldr	r3, [pc, #48]	; (80070b4 <prvResetNextTaskUnblockTime+0x38>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d104      	bne.n	8007096 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800708c:	4b0a      	ldr	r3, [pc, #40]	; (80070b8 <prvResetNextTaskUnblockTime+0x3c>)
 800708e:	f04f 32ff 	mov.w	r2, #4294967295
 8007092:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007094:	e008      	b.n	80070a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007096:	4b07      	ldr	r3, [pc, #28]	; (80070b4 <prvResetNextTaskUnblockTime+0x38>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	4a04      	ldr	r2, [pc, #16]	; (80070b8 <prvResetNextTaskUnblockTime+0x3c>)
 80070a6:	6013      	str	r3, [r2, #0]
}
 80070a8:	bf00      	nop
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr
 80070b4:	20000f6c 	.word	0x20000f6c
 80070b8:	20000fd4 	.word	0x20000fd4

080070bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80070c2:	4b0b      	ldr	r3, [pc, #44]	; (80070f0 <xTaskGetSchedulerState+0x34>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d102      	bne.n	80070d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80070ca:	2301      	movs	r3, #1
 80070cc:	607b      	str	r3, [r7, #4]
 80070ce:	e008      	b.n	80070e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070d0:	4b08      	ldr	r3, [pc, #32]	; (80070f4 <xTaskGetSchedulerState+0x38>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d102      	bne.n	80070de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80070d8:	2302      	movs	r3, #2
 80070da:	607b      	str	r3, [r7, #4]
 80070dc:	e001      	b.n	80070e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80070de:	2300      	movs	r3, #0
 80070e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80070e2:	687b      	ldr	r3, [r7, #4]
	}
 80070e4:	4618      	mov	r0, r3
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	20000fc0 	.word	0x20000fc0
 80070f4:	20000fdc 	.word	0x20000fdc

080070f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007104:	2300      	movs	r3, #0
 8007106:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d05e      	beq.n	80071cc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007112:	4b31      	ldr	r3, [pc, #196]	; (80071d8 <xTaskPriorityInherit+0xe0>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007118:	429a      	cmp	r2, r3
 800711a:	d24e      	bcs.n	80071ba <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	699b      	ldr	r3, [r3, #24]
 8007120:	2b00      	cmp	r3, #0
 8007122:	db06      	blt.n	8007132 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007124:	4b2c      	ldr	r3, [pc, #176]	; (80071d8 <xTaskPriorityInherit+0xe0>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712a:	f1c3 0207 	rsb	r2, r3, #7
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	6959      	ldr	r1, [r3, #20]
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800713a:	4613      	mov	r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	4413      	add	r3, r2
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	4a26      	ldr	r2, [pc, #152]	; (80071dc <xTaskPriorityInherit+0xe4>)
 8007144:	4413      	add	r3, r2
 8007146:	4299      	cmp	r1, r3
 8007148:	d12f      	bne.n	80071aa <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	3304      	adds	r3, #4
 800714e:	4618      	mov	r0, r3
 8007150:	f7fe fb44 	bl	80057dc <uxListRemove>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10a      	bne.n	8007170 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715e:	2201      	movs	r2, #1
 8007160:	fa02 f303 	lsl.w	r3, r2, r3
 8007164:	43da      	mvns	r2, r3
 8007166:	4b1e      	ldr	r3, [pc, #120]	; (80071e0 <xTaskPriorityInherit+0xe8>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4013      	ands	r3, r2
 800716c:	4a1c      	ldr	r2, [pc, #112]	; (80071e0 <xTaskPriorityInherit+0xe8>)
 800716e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007170:	4b19      	ldr	r3, [pc, #100]	; (80071d8 <xTaskPriorityInherit+0xe0>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717e:	2201      	movs	r2, #1
 8007180:	409a      	lsls	r2, r3
 8007182:	4b17      	ldr	r3, [pc, #92]	; (80071e0 <xTaskPriorityInherit+0xe8>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4313      	orrs	r3, r2
 8007188:	4a15      	ldr	r2, [pc, #84]	; (80071e0 <xTaskPriorityInherit+0xe8>)
 800718a:	6013      	str	r3, [r2, #0]
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007190:	4613      	mov	r3, r2
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4413      	add	r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4a10      	ldr	r2, [pc, #64]	; (80071dc <xTaskPriorityInherit+0xe4>)
 800719a:	441a      	add	r2, r3
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	3304      	adds	r3, #4
 80071a0:	4619      	mov	r1, r3
 80071a2:	4610      	mov	r0, r2
 80071a4:	f7fe fabd 	bl	8005722 <vListInsertEnd>
 80071a8:	e004      	b.n	80071b4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80071aa:	4b0b      	ldr	r3, [pc, #44]	; (80071d8 <xTaskPriorityInherit+0xe0>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80071b4:	2301      	movs	r3, #1
 80071b6:	60fb      	str	r3, [r7, #12]
 80071b8:	e008      	b.n	80071cc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071be:	4b06      	ldr	r3, [pc, #24]	; (80071d8 <xTaskPriorityInherit+0xe0>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d201      	bcs.n	80071cc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80071c8:	2301      	movs	r3, #1
 80071ca:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80071cc:	68fb      	ldr	r3, [r7, #12]
	}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	20000eb4 	.word	0x20000eb4
 80071dc:	20000eb8 	.word	0x20000eb8
 80071e0:	20000fbc 	.word	0x20000fbc

080071e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b086      	sub	sp, #24
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80071f0:	2300      	movs	r3, #0
 80071f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d06e      	beq.n	80072d8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80071fa:	4b3a      	ldr	r3, [pc, #232]	; (80072e4 <xTaskPriorityDisinherit+0x100>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	429a      	cmp	r2, r3
 8007202:	d00a      	beq.n	800721a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007208:	f383 8811 	msr	BASEPRI, r3
 800720c:	f3bf 8f6f 	isb	sy
 8007210:	f3bf 8f4f 	dsb	sy
 8007214:	60fb      	str	r3, [r7, #12]
}
 8007216:	bf00      	nop
 8007218:	e7fe      	b.n	8007218 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10a      	bne.n	8007238 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007226:	f383 8811 	msr	BASEPRI, r3
 800722a:	f3bf 8f6f 	isb	sy
 800722e:	f3bf 8f4f 	dsb	sy
 8007232:	60bb      	str	r3, [r7, #8]
}
 8007234:	bf00      	nop
 8007236:	e7fe      	b.n	8007236 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800723c:	1e5a      	subs	r2, r3, #1
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800724a:	429a      	cmp	r2, r3
 800724c:	d044      	beq.n	80072d8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007252:	2b00      	cmp	r3, #0
 8007254:	d140      	bne.n	80072d8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	3304      	adds	r3, #4
 800725a:	4618      	mov	r0, r3
 800725c:	f7fe fabe 	bl	80057dc <uxListRemove>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d115      	bne.n	8007292 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800726a:	491f      	ldr	r1, [pc, #124]	; (80072e8 <xTaskPriorityDisinherit+0x104>)
 800726c:	4613      	mov	r3, r2
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	4413      	add	r3, r2
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	440b      	add	r3, r1
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10a      	bne.n	8007292 <xTaskPriorityDisinherit+0xae>
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007280:	2201      	movs	r2, #1
 8007282:	fa02 f303 	lsl.w	r3, r2, r3
 8007286:	43da      	mvns	r2, r3
 8007288:	4b18      	ldr	r3, [pc, #96]	; (80072ec <xTaskPriorityDisinherit+0x108>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4013      	ands	r3, r2
 800728e:	4a17      	ldr	r2, [pc, #92]	; (80072ec <xTaskPriorityDisinherit+0x108>)
 8007290:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729e:	f1c3 0207 	rsb	r2, r3, #7
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072aa:	2201      	movs	r2, #1
 80072ac:	409a      	lsls	r2, r3
 80072ae:	4b0f      	ldr	r3, [pc, #60]	; (80072ec <xTaskPriorityDisinherit+0x108>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	4a0d      	ldr	r2, [pc, #52]	; (80072ec <xTaskPriorityDisinherit+0x108>)
 80072b6:	6013      	str	r3, [r2, #0]
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072bc:	4613      	mov	r3, r2
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	4413      	add	r3, r2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4a08      	ldr	r2, [pc, #32]	; (80072e8 <xTaskPriorityDisinherit+0x104>)
 80072c6:	441a      	add	r2, r3
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	3304      	adds	r3, #4
 80072cc:	4619      	mov	r1, r3
 80072ce:	4610      	mov	r0, r2
 80072d0:	f7fe fa27 	bl	8005722 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80072d4:	2301      	movs	r3, #1
 80072d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80072d8:	697b      	ldr	r3, [r7, #20]
	}
 80072da:	4618      	mov	r0, r3
 80072dc:	3718      	adds	r7, #24
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	20000eb4 	.word	0x20000eb4
 80072e8:	20000eb8 	.word	0x20000eb8
 80072ec:	20000fbc 	.word	0x20000fbc

080072f0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b088      	sub	sp, #32
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80072fe:	2301      	movs	r3, #1
 8007300:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d077      	beq.n	80073f8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800730c:	2b00      	cmp	r3, #0
 800730e:	d10a      	bne.n	8007326 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007314:	f383 8811 	msr	BASEPRI, r3
 8007318:	f3bf 8f6f 	isb	sy
 800731c:	f3bf 8f4f 	dsb	sy
 8007320:	60fb      	str	r3, [r7, #12]
}
 8007322:	bf00      	nop
 8007324:	e7fe      	b.n	8007324 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800732a:	683a      	ldr	r2, [r7, #0]
 800732c:	429a      	cmp	r2, r3
 800732e:	d902      	bls.n	8007336 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	61fb      	str	r3, [r7, #28]
 8007334:	e002      	b.n	800733c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800733a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007340:	69fa      	ldr	r2, [r7, #28]
 8007342:	429a      	cmp	r2, r3
 8007344:	d058      	beq.n	80073f8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800734a:	697a      	ldr	r2, [r7, #20]
 800734c:	429a      	cmp	r2, r3
 800734e:	d153      	bne.n	80073f8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007350:	4b2b      	ldr	r3, [pc, #172]	; (8007400 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	69ba      	ldr	r2, [r7, #24]
 8007356:	429a      	cmp	r2, r3
 8007358:	d10a      	bne.n	8007370 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800735a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735e:	f383 8811 	msr	BASEPRI, r3
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	f3bf 8f4f 	dsb	sy
 800736a:	60bb      	str	r3, [r7, #8]
}
 800736c:	bf00      	nop
 800736e:	e7fe      	b.n	800736e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007374:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	69fa      	ldr	r2, [r7, #28]
 800737a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	2b00      	cmp	r3, #0
 8007382:	db04      	blt.n	800738e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	f1c3 0207 	rsb	r2, r3, #7
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	6959      	ldr	r1, [r3, #20]
 8007392:	693a      	ldr	r2, [r7, #16]
 8007394:	4613      	mov	r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	4413      	add	r3, r2
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	4a19      	ldr	r2, [pc, #100]	; (8007404 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800739e:	4413      	add	r3, r2
 80073a0:	4299      	cmp	r1, r3
 80073a2:	d129      	bne.n	80073f8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	3304      	adds	r3, #4
 80073a8:	4618      	mov	r0, r3
 80073aa:	f7fe fa17 	bl	80057dc <uxListRemove>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d10a      	bne.n	80073ca <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b8:	2201      	movs	r2, #1
 80073ba:	fa02 f303 	lsl.w	r3, r2, r3
 80073be:	43da      	mvns	r2, r3
 80073c0:	4b11      	ldr	r3, [pc, #68]	; (8007408 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4013      	ands	r3, r2
 80073c6:	4a10      	ldr	r2, [pc, #64]	; (8007408 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80073c8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ce:	2201      	movs	r2, #1
 80073d0:	409a      	lsls	r2, r3
 80073d2:	4b0d      	ldr	r3, [pc, #52]	; (8007408 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	4a0b      	ldr	r2, [pc, #44]	; (8007408 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80073da:	6013      	str	r3, [r2, #0]
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073e0:	4613      	mov	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4413      	add	r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	4a06      	ldr	r2, [pc, #24]	; (8007404 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80073ea:	441a      	add	r2, r3
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	3304      	adds	r3, #4
 80073f0:	4619      	mov	r1, r3
 80073f2:	4610      	mov	r0, r2
 80073f4:	f7fe f995 	bl	8005722 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80073f8:	bf00      	nop
 80073fa:	3720      	adds	r7, #32
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	20000eb4 	.word	0x20000eb4
 8007404:	20000eb8 	.word	0x20000eb8
 8007408:	20000fbc 	.word	0x20000fbc

0800740c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800740c:	b480      	push	{r7}
 800740e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007410:	4b07      	ldr	r3, [pc, #28]	; (8007430 <pvTaskIncrementMutexHeldCount+0x24>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d004      	beq.n	8007422 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007418:	4b05      	ldr	r3, [pc, #20]	; (8007430 <pvTaskIncrementMutexHeldCount+0x24>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800741e:	3201      	adds	r2, #1
 8007420:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007422:	4b03      	ldr	r3, [pc, #12]	; (8007430 <pvTaskIncrementMutexHeldCount+0x24>)
 8007424:	681b      	ldr	r3, [r3, #0]
	}
 8007426:	4618      	mov	r0, r3
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr
 8007430:	20000eb4 	.word	0x20000eb4

08007434 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800743e:	4b29      	ldr	r3, [pc, #164]	; (80074e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007444:	4b28      	ldr	r3, [pc, #160]	; (80074e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	3304      	adds	r3, #4
 800744a:	4618      	mov	r0, r3
 800744c:	f7fe f9c6 	bl	80057dc <uxListRemove>
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d10b      	bne.n	800746e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007456:	4b24      	ldr	r3, [pc, #144]	; (80074e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745c:	2201      	movs	r2, #1
 800745e:	fa02 f303 	lsl.w	r3, r2, r3
 8007462:	43da      	mvns	r2, r3
 8007464:	4b21      	ldr	r3, [pc, #132]	; (80074ec <prvAddCurrentTaskToDelayedList+0xb8>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4013      	ands	r3, r2
 800746a:	4a20      	ldr	r2, [pc, #128]	; (80074ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800746c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007474:	d10a      	bne.n	800748c <prvAddCurrentTaskToDelayedList+0x58>
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d007      	beq.n	800748c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800747c:	4b1a      	ldr	r3, [pc, #104]	; (80074e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	3304      	adds	r3, #4
 8007482:	4619      	mov	r1, r3
 8007484:	481a      	ldr	r0, [pc, #104]	; (80074f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007486:	f7fe f94c 	bl	8005722 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800748a:	e026      	b.n	80074da <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4413      	add	r3, r2
 8007492:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007494:	4b14      	ldr	r3, [pc, #80]	; (80074e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68ba      	ldr	r2, [r7, #8]
 800749a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d209      	bcs.n	80074b8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074a4:	4b13      	ldr	r3, [pc, #76]	; (80074f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	4b0f      	ldr	r3, [pc, #60]	; (80074e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	3304      	adds	r3, #4
 80074ae:	4619      	mov	r1, r3
 80074b0:	4610      	mov	r0, r2
 80074b2:	f7fe f95a 	bl	800576a <vListInsert>
}
 80074b6:	e010      	b.n	80074da <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074b8:	4b0f      	ldr	r3, [pc, #60]	; (80074f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	4b0a      	ldr	r3, [pc, #40]	; (80074e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	3304      	adds	r3, #4
 80074c2:	4619      	mov	r1, r3
 80074c4:	4610      	mov	r0, r2
 80074c6:	f7fe f950 	bl	800576a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80074ca:	4b0c      	ldr	r3, [pc, #48]	; (80074fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68ba      	ldr	r2, [r7, #8]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d202      	bcs.n	80074da <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80074d4:	4a09      	ldr	r2, [pc, #36]	; (80074fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	6013      	str	r3, [r2, #0]
}
 80074da:	bf00      	nop
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	20000fb8 	.word	0x20000fb8
 80074e8:	20000eb4 	.word	0x20000eb4
 80074ec:	20000fbc 	.word	0x20000fbc
 80074f0:	20000fa0 	.word	0x20000fa0
 80074f4:	20000f70 	.word	0x20000f70
 80074f8:	20000f6c 	.word	0x20000f6c
 80074fc:	20000fd4 	.word	0x20000fd4

08007500 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007500:	b480      	push	{r7}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	3b04      	subs	r3, #4
 8007510:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007518:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	3b04      	subs	r3, #4
 800751e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	f023 0201 	bic.w	r2, r3, #1
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	3b04      	subs	r3, #4
 800752e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007530:	4a0c      	ldr	r2, [pc, #48]	; (8007564 <pxPortInitialiseStack+0x64>)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	3b14      	subs	r3, #20
 800753a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	3b04      	subs	r3, #4
 8007546:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f06f 0202 	mvn.w	r2, #2
 800754e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	3b20      	subs	r3, #32
 8007554:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007556:	68fb      	ldr	r3, [r7, #12]
}
 8007558:	4618      	mov	r0, r3
 800755a:	3714      	adds	r7, #20
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr
 8007564:	08007569 	.word	0x08007569

08007568 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800756e:	2300      	movs	r3, #0
 8007570:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007572:	4b12      	ldr	r3, [pc, #72]	; (80075bc <prvTaskExitError+0x54>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757a:	d00a      	beq.n	8007592 <prvTaskExitError+0x2a>
	__asm volatile
 800757c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007580:	f383 8811 	msr	BASEPRI, r3
 8007584:	f3bf 8f6f 	isb	sy
 8007588:	f3bf 8f4f 	dsb	sy
 800758c:	60fb      	str	r3, [r7, #12]
}
 800758e:	bf00      	nop
 8007590:	e7fe      	b.n	8007590 <prvTaskExitError+0x28>
	__asm volatile
 8007592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007596:	f383 8811 	msr	BASEPRI, r3
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	60bb      	str	r3, [r7, #8]
}
 80075a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80075a6:	bf00      	nop
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d0fc      	beq.n	80075a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80075ae:	bf00      	nop
 80075b0:	bf00      	nop
 80075b2:	3714      	adds	r7, #20
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr
 80075bc:	2000000c 	.word	0x2000000c

080075c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80075c0:	4b07      	ldr	r3, [pc, #28]	; (80075e0 <pxCurrentTCBConst2>)
 80075c2:	6819      	ldr	r1, [r3, #0]
 80075c4:	6808      	ldr	r0, [r1, #0]
 80075c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ca:	f380 8809 	msr	PSP, r0
 80075ce:	f3bf 8f6f 	isb	sy
 80075d2:	f04f 0000 	mov.w	r0, #0
 80075d6:	f380 8811 	msr	BASEPRI, r0
 80075da:	4770      	bx	lr
 80075dc:	f3af 8000 	nop.w

080075e0 <pxCurrentTCBConst2>:
 80075e0:	20000eb4 	.word	0x20000eb4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80075e4:	bf00      	nop
 80075e6:	bf00      	nop

080075e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80075e8:	4808      	ldr	r0, [pc, #32]	; (800760c <prvPortStartFirstTask+0x24>)
 80075ea:	6800      	ldr	r0, [r0, #0]
 80075ec:	6800      	ldr	r0, [r0, #0]
 80075ee:	f380 8808 	msr	MSP, r0
 80075f2:	f04f 0000 	mov.w	r0, #0
 80075f6:	f380 8814 	msr	CONTROL, r0
 80075fa:	b662      	cpsie	i
 80075fc:	b661      	cpsie	f
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	f3bf 8f6f 	isb	sy
 8007606:	df00      	svc	0
 8007608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800760a:	bf00      	nop
 800760c:	e000ed08 	.word	0xe000ed08

08007610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007616:	4b46      	ldr	r3, [pc, #280]	; (8007730 <xPortStartScheduler+0x120>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a46      	ldr	r2, [pc, #280]	; (8007734 <xPortStartScheduler+0x124>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d10a      	bne.n	8007636 <xPortStartScheduler+0x26>
	__asm volatile
 8007620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007624:	f383 8811 	msr	BASEPRI, r3
 8007628:	f3bf 8f6f 	isb	sy
 800762c:	f3bf 8f4f 	dsb	sy
 8007630:	613b      	str	r3, [r7, #16]
}
 8007632:	bf00      	nop
 8007634:	e7fe      	b.n	8007634 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007636:	4b3e      	ldr	r3, [pc, #248]	; (8007730 <xPortStartScheduler+0x120>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a3f      	ldr	r2, [pc, #252]	; (8007738 <xPortStartScheduler+0x128>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d10a      	bne.n	8007656 <xPortStartScheduler+0x46>
	__asm volatile
 8007640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	60fb      	str	r3, [r7, #12]
}
 8007652:	bf00      	nop
 8007654:	e7fe      	b.n	8007654 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007656:	4b39      	ldr	r3, [pc, #228]	; (800773c <xPortStartScheduler+0x12c>)
 8007658:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	b2db      	uxtb	r3, r3
 8007660:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	22ff      	movs	r2, #255	; 0xff
 8007666:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	b2db      	uxtb	r3, r3
 800766e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007670:	78fb      	ldrb	r3, [r7, #3]
 8007672:	b2db      	uxtb	r3, r3
 8007674:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007678:	b2da      	uxtb	r2, r3
 800767a:	4b31      	ldr	r3, [pc, #196]	; (8007740 <xPortStartScheduler+0x130>)
 800767c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800767e:	4b31      	ldr	r3, [pc, #196]	; (8007744 <xPortStartScheduler+0x134>)
 8007680:	2207      	movs	r2, #7
 8007682:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007684:	e009      	b.n	800769a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007686:	4b2f      	ldr	r3, [pc, #188]	; (8007744 <xPortStartScheduler+0x134>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	3b01      	subs	r3, #1
 800768c:	4a2d      	ldr	r2, [pc, #180]	; (8007744 <xPortStartScheduler+0x134>)
 800768e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007690:	78fb      	ldrb	r3, [r7, #3]
 8007692:	b2db      	uxtb	r3, r3
 8007694:	005b      	lsls	r3, r3, #1
 8007696:	b2db      	uxtb	r3, r3
 8007698:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800769a:	78fb      	ldrb	r3, [r7, #3]
 800769c:	b2db      	uxtb	r3, r3
 800769e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076a2:	2b80      	cmp	r3, #128	; 0x80
 80076a4:	d0ef      	beq.n	8007686 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80076a6:	4b27      	ldr	r3, [pc, #156]	; (8007744 <xPortStartScheduler+0x134>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f1c3 0307 	rsb	r3, r3, #7
 80076ae:	2b04      	cmp	r3, #4
 80076b0:	d00a      	beq.n	80076c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80076b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b6:	f383 8811 	msr	BASEPRI, r3
 80076ba:	f3bf 8f6f 	isb	sy
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	60bb      	str	r3, [r7, #8]
}
 80076c4:	bf00      	nop
 80076c6:	e7fe      	b.n	80076c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80076c8:	4b1e      	ldr	r3, [pc, #120]	; (8007744 <xPortStartScheduler+0x134>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	021b      	lsls	r3, r3, #8
 80076ce:	4a1d      	ldr	r2, [pc, #116]	; (8007744 <xPortStartScheduler+0x134>)
 80076d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80076d2:	4b1c      	ldr	r3, [pc, #112]	; (8007744 <xPortStartScheduler+0x134>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076da:	4a1a      	ldr	r2, [pc, #104]	; (8007744 <xPortStartScheduler+0x134>)
 80076dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80076e6:	4b18      	ldr	r3, [pc, #96]	; (8007748 <xPortStartScheduler+0x138>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a17      	ldr	r2, [pc, #92]	; (8007748 <xPortStartScheduler+0x138>)
 80076ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80076f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80076f2:	4b15      	ldr	r3, [pc, #84]	; (8007748 <xPortStartScheduler+0x138>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a14      	ldr	r2, [pc, #80]	; (8007748 <xPortStartScheduler+0x138>)
 80076f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80076fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80076fe:	f000 f8dd 	bl	80078bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007702:	4b12      	ldr	r3, [pc, #72]	; (800774c <xPortStartScheduler+0x13c>)
 8007704:	2200      	movs	r2, #0
 8007706:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007708:	f000 f8fc 	bl	8007904 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800770c:	4b10      	ldr	r3, [pc, #64]	; (8007750 <xPortStartScheduler+0x140>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a0f      	ldr	r2, [pc, #60]	; (8007750 <xPortStartScheduler+0x140>)
 8007712:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007716:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007718:	f7ff ff66 	bl	80075e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800771c:	f7ff fa88 	bl	8006c30 <vTaskSwitchContext>
	prvTaskExitError();
 8007720:	f7ff ff22 	bl	8007568 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3718      	adds	r7, #24
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	e000ed00 	.word	0xe000ed00
 8007734:	410fc271 	.word	0x410fc271
 8007738:	410fc270 	.word	0x410fc270
 800773c:	e000e400 	.word	0xe000e400
 8007740:	20000fe0 	.word	0x20000fe0
 8007744:	20000fe4 	.word	0x20000fe4
 8007748:	e000ed20 	.word	0xe000ed20
 800774c:	2000000c 	.word	0x2000000c
 8007750:	e000ef34 	.word	0xe000ef34

08007754 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
	__asm volatile
 800775a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775e:	f383 8811 	msr	BASEPRI, r3
 8007762:	f3bf 8f6f 	isb	sy
 8007766:	f3bf 8f4f 	dsb	sy
 800776a:	607b      	str	r3, [r7, #4]
}
 800776c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800776e:	4b0f      	ldr	r3, [pc, #60]	; (80077ac <vPortEnterCritical+0x58>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	3301      	adds	r3, #1
 8007774:	4a0d      	ldr	r2, [pc, #52]	; (80077ac <vPortEnterCritical+0x58>)
 8007776:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007778:	4b0c      	ldr	r3, [pc, #48]	; (80077ac <vPortEnterCritical+0x58>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d10f      	bne.n	80077a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007780:	4b0b      	ldr	r3, [pc, #44]	; (80077b0 <vPortEnterCritical+0x5c>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00a      	beq.n	80077a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800778a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778e:	f383 8811 	msr	BASEPRI, r3
 8007792:	f3bf 8f6f 	isb	sy
 8007796:	f3bf 8f4f 	dsb	sy
 800779a:	603b      	str	r3, [r7, #0]
}
 800779c:	bf00      	nop
 800779e:	e7fe      	b.n	800779e <vPortEnterCritical+0x4a>
	}
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr
 80077ac:	2000000c 	.word	0x2000000c
 80077b0:	e000ed04 	.word	0xe000ed04

080077b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80077ba:	4b12      	ldr	r3, [pc, #72]	; (8007804 <vPortExitCritical+0x50>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10a      	bne.n	80077d8 <vPortExitCritical+0x24>
	__asm volatile
 80077c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c6:	f383 8811 	msr	BASEPRI, r3
 80077ca:	f3bf 8f6f 	isb	sy
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	607b      	str	r3, [r7, #4]
}
 80077d4:	bf00      	nop
 80077d6:	e7fe      	b.n	80077d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80077d8:	4b0a      	ldr	r3, [pc, #40]	; (8007804 <vPortExitCritical+0x50>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	3b01      	subs	r3, #1
 80077de:	4a09      	ldr	r2, [pc, #36]	; (8007804 <vPortExitCritical+0x50>)
 80077e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80077e2:	4b08      	ldr	r3, [pc, #32]	; (8007804 <vPortExitCritical+0x50>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d105      	bne.n	80077f6 <vPortExitCritical+0x42>
 80077ea:	2300      	movs	r3, #0
 80077ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	f383 8811 	msr	BASEPRI, r3
}
 80077f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80077f6:	bf00      	nop
 80077f8:	370c      	adds	r7, #12
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	2000000c 	.word	0x2000000c
	...

08007810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007810:	f3ef 8009 	mrs	r0, PSP
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	4b15      	ldr	r3, [pc, #84]	; (8007870 <pxCurrentTCBConst>)
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	f01e 0f10 	tst.w	lr, #16
 8007820:	bf08      	it	eq
 8007822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800782a:	6010      	str	r0, [r2, #0]
 800782c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007830:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007834:	f380 8811 	msr	BASEPRI, r0
 8007838:	f3bf 8f4f 	dsb	sy
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	f7ff f9f6 	bl	8006c30 <vTaskSwitchContext>
 8007844:	f04f 0000 	mov.w	r0, #0
 8007848:	f380 8811 	msr	BASEPRI, r0
 800784c:	bc09      	pop	{r0, r3}
 800784e:	6819      	ldr	r1, [r3, #0]
 8007850:	6808      	ldr	r0, [r1, #0]
 8007852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007856:	f01e 0f10 	tst.w	lr, #16
 800785a:	bf08      	it	eq
 800785c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007860:	f380 8809 	msr	PSP, r0
 8007864:	f3bf 8f6f 	isb	sy
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	f3af 8000 	nop.w

08007870 <pxCurrentTCBConst>:
 8007870:	20000eb4 	.word	0x20000eb4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007874:	bf00      	nop
 8007876:	bf00      	nop

08007878 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
	__asm volatile
 800787e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007882:	f383 8811 	msr	BASEPRI, r3
 8007886:	f3bf 8f6f 	isb	sy
 800788a:	f3bf 8f4f 	dsb	sy
 800788e:	607b      	str	r3, [r7, #4]
}
 8007890:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007892:	f7ff f915 	bl	8006ac0 <xTaskIncrementTick>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d003      	beq.n	80078a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800789c:	4b06      	ldr	r3, [pc, #24]	; (80078b8 <SysTick_Handler+0x40>)
 800789e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078a2:	601a      	str	r2, [r3, #0]
 80078a4:	2300      	movs	r3, #0
 80078a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	f383 8811 	msr	BASEPRI, r3
}
 80078ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80078b0:	bf00      	nop
 80078b2:	3708      	adds	r7, #8
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	e000ed04 	.word	0xe000ed04

080078bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80078bc:	b480      	push	{r7}
 80078be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80078c0:	4b0b      	ldr	r3, [pc, #44]	; (80078f0 <vPortSetupTimerInterrupt+0x34>)
 80078c2:	2200      	movs	r2, #0
 80078c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80078c6:	4b0b      	ldr	r3, [pc, #44]	; (80078f4 <vPortSetupTimerInterrupt+0x38>)
 80078c8:	2200      	movs	r2, #0
 80078ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80078cc:	4b0a      	ldr	r3, [pc, #40]	; (80078f8 <vPortSetupTimerInterrupt+0x3c>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a0a      	ldr	r2, [pc, #40]	; (80078fc <vPortSetupTimerInterrupt+0x40>)
 80078d2:	fba2 2303 	umull	r2, r3, r2, r3
 80078d6:	099b      	lsrs	r3, r3, #6
 80078d8:	4a09      	ldr	r2, [pc, #36]	; (8007900 <vPortSetupTimerInterrupt+0x44>)
 80078da:	3b01      	subs	r3, #1
 80078dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80078de:	4b04      	ldr	r3, [pc, #16]	; (80078f0 <vPortSetupTimerInterrupt+0x34>)
 80078e0:	2207      	movs	r2, #7
 80078e2:	601a      	str	r2, [r3, #0]
}
 80078e4:	bf00      	nop
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	e000e010 	.word	0xe000e010
 80078f4:	e000e018 	.word	0xe000e018
 80078f8:	20000000 	.word	0x20000000
 80078fc:	10624dd3 	.word	0x10624dd3
 8007900:	e000e014 	.word	0xe000e014

08007904 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007904:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007914 <vPortEnableVFP+0x10>
 8007908:	6801      	ldr	r1, [r0, #0]
 800790a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800790e:	6001      	str	r1, [r0, #0]
 8007910:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007912:	bf00      	nop
 8007914:	e000ed88 	.word	0xe000ed88

08007918 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800791e:	f3ef 8305 	mrs	r3, IPSR
 8007922:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2b0f      	cmp	r3, #15
 8007928:	d914      	bls.n	8007954 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800792a:	4a17      	ldr	r2, [pc, #92]	; (8007988 <vPortValidateInterruptPriority+0x70>)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	4413      	add	r3, r2
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007934:	4b15      	ldr	r3, [pc, #84]	; (800798c <vPortValidateInterruptPriority+0x74>)
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	7afa      	ldrb	r2, [r7, #11]
 800793a:	429a      	cmp	r2, r3
 800793c:	d20a      	bcs.n	8007954 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800793e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007942:	f383 8811 	msr	BASEPRI, r3
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	607b      	str	r3, [r7, #4]
}
 8007950:	bf00      	nop
 8007952:	e7fe      	b.n	8007952 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007954:	4b0e      	ldr	r3, [pc, #56]	; (8007990 <vPortValidateInterruptPriority+0x78>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800795c:	4b0d      	ldr	r3, [pc, #52]	; (8007994 <vPortValidateInterruptPriority+0x7c>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	429a      	cmp	r2, r3
 8007962:	d90a      	bls.n	800797a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007968:	f383 8811 	msr	BASEPRI, r3
 800796c:	f3bf 8f6f 	isb	sy
 8007970:	f3bf 8f4f 	dsb	sy
 8007974:	603b      	str	r3, [r7, #0]
}
 8007976:	bf00      	nop
 8007978:	e7fe      	b.n	8007978 <vPortValidateInterruptPriority+0x60>
	}
 800797a:	bf00      	nop
 800797c:	3714      	adds	r7, #20
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	e000e3f0 	.word	0xe000e3f0
 800798c:	20000fe0 	.word	0x20000fe0
 8007990:	e000ed0c 	.word	0xe000ed0c
 8007994:	20000fe4 	.word	0x20000fe4

08007998 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b08a      	sub	sp, #40	; 0x28
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80079a0:	2300      	movs	r3, #0
 80079a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80079a4:	f7fe ffe2 	bl	800696c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80079a8:	4b5b      	ldr	r3, [pc, #364]	; (8007b18 <pvPortMalloc+0x180>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d101      	bne.n	80079b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80079b0:	f000 f920 	bl	8007bf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80079b4:	4b59      	ldr	r3, [pc, #356]	; (8007b1c <pvPortMalloc+0x184>)
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4013      	ands	r3, r2
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f040 8093 	bne.w	8007ae8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d01d      	beq.n	8007a04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80079c8:	2208      	movs	r2, #8
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4413      	add	r3, r2
 80079ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f003 0307 	and.w	r3, r3, #7
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d014      	beq.n	8007a04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f023 0307 	bic.w	r3, r3, #7
 80079e0:	3308      	adds	r3, #8
 80079e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f003 0307 	and.w	r3, r3, #7
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00a      	beq.n	8007a04 <pvPortMalloc+0x6c>
	__asm volatile
 80079ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f2:	f383 8811 	msr	BASEPRI, r3
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	617b      	str	r3, [r7, #20]
}
 8007a00:	bf00      	nop
 8007a02:	e7fe      	b.n	8007a02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d06e      	beq.n	8007ae8 <pvPortMalloc+0x150>
 8007a0a:	4b45      	ldr	r3, [pc, #276]	; (8007b20 <pvPortMalloc+0x188>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d869      	bhi.n	8007ae8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007a14:	4b43      	ldr	r3, [pc, #268]	; (8007b24 <pvPortMalloc+0x18c>)
 8007a16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007a18:	4b42      	ldr	r3, [pc, #264]	; (8007b24 <pvPortMalloc+0x18c>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a1e:	e004      	b.n	8007a2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d903      	bls.n	8007a3c <pvPortMalloc+0xa4>
 8007a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1f1      	bne.n	8007a20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007a3c:	4b36      	ldr	r3, [pc, #216]	; (8007b18 <pvPortMalloc+0x180>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d050      	beq.n	8007ae8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007a46:	6a3b      	ldr	r3, [r7, #32]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2208      	movs	r2, #8
 8007a4c:	4413      	add	r3, r2
 8007a4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	6a3b      	ldr	r3, [r7, #32]
 8007a56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5a:	685a      	ldr	r2, [r3, #4]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	1ad2      	subs	r2, r2, r3
 8007a60:	2308      	movs	r3, #8
 8007a62:	005b      	lsls	r3, r3, #1
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d91f      	bls.n	8007aa8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	f003 0307 	and.w	r3, r3, #7
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00a      	beq.n	8007a90 <pvPortMalloc+0xf8>
	__asm volatile
 8007a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7e:	f383 8811 	msr	BASEPRI, r3
 8007a82:	f3bf 8f6f 	isb	sy
 8007a86:	f3bf 8f4f 	dsb	sy
 8007a8a:	613b      	str	r3, [r7, #16]
}
 8007a8c:	bf00      	nop
 8007a8e:	e7fe      	b.n	8007a8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a92:	685a      	ldr	r2, [r3, #4]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	1ad2      	subs	r2, r2, r3
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007aa2:	69b8      	ldr	r0, [r7, #24]
 8007aa4:	f000 f908 	bl	8007cb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007aa8:	4b1d      	ldr	r3, [pc, #116]	; (8007b20 <pvPortMalloc+0x188>)
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	4a1b      	ldr	r2, [pc, #108]	; (8007b20 <pvPortMalloc+0x188>)
 8007ab4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ab6:	4b1a      	ldr	r3, [pc, #104]	; (8007b20 <pvPortMalloc+0x188>)
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	4b1b      	ldr	r3, [pc, #108]	; (8007b28 <pvPortMalloc+0x190>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d203      	bcs.n	8007aca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ac2:	4b17      	ldr	r3, [pc, #92]	; (8007b20 <pvPortMalloc+0x188>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a18      	ldr	r2, [pc, #96]	; (8007b28 <pvPortMalloc+0x190>)
 8007ac8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007acc:	685a      	ldr	r2, [r3, #4]
 8007ace:	4b13      	ldr	r3, [pc, #76]	; (8007b1c <pvPortMalloc+0x184>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	431a      	orrs	r2, r3
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ada:	2200      	movs	r2, #0
 8007adc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007ade:	4b13      	ldr	r3, [pc, #76]	; (8007b2c <pvPortMalloc+0x194>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	4a11      	ldr	r2, [pc, #68]	; (8007b2c <pvPortMalloc+0x194>)
 8007ae6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ae8:	f7fe ff4e 	bl	8006988 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	f003 0307 	and.w	r3, r3, #7
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00a      	beq.n	8007b0c <pvPortMalloc+0x174>
	__asm volatile
 8007af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007afa:	f383 8811 	msr	BASEPRI, r3
 8007afe:	f3bf 8f6f 	isb	sy
 8007b02:	f3bf 8f4f 	dsb	sy
 8007b06:	60fb      	str	r3, [r7, #12]
}
 8007b08:	bf00      	nop
 8007b0a:	e7fe      	b.n	8007b0a <pvPortMalloc+0x172>
	return pvReturn;
 8007b0c:	69fb      	ldr	r3, [r7, #28]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3728      	adds	r7, #40	; 0x28
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	20001ba8 	.word	0x20001ba8
 8007b1c:	20001bbc 	.word	0x20001bbc
 8007b20:	20001bac 	.word	0x20001bac
 8007b24:	20001ba0 	.word	0x20001ba0
 8007b28:	20001bb0 	.word	0x20001bb0
 8007b2c:	20001bb4 	.word	0x20001bb4

08007b30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b086      	sub	sp, #24
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d04d      	beq.n	8007bde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007b42:	2308      	movs	r3, #8
 8007b44:	425b      	negs	r3, r3
 8007b46:	697a      	ldr	r2, [r7, #20]
 8007b48:	4413      	add	r3, r2
 8007b4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	685a      	ldr	r2, [r3, #4]
 8007b54:	4b24      	ldr	r3, [pc, #144]	; (8007be8 <vPortFree+0xb8>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4013      	ands	r3, r2
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10a      	bne.n	8007b74 <vPortFree+0x44>
	__asm volatile
 8007b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	60fb      	str	r3, [r7, #12]
}
 8007b70:	bf00      	nop
 8007b72:	e7fe      	b.n	8007b72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00a      	beq.n	8007b92 <vPortFree+0x62>
	__asm volatile
 8007b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b80:	f383 8811 	msr	BASEPRI, r3
 8007b84:	f3bf 8f6f 	isb	sy
 8007b88:	f3bf 8f4f 	dsb	sy
 8007b8c:	60bb      	str	r3, [r7, #8]
}
 8007b8e:	bf00      	nop
 8007b90:	e7fe      	b.n	8007b90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	685a      	ldr	r2, [r3, #4]
 8007b96:	4b14      	ldr	r3, [pc, #80]	; (8007be8 <vPortFree+0xb8>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d01e      	beq.n	8007bde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d11a      	bne.n	8007bde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	685a      	ldr	r2, [r3, #4]
 8007bac:	4b0e      	ldr	r3, [pc, #56]	; (8007be8 <vPortFree+0xb8>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	43db      	mvns	r3, r3
 8007bb2:	401a      	ands	r2, r3
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007bb8:	f7fe fed8 	bl	800696c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	685a      	ldr	r2, [r3, #4]
 8007bc0:	4b0a      	ldr	r3, [pc, #40]	; (8007bec <vPortFree+0xbc>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	4a09      	ldr	r2, [pc, #36]	; (8007bec <vPortFree+0xbc>)
 8007bc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007bca:	6938      	ldr	r0, [r7, #16]
 8007bcc:	f000 f874 	bl	8007cb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007bd0:	4b07      	ldr	r3, [pc, #28]	; (8007bf0 <vPortFree+0xc0>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	4a06      	ldr	r2, [pc, #24]	; (8007bf0 <vPortFree+0xc0>)
 8007bd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007bda:	f7fe fed5 	bl	8006988 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007bde:	bf00      	nop
 8007be0:	3718      	adds	r7, #24
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	20001bbc 	.word	0x20001bbc
 8007bec:	20001bac 	.word	0x20001bac
 8007bf0:	20001bb8 	.word	0x20001bb8

08007bf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007bfa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007bfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007c00:	4b27      	ldr	r3, [pc, #156]	; (8007ca0 <prvHeapInit+0xac>)
 8007c02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f003 0307 	and.w	r3, r3, #7
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00c      	beq.n	8007c28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	3307      	adds	r3, #7
 8007c12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f023 0307 	bic.w	r3, r3, #7
 8007c1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007c1c:	68ba      	ldr	r2, [r7, #8]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	4a1f      	ldr	r2, [pc, #124]	; (8007ca0 <prvHeapInit+0xac>)
 8007c24:	4413      	add	r3, r2
 8007c26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007c2c:	4a1d      	ldr	r2, [pc, #116]	; (8007ca4 <prvHeapInit+0xb0>)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007c32:	4b1c      	ldr	r3, [pc, #112]	; (8007ca4 <prvHeapInit+0xb0>)
 8007c34:	2200      	movs	r2, #0
 8007c36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007c40:	2208      	movs	r2, #8
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	1a9b      	subs	r3, r3, r2
 8007c46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f023 0307 	bic.w	r3, r3, #7
 8007c4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	4a15      	ldr	r2, [pc, #84]	; (8007ca8 <prvHeapInit+0xb4>)
 8007c54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007c56:	4b14      	ldr	r3, [pc, #80]	; (8007ca8 <prvHeapInit+0xb4>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007c5e:	4b12      	ldr	r3, [pc, #72]	; (8007ca8 <prvHeapInit+0xb4>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2200      	movs	r2, #0
 8007c64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	1ad2      	subs	r2, r2, r3
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007c74:	4b0c      	ldr	r3, [pc, #48]	; (8007ca8 <prvHeapInit+0xb4>)
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	4a0a      	ldr	r2, [pc, #40]	; (8007cac <prvHeapInit+0xb8>)
 8007c82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	4a09      	ldr	r2, [pc, #36]	; (8007cb0 <prvHeapInit+0xbc>)
 8007c8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007c8c:	4b09      	ldr	r3, [pc, #36]	; (8007cb4 <prvHeapInit+0xc0>)
 8007c8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007c92:	601a      	str	r2, [r3, #0]
}
 8007c94:	bf00      	nop
 8007c96:	3714      	adds	r7, #20
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr
 8007ca0:	20000fe8 	.word	0x20000fe8
 8007ca4:	20001ba0 	.word	0x20001ba0
 8007ca8:	20001ba8 	.word	0x20001ba8
 8007cac:	20001bb0 	.word	0x20001bb0
 8007cb0:	20001bac 	.word	0x20001bac
 8007cb4:	20001bbc 	.word	0x20001bbc

08007cb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007cc0:	4b28      	ldr	r3, [pc, #160]	; (8007d64 <prvInsertBlockIntoFreeList+0xac>)
 8007cc2:	60fb      	str	r3, [r7, #12]
 8007cc4:	e002      	b.n	8007ccc <prvInsertBlockIntoFreeList+0x14>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	60fb      	str	r3, [r7, #12]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d8f7      	bhi.n	8007cc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	68ba      	ldr	r2, [r7, #8]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d108      	bne.n	8007cfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	685a      	ldr	r2, [r3, #4]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	441a      	add	r2, r3
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	68ba      	ldr	r2, [r7, #8]
 8007d04:	441a      	add	r2, r3
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d118      	bne.n	8007d40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	4b15      	ldr	r3, [pc, #84]	; (8007d68 <prvInsertBlockIntoFreeList+0xb0>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d00d      	beq.n	8007d36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	685a      	ldr	r2, [r3, #4]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	441a      	add	r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	601a      	str	r2, [r3, #0]
 8007d34:	e008      	b.n	8007d48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007d36:	4b0c      	ldr	r3, [pc, #48]	; (8007d68 <prvInsertBlockIntoFreeList+0xb0>)
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	601a      	str	r2, [r3, #0]
 8007d3e:	e003      	b.n	8007d48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d002      	beq.n	8007d56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d56:	bf00      	nop
 8007d58:	3714      	adds	r7, #20
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	20001ba0 	.word	0x20001ba0
 8007d68:	20001ba8 	.word	0x20001ba8

08007d6c <__errno>:
 8007d6c:	4b01      	ldr	r3, [pc, #4]	; (8007d74 <__errno+0x8>)
 8007d6e:	6818      	ldr	r0, [r3, #0]
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	20000010 	.word	0x20000010

08007d78 <std>:
 8007d78:	2300      	movs	r3, #0
 8007d7a:	b510      	push	{r4, lr}
 8007d7c:	4604      	mov	r4, r0
 8007d7e:	e9c0 3300 	strd	r3, r3, [r0]
 8007d82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d86:	6083      	str	r3, [r0, #8]
 8007d88:	8181      	strh	r1, [r0, #12]
 8007d8a:	6643      	str	r3, [r0, #100]	; 0x64
 8007d8c:	81c2      	strh	r2, [r0, #14]
 8007d8e:	6183      	str	r3, [r0, #24]
 8007d90:	4619      	mov	r1, r3
 8007d92:	2208      	movs	r2, #8
 8007d94:	305c      	adds	r0, #92	; 0x5c
 8007d96:	f000 f92a 	bl	8007fee <memset>
 8007d9a:	4b05      	ldr	r3, [pc, #20]	; (8007db0 <std+0x38>)
 8007d9c:	6263      	str	r3, [r4, #36]	; 0x24
 8007d9e:	4b05      	ldr	r3, [pc, #20]	; (8007db4 <std+0x3c>)
 8007da0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007da2:	4b05      	ldr	r3, [pc, #20]	; (8007db8 <std+0x40>)
 8007da4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007da6:	4b05      	ldr	r3, [pc, #20]	; (8007dbc <std+0x44>)
 8007da8:	6224      	str	r4, [r4, #32]
 8007daa:	6323      	str	r3, [r4, #48]	; 0x30
 8007dac:	bd10      	pop	{r4, pc}
 8007dae:	bf00      	nop
 8007db0:	08008af1 	.word	0x08008af1
 8007db4:	08008b13 	.word	0x08008b13
 8007db8:	08008b4b 	.word	0x08008b4b
 8007dbc:	08008b6f 	.word	0x08008b6f

08007dc0 <_cleanup_r>:
 8007dc0:	4901      	ldr	r1, [pc, #4]	; (8007dc8 <_cleanup_r+0x8>)
 8007dc2:	f000 b8af 	b.w	8007f24 <_fwalk_reent>
 8007dc6:	bf00      	nop
 8007dc8:	08009a01 	.word	0x08009a01

08007dcc <__sfmoreglue>:
 8007dcc:	b570      	push	{r4, r5, r6, lr}
 8007dce:	2268      	movs	r2, #104	; 0x68
 8007dd0:	1e4d      	subs	r5, r1, #1
 8007dd2:	4355      	muls	r5, r2
 8007dd4:	460e      	mov	r6, r1
 8007dd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007dda:	f000 f931 	bl	8008040 <_malloc_r>
 8007dde:	4604      	mov	r4, r0
 8007de0:	b140      	cbz	r0, 8007df4 <__sfmoreglue+0x28>
 8007de2:	2100      	movs	r1, #0
 8007de4:	e9c0 1600 	strd	r1, r6, [r0]
 8007de8:	300c      	adds	r0, #12
 8007dea:	60a0      	str	r0, [r4, #8]
 8007dec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007df0:	f000 f8fd 	bl	8007fee <memset>
 8007df4:	4620      	mov	r0, r4
 8007df6:	bd70      	pop	{r4, r5, r6, pc}

08007df8 <__sfp_lock_acquire>:
 8007df8:	4801      	ldr	r0, [pc, #4]	; (8007e00 <__sfp_lock_acquire+0x8>)
 8007dfa:	f000 b8d8 	b.w	8007fae <__retarget_lock_acquire_recursive>
 8007dfe:	bf00      	nop
 8007e00:	20001bc1 	.word	0x20001bc1

08007e04 <__sfp_lock_release>:
 8007e04:	4801      	ldr	r0, [pc, #4]	; (8007e0c <__sfp_lock_release+0x8>)
 8007e06:	f000 b8d3 	b.w	8007fb0 <__retarget_lock_release_recursive>
 8007e0a:	bf00      	nop
 8007e0c:	20001bc1 	.word	0x20001bc1

08007e10 <__sinit_lock_acquire>:
 8007e10:	4801      	ldr	r0, [pc, #4]	; (8007e18 <__sinit_lock_acquire+0x8>)
 8007e12:	f000 b8cc 	b.w	8007fae <__retarget_lock_acquire_recursive>
 8007e16:	bf00      	nop
 8007e18:	20001bc2 	.word	0x20001bc2

08007e1c <__sinit_lock_release>:
 8007e1c:	4801      	ldr	r0, [pc, #4]	; (8007e24 <__sinit_lock_release+0x8>)
 8007e1e:	f000 b8c7 	b.w	8007fb0 <__retarget_lock_release_recursive>
 8007e22:	bf00      	nop
 8007e24:	20001bc2 	.word	0x20001bc2

08007e28 <__sinit>:
 8007e28:	b510      	push	{r4, lr}
 8007e2a:	4604      	mov	r4, r0
 8007e2c:	f7ff fff0 	bl	8007e10 <__sinit_lock_acquire>
 8007e30:	69a3      	ldr	r3, [r4, #24]
 8007e32:	b11b      	cbz	r3, 8007e3c <__sinit+0x14>
 8007e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e38:	f7ff bff0 	b.w	8007e1c <__sinit_lock_release>
 8007e3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e40:	6523      	str	r3, [r4, #80]	; 0x50
 8007e42:	4b13      	ldr	r3, [pc, #76]	; (8007e90 <__sinit+0x68>)
 8007e44:	4a13      	ldr	r2, [pc, #76]	; (8007e94 <__sinit+0x6c>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e4a:	42a3      	cmp	r3, r4
 8007e4c:	bf04      	itt	eq
 8007e4e:	2301      	moveq	r3, #1
 8007e50:	61a3      	streq	r3, [r4, #24]
 8007e52:	4620      	mov	r0, r4
 8007e54:	f000 f820 	bl	8007e98 <__sfp>
 8007e58:	6060      	str	r0, [r4, #4]
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	f000 f81c 	bl	8007e98 <__sfp>
 8007e60:	60a0      	str	r0, [r4, #8]
 8007e62:	4620      	mov	r0, r4
 8007e64:	f000 f818 	bl	8007e98 <__sfp>
 8007e68:	2200      	movs	r2, #0
 8007e6a:	60e0      	str	r0, [r4, #12]
 8007e6c:	2104      	movs	r1, #4
 8007e6e:	6860      	ldr	r0, [r4, #4]
 8007e70:	f7ff ff82 	bl	8007d78 <std>
 8007e74:	68a0      	ldr	r0, [r4, #8]
 8007e76:	2201      	movs	r2, #1
 8007e78:	2109      	movs	r1, #9
 8007e7a:	f7ff ff7d 	bl	8007d78 <std>
 8007e7e:	68e0      	ldr	r0, [r4, #12]
 8007e80:	2202      	movs	r2, #2
 8007e82:	2112      	movs	r1, #18
 8007e84:	f7ff ff78 	bl	8007d78 <std>
 8007e88:	2301      	movs	r3, #1
 8007e8a:	61a3      	str	r3, [r4, #24]
 8007e8c:	e7d2      	b.n	8007e34 <__sinit+0xc>
 8007e8e:	bf00      	nop
 8007e90:	0800aeec 	.word	0x0800aeec
 8007e94:	08007dc1 	.word	0x08007dc1

08007e98 <__sfp>:
 8007e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e9a:	4607      	mov	r7, r0
 8007e9c:	f7ff ffac 	bl	8007df8 <__sfp_lock_acquire>
 8007ea0:	4b1e      	ldr	r3, [pc, #120]	; (8007f1c <__sfp+0x84>)
 8007ea2:	681e      	ldr	r6, [r3, #0]
 8007ea4:	69b3      	ldr	r3, [r6, #24]
 8007ea6:	b913      	cbnz	r3, 8007eae <__sfp+0x16>
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	f7ff ffbd 	bl	8007e28 <__sinit>
 8007eae:	3648      	adds	r6, #72	; 0x48
 8007eb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	d503      	bpl.n	8007ec0 <__sfp+0x28>
 8007eb8:	6833      	ldr	r3, [r6, #0]
 8007eba:	b30b      	cbz	r3, 8007f00 <__sfp+0x68>
 8007ebc:	6836      	ldr	r6, [r6, #0]
 8007ebe:	e7f7      	b.n	8007eb0 <__sfp+0x18>
 8007ec0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ec4:	b9d5      	cbnz	r5, 8007efc <__sfp+0x64>
 8007ec6:	4b16      	ldr	r3, [pc, #88]	; (8007f20 <__sfp+0x88>)
 8007ec8:	60e3      	str	r3, [r4, #12]
 8007eca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ece:	6665      	str	r5, [r4, #100]	; 0x64
 8007ed0:	f000 f86c 	bl	8007fac <__retarget_lock_init_recursive>
 8007ed4:	f7ff ff96 	bl	8007e04 <__sfp_lock_release>
 8007ed8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007edc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ee0:	6025      	str	r5, [r4, #0]
 8007ee2:	61a5      	str	r5, [r4, #24]
 8007ee4:	2208      	movs	r2, #8
 8007ee6:	4629      	mov	r1, r5
 8007ee8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007eec:	f000 f87f 	bl	8007fee <memset>
 8007ef0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007ef4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ef8:	4620      	mov	r0, r4
 8007efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007efc:	3468      	adds	r4, #104	; 0x68
 8007efe:	e7d9      	b.n	8007eb4 <__sfp+0x1c>
 8007f00:	2104      	movs	r1, #4
 8007f02:	4638      	mov	r0, r7
 8007f04:	f7ff ff62 	bl	8007dcc <__sfmoreglue>
 8007f08:	4604      	mov	r4, r0
 8007f0a:	6030      	str	r0, [r6, #0]
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d1d5      	bne.n	8007ebc <__sfp+0x24>
 8007f10:	f7ff ff78 	bl	8007e04 <__sfp_lock_release>
 8007f14:	230c      	movs	r3, #12
 8007f16:	603b      	str	r3, [r7, #0]
 8007f18:	e7ee      	b.n	8007ef8 <__sfp+0x60>
 8007f1a:	bf00      	nop
 8007f1c:	0800aeec 	.word	0x0800aeec
 8007f20:	ffff0001 	.word	0xffff0001

08007f24 <_fwalk_reent>:
 8007f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f28:	4606      	mov	r6, r0
 8007f2a:	4688      	mov	r8, r1
 8007f2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f30:	2700      	movs	r7, #0
 8007f32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f36:	f1b9 0901 	subs.w	r9, r9, #1
 8007f3a:	d505      	bpl.n	8007f48 <_fwalk_reent+0x24>
 8007f3c:	6824      	ldr	r4, [r4, #0]
 8007f3e:	2c00      	cmp	r4, #0
 8007f40:	d1f7      	bne.n	8007f32 <_fwalk_reent+0xe>
 8007f42:	4638      	mov	r0, r7
 8007f44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f48:	89ab      	ldrh	r3, [r5, #12]
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d907      	bls.n	8007f5e <_fwalk_reent+0x3a>
 8007f4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f52:	3301      	adds	r3, #1
 8007f54:	d003      	beq.n	8007f5e <_fwalk_reent+0x3a>
 8007f56:	4629      	mov	r1, r5
 8007f58:	4630      	mov	r0, r6
 8007f5a:	47c0      	blx	r8
 8007f5c:	4307      	orrs	r7, r0
 8007f5e:	3568      	adds	r5, #104	; 0x68
 8007f60:	e7e9      	b.n	8007f36 <_fwalk_reent+0x12>
	...

08007f64 <__libc_init_array>:
 8007f64:	b570      	push	{r4, r5, r6, lr}
 8007f66:	4d0d      	ldr	r5, [pc, #52]	; (8007f9c <__libc_init_array+0x38>)
 8007f68:	4c0d      	ldr	r4, [pc, #52]	; (8007fa0 <__libc_init_array+0x3c>)
 8007f6a:	1b64      	subs	r4, r4, r5
 8007f6c:	10a4      	asrs	r4, r4, #2
 8007f6e:	2600      	movs	r6, #0
 8007f70:	42a6      	cmp	r6, r4
 8007f72:	d109      	bne.n	8007f88 <__libc_init_array+0x24>
 8007f74:	4d0b      	ldr	r5, [pc, #44]	; (8007fa4 <__libc_init_array+0x40>)
 8007f76:	4c0c      	ldr	r4, [pc, #48]	; (8007fa8 <__libc_init_array+0x44>)
 8007f78:	f002 fe88 	bl	800ac8c <_init>
 8007f7c:	1b64      	subs	r4, r4, r5
 8007f7e:	10a4      	asrs	r4, r4, #2
 8007f80:	2600      	movs	r6, #0
 8007f82:	42a6      	cmp	r6, r4
 8007f84:	d105      	bne.n	8007f92 <__libc_init_array+0x2e>
 8007f86:	bd70      	pop	{r4, r5, r6, pc}
 8007f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f8c:	4798      	blx	r3
 8007f8e:	3601      	adds	r6, #1
 8007f90:	e7ee      	b.n	8007f70 <__libc_init_array+0xc>
 8007f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f96:	4798      	blx	r3
 8007f98:	3601      	adds	r6, #1
 8007f9a:	e7f2      	b.n	8007f82 <__libc_init_array+0x1e>
 8007f9c:	0800b26c 	.word	0x0800b26c
 8007fa0:	0800b26c 	.word	0x0800b26c
 8007fa4:	0800b26c 	.word	0x0800b26c
 8007fa8:	0800b270 	.word	0x0800b270

08007fac <__retarget_lock_init_recursive>:
 8007fac:	4770      	bx	lr

08007fae <__retarget_lock_acquire_recursive>:
 8007fae:	4770      	bx	lr

08007fb0 <__retarget_lock_release_recursive>:
 8007fb0:	4770      	bx	lr

08007fb2 <memcmp>:
 8007fb2:	b510      	push	{r4, lr}
 8007fb4:	3901      	subs	r1, #1
 8007fb6:	4402      	add	r2, r0
 8007fb8:	4290      	cmp	r0, r2
 8007fba:	d101      	bne.n	8007fc0 <memcmp+0xe>
 8007fbc:	2000      	movs	r0, #0
 8007fbe:	e005      	b.n	8007fcc <memcmp+0x1a>
 8007fc0:	7803      	ldrb	r3, [r0, #0]
 8007fc2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007fc6:	42a3      	cmp	r3, r4
 8007fc8:	d001      	beq.n	8007fce <memcmp+0x1c>
 8007fca:	1b18      	subs	r0, r3, r4
 8007fcc:	bd10      	pop	{r4, pc}
 8007fce:	3001      	adds	r0, #1
 8007fd0:	e7f2      	b.n	8007fb8 <memcmp+0x6>

08007fd2 <memcpy>:
 8007fd2:	440a      	add	r2, r1
 8007fd4:	4291      	cmp	r1, r2
 8007fd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fda:	d100      	bne.n	8007fde <memcpy+0xc>
 8007fdc:	4770      	bx	lr
 8007fde:	b510      	push	{r4, lr}
 8007fe0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fe4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fe8:	4291      	cmp	r1, r2
 8007fea:	d1f9      	bne.n	8007fe0 <memcpy+0xe>
 8007fec:	bd10      	pop	{r4, pc}

08007fee <memset>:
 8007fee:	4402      	add	r2, r0
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d100      	bne.n	8007ff8 <memset+0xa>
 8007ff6:	4770      	bx	lr
 8007ff8:	f803 1b01 	strb.w	r1, [r3], #1
 8007ffc:	e7f9      	b.n	8007ff2 <memset+0x4>
	...

08008000 <sbrk_aligned>:
 8008000:	b570      	push	{r4, r5, r6, lr}
 8008002:	4e0e      	ldr	r6, [pc, #56]	; (800803c <sbrk_aligned+0x3c>)
 8008004:	460c      	mov	r4, r1
 8008006:	6831      	ldr	r1, [r6, #0]
 8008008:	4605      	mov	r5, r0
 800800a:	b911      	cbnz	r1, 8008012 <sbrk_aligned+0x12>
 800800c:	f000 fd60 	bl	8008ad0 <_sbrk_r>
 8008010:	6030      	str	r0, [r6, #0]
 8008012:	4621      	mov	r1, r4
 8008014:	4628      	mov	r0, r5
 8008016:	f000 fd5b 	bl	8008ad0 <_sbrk_r>
 800801a:	1c43      	adds	r3, r0, #1
 800801c:	d00a      	beq.n	8008034 <sbrk_aligned+0x34>
 800801e:	1cc4      	adds	r4, r0, #3
 8008020:	f024 0403 	bic.w	r4, r4, #3
 8008024:	42a0      	cmp	r0, r4
 8008026:	d007      	beq.n	8008038 <sbrk_aligned+0x38>
 8008028:	1a21      	subs	r1, r4, r0
 800802a:	4628      	mov	r0, r5
 800802c:	f000 fd50 	bl	8008ad0 <_sbrk_r>
 8008030:	3001      	adds	r0, #1
 8008032:	d101      	bne.n	8008038 <sbrk_aligned+0x38>
 8008034:	f04f 34ff 	mov.w	r4, #4294967295
 8008038:	4620      	mov	r0, r4
 800803a:	bd70      	pop	{r4, r5, r6, pc}
 800803c:	20001bc8 	.word	0x20001bc8

08008040 <_malloc_r>:
 8008040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008044:	1ccd      	adds	r5, r1, #3
 8008046:	f025 0503 	bic.w	r5, r5, #3
 800804a:	3508      	adds	r5, #8
 800804c:	2d0c      	cmp	r5, #12
 800804e:	bf38      	it	cc
 8008050:	250c      	movcc	r5, #12
 8008052:	2d00      	cmp	r5, #0
 8008054:	4607      	mov	r7, r0
 8008056:	db01      	blt.n	800805c <_malloc_r+0x1c>
 8008058:	42a9      	cmp	r1, r5
 800805a:	d905      	bls.n	8008068 <_malloc_r+0x28>
 800805c:	230c      	movs	r3, #12
 800805e:	603b      	str	r3, [r7, #0]
 8008060:	2600      	movs	r6, #0
 8008062:	4630      	mov	r0, r6
 8008064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008068:	4e2e      	ldr	r6, [pc, #184]	; (8008124 <_malloc_r+0xe4>)
 800806a:	f001 fd23 	bl	8009ab4 <__malloc_lock>
 800806e:	6833      	ldr	r3, [r6, #0]
 8008070:	461c      	mov	r4, r3
 8008072:	bb34      	cbnz	r4, 80080c2 <_malloc_r+0x82>
 8008074:	4629      	mov	r1, r5
 8008076:	4638      	mov	r0, r7
 8008078:	f7ff ffc2 	bl	8008000 <sbrk_aligned>
 800807c:	1c43      	adds	r3, r0, #1
 800807e:	4604      	mov	r4, r0
 8008080:	d14d      	bne.n	800811e <_malloc_r+0xde>
 8008082:	6834      	ldr	r4, [r6, #0]
 8008084:	4626      	mov	r6, r4
 8008086:	2e00      	cmp	r6, #0
 8008088:	d140      	bne.n	800810c <_malloc_r+0xcc>
 800808a:	6823      	ldr	r3, [r4, #0]
 800808c:	4631      	mov	r1, r6
 800808e:	4638      	mov	r0, r7
 8008090:	eb04 0803 	add.w	r8, r4, r3
 8008094:	f000 fd1c 	bl	8008ad0 <_sbrk_r>
 8008098:	4580      	cmp	r8, r0
 800809a:	d13a      	bne.n	8008112 <_malloc_r+0xd2>
 800809c:	6821      	ldr	r1, [r4, #0]
 800809e:	3503      	adds	r5, #3
 80080a0:	1a6d      	subs	r5, r5, r1
 80080a2:	f025 0503 	bic.w	r5, r5, #3
 80080a6:	3508      	adds	r5, #8
 80080a8:	2d0c      	cmp	r5, #12
 80080aa:	bf38      	it	cc
 80080ac:	250c      	movcc	r5, #12
 80080ae:	4629      	mov	r1, r5
 80080b0:	4638      	mov	r0, r7
 80080b2:	f7ff ffa5 	bl	8008000 <sbrk_aligned>
 80080b6:	3001      	adds	r0, #1
 80080b8:	d02b      	beq.n	8008112 <_malloc_r+0xd2>
 80080ba:	6823      	ldr	r3, [r4, #0]
 80080bc:	442b      	add	r3, r5
 80080be:	6023      	str	r3, [r4, #0]
 80080c0:	e00e      	b.n	80080e0 <_malloc_r+0xa0>
 80080c2:	6822      	ldr	r2, [r4, #0]
 80080c4:	1b52      	subs	r2, r2, r5
 80080c6:	d41e      	bmi.n	8008106 <_malloc_r+0xc6>
 80080c8:	2a0b      	cmp	r2, #11
 80080ca:	d916      	bls.n	80080fa <_malloc_r+0xba>
 80080cc:	1961      	adds	r1, r4, r5
 80080ce:	42a3      	cmp	r3, r4
 80080d0:	6025      	str	r5, [r4, #0]
 80080d2:	bf18      	it	ne
 80080d4:	6059      	strne	r1, [r3, #4]
 80080d6:	6863      	ldr	r3, [r4, #4]
 80080d8:	bf08      	it	eq
 80080da:	6031      	streq	r1, [r6, #0]
 80080dc:	5162      	str	r2, [r4, r5]
 80080de:	604b      	str	r3, [r1, #4]
 80080e0:	4638      	mov	r0, r7
 80080e2:	f104 060b 	add.w	r6, r4, #11
 80080e6:	f001 fceb 	bl	8009ac0 <__malloc_unlock>
 80080ea:	f026 0607 	bic.w	r6, r6, #7
 80080ee:	1d23      	adds	r3, r4, #4
 80080f0:	1af2      	subs	r2, r6, r3
 80080f2:	d0b6      	beq.n	8008062 <_malloc_r+0x22>
 80080f4:	1b9b      	subs	r3, r3, r6
 80080f6:	50a3      	str	r3, [r4, r2]
 80080f8:	e7b3      	b.n	8008062 <_malloc_r+0x22>
 80080fa:	6862      	ldr	r2, [r4, #4]
 80080fc:	42a3      	cmp	r3, r4
 80080fe:	bf0c      	ite	eq
 8008100:	6032      	streq	r2, [r6, #0]
 8008102:	605a      	strne	r2, [r3, #4]
 8008104:	e7ec      	b.n	80080e0 <_malloc_r+0xa0>
 8008106:	4623      	mov	r3, r4
 8008108:	6864      	ldr	r4, [r4, #4]
 800810a:	e7b2      	b.n	8008072 <_malloc_r+0x32>
 800810c:	4634      	mov	r4, r6
 800810e:	6876      	ldr	r6, [r6, #4]
 8008110:	e7b9      	b.n	8008086 <_malloc_r+0x46>
 8008112:	230c      	movs	r3, #12
 8008114:	603b      	str	r3, [r7, #0]
 8008116:	4638      	mov	r0, r7
 8008118:	f001 fcd2 	bl	8009ac0 <__malloc_unlock>
 800811c:	e7a1      	b.n	8008062 <_malloc_r+0x22>
 800811e:	6025      	str	r5, [r4, #0]
 8008120:	e7de      	b.n	80080e0 <_malloc_r+0xa0>
 8008122:	bf00      	nop
 8008124:	20001bc4 	.word	0x20001bc4

08008128 <__cvt>:
 8008128:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800812c:	ec55 4b10 	vmov	r4, r5, d0
 8008130:	2d00      	cmp	r5, #0
 8008132:	460e      	mov	r6, r1
 8008134:	4619      	mov	r1, r3
 8008136:	462b      	mov	r3, r5
 8008138:	bfbb      	ittet	lt
 800813a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800813e:	461d      	movlt	r5, r3
 8008140:	2300      	movge	r3, #0
 8008142:	232d      	movlt	r3, #45	; 0x2d
 8008144:	700b      	strb	r3, [r1, #0]
 8008146:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008148:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800814c:	4691      	mov	r9, r2
 800814e:	f023 0820 	bic.w	r8, r3, #32
 8008152:	bfbc      	itt	lt
 8008154:	4622      	movlt	r2, r4
 8008156:	4614      	movlt	r4, r2
 8008158:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800815c:	d005      	beq.n	800816a <__cvt+0x42>
 800815e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008162:	d100      	bne.n	8008166 <__cvt+0x3e>
 8008164:	3601      	adds	r6, #1
 8008166:	2102      	movs	r1, #2
 8008168:	e000      	b.n	800816c <__cvt+0x44>
 800816a:	2103      	movs	r1, #3
 800816c:	ab03      	add	r3, sp, #12
 800816e:	9301      	str	r3, [sp, #4]
 8008170:	ab02      	add	r3, sp, #8
 8008172:	9300      	str	r3, [sp, #0]
 8008174:	ec45 4b10 	vmov	d0, r4, r5
 8008178:	4653      	mov	r3, sl
 800817a:	4632      	mov	r2, r6
 800817c:	f000 fdcc 	bl	8008d18 <_dtoa_r>
 8008180:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008184:	4607      	mov	r7, r0
 8008186:	d102      	bne.n	800818e <__cvt+0x66>
 8008188:	f019 0f01 	tst.w	r9, #1
 800818c:	d022      	beq.n	80081d4 <__cvt+0xac>
 800818e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008192:	eb07 0906 	add.w	r9, r7, r6
 8008196:	d110      	bne.n	80081ba <__cvt+0x92>
 8008198:	783b      	ldrb	r3, [r7, #0]
 800819a:	2b30      	cmp	r3, #48	; 0x30
 800819c:	d10a      	bne.n	80081b4 <__cvt+0x8c>
 800819e:	2200      	movs	r2, #0
 80081a0:	2300      	movs	r3, #0
 80081a2:	4620      	mov	r0, r4
 80081a4:	4629      	mov	r1, r5
 80081a6:	f7f8 fc8f 	bl	8000ac8 <__aeabi_dcmpeq>
 80081aa:	b918      	cbnz	r0, 80081b4 <__cvt+0x8c>
 80081ac:	f1c6 0601 	rsb	r6, r6, #1
 80081b0:	f8ca 6000 	str.w	r6, [sl]
 80081b4:	f8da 3000 	ldr.w	r3, [sl]
 80081b8:	4499      	add	r9, r3
 80081ba:	2200      	movs	r2, #0
 80081bc:	2300      	movs	r3, #0
 80081be:	4620      	mov	r0, r4
 80081c0:	4629      	mov	r1, r5
 80081c2:	f7f8 fc81 	bl	8000ac8 <__aeabi_dcmpeq>
 80081c6:	b108      	cbz	r0, 80081cc <__cvt+0xa4>
 80081c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80081cc:	2230      	movs	r2, #48	; 0x30
 80081ce:	9b03      	ldr	r3, [sp, #12]
 80081d0:	454b      	cmp	r3, r9
 80081d2:	d307      	bcc.n	80081e4 <__cvt+0xbc>
 80081d4:	9b03      	ldr	r3, [sp, #12]
 80081d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081d8:	1bdb      	subs	r3, r3, r7
 80081da:	4638      	mov	r0, r7
 80081dc:	6013      	str	r3, [r2, #0]
 80081de:	b004      	add	sp, #16
 80081e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081e4:	1c59      	adds	r1, r3, #1
 80081e6:	9103      	str	r1, [sp, #12]
 80081e8:	701a      	strb	r2, [r3, #0]
 80081ea:	e7f0      	b.n	80081ce <__cvt+0xa6>

080081ec <__exponent>:
 80081ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081ee:	4603      	mov	r3, r0
 80081f0:	2900      	cmp	r1, #0
 80081f2:	bfb8      	it	lt
 80081f4:	4249      	neglt	r1, r1
 80081f6:	f803 2b02 	strb.w	r2, [r3], #2
 80081fa:	bfb4      	ite	lt
 80081fc:	222d      	movlt	r2, #45	; 0x2d
 80081fe:	222b      	movge	r2, #43	; 0x2b
 8008200:	2909      	cmp	r1, #9
 8008202:	7042      	strb	r2, [r0, #1]
 8008204:	dd2a      	ble.n	800825c <__exponent+0x70>
 8008206:	f10d 0407 	add.w	r4, sp, #7
 800820a:	46a4      	mov	ip, r4
 800820c:	270a      	movs	r7, #10
 800820e:	46a6      	mov	lr, r4
 8008210:	460a      	mov	r2, r1
 8008212:	fb91 f6f7 	sdiv	r6, r1, r7
 8008216:	fb07 1516 	mls	r5, r7, r6, r1
 800821a:	3530      	adds	r5, #48	; 0x30
 800821c:	2a63      	cmp	r2, #99	; 0x63
 800821e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008222:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008226:	4631      	mov	r1, r6
 8008228:	dcf1      	bgt.n	800820e <__exponent+0x22>
 800822a:	3130      	adds	r1, #48	; 0x30
 800822c:	f1ae 0502 	sub.w	r5, lr, #2
 8008230:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008234:	1c44      	adds	r4, r0, #1
 8008236:	4629      	mov	r1, r5
 8008238:	4561      	cmp	r1, ip
 800823a:	d30a      	bcc.n	8008252 <__exponent+0x66>
 800823c:	f10d 0209 	add.w	r2, sp, #9
 8008240:	eba2 020e 	sub.w	r2, r2, lr
 8008244:	4565      	cmp	r5, ip
 8008246:	bf88      	it	hi
 8008248:	2200      	movhi	r2, #0
 800824a:	4413      	add	r3, r2
 800824c:	1a18      	subs	r0, r3, r0
 800824e:	b003      	add	sp, #12
 8008250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008252:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008256:	f804 2f01 	strb.w	r2, [r4, #1]!
 800825a:	e7ed      	b.n	8008238 <__exponent+0x4c>
 800825c:	2330      	movs	r3, #48	; 0x30
 800825e:	3130      	adds	r1, #48	; 0x30
 8008260:	7083      	strb	r3, [r0, #2]
 8008262:	70c1      	strb	r1, [r0, #3]
 8008264:	1d03      	adds	r3, r0, #4
 8008266:	e7f1      	b.n	800824c <__exponent+0x60>

08008268 <_printf_float>:
 8008268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800826c:	ed2d 8b02 	vpush	{d8}
 8008270:	b08d      	sub	sp, #52	; 0x34
 8008272:	460c      	mov	r4, r1
 8008274:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008278:	4616      	mov	r6, r2
 800827a:	461f      	mov	r7, r3
 800827c:	4605      	mov	r5, r0
 800827e:	f001 fbfb 	bl	8009a78 <_localeconv_r>
 8008282:	f8d0 a000 	ldr.w	sl, [r0]
 8008286:	4650      	mov	r0, sl
 8008288:	f7f7 ffa2 	bl	80001d0 <strlen>
 800828c:	2300      	movs	r3, #0
 800828e:	930a      	str	r3, [sp, #40]	; 0x28
 8008290:	6823      	ldr	r3, [r4, #0]
 8008292:	9305      	str	r3, [sp, #20]
 8008294:	f8d8 3000 	ldr.w	r3, [r8]
 8008298:	f894 b018 	ldrb.w	fp, [r4, #24]
 800829c:	3307      	adds	r3, #7
 800829e:	f023 0307 	bic.w	r3, r3, #7
 80082a2:	f103 0208 	add.w	r2, r3, #8
 80082a6:	f8c8 2000 	str.w	r2, [r8]
 80082aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80082b2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80082b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80082ba:	9307      	str	r3, [sp, #28]
 80082bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80082c0:	ee08 0a10 	vmov	s16, r0
 80082c4:	4b9f      	ldr	r3, [pc, #636]	; (8008544 <_printf_float+0x2dc>)
 80082c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082ca:	f04f 32ff 	mov.w	r2, #4294967295
 80082ce:	f7f8 fc2d 	bl	8000b2c <__aeabi_dcmpun>
 80082d2:	bb88      	cbnz	r0, 8008338 <_printf_float+0xd0>
 80082d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082d8:	4b9a      	ldr	r3, [pc, #616]	; (8008544 <_printf_float+0x2dc>)
 80082da:	f04f 32ff 	mov.w	r2, #4294967295
 80082de:	f7f8 fc07 	bl	8000af0 <__aeabi_dcmple>
 80082e2:	bb48      	cbnz	r0, 8008338 <_printf_float+0xd0>
 80082e4:	2200      	movs	r2, #0
 80082e6:	2300      	movs	r3, #0
 80082e8:	4640      	mov	r0, r8
 80082ea:	4649      	mov	r1, r9
 80082ec:	f7f8 fbf6 	bl	8000adc <__aeabi_dcmplt>
 80082f0:	b110      	cbz	r0, 80082f8 <_printf_float+0x90>
 80082f2:	232d      	movs	r3, #45	; 0x2d
 80082f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082f8:	4b93      	ldr	r3, [pc, #588]	; (8008548 <_printf_float+0x2e0>)
 80082fa:	4894      	ldr	r0, [pc, #592]	; (800854c <_printf_float+0x2e4>)
 80082fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008300:	bf94      	ite	ls
 8008302:	4698      	movls	r8, r3
 8008304:	4680      	movhi	r8, r0
 8008306:	2303      	movs	r3, #3
 8008308:	6123      	str	r3, [r4, #16]
 800830a:	9b05      	ldr	r3, [sp, #20]
 800830c:	f023 0204 	bic.w	r2, r3, #4
 8008310:	6022      	str	r2, [r4, #0]
 8008312:	f04f 0900 	mov.w	r9, #0
 8008316:	9700      	str	r7, [sp, #0]
 8008318:	4633      	mov	r3, r6
 800831a:	aa0b      	add	r2, sp, #44	; 0x2c
 800831c:	4621      	mov	r1, r4
 800831e:	4628      	mov	r0, r5
 8008320:	f000 f9d8 	bl	80086d4 <_printf_common>
 8008324:	3001      	adds	r0, #1
 8008326:	f040 8090 	bne.w	800844a <_printf_float+0x1e2>
 800832a:	f04f 30ff 	mov.w	r0, #4294967295
 800832e:	b00d      	add	sp, #52	; 0x34
 8008330:	ecbd 8b02 	vpop	{d8}
 8008334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008338:	4642      	mov	r2, r8
 800833a:	464b      	mov	r3, r9
 800833c:	4640      	mov	r0, r8
 800833e:	4649      	mov	r1, r9
 8008340:	f7f8 fbf4 	bl	8000b2c <__aeabi_dcmpun>
 8008344:	b140      	cbz	r0, 8008358 <_printf_float+0xf0>
 8008346:	464b      	mov	r3, r9
 8008348:	2b00      	cmp	r3, #0
 800834a:	bfbc      	itt	lt
 800834c:	232d      	movlt	r3, #45	; 0x2d
 800834e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008352:	487f      	ldr	r0, [pc, #508]	; (8008550 <_printf_float+0x2e8>)
 8008354:	4b7f      	ldr	r3, [pc, #508]	; (8008554 <_printf_float+0x2ec>)
 8008356:	e7d1      	b.n	80082fc <_printf_float+0x94>
 8008358:	6863      	ldr	r3, [r4, #4]
 800835a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800835e:	9206      	str	r2, [sp, #24]
 8008360:	1c5a      	adds	r2, r3, #1
 8008362:	d13f      	bne.n	80083e4 <_printf_float+0x17c>
 8008364:	2306      	movs	r3, #6
 8008366:	6063      	str	r3, [r4, #4]
 8008368:	9b05      	ldr	r3, [sp, #20]
 800836a:	6861      	ldr	r1, [r4, #4]
 800836c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008370:	2300      	movs	r3, #0
 8008372:	9303      	str	r3, [sp, #12]
 8008374:	ab0a      	add	r3, sp, #40	; 0x28
 8008376:	e9cd b301 	strd	fp, r3, [sp, #4]
 800837a:	ab09      	add	r3, sp, #36	; 0x24
 800837c:	ec49 8b10 	vmov	d0, r8, r9
 8008380:	9300      	str	r3, [sp, #0]
 8008382:	6022      	str	r2, [r4, #0]
 8008384:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008388:	4628      	mov	r0, r5
 800838a:	f7ff fecd 	bl	8008128 <__cvt>
 800838e:	9b06      	ldr	r3, [sp, #24]
 8008390:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008392:	2b47      	cmp	r3, #71	; 0x47
 8008394:	4680      	mov	r8, r0
 8008396:	d108      	bne.n	80083aa <_printf_float+0x142>
 8008398:	1cc8      	adds	r0, r1, #3
 800839a:	db02      	blt.n	80083a2 <_printf_float+0x13a>
 800839c:	6863      	ldr	r3, [r4, #4]
 800839e:	4299      	cmp	r1, r3
 80083a0:	dd41      	ble.n	8008426 <_printf_float+0x1be>
 80083a2:	f1ab 0b02 	sub.w	fp, fp, #2
 80083a6:	fa5f fb8b 	uxtb.w	fp, fp
 80083aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80083ae:	d820      	bhi.n	80083f2 <_printf_float+0x18a>
 80083b0:	3901      	subs	r1, #1
 80083b2:	465a      	mov	r2, fp
 80083b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80083b8:	9109      	str	r1, [sp, #36]	; 0x24
 80083ba:	f7ff ff17 	bl	80081ec <__exponent>
 80083be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083c0:	1813      	adds	r3, r2, r0
 80083c2:	2a01      	cmp	r2, #1
 80083c4:	4681      	mov	r9, r0
 80083c6:	6123      	str	r3, [r4, #16]
 80083c8:	dc02      	bgt.n	80083d0 <_printf_float+0x168>
 80083ca:	6822      	ldr	r2, [r4, #0]
 80083cc:	07d2      	lsls	r2, r2, #31
 80083ce:	d501      	bpl.n	80083d4 <_printf_float+0x16c>
 80083d0:	3301      	adds	r3, #1
 80083d2:	6123      	str	r3, [r4, #16]
 80083d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d09c      	beq.n	8008316 <_printf_float+0xae>
 80083dc:	232d      	movs	r3, #45	; 0x2d
 80083de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083e2:	e798      	b.n	8008316 <_printf_float+0xae>
 80083e4:	9a06      	ldr	r2, [sp, #24]
 80083e6:	2a47      	cmp	r2, #71	; 0x47
 80083e8:	d1be      	bne.n	8008368 <_printf_float+0x100>
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1bc      	bne.n	8008368 <_printf_float+0x100>
 80083ee:	2301      	movs	r3, #1
 80083f0:	e7b9      	b.n	8008366 <_printf_float+0xfe>
 80083f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80083f6:	d118      	bne.n	800842a <_printf_float+0x1c2>
 80083f8:	2900      	cmp	r1, #0
 80083fa:	6863      	ldr	r3, [r4, #4]
 80083fc:	dd0b      	ble.n	8008416 <_printf_float+0x1ae>
 80083fe:	6121      	str	r1, [r4, #16]
 8008400:	b913      	cbnz	r3, 8008408 <_printf_float+0x1a0>
 8008402:	6822      	ldr	r2, [r4, #0]
 8008404:	07d0      	lsls	r0, r2, #31
 8008406:	d502      	bpl.n	800840e <_printf_float+0x1a6>
 8008408:	3301      	adds	r3, #1
 800840a:	440b      	add	r3, r1
 800840c:	6123      	str	r3, [r4, #16]
 800840e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008410:	f04f 0900 	mov.w	r9, #0
 8008414:	e7de      	b.n	80083d4 <_printf_float+0x16c>
 8008416:	b913      	cbnz	r3, 800841e <_printf_float+0x1b6>
 8008418:	6822      	ldr	r2, [r4, #0]
 800841a:	07d2      	lsls	r2, r2, #31
 800841c:	d501      	bpl.n	8008422 <_printf_float+0x1ba>
 800841e:	3302      	adds	r3, #2
 8008420:	e7f4      	b.n	800840c <_printf_float+0x1a4>
 8008422:	2301      	movs	r3, #1
 8008424:	e7f2      	b.n	800840c <_printf_float+0x1a4>
 8008426:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800842a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800842c:	4299      	cmp	r1, r3
 800842e:	db05      	blt.n	800843c <_printf_float+0x1d4>
 8008430:	6823      	ldr	r3, [r4, #0]
 8008432:	6121      	str	r1, [r4, #16]
 8008434:	07d8      	lsls	r0, r3, #31
 8008436:	d5ea      	bpl.n	800840e <_printf_float+0x1a6>
 8008438:	1c4b      	adds	r3, r1, #1
 800843a:	e7e7      	b.n	800840c <_printf_float+0x1a4>
 800843c:	2900      	cmp	r1, #0
 800843e:	bfd4      	ite	le
 8008440:	f1c1 0202 	rsble	r2, r1, #2
 8008444:	2201      	movgt	r2, #1
 8008446:	4413      	add	r3, r2
 8008448:	e7e0      	b.n	800840c <_printf_float+0x1a4>
 800844a:	6823      	ldr	r3, [r4, #0]
 800844c:	055a      	lsls	r2, r3, #21
 800844e:	d407      	bmi.n	8008460 <_printf_float+0x1f8>
 8008450:	6923      	ldr	r3, [r4, #16]
 8008452:	4642      	mov	r2, r8
 8008454:	4631      	mov	r1, r6
 8008456:	4628      	mov	r0, r5
 8008458:	47b8      	blx	r7
 800845a:	3001      	adds	r0, #1
 800845c:	d12c      	bne.n	80084b8 <_printf_float+0x250>
 800845e:	e764      	b.n	800832a <_printf_float+0xc2>
 8008460:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008464:	f240 80e0 	bls.w	8008628 <_printf_float+0x3c0>
 8008468:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800846c:	2200      	movs	r2, #0
 800846e:	2300      	movs	r3, #0
 8008470:	f7f8 fb2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008474:	2800      	cmp	r0, #0
 8008476:	d034      	beq.n	80084e2 <_printf_float+0x27a>
 8008478:	4a37      	ldr	r2, [pc, #220]	; (8008558 <_printf_float+0x2f0>)
 800847a:	2301      	movs	r3, #1
 800847c:	4631      	mov	r1, r6
 800847e:	4628      	mov	r0, r5
 8008480:	47b8      	blx	r7
 8008482:	3001      	adds	r0, #1
 8008484:	f43f af51 	beq.w	800832a <_printf_float+0xc2>
 8008488:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800848c:	429a      	cmp	r2, r3
 800848e:	db02      	blt.n	8008496 <_printf_float+0x22e>
 8008490:	6823      	ldr	r3, [r4, #0]
 8008492:	07d8      	lsls	r0, r3, #31
 8008494:	d510      	bpl.n	80084b8 <_printf_float+0x250>
 8008496:	ee18 3a10 	vmov	r3, s16
 800849a:	4652      	mov	r2, sl
 800849c:	4631      	mov	r1, r6
 800849e:	4628      	mov	r0, r5
 80084a0:	47b8      	blx	r7
 80084a2:	3001      	adds	r0, #1
 80084a4:	f43f af41 	beq.w	800832a <_printf_float+0xc2>
 80084a8:	f04f 0800 	mov.w	r8, #0
 80084ac:	f104 091a 	add.w	r9, r4, #26
 80084b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084b2:	3b01      	subs	r3, #1
 80084b4:	4543      	cmp	r3, r8
 80084b6:	dc09      	bgt.n	80084cc <_printf_float+0x264>
 80084b8:	6823      	ldr	r3, [r4, #0]
 80084ba:	079b      	lsls	r3, r3, #30
 80084bc:	f100 8105 	bmi.w	80086ca <_printf_float+0x462>
 80084c0:	68e0      	ldr	r0, [r4, #12]
 80084c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084c4:	4298      	cmp	r0, r3
 80084c6:	bfb8      	it	lt
 80084c8:	4618      	movlt	r0, r3
 80084ca:	e730      	b.n	800832e <_printf_float+0xc6>
 80084cc:	2301      	movs	r3, #1
 80084ce:	464a      	mov	r2, r9
 80084d0:	4631      	mov	r1, r6
 80084d2:	4628      	mov	r0, r5
 80084d4:	47b8      	blx	r7
 80084d6:	3001      	adds	r0, #1
 80084d8:	f43f af27 	beq.w	800832a <_printf_float+0xc2>
 80084dc:	f108 0801 	add.w	r8, r8, #1
 80084e0:	e7e6      	b.n	80084b0 <_printf_float+0x248>
 80084e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	dc39      	bgt.n	800855c <_printf_float+0x2f4>
 80084e8:	4a1b      	ldr	r2, [pc, #108]	; (8008558 <_printf_float+0x2f0>)
 80084ea:	2301      	movs	r3, #1
 80084ec:	4631      	mov	r1, r6
 80084ee:	4628      	mov	r0, r5
 80084f0:	47b8      	blx	r7
 80084f2:	3001      	adds	r0, #1
 80084f4:	f43f af19 	beq.w	800832a <_printf_float+0xc2>
 80084f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084fc:	4313      	orrs	r3, r2
 80084fe:	d102      	bne.n	8008506 <_printf_float+0x29e>
 8008500:	6823      	ldr	r3, [r4, #0]
 8008502:	07d9      	lsls	r1, r3, #31
 8008504:	d5d8      	bpl.n	80084b8 <_printf_float+0x250>
 8008506:	ee18 3a10 	vmov	r3, s16
 800850a:	4652      	mov	r2, sl
 800850c:	4631      	mov	r1, r6
 800850e:	4628      	mov	r0, r5
 8008510:	47b8      	blx	r7
 8008512:	3001      	adds	r0, #1
 8008514:	f43f af09 	beq.w	800832a <_printf_float+0xc2>
 8008518:	f04f 0900 	mov.w	r9, #0
 800851c:	f104 0a1a 	add.w	sl, r4, #26
 8008520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008522:	425b      	negs	r3, r3
 8008524:	454b      	cmp	r3, r9
 8008526:	dc01      	bgt.n	800852c <_printf_float+0x2c4>
 8008528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800852a:	e792      	b.n	8008452 <_printf_float+0x1ea>
 800852c:	2301      	movs	r3, #1
 800852e:	4652      	mov	r2, sl
 8008530:	4631      	mov	r1, r6
 8008532:	4628      	mov	r0, r5
 8008534:	47b8      	blx	r7
 8008536:	3001      	adds	r0, #1
 8008538:	f43f aef7 	beq.w	800832a <_printf_float+0xc2>
 800853c:	f109 0901 	add.w	r9, r9, #1
 8008540:	e7ee      	b.n	8008520 <_printf_float+0x2b8>
 8008542:	bf00      	nop
 8008544:	7fefffff 	.word	0x7fefffff
 8008548:	0800aef0 	.word	0x0800aef0
 800854c:	0800aef4 	.word	0x0800aef4
 8008550:	0800aefc 	.word	0x0800aefc
 8008554:	0800aef8 	.word	0x0800aef8
 8008558:	0800af00 	.word	0x0800af00
 800855c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800855e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008560:	429a      	cmp	r2, r3
 8008562:	bfa8      	it	ge
 8008564:	461a      	movge	r2, r3
 8008566:	2a00      	cmp	r2, #0
 8008568:	4691      	mov	r9, r2
 800856a:	dc37      	bgt.n	80085dc <_printf_float+0x374>
 800856c:	f04f 0b00 	mov.w	fp, #0
 8008570:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008574:	f104 021a 	add.w	r2, r4, #26
 8008578:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800857a:	9305      	str	r3, [sp, #20]
 800857c:	eba3 0309 	sub.w	r3, r3, r9
 8008580:	455b      	cmp	r3, fp
 8008582:	dc33      	bgt.n	80085ec <_printf_float+0x384>
 8008584:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008588:	429a      	cmp	r2, r3
 800858a:	db3b      	blt.n	8008604 <_printf_float+0x39c>
 800858c:	6823      	ldr	r3, [r4, #0]
 800858e:	07da      	lsls	r2, r3, #31
 8008590:	d438      	bmi.n	8008604 <_printf_float+0x39c>
 8008592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008594:	9a05      	ldr	r2, [sp, #20]
 8008596:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008598:	1a9a      	subs	r2, r3, r2
 800859a:	eba3 0901 	sub.w	r9, r3, r1
 800859e:	4591      	cmp	r9, r2
 80085a0:	bfa8      	it	ge
 80085a2:	4691      	movge	r9, r2
 80085a4:	f1b9 0f00 	cmp.w	r9, #0
 80085a8:	dc35      	bgt.n	8008616 <_printf_float+0x3ae>
 80085aa:	f04f 0800 	mov.w	r8, #0
 80085ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80085b2:	f104 0a1a 	add.w	sl, r4, #26
 80085b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085ba:	1a9b      	subs	r3, r3, r2
 80085bc:	eba3 0309 	sub.w	r3, r3, r9
 80085c0:	4543      	cmp	r3, r8
 80085c2:	f77f af79 	ble.w	80084b8 <_printf_float+0x250>
 80085c6:	2301      	movs	r3, #1
 80085c8:	4652      	mov	r2, sl
 80085ca:	4631      	mov	r1, r6
 80085cc:	4628      	mov	r0, r5
 80085ce:	47b8      	blx	r7
 80085d0:	3001      	adds	r0, #1
 80085d2:	f43f aeaa 	beq.w	800832a <_printf_float+0xc2>
 80085d6:	f108 0801 	add.w	r8, r8, #1
 80085da:	e7ec      	b.n	80085b6 <_printf_float+0x34e>
 80085dc:	4613      	mov	r3, r2
 80085de:	4631      	mov	r1, r6
 80085e0:	4642      	mov	r2, r8
 80085e2:	4628      	mov	r0, r5
 80085e4:	47b8      	blx	r7
 80085e6:	3001      	adds	r0, #1
 80085e8:	d1c0      	bne.n	800856c <_printf_float+0x304>
 80085ea:	e69e      	b.n	800832a <_printf_float+0xc2>
 80085ec:	2301      	movs	r3, #1
 80085ee:	4631      	mov	r1, r6
 80085f0:	4628      	mov	r0, r5
 80085f2:	9205      	str	r2, [sp, #20]
 80085f4:	47b8      	blx	r7
 80085f6:	3001      	adds	r0, #1
 80085f8:	f43f ae97 	beq.w	800832a <_printf_float+0xc2>
 80085fc:	9a05      	ldr	r2, [sp, #20]
 80085fe:	f10b 0b01 	add.w	fp, fp, #1
 8008602:	e7b9      	b.n	8008578 <_printf_float+0x310>
 8008604:	ee18 3a10 	vmov	r3, s16
 8008608:	4652      	mov	r2, sl
 800860a:	4631      	mov	r1, r6
 800860c:	4628      	mov	r0, r5
 800860e:	47b8      	blx	r7
 8008610:	3001      	adds	r0, #1
 8008612:	d1be      	bne.n	8008592 <_printf_float+0x32a>
 8008614:	e689      	b.n	800832a <_printf_float+0xc2>
 8008616:	9a05      	ldr	r2, [sp, #20]
 8008618:	464b      	mov	r3, r9
 800861a:	4442      	add	r2, r8
 800861c:	4631      	mov	r1, r6
 800861e:	4628      	mov	r0, r5
 8008620:	47b8      	blx	r7
 8008622:	3001      	adds	r0, #1
 8008624:	d1c1      	bne.n	80085aa <_printf_float+0x342>
 8008626:	e680      	b.n	800832a <_printf_float+0xc2>
 8008628:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800862a:	2a01      	cmp	r2, #1
 800862c:	dc01      	bgt.n	8008632 <_printf_float+0x3ca>
 800862e:	07db      	lsls	r3, r3, #31
 8008630:	d538      	bpl.n	80086a4 <_printf_float+0x43c>
 8008632:	2301      	movs	r3, #1
 8008634:	4642      	mov	r2, r8
 8008636:	4631      	mov	r1, r6
 8008638:	4628      	mov	r0, r5
 800863a:	47b8      	blx	r7
 800863c:	3001      	adds	r0, #1
 800863e:	f43f ae74 	beq.w	800832a <_printf_float+0xc2>
 8008642:	ee18 3a10 	vmov	r3, s16
 8008646:	4652      	mov	r2, sl
 8008648:	4631      	mov	r1, r6
 800864a:	4628      	mov	r0, r5
 800864c:	47b8      	blx	r7
 800864e:	3001      	adds	r0, #1
 8008650:	f43f ae6b 	beq.w	800832a <_printf_float+0xc2>
 8008654:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008658:	2200      	movs	r2, #0
 800865a:	2300      	movs	r3, #0
 800865c:	f7f8 fa34 	bl	8000ac8 <__aeabi_dcmpeq>
 8008660:	b9d8      	cbnz	r0, 800869a <_printf_float+0x432>
 8008662:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008664:	f108 0201 	add.w	r2, r8, #1
 8008668:	3b01      	subs	r3, #1
 800866a:	4631      	mov	r1, r6
 800866c:	4628      	mov	r0, r5
 800866e:	47b8      	blx	r7
 8008670:	3001      	adds	r0, #1
 8008672:	d10e      	bne.n	8008692 <_printf_float+0x42a>
 8008674:	e659      	b.n	800832a <_printf_float+0xc2>
 8008676:	2301      	movs	r3, #1
 8008678:	4652      	mov	r2, sl
 800867a:	4631      	mov	r1, r6
 800867c:	4628      	mov	r0, r5
 800867e:	47b8      	blx	r7
 8008680:	3001      	adds	r0, #1
 8008682:	f43f ae52 	beq.w	800832a <_printf_float+0xc2>
 8008686:	f108 0801 	add.w	r8, r8, #1
 800868a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800868c:	3b01      	subs	r3, #1
 800868e:	4543      	cmp	r3, r8
 8008690:	dcf1      	bgt.n	8008676 <_printf_float+0x40e>
 8008692:	464b      	mov	r3, r9
 8008694:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008698:	e6dc      	b.n	8008454 <_printf_float+0x1ec>
 800869a:	f04f 0800 	mov.w	r8, #0
 800869e:	f104 0a1a 	add.w	sl, r4, #26
 80086a2:	e7f2      	b.n	800868a <_printf_float+0x422>
 80086a4:	2301      	movs	r3, #1
 80086a6:	4642      	mov	r2, r8
 80086a8:	e7df      	b.n	800866a <_printf_float+0x402>
 80086aa:	2301      	movs	r3, #1
 80086ac:	464a      	mov	r2, r9
 80086ae:	4631      	mov	r1, r6
 80086b0:	4628      	mov	r0, r5
 80086b2:	47b8      	blx	r7
 80086b4:	3001      	adds	r0, #1
 80086b6:	f43f ae38 	beq.w	800832a <_printf_float+0xc2>
 80086ba:	f108 0801 	add.w	r8, r8, #1
 80086be:	68e3      	ldr	r3, [r4, #12]
 80086c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80086c2:	1a5b      	subs	r3, r3, r1
 80086c4:	4543      	cmp	r3, r8
 80086c6:	dcf0      	bgt.n	80086aa <_printf_float+0x442>
 80086c8:	e6fa      	b.n	80084c0 <_printf_float+0x258>
 80086ca:	f04f 0800 	mov.w	r8, #0
 80086ce:	f104 0919 	add.w	r9, r4, #25
 80086d2:	e7f4      	b.n	80086be <_printf_float+0x456>

080086d4 <_printf_common>:
 80086d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086d8:	4616      	mov	r6, r2
 80086da:	4699      	mov	r9, r3
 80086dc:	688a      	ldr	r2, [r1, #8]
 80086de:	690b      	ldr	r3, [r1, #16]
 80086e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086e4:	4293      	cmp	r3, r2
 80086e6:	bfb8      	it	lt
 80086e8:	4613      	movlt	r3, r2
 80086ea:	6033      	str	r3, [r6, #0]
 80086ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086f0:	4607      	mov	r7, r0
 80086f2:	460c      	mov	r4, r1
 80086f4:	b10a      	cbz	r2, 80086fa <_printf_common+0x26>
 80086f6:	3301      	adds	r3, #1
 80086f8:	6033      	str	r3, [r6, #0]
 80086fa:	6823      	ldr	r3, [r4, #0]
 80086fc:	0699      	lsls	r1, r3, #26
 80086fe:	bf42      	ittt	mi
 8008700:	6833      	ldrmi	r3, [r6, #0]
 8008702:	3302      	addmi	r3, #2
 8008704:	6033      	strmi	r3, [r6, #0]
 8008706:	6825      	ldr	r5, [r4, #0]
 8008708:	f015 0506 	ands.w	r5, r5, #6
 800870c:	d106      	bne.n	800871c <_printf_common+0x48>
 800870e:	f104 0a19 	add.w	sl, r4, #25
 8008712:	68e3      	ldr	r3, [r4, #12]
 8008714:	6832      	ldr	r2, [r6, #0]
 8008716:	1a9b      	subs	r3, r3, r2
 8008718:	42ab      	cmp	r3, r5
 800871a:	dc26      	bgt.n	800876a <_printf_common+0x96>
 800871c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008720:	1e13      	subs	r3, r2, #0
 8008722:	6822      	ldr	r2, [r4, #0]
 8008724:	bf18      	it	ne
 8008726:	2301      	movne	r3, #1
 8008728:	0692      	lsls	r2, r2, #26
 800872a:	d42b      	bmi.n	8008784 <_printf_common+0xb0>
 800872c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008730:	4649      	mov	r1, r9
 8008732:	4638      	mov	r0, r7
 8008734:	47c0      	blx	r8
 8008736:	3001      	adds	r0, #1
 8008738:	d01e      	beq.n	8008778 <_printf_common+0xa4>
 800873a:	6823      	ldr	r3, [r4, #0]
 800873c:	68e5      	ldr	r5, [r4, #12]
 800873e:	6832      	ldr	r2, [r6, #0]
 8008740:	f003 0306 	and.w	r3, r3, #6
 8008744:	2b04      	cmp	r3, #4
 8008746:	bf08      	it	eq
 8008748:	1aad      	subeq	r5, r5, r2
 800874a:	68a3      	ldr	r3, [r4, #8]
 800874c:	6922      	ldr	r2, [r4, #16]
 800874e:	bf0c      	ite	eq
 8008750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008754:	2500      	movne	r5, #0
 8008756:	4293      	cmp	r3, r2
 8008758:	bfc4      	itt	gt
 800875a:	1a9b      	subgt	r3, r3, r2
 800875c:	18ed      	addgt	r5, r5, r3
 800875e:	2600      	movs	r6, #0
 8008760:	341a      	adds	r4, #26
 8008762:	42b5      	cmp	r5, r6
 8008764:	d11a      	bne.n	800879c <_printf_common+0xc8>
 8008766:	2000      	movs	r0, #0
 8008768:	e008      	b.n	800877c <_printf_common+0xa8>
 800876a:	2301      	movs	r3, #1
 800876c:	4652      	mov	r2, sl
 800876e:	4649      	mov	r1, r9
 8008770:	4638      	mov	r0, r7
 8008772:	47c0      	blx	r8
 8008774:	3001      	adds	r0, #1
 8008776:	d103      	bne.n	8008780 <_printf_common+0xac>
 8008778:	f04f 30ff 	mov.w	r0, #4294967295
 800877c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008780:	3501      	adds	r5, #1
 8008782:	e7c6      	b.n	8008712 <_printf_common+0x3e>
 8008784:	18e1      	adds	r1, r4, r3
 8008786:	1c5a      	adds	r2, r3, #1
 8008788:	2030      	movs	r0, #48	; 0x30
 800878a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800878e:	4422      	add	r2, r4
 8008790:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008794:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008798:	3302      	adds	r3, #2
 800879a:	e7c7      	b.n	800872c <_printf_common+0x58>
 800879c:	2301      	movs	r3, #1
 800879e:	4622      	mov	r2, r4
 80087a0:	4649      	mov	r1, r9
 80087a2:	4638      	mov	r0, r7
 80087a4:	47c0      	blx	r8
 80087a6:	3001      	adds	r0, #1
 80087a8:	d0e6      	beq.n	8008778 <_printf_common+0xa4>
 80087aa:	3601      	adds	r6, #1
 80087ac:	e7d9      	b.n	8008762 <_printf_common+0x8e>
	...

080087b0 <_printf_i>:
 80087b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087b4:	7e0f      	ldrb	r7, [r1, #24]
 80087b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087b8:	2f78      	cmp	r7, #120	; 0x78
 80087ba:	4691      	mov	r9, r2
 80087bc:	4680      	mov	r8, r0
 80087be:	460c      	mov	r4, r1
 80087c0:	469a      	mov	sl, r3
 80087c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80087c6:	d807      	bhi.n	80087d8 <_printf_i+0x28>
 80087c8:	2f62      	cmp	r7, #98	; 0x62
 80087ca:	d80a      	bhi.n	80087e2 <_printf_i+0x32>
 80087cc:	2f00      	cmp	r7, #0
 80087ce:	f000 80d8 	beq.w	8008982 <_printf_i+0x1d2>
 80087d2:	2f58      	cmp	r7, #88	; 0x58
 80087d4:	f000 80a3 	beq.w	800891e <_printf_i+0x16e>
 80087d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087e0:	e03a      	b.n	8008858 <_printf_i+0xa8>
 80087e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087e6:	2b15      	cmp	r3, #21
 80087e8:	d8f6      	bhi.n	80087d8 <_printf_i+0x28>
 80087ea:	a101      	add	r1, pc, #4	; (adr r1, 80087f0 <_printf_i+0x40>)
 80087ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087f0:	08008849 	.word	0x08008849
 80087f4:	0800885d 	.word	0x0800885d
 80087f8:	080087d9 	.word	0x080087d9
 80087fc:	080087d9 	.word	0x080087d9
 8008800:	080087d9 	.word	0x080087d9
 8008804:	080087d9 	.word	0x080087d9
 8008808:	0800885d 	.word	0x0800885d
 800880c:	080087d9 	.word	0x080087d9
 8008810:	080087d9 	.word	0x080087d9
 8008814:	080087d9 	.word	0x080087d9
 8008818:	080087d9 	.word	0x080087d9
 800881c:	08008969 	.word	0x08008969
 8008820:	0800888d 	.word	0x0800888d
 8008824:	0800894b 	.word	0x0800894b
 8008828:	080087d9 	.word	0x080087d9
 800882c:	080087d9 	.word	0x080087d9
 8008830:	0800898b 	.word	0x0800898b
 8008834:	080087d9 	.word	0x080087d9
 8008838:	0800888d 	.word	0x0800888d
 800883c:	080087d9 	.word	0x080087d9
 8008840:	080087d9 	.word	0x080087d9
 8008844:	08008953 	.word	0x08008953
 8008848:	682b      	ldr	r3, [r5, #0]
 800884a:	1d1a      	adds	r2, r3, #4
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	602a      	str	r2, [r5, #0]
 8008850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008858:	2301      	movs	r3, #1
 800885a:	e0a3      	b.n	80089a4 <_printf_i+0x1f4>
 800885c:	6820      	ldr	r0, [r4, #0]
 800885e:	6829      	ldr	r1, [r5, #0]
 8008860:	0606      	lsls	r6, r0, #24
 8008862:	f101 0304 	add.w	r3, r1, #4
 8008866:	d50a      	bpl.n	800887e <_printf_i+0xce>
 8008868:	680e      	ldr	r6, [r1, #0]
 800886a:	602b      	str	r3, [r5, #0]
 800886c:	2e00      	cmp	r6, #0
 800886e:	da03      	bge.n	8008878 <_printf_i+0xc8>
 8008870:	232d      	movs	r3, #45	; 0x2d
 8008872:	4276      	negs	r6, r6
 8008874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008878:	485e      	ldr	r0, [pc, #376]	; (80089f4 <_printf_i+0x244>)
 800887a:	230a      	movs	r3, #10
 800887c:	e019      	b.n	80088b2 <_printf_i+0x102>
 800887e:	680e      	ldr	r6, [r1, #0]
 8008880:	602b      	str	r3, [r5, #0]
 8008882:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008886:	bf18      	it	ne
 8008888:	b236      	sxthne	r6, r6
 800888a:	e7ef      	b.n	800886c <_printf_i+0xbc>
 800888c:	682b      	ldr	r3, [r5, #0]
 800888e:	6820      	ldr	r0, [r4, #0]
 8008890:	1d19      	adds	r1, r3, #4
 8008892:	6029      	str	r1, [r5, #0]
 8008894:	0601      	lsls	r1, r0, #24
 8008896:	d501      	bpl.n	800889c <_printf_i+0xec>
 8008898:	681e      	ldr	r6, [r3, #0]
 800889a:	e002      	b.n	80088a2 <_printf_i+0xf2>
 800889c:	0646      	lsls	r6, r0, #25
 800889e:	d5fb      	bpl.n	8008898 <_printf_i+0xe8>
 80088a0:	881e      	ldrh	r6, [r3, #0]
 80088a2:	4854      	ldr	r0, [pc, #336]	; (80089f4 <_printf_i+0x244>)
 80088a4:	2f6f      	cmp	r7, #111	; 0x6f
 80088a6:	bf0c      	ite	eq
 80088a8:	2308      	moveq	r3, #8
 80088aa:	230a      	movne	r3, #10
 80088ac:	2100      	movs	r1, #0
 80088ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088b2:	6865      	ldr	r5, [r4, #4]
 80088b4:	60a5      	str	r5, [r4, #8]
 80088b6:	2d00      	cmp	r5, #0
 80088b8:	bfa2      	ittt	ge
 80088ba:	6821      	ldrge	r1, [r4, #0]
 80088bc:	f021 0104 	bicge.w	r1, r1, #4
 80088c0:	6021      	strge	r1, [r4, #0]
 80088c2:	b90e      	cbnz	r6, 80088c8 <_printf_i+0x118>
 80088c4:	2d00      	cmp	r5, #0
 80088c6:	d04d      	beq.n	8008964 <_printf_i+0x1b4>
 80088c8:	4615      	mov	r5, r2
 80088ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80088ce:	fb03 6711 	mls	r7, r3, r1, r6
 80088d2:	5dc7      	ldrb	r7, [r0, r7]
 80088d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80088d8:	4637      	mov	r7, r6
 80088da:	42bb      	cmp	r3, r7
 80088dc:	460e      	mov	r6, r1
 80088de:	d9f4      	bls.n	80088ca <_printf_i+0x11a>
 80088e0:	2b08      	cmp	r3, #8
 80088e2:	d10b      	bne.n	80088fc <_printf_i+0x14c>
 80088e4:	6823      	ldr	r3, [r4, #0]
 80088e6:	07de      	lsls	r6, r3, #31
 80088e8:	d508      	bpl.n	80088fc <_printf_i+0x14c>
 80088ea:	6923      	ldr	r3, [r4, #16]
 80088ec:	6861      	ldr	r1, [r4, #4]
 80088ee:	4299      	cmp	r1, r3
 80088f0:	bfde      	ittt	le
 80088f2:	2330      	movle	r3, #48	; 0x30
 80088f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80088f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80088fc:	1b52      	subs	r2, r2, r5
 80088fe:	6122      	str	r2, [r4, #16]
 8008900:	f8cd a000 	str.w	sl, [sp]
 8008904:	464b      	mov	r3, r9
 8008906:	aa03      	add	r2, sp, #12
 8008908:	4621      	mov	r1, r4
 800890a:	4640      	mov	r0, r8
 800890c:	f7ff fee2 	bl	80086d4 <_printf_common>
 8008910:	3001      	adds	r0, #1
 8008912:	d14c      	bne.n	80089ae <_printf_i+0x1fe>
 8008914:	f04f 30ff 	mov.w	r0, #4294967295
 8008918:	b004      	add	sp, #16
 800891a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800891e:	4835      	ldr	r0, [pc, #212]	; (80089f4 <_printf_i+0x244>)
 8008920:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008924:	6829      	ldr	r1, [r5, #0]
 8008926:	6823      	ldr	r3, [r4, #0]
 8008928:	f851 6b04 	ldr.w	r6, [r1], #4
 800892c:	6029      	str	r1, [r5, #0]
 800892e:	061d      	lsls	r5, r3, #24
 8008930:	d514      	bpl.n	800895c <_printf_i+0x1ac>
 8008932:	07df      	lsls	r7, r3, #31
 8008934:	bf44      	itt	mi
 8008936:	f043 0320 	orrmi.w	r3, r3, #32
 800893a:	6023      	strmi	r3, [r4, #0]
 800893c:	b91e      	cbnz	r6, 8008946 <_printf_i+0x196>
 800893e:	6823      	ldr	r3, [r4, #0]
 8008940:	f023 0320 	bic.w	r3, r3, #32
 8008944:	6023      	str	r3, [r4, #0]
 8008946:	2310      	movs	r3, #16
 8008948:	e7b0      	b.n	80088ac <_printf_i+0xfc>
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	f043 0320 	orr.w	r3, r3, #32
 8008950:	6023      	str	r3, [r4, #0]
 8008952:	2378      	movs	r3, #120	; 0x78
 8008954:	4828      	ldr	r0, [pc, #160]	; (80089f8 <_printf_i+0x248>)
 8008956:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800895a:	e7e3      	b.n	8008924 <_printf_i+0x174>
 800895c:	0659      	lsls	r1, r3, #25
 800895e:	bf48      	it	mi
 8008960:	b2b6      	uxthmi	r6, r6
 8008962:	e7e6      	b.n	8008932 <_printf_i+0x182>
 8008964:	4615      	mov	r5, r2
 8008966:	e7bb      	b.n	80088e0 <_printf_i+0x130>
 8008968:	682b      	ldr	r3, [r5, #0]
 800896a:	6826      	ldr	r6, [r4, #0]
 800896c:	6961      	ldr	r1, [r4, #20]
 800896e:	1d18      	adds	r0, r3, #4
 8008970:	6028      	str	r0, [r5, #0]
 8008972:	0635      	lsls	r5, r6, #24
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	d501      	bpl.n	800897c <_printf_i+0x1cc>
 8008978:	6019      	str	r1, [r3, #0]
 800897a:	e002      	b.n	8008982 <_printf_i+0x1d2>
 800897c:	0670      	lsls	r0, r6, #25
 800897e:	d5fb      	bpl.n	8008978 <_printf_i+0x1c8>
 8008980:	8019      	strh	r1, [r3, #0]
 8008982:	2300      	movs	r3, #0
 8008984:	6123      	str	r3, [r4, #16]
 8008986:	4615      	mov	r5, r2
 8008988:	e7ba      	b.n	8008900 <_printf_i+0x150>
 800898a:	682b      	ldr	r3, [r5, #0]
 800898c:	1d1a      	adds	r2, r3, #4
 800898e:	602a      	str	r2, [r5, #0]
 8008990:	681d      	ldr	r5, [r3, #0]
 8008992:	6862      	ldr	r2, [r4, #4]
 8008994:	2100      	movs	r1, #0
 8008996:	4628      	mov	r0, r5
 8008998:	f7f7 fc22 	bl	80001e0 <memchr>
 800899c:	b108      	cbz	r0, 80089a2 <_printf_i+0x1f2>
 800899e:	1b40      	subs	r0, r0, r5
 80089a0:	6060      	str	r0, [r4, #4]
 80089a2:	6863      	ldr	r3, [r4, #4]
 80089a4:	6123      	str	r3, [r4, #16]
 80089a6:	2300      	movs	r3, #0
 80089a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089ac:	e7a8      	b.n	8008900 <_printf_i+0x150>
 80089ae:	6923      	ldr	r3, [r4, #16]
 80089b0:	462a      	mov	r2, r5
 80089b2:	4649      	mov	r1, r9
 80089b4:	4640      	mov	r0, r8
 80089b6:	47d0      	blx	sl
 80089b8:	3001      	adds	r0, #1
 80089ba:	d0ab      	beq.n	8008914 <_printf_i+0x164>
 80089bc:	6823      	ldr	r3, [r4, #0]
 80089be:	079b      	lsls	r3, r3, #30
 80089c0:	d413      	bmi.n	80089ea <_printf_i+0x23a>
 80089c2:	68e0      	ldr	r0, [r4, #12]
 80089c4:	9b03      	ldr	r3, [sp, #12]
 80089c6:	4298      	cmp	r0, r3
 80089c8:	bfb8      	it	lt
 80089ca:	4618      	movlt	r0, r3
 80089cc:	e7a4      	b.n	8008918 <_printf_i+0x168>
 80089ce:	2301      	movs	r3, #1
 80089d0:	4632      	mov	r2, r6
 80089d2:	4649      	mov	r1, r9
 80089d4:	4640      	mov	r0, r8
 80089d6:	47d0      	blx	sl
 80089d8:	3001      	adds	r0, #1
 80089da:	d09b      	beq.n	8008914 <_printf_i+0x164>
 80089dc:	3501      	adds	r5, #1
 80089de:	68e3      	ldr	r3, [r4, #12]
 80089e0:	9903      	ldr	r1, [sp, #12]
 80089e2:	1a5b      	subs	r3, r3, r1
 80089e4:	42ab      	cmp	r3, r5
 80089e6:	dcf2      	bgt.n	80089ce <_printf_i+0x21e>
 80089e8:	e7eb      	b.n	80089c2 <_printf_i+0x212>
 80089ea:	2500      	movs	r5, #0
 80089ec:	f104 0619 	add.w	r6, r4, #25
 80089f0:	e7f5      	b.n	80089de <_printf_i+0x22e>
 80089f2:	bf00      	nop
 80089f4:	0800af02 	.word	0x0800af02
 80089f8:	0800af13 	.word	0x0800af13

080089fc <cleanup_glue>:
 80089fc:	b538      	push	{r3, r4, r5, lr}
 80089fe:	460c      	mov	r4, r1
 8008a00:	6809      	ldr	r1, [r1, #0]
 8008a02:	4605      	mov	r5, r0
 8008a04:	b109      	cbz	r1, 8008a0a <cleanup_glue+0xe>
 8008a06:	f7ff fff9 	bl	80089fc <cleanup_glue>
 8008a0a:	4621      	mov	r1, r4
 8008a0c:	4628      	mov	r0, r5
 8008a0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a12:	f001 bbf5 	b.w	800a200 <_free_r>
	...

08008a18 <_reclaim_reent>:
 8008a18:	4b2c      	ldr	r3, [pc, #176]	; (8008acc <_reclaim_reent+0xb4>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4283      	cmp	r3, r0
 8008a1e:	b570      	push	{r4, r5, r6, lr}
 8008a20:	4604      	mov	r4, r0
 8008a22:	d051      	beq.n	8008ac8 <_reclaim_reent+0xb0>
 8008a24:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008a26:	b143      	cbz	r3, 8008a3a <_reclaim_reent+0x22>
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d14a      	bne.n	8008ac4 <_reclaim_reent+0xac>
 8008a2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a30:	6819      	ldr	r1, [r3, #0]
 8008a32:	b111      	cbz	r1, 8008a3a <_reclaim_reent+0x22>
 8008a34:	4620      	mov	r0, r4
 8008a36:	f001 fbe3 	bl	800a200 <_free_r>
 8008a3a:	6961      	ldr	r1, [r4, #20]
 8008a3c:	b111      	cbz	r1, 8008a44 <_reclaim_reent+0x2c>
 8008a3e:	4620      	mov	r0, r4
 8008a40:	f001 fbde 	bl	800a200 <_free_r>
 8008a44:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008a46:	b111      	cbz	r1, 8008a4e <_reclaim_reent+0x36>
 8008a48:	4620      	mov	r0, r4
 8008a4a:	f001 fbd9 	bl	800a200 <_free_r>
 8008a4e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008a50:	b111      	cbz	r1, 8008a58 <_reclaim_reent+0x40>
 8008a52:	4620      	mov	r0, r4
 8008a54:	f001 fbd4 	bl	800a200 <_free_r>
 8008a58:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008a5a:	b111      	cbz	r1, 8008a62 <_reclaim_reent+0x4a>
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f001 fbcf 	bl	800a200 <_free_r>
 8008a62:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008a64:	b111      	cbz	r1, 8008a6c <_reclaim_reent+0x54>
 8008a66:	4620      	mov	r0, r4
 8008a68:	f001 fbca 	bl	800a200 <_free_r>
 8008a6c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008a6e:	b111      	cbz	r1, 8008a76 <_reclaim_reent+0x5e>
 8008a70:	4620      	mov	r0, r4
 8008a72:	f001 fbc5 	bl	800a200 <_free_r>
 8008a76:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008a78:	b111      	cbz	r1, 8008a80 <_reclaim_reent+0x68>
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	f001 fbc0 	bl	800a200 <_free_r>
 8008a80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a82:	b111      	cbz	r1, 8008a8a <_reclaim_reent+0x72>
 8008a84:	4620      	mov	r0, r4
 8008a86:	f001 fbbb 	bl	800a200 <_free_r>
 8008a8a:	69a3      	ldr	r3, [r4, #24]
 8008a8c:	b1e3      	cbz	r3, 8008ac8 <_reclaim_reent+0xb0>
 8008a8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008a90:	4620      	mov	r0, r4
 8008a92:	4798      	blx	r3
 8008a94:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008a96:	b1b9      	cbz	r1, 8008ac8 <_reclaim_reent+0xb0>
 8008a98:	4620      	mov	r0, r4
 8008a9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008a9e:	f7ff bfad 	b.w	80089fc <cleanup_glue>
 8008aa2:	5949      	ldr	r1, [r1, r5]
 8008aa4:	b941      	cbnz	r1, 8008ab8 <_reclaim_reent+0xa0>
 8008aa6:	3504      	adds	r5, #4
 8008aa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008aaa:	2d80      	cmp	r5, #128	; 0x80
 8008aac:	68d9      	ldr	r1, [r3, #12]
 8008aae:	d1f8      	bne.n	8008aa2 <_reclaim_reent+0x8a>
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f001 fba5 	bl	800a200 <_free_r>
 8008ab6:	e7ba      	b.n	8008a2e <_reclaim_reent+0x16>
 8008ab8:	680e      	ldr	r6, [r1, #0]
 8008aba:	4620      	mov	r0, r4
 8008abc:	f001 fba0 	bl	800a200 <_free_r>
 8008ac0:	4631      	mov	r1, r6
 8008ac2:	e7ef      	b.n	8008aa4 <_reclaim_reent+0x8c>
 8008ac4:	2500      	movs	r5, #0
 8008ac6:	e7ef      	b.n	8008aa8 <_reclaim_reent+0x90>
 8008ac8:	bd70      	pop	{r4, r5, r6, pc}
 8008aca:	bf00      	nop
 8008acc:	20000010 	.word	0x20000010

08008ad0 <_sbrk_r>:
 8008ad0:	b538      	push	{r3, r4, r5, lr}
 8008ad2:	4d06      	ldr	r5, [pc, #24]	; (8008aec <_sbrk_r+0x1c>)
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	4604      	mov	r4, r0
 8008ad8:	4608      	mov	r0, r1
 8008ada:	602b      	str	r3, [r5, #0]
 8008adc:	f7f8 fc8a 	bl	80013f4 <_sbrk>
 8008ae0:	1c43      	adds	r3, r0, #1
 8008ae2:	d102      	bne.n	8008aea <_sbrk_r+0x1a>
 8008ae4:	682b      	ldr	r3, [r5, #0]
 8008ae6:	b103      	cbz	r3, 8008aea <_sbrk_r+0x1a>
 8008ae8:	6023      	str	r3, [r4, #0]
 8008aea:	bd38      	pop	{r3, r4, r5, pc}
 8008aec:	20001bcc 	.word	0x20001bcc

08008af0 <__sread>:
 8008af0:	b510      	push	{r4, lr}
 8008af2:	460c      	mov	r4, r1
 8008af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008af8:	f001 fd2a 	bl	800a550 <_read_r>
 8008afc:	2800      	cmp	r0, #0
 8008afe:	bfab      	itete	ge
 8008b00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b02:	89a3      	ldrhlt	r3, [r4, #12]
 8008b04:	181b      	addge	r3, r3, r0
 8008b06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b0a:	bfac      	ite	ge
 8008b0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b0e:	81a3      	strhlt	r3, [r4, #12]
 8008b10:	bd10      	pop	{r4, pc}

08008b12 <__swrite>:
 8008b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b16:	461f      	mov	r7, r3
 8008b18:	898b      	ldrh	r3, [r1, #12]
 8008b1a:	05db      	lsls	r3, r3, #23
 8008b1c:	4605      	mov	r5, r0
 8008b1e:	460c      	mov	r4, r1
 8008b20:	4616      	mov	r6, r2
 8008b22:	d505      	bpl.n	8008b30 <__swrite+0x1e>
 8008b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b28:	2302      	movs	r3, #2
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f000 ffa8 	bl	8009a80 <_lseek_r>
 8008b30:	89a3      	ldrh	r3, [r4, #12]
 8008b32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b3a:	81a3      	strh	r3, [r4, #12]
 8008b3c:	4632      	mov	r2, r6
 8008b3e:	463b      	mov	r3, r7
 8008b40:	4628      	mov	r0, r5
 8008b42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b46:	f000 b837 	b.w	8008bb8 <_write_r>

08008b4a <__sseek>:
 8008b4a:	b510      	push	{r4, lr}
 8008b4c:	460c      	mov	r4, r1
 8008b4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b52:	f000 ff95 	bl	8009a80 <_lseek_r>
 8008b56:	1c43      	adds	r3, r0, #1
 8008b58:	89a3      	ldrh	r3, [r4, #12]
 8008b5a:	bf15      	itete	ne
 8008b5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b66:	81a3      	strheq	r3, [r4, #12]
 8008b68:	bf18      	it	ne
 8008b6a:	81a3      	strhne	r3, [r4, #12]
 8008b6c:	bd10      	pop	{r4, pc}

08008b6e <__sclose>:
 8008b6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b72:	f000 b833 	b.w	8008bdc <_close_r>
	...

08008b78 <_vsiprintf_r>:
 8008b78:	b500      	push	{lr}
 8008b7a:	b09b      	sub	sp, #108	; 0x6c
 8008b7c:	9100      	str	r1, [sp, #0]
 8008b7e:	9104      	str	r1, [sp, #16]
 8008b80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b84:	9105      	str	r1, [sp, #20]
 8008b86:	9102      	str	r1, [sp, #8]
 8008b88:	4905      	ldr	r1, [pc, #20]	; (8008ba0 <_vsiprintf_r+0x28>)
 8008b8a:	9103      	str	r1, [sp, #12]
 8008b8c:	4669      	mov	r1, sp
 8008b8e:	f001 fbdf 	bl	800a350 <_svfiprintf_r>
 8008b92:	9b00      	ldr	r3, [sp, #0]
 8008b94:	2200      	movs	r2, #0
 8008b96:	701a      	strb	r2, [r3, #0]
 8008b98:	b01b      	add	sp, #108	; 0x6c
 8008b9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8008b9e:	bf00      	nop
 8008ba0:	ffff0208 	.word	0xffff0208

08008ba4 <vsiprintf>:
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	460a      	mov	r2, r1
 8008ba8:	4601      	mov	r1, r0
 8008baa:	4802      	ldr	r0, [pc, #8]	; (8008bb4 <vsiprintf+0x10>)
 8008bac:	6800      	ldr	r0, [r0, #0]
 8008bae:	f7ff bfe3 	b.w	8008b78 <_vsiprintf_r>
 8008bb2:	bf00      	nop
 8008bb4:	20000010 	.word	0x20000010

08008bb8 <_write_r>:
 8008bb8:	b538      	push	{r3, r4, r5, lr}
 8008bba:	4d07      	ldr	r5, [pc, #28]	; (8008bd8 <_write_r+0x20>)
 8008bbc:	4604      	mov	r4, r0
 8008bbe:	4608      	mov	r0, r1
 8008bc0:	4611      	mov	r1, r2
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	602a      	str	r2, [r5, #0]
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	f7f8 fbc3 	bl	8001352 <_write>
 8008bcc:	1c43      	adds	r3, r0, #1
 8008bce:	d102      	bne.n	8008bd6 <_write_r+0x1e>
 8008bd0:	682b      	ldr	r3, [r5, #0]
 8008bd2:	b103      	cbz	r3, 8008bd6 <_write_r+0x1e>
 8008bd4:	6023      	str	r3, [r4, #0]
 8008bd6:	bd38      	pop	{r3, r4, r5, pc}
 8008bd8:	20001bcc 	.word	0x20001bcc

08008bdc <_close_r>:
 8008bdc:	b538      	push	{r3, r4, r5, lr}
 8008bde:	4d06      	ldr	r5, [pc, #24]	; (8008bf8 <_close_r+0x1c>)
 8008be0:	2300      	movs	r3, #0
 8008be2:	4604      	mov	r4, r0
 8008be4:	4608      	mov	r0, r1
 8008be6:	602b      	str	r3, [r5, #0]
 8008be8:	f7f8 fbcf 	bl	800138a <_close>
 8008bec:	1c43      	adds	r3, r0, #1
 8008bee:	d102      	bne.n	8008bf6 <_close_r+0x1a>
 8008bf0:	682b      	ldr	r3, [r5, #0]
 8008bf2:	b103      	cbz	r3, 8008bf6 <_close_r+0x1a>
 8008bf4:	6023      	str	r3, [r4, #0]
 8008bf6:	bd38      	pop	{r3, r4, r5, pc}
 8008bf8:	20001bcc 	.word	0x20001bcc

08008bfc <quorem>:
 8008bfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c00:	6903      	ldr	r3, [r0, #16]
 8008c02:	690c      	ldr	r4, [r1, #16]
 8008c04:	42a3      	cmp	r3, r4
 8008c06:	4607      	mov	r7, r0
 8008c08:	f2c0 8081 	blt.w	8008d0e <quorem+0x112>
 8008c0c:	3c01      	subs	r4, #1
 8008c0e:	f101 0814 	add.w	r8, r1, #20
 8008c12:	f100 0514 	add.w	r5, r0, #20
 8008c16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c1a:	9301      	str	r3, [sp, #4]
 8008c1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008c20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c24:	3301      	adds	r3, #1
 8008c26:	429a      	cmp	r2, r3
 8008c28:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008c2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008c30:	fbb2 f6f3 	udiv	r6, r2, r3
 8008c34:	d331      	bcc.n	8008c9a <quorem+0x9e>
 8008c36:	f04f 0e00 	mov.w	lr, #0
 8008c3a:	4640      	mov	r0, r8
 8008c3c:	46ac      	mov	ip, r5
 8008c3e:	46f2      	mov	sl, lr
 8008c40:	f850 2b04 	ldr.w	r2, [r0], #4
 8008c44:	b293      	uxth	r3, r2
 8008c46:	fb06 e303 	mla	r3, r6, r3, lr
 8008c4a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	ebaa 0303 	sub.w	r3, sl, r3
 8008c54:	f8dc a000 	ldr.w	sl, [ip]
 8008c58:	0c12      	lsrs	r2, r2, #16
 8008c5a:	fa13 f38a 	uxtah	r3, r3, sl
 8008c5e:	fb06 e202 	mla	r2, r6, r2, lr
 8008c62:	9300      	str	r3, [sp, #0]
 8008c64:	9b00      	ldr	r3, [sp, #0]
 8008c66:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008c6a:	b292      	uxth	r2, r2
 8008c6c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008c70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c74:	f8bd 3000 	ldrh.w	r3, [sp]
 8008c78:	4581      	cmp	r9, r0
 8008c7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c7e:	f84c 3b04 	str.w	r3, [ip], #4
 8008c82:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008c86:	d2db      	bcs.n	8008c40 <quorem+0x44>
 8008c88:	f855 300b 	ldr.w	r3, [r5, fp]
 8008c8c:	b92b      	cbnz	r3, 8008c9a <quorem+0x9e>
 8008c8e:	9b01      	ldr	r3, [sp, #4]
 8008c90:	3b04      	subs	r3, #4
 8008c92:	429d      	cmp	r5, r3
 8008c94:	461a      	mov	r2, r3
 8008c96:	d32e      	bcc.n	8008cf6 <quorem+0xfa>
 8008c98:	613c      	str	r4, [r7, #16]
 8008c9a:	4638      	mov	r0, r7
 8008c9c:	f001 f998 	bl	8009fd0 <__mcmp>
 8008ca0:	2800      	cmp	r0, #0
 8008ca2:	db24      	blt.n	8008cee <quorem+0xf2>
 8008ca4:	3601      	adds	r6, #1
 8008ca6:	4628      	mov	r0, r5
 8008ca8:	f04f 0c00 	mov.w	ip, #0
 8008cac:	f858 2b04 	ldr.w	r2, [r8], #4
 8008cb0:	f8d0 e000 	ldr.w	lr, [r0]
 8008cb4:	b293      	uxth	r3, r2
 8008cb6:	ebac 0303 	sub.w	r3, ip, r3
 8008cba:	0c12      	lsrs	r2, r2, #16
 8008cbc:	fa13 f38e 	uxtah	r3, r3, lr
 8008cc0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008cc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008cce:	45c1      	cmp	r9, r8
 8008cd0:	f840 3b04 	str.w	r3, [r0], #4
 8008cd4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008cd8:	d2e8      	bcs.n	8008cac <quorem+0xb0>
 8008cda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008cde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ce2:	b922      	cbnz	r2, 8008cee <quorem+0xf2>
 8008ce4:	3b04      	subs	r3, #4
 8008ce6:	429d      	cmp	r5, r3
 8008ce8:	461a      	mov	r2, r3
 8008cea:	d30a      	bcc.n	8008d02 <quorem+0x106>
 8008cec:	613c      	str	r4, [r7, #16]
 8008cee:	4630      	mov	r0, r6
 8008cf0:	b003      	add	sp, #12
 8008cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cf6:	6812      	ldr	r2, [r2, #0]
 8008cf8:	3b04      	subs	r3, #4
 8008cfa:	2a00      	cmp	r2, #0
 8008cfc:	d1cc      	bne.n	8008c98 <quorem+0x9c>
 8008cfe:	3c01      	subs	r4, #1
 8008d00:	e7c7      	b.n	8008c92 <quorem+0x96>
 8008d02:	6812      	ldr	r2, [r2, #0]
 8008d04:	3b04      	subs	r3, #4
 8008d06:	2a00      	cmp	r2, #0
 8008d08:	d1f0      	bne.n	8008cec <quorem+0xf0>
 8008d0a:	3c01      	subs	r4, #1
 8008d0c:	e7eb      	b.n	8008ce6 <quorem+0xea>
 8008d0e:	2000      	movs	r0, #0
 8008d10:	e7ee      	b.n	8008cf0 <quorem+0xf4>
 8008d12:	0000      	movs	r0, r0
 8008d14:	0000      	movs	r0, r0
	...

08008d18 <_dtoa_r>:
 8008d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d1c:	ed2d 8b04 	vpush	{d8-d9}
 8008d20:	ec57 6b10 	vmov	r6, r7, d0
 8008d24:	b093      	sub	sp, #76	; 0x4c
 8008d26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008d28:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008d2c:	9106      	str	r1, [sp, #24]
 8008d2e:	ee10 aa10 	vmov	sl, s0
 8008d32:	4604      	mov	r4, r0
 8008d34:	9209      	str	r2, [sp, #36]	; 0x24
 8008d36:	930c      	str	r3, [sp, #48]	; 0x30
 8008d38:	46bb      	mov	fp, r7
 8008d3a:	b975      	cbnz	r5, 8008d5a <_dtoa_r+0x42>
 8008d3c:	2010      	movs	r0, #16
 8008d3e:	f000 feb1 	bl	8009aa4 <malloc>
 8008d42:	4602      	mov	r2, r0
 8008d44:	6260      	str	r0, [r4, #36]	; 0x24
 8008d46:	b920      	cbnz	r0, 8008d52 <_dtoa_r+0x3a>
 8008d48:	4ba7      	ldr	r3, [pc, #668]	; (8008fe8 <_dtoa_r+0x2d0>)
 8008d4a:	21ea      	movs	r1, #234	; 0xea
 8008d4c:	48a7      	ldr	r0, [pc, #668]	; (8008fec <_dtoa_r+0x2d4>)
 8008d4e:	f001 fc11 	bl	800a574 <__assert_func>
 8008d52:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008d56:	6005      	str	r5, [r0, #0]
 8008d58:	60c5      	str	r5, [r0, #12]
 8008d5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d5c:	6819      	ldr	r1, [r3, #0]
 8008d5e:	b151      	cbz	r1, 8008d76 <_dtoa_r+0x5e>
 8008d60:	685a      	ldr	r2, [r3, #4]
 8008d62:	604a      	str	r2, [r1, #4]
 8008d64:	2301      	movs	r3, #1
 8008d66:	4093      	lsls	r3, r2
 8008d68:	608b      	str	r3, [r1, #8]
 8008d6a:	4620      	mov	r0, r4
 8008d6c:	f000 feee 	bl	8009b4c <_Bfree>
 8008d70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d72:	2200      	movs	r2, #0
 8008d74:	601a      	str	r2, [r3, #0]
 8008d76:	1e3b      	subs	r3, r7, #0
 8008d78:	bfaa      	itet	ge
 8008d7a:	2300      	movge	r3, #0
 8008d7c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008d80:	f8c8 3000 	strge.w	r3, [r8]
 8008d84:	4b9a      	ldr	r3, [pc, #616]	; (8008ff0 <_dtoa_r+0x2d8>)
 8008d86:	bfbc      	itt	lt
 8008d88:	2201      	movlt	r2, #1
 8008d8a:	f8c8 2000 	strlt.w	r2, [r8]
 8008d8e:	ea33 030b 	bics.w	r3, r3, fp
 8008d92:	d11b      	bne.n	8008dcc <_dtoa_r+0xb4>
 8008d94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d96:	f242 730f 	movw	r3, #9999	; 0x270f
 8008d9a:	6013      	str	r3, [r2, #0]
 8008d9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008da0:	4333      	orrs	r3, r6
 8008da2:	f000 8592 	beq.w	80098ca <_dtoa_r+0xbb2>
 8008da6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008da8:	b963      	cbnz	r3, 8008dc4 <_dtoa_r+0xac>
 8008daa:	4b92      	ldr	r3, [pc, #584]	; (8008ff4 <_dtoa_r+0x2dc>)
 8008dac:	e022      	b.n	8008df4 <_dtoa_r+0xdc>
 8008dae:	4b92      	ldr	r3, [pc, #584]	; (8008ff8 <_dtoa_r+0x2e0>)
 8008db0:	9301      	str	r3, [sp, #4]
 8008db2:	3308      	adds	r3, #8
 8008db4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008db6:	6013      	str	r3, [r2, #0]
 8008db8:	9801      	ldr	r0, [sp, #4]
 8008dba:	b013      	add	sp, #76	; 0x4c
 8008dbc:	ecbd 8b04 	vpop	{d8-d9}
 8008dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dc4:	4b8b      	ldr	r3, [pc, #556]	; (8008ff4 <_dtoa_r+0x2dc>)
 8008dc6:	9301      	str	r3, [sp, #4]
 8008dc8:	3303      	adds	r3, #3
 8008dca:	e7f3      	b.n	8008db4 <_dtoa_r+0x9c>
 8008dcc:	2200      	movs	r2, #0
 8008dce:	2300      	movs	r3, #0
 8008dd0:	4650      	mov	r0, sl
 8008dd2:	4659      	mov	r1, fp
 8008dd4:	f7f7 fe78 	bl	8000ac8 <__aeabi_dcmpeq>
 8008dd8:	ec4b ab19 	vmov	d9, sl, fp
 8008ddc:	4680      	mov	r8, r0
 8008dde:	b158      	cbz	r0, 8008df8 <_dtoa_r+0xe0>
 8008de0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008de2:	2301      	movs	r3, #1
 8008de4:	6013      	str	r3, [r2, #0]
 8008de6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f000 856b 	beq.w	80098c4 <_dtoa_r+0xbac>
 8008dee:	4883      	ldr	r0, [pc, #524]	; (8008ffc <_dtoa_r+0x2e4>)
 8008df0:	6018      	str	r0, [r3, #0]
 8008df2:	1e43      	subs	r3, r0, #1
 8008df4:	9301      	str	r3, [sp, #4]
 8008df6:	e7df      	b.n	8008db8 <_dtoa_r+0xa0>
 8008df8:	ec4b ab10 	vmov	d0, sl, fp
 8008dfc:	aa10      	add	r2, sp, #64	; 0x40
 8008dfe:	a911      	add	r1, sp, #68	; 0x44
 8008e00:	4620      	mov	r0, r4
 8008e02:	f001 f98b 	bl	800a11c <__d2b>
 8008e06:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008e0a:	ee08 0a10 	vmov	s16, r0
 8008e0e:	2d00      	cmp	r5, #0
 8008e10:	f000 8084 	beq.w	8008f1c <_dtoa_r+0x204>
 8008e14:	ee19 3a90 	vmov	r3, s19
 8008e18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e1c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008e20:	4656      	mov	r6, sl
 8008e22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008e26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008e2a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008e2e:	4b74      	ldr	r3, [pc, #464]	; (8009000 <_dtoa_r+0x2e8>)
 8008e30:	2200      	movs	r2, #0
 8008e32:	4630      	mov	r0, r6
 8008e34:	4639      	mov	r1, r7
 8008e36:	f7f7 fa27 	bl	8000288 <__aeabi_dsub>
 8008e3a:	a365      	add	r3, pc, #404	; (adr r3, 8008fd0 <_dtoa_r+0x2b8>)
 8008e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e40:	f7f7 fbda 	bl	80005f8 <__aeabi_dmul>
 8008e44:	a364      	add	r3, pc, #400	; (adr r3, 8008fd8 <_dtoa_r+0x2c0>)
 8008e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4a:	f7f7 fa1f 	bl	800028c <__adddf3>
 8008e4e:	4606      	mov	r6, r0
 8008e50:	4628      	mov	r0, r5
 8008e52:	460f      	mov	r7, r1
 8008e54:	f7f7 fb66 	bl	8000524 <__aeabi_i2d>
 8008e58:	a361      	add	r3, pc, #388	; (adr r3, 8008fe0 <_dtoa_r+0x2c8>)
 8008e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5e:	f7f7 fbcb 	bl	80005f8 <__aeabi_dmul>
 8008e62:	4602      	mov	r2, r0
 8008e64:	460b      	mov	r3, r1
 8008e66:	4630      	mov	r0, r6
 8008e68:	4639      	mov	r1, r7
 8008e6a:	f7f7 fa0f 	bl	800028c <__adddf3>
 8008e6e:	4606      	mov	r6, r0
 8008e70:	460f      	mov	r7, r1
 8008e72:	f7f7 fe71 	bl	8000b58 <__aeabi_d2iz>
 8008e76:	2200      	movs	r2, #0
 8008e78:	9000      	str	r0, [sp, #0]
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	4630      	mov	r0, r6
 8008e7e:	4639      	mov	r1, r7
 8008e80:	f7f7 fe2c 	bl	8000adc <__aeabi_dcmplt>
 8008e84:	b150      	cbz	r0, 8008e9c <_dtoa_r+0x184>
 8008e86:	9800      	ldr	r0, [sp, #0]
 8008e88:	f7f7 fb4c 	bl	8000524 <__aeabi_i2d>
 8008e8c:	4632      	mov	r2, r6
 8008e8e:	463b      	mov	r3, r7
 8008e90:	f7f7 fe1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e94:	b910      	cbnz	r0, 8008e9c <_dtoa_r+0x184>
 8008e96:	9b00      	ldr	r3, [sp, #0]
 8008e98:	3b01      	subs	r3, #1
 8008e9a:	9300      	str	r3, [sp, #0]
 8008e9c:	9b00      	ldr	r3, [sp, #0]
 8008e9e:	2b16      	cmp	r3, #22
 8008ea0:	d85a      	bhi.n	8008f58 <_dtoa_r+0x240>
 8008ea2:	9a00      	ldr	r2, [sp, #0]
 8008ea4:	4b57      	ldr	r3, [pc, #348]	; (8009004 <_dtoa_r+0x2ec>)
 8008ea6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eae:	ec51 0b19 	vmov	r0, r1, d9
 8008eb2:	f7f7 fe13 	bl	8000adc <__aeabi_dcmplt>
 8008eb6:	2800      	cmp	r0, #0
 8008eb8:	d050      	beq.n	8008f5c <_dtoa_r+0x244>
 8008eba:	9b00      	ldr	r3, [sp, #0]
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	9300      	str	r3, [sp, #0]
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ec4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ec6:	1b5d      	subs	r5, r3, r5
 8008ec8:	1e6b      	subs	r3, r5, #1
 8008eca:	9305      	str	r3, [sp, #20]
 8008ecc:	bf45      	ittet	mi
 8008ece:	f1c5 0301 	rsbmi	r3, r5, #1
 8008ed2:	9304      	strmi	r3, [sp, #16]
 8008ed4:	2300      	movpl	r3, #0
 8008ed6:	2300      	movmi	r3, #0
 8008ed8:	bf4c      	ite	mi
 8008eda:	9305      	strmi	r3, [sp, #20]
 8008edc:	9304      	strpl	r3, [sp, #16]
 8008ede:	9b00      	ldr	r3, [sp, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	db3d      	blt.n	8008f60 <_dtoa_r+0x248>
 8008ee4:	9b05      	ldr	r3, [sp, #20]
 8008ee6:	9a00      	ldr	r2, [sp, #0]
 8008ee8:	920a      	str	r2, [sp, #40]	; 0x28
 8008eea:	4413      	add	r3, r2
 8008eec:	9305      	str	r3, [sp, #20]
 8008eee:	2300      	movs	r3, #0
 8008ef0:	9307      	str	r3, [sp, #28]
 8008ef2:	9b06      	ldr	r3, [sp, #24]
 8008ef4:	2b09      	cmp	r3, #9
 8008ef6:	f200 8089 	bhi.w	800900c <_dtoa_r+0x2f4>
 8008efa:	2b05      	cmp	r3, #5
 8008efc:	bfc4      	itt	gt
 8008efe:	3b04      	subgt	r3, #4
 8008f00:	9306      	strgt	r3, [sp, #24]
 8008f02:	9b06      	ldr	r3, [sp, #24]
 8008f04:	f1a3 0302 	sub.w	r3, r3, #2
 8008f08:	bfcc      	ite	gt
 8008f0a:	2500      	movgt	r5, #0
 8008f0c:	2501      	movle	r5, #1
 8008f0e:	2b03      	cmp	r3, #3
 8008f10:	f200 8087 	bhi.w	8009022 <_dtoa_r+0x30a>
 8008f14:	e8df f003 	tbb	[pc, r3]
 8008f18:	59383a2d 	.word	0x59383a2d
 8008f1c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008f20:	441d      	add	r5, r3
 8008f22:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008f26:	2b20      	cmp	r3, #32
 8008f28:	bfc1      	itttt	gt
 8008f2a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008f2e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008f32:	fa0b f303 	lslgt.w	r3, fp, r3
 8008f36:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008f3a:	bfda      	itte	le
 8008f3c:	f1c3 0320 	rsble	r3, r3, #32
 8008f40:	fa06 f003 	lslle.w	r0, r6, r3
 8008f44:	4318      	orrgt	r0, r3
 8008f46:	f7f7 fadd 	bl	8000504 <__aeabi_ui2d>
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	4606      	mov	r6, r0
 8008f4e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008f52:	3d01      	subs	r5, #1
 8008f54:	930e      	str	r3, [sp, #56]	; 0x38
 8008f56:	e76a      	b.n	8008e2e <_dtoa_r+0x116>
 8008f58:	2301      	movs	r3, #1
 8008f5a:	e7b2      	b.n	8008ec2 <_dtoa_r+0x1aa>
 8008f5c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008f5e:	e7b1      	b.n	8008ec4 <_dtoa_r+0x1ac>
 8008f60:	9b04      	ldr	r3, [sp, #16]
 8008f62:	9a00      	ldr	r2, [sp, #0]
 8008f64:	1a9b      	subs	r3, r3, r2
 8008f66:	9304      	str	r3, [sp, #16]
 8008f68:	4253      	negs	r3, r2
 8008f6a:	9307      	str	r3, [sp, #28]
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	930a      	str	r3, [sp, #40]	; 0x28
 8008f70:	e7bf      	b.n	8008ef2 <_dtoa_r+0x1da>
 8008f72:	2300      	movs	r3, #0
 8008f74:	9308      	str	r3, [sp, #32]
 8008f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	dc55      	bgt.n	8009028 <_dtoa_r+0x310>
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008f82:	461a      	mov	r2, r3
 8008f84:	9209      	str	r2, [sp, #36]	; 0x24
 8008f86:	e00c      	b.n	8008fa2 <_dtoa_r+0x28a>
 8008f88:	2301      	movs	r3, #1
 8008f8a:	e7f3      	b.n	8008f74 <_dtoa_r+0x25c>
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f90:	9308      	str	r3, [sp, #32]
 8008f92:	9b00      	ldr	r3, [sp, #0]
 8008f94:	4413      	add	r3, r2
 8008f96:	9302      	str	r3, [sp, #8]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	9303      	str	r3, [sp, #12]
 8008f9e:	bfb8      	it	lt
 8008fa0:	2301      	movlt	r3, #1
 8008fa2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	6042      	str	r2, [r0, #4]
 8008fa8:	2204      	movs	r2, #4
 8008faa:	f102 0614 	add.w	r6, r2, #20
 8008fae:	429e      	cmp	r6, r3
 8008fb0:	6841      	ldr	r1, [r0, #4]
 8008fb2:	d93d      	bls.n	8009030 <_dtoa_r+0x318>
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	f000 fd89 	bl	8009acc <_Balloc>
 8008fba:	9001      	str	r0, [sp, #4]
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	d13b      	bne.n	8009038 <_dtoa_r+0x320>
 8008fc0:	4b11      	ldr	r3, [pc, #68]	; (8009008 <_dtoa_r+0x2f0>)
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008fc8:	e6c0      	b.n	8008d4c <_dtoa_r+0x34>
 8008fca:	2301      	movs	r3, #1
 8008fcc:	e7df      	b.n	8008f8e <_dtoa_r+0x276>
 8008fce:	bf00      	nop
 8008fd0:	636f4361 	.word	0x636f4361
 8008fd4:	3fd287a7 	.word	0x3fd287a7
 8008fd8:	8b60c8b3 	.word	0x8b60c8b3
 8008fdc:	3fc68a28 	.word	0x3fc68a28
 8008fe0:	509f79fb 	.word	0x509f79fb
 8008fe4:	3fd34413 	.word	0x3fd34413
 8008fe8:	0800af31 	.word	0x0800af31
 8008fec:	0800af48 	.word	0x0800af48
 8008ff0:	7ff00000 	.word	0x7ff00000
 8008ff4:	0800af2d 	.word	0x0800af2d
 8008ff8:	0800af24 	.word	0x0800af24
 8008ffc:	0800af01 	.word	0x0800af01
 8009000:	3ff80000 	.word	0x3ff80000
 8009004:	0800b038 	.word	0x0800b038
 8009008:	0800afa3 	.word	0x0800afa3
 800900c:	2501      	movs	r5, #1
 800900e:	2300      	movs	r3, #0
 8009010:	9306      	str	r3, [sp, #24]
 8009012:	9508      	str	r5, [sp, #32]
 8009014:	f04f 33ff 	mov.w	r3, #4294967295
 8009018:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800901c:	2200      	movs	r2, #0
 800901e:	2312      	movs	r3, #18
 8009020:	e7b0      	b.n	8008f84 <_dtoa_r+0x26c>
 8009022:	2301      	movs	r3, #1
 8009024:	9308      	str	r3, [sp, #32]
 8009026:	e7f5      	b.n	8009014 <_dtoa_r+0x2fc>
 8009028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800902a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800902e:	e7b8      	b.n	8008fa2 <_dtoa_r+0x28a>
 8009030:	3101      	adds	r1, #1
 8009032:	6041      	str	r1, [r0, #4]
 8009034:	0052      	lsls	r2, r2, #1
 8009036:	e7b8      	b.n	8008faa <_dtoa_r+0x292>
 8009038:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800903a:	9a01      	ldr	r2, [sp, #4]
 800903c:	601a      	str	r2, [r3, #0]
 800903e:	9b03      	ldr	r3, [sp, #12]
 8009040:	2b0e      	cmp	r3, #14
 8009042:	f200 809d 	bhi.w	8009180 <_dtoa_r+0x468>
 8009046:	2d00      	cmp	r5, #0
 8009048:	f000 809a 	beq.w	8009180 <_dtoa_r+0x468>
 800904c:	9b00      	ldr	r3, [sp, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	dd32      	ble.n	80090b8 <_dtoa_r+0x3a0>
 8009052:	4ab7      	ldr	r2, [pc, #732]	; (8009330 <_dtoa_r+0x618>)
 8009054:	f003 030f 	and.w	r3, r3, #15
 8009058:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800905c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009060:	9b00      	ldr	r3, [sp, #0]
 8009062:	05d8      	lsls	r0, r3, #23
 8009064:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009068:	d516      	bpl.n	8009098 <_dtoa_r+0x380>
 800906a:	4bb2      	ldr	r3, [pc, #712]	; (8009334 <_dtoa_r+0x61c>)
 800906c:	ec51 0b19 	vmov	r0, r1, d9
 8009070:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009074:	f7f7 fbea 	bl	800084c <__aeabi_ddiv>
 8009078:	f007 070f 	and.w	r7, r7, #15
 800907c:	4682      	mov	sl, r0
 800907e:	468b      	mov	fp, r1
 8009080:	2503      	movs	r5, #3
 8009082:	4eac      	ldr	r6, [pc, #688]	; (8009334 <_dtoa_r+0x61c>)
 8009084:	b957      	cbnz	r7, 800909c <_dtoa_r+0x384>
 8009086:	4642      	mov	r2, r8
 8009088:	464b      	mov	r3, r9
 800908a:	4650      	mov	r0, sl
 800908c:	4659      	mov	r1, fp
 800908e:	f7f7 fbdd 	bl	800084c <__aeabi_ddiv>
 8009092:	4682      	mov	sl, r0
 8009094:	468b      	mov	fp, r1
 8009096:	e028      	b.n	80090ea <_dtoa_r+0x3d2>
 8009098:	2502      	movs	r5, #2
 800909a:	e7f2      	b.n	8009082 <_dtoa_r+0x36a>
 800909c:	07f9      	lsls	r1, r7, #31
 800909e:	d508      	bpl.n	80090b2 <_dtoa_r+0x39a>
 80090a0:	4640      	mov	r0, r8
 80090a2:	4649      	mov	r1, r9
 80090a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80090a8:	f7f7 faa6 	bl	80005f8 <__aeabi_dmul>
 80090ac:	3501      	adds	r5, #1
 80090ae:	4680      	mov	r8, r0
 80090b0:	4689      	mov	r9, r1
 80090b2:	107f      	asrs	r7, r7, #1
 80090b4:	3608      	adds	r6, #8
 80090b6:	e7e5      	b.n	8009084 <_dtoa_r+0x36c>
 80090b8:	f000 809b 	beq.w	80091f2 <_dtoa_r+0x4da>
 80090bc:	9b00      	ldr	r3, [sp, #0]
 80090be:	4f9d      	ldr	r7, [pc, #628]	; (8009334 <_dtoa_r+0x61c>)
 80090c0:	425e      	negs	r6, r3
 80090c2:	4b9b      	ldr	r3, [pc, #620]	; (8009330 <_dtoa_r+0x618>)
 80090c4:	f006 020f 	and.w	r2, r6, #15
 80090c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d0:	ec51 0b19 	vmov	r0, r1, d9
 80090d4:	f7f7 fa90 	bl	80005f8 <__aeabi_dmul>
 80090d8:	1136      	asrs	r6, r6, #4
 80090da:	4682      	mov	sl, r0
 80090dc:	468b      	mov	fp, r1
 80090de:	2300      	movs	r3, #0
 80090e0:	2502      	movs	r5, #2
 80090e2:	2e00      	cmp	r6, #0
 80090e4:	d17a      	bne.n	80091dc <_dtoa_r+0x4c4>
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1d3      	bne.n	8009092 <_dtoa_r+0x37a>
 80090ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f000 8082 	beq.w	80091f6 <_dtoa_r+0x4de>
 80090f2:	4b91      	ldr	r3, [pc, #580]	; (8009338 <_dtoa_r+0x620>)
 80090f4:	2200      	movs	r2, #0
 80090f6:	4650      	mov	r0, sl
 80090f8:	4659      	mov	r1, fp
 80090fa:	f7f7 fcef 	bl	8000adc <__aeabi_dcmplt>
 80090fe:	2800      	cmp	r0, #0
 8009100:	d079      	beq.n	80091f6 <_dtoa_r+0x4de>
 8009102:	9b03      	ldr	r3, [sp, #12]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d076      	beq.n	80091f6 <_dtoa_r+0x4de>
 8009108:	9b02      	ldr	r3, [sp, #8]
 800910a:	2b00      	cmp	r3, #0
 800910c:	dd36      	ble.n	800917c <_dtoa_r+0x464>
 800910e:	9b00      	ldr	r3, [sp, #0]
 8009110:	4650      	mov	r0, sl
 8009112:	4659      	mov	r1, fp
 8009114:	1e5f      	subs	r7, r3, #1
 8009116:	2200      	movs	r2, #0
 8009118:	4b88      	ldr	r3, [pc, #544]	; (800933c <_dtoa_r+0x624>)
 800911a:	f7f7 fa6d 	bl	80005f8 <__aeabi_dmul>
 800911e:	9e02      	ldr	r6, [sp, #8]
 8009120:	4682      	mov	sl, r0
 8009122:	468b      	mov	fp, r1
 8009124:	3501      	adds	r5, #1
 8009126:	4628      	mov	r0, r5
 8009128:	f7f7 f9fc 	bl	8000524 <__aeabi_i2d>
 800912c:	4652      	mov	r2, sl
 800912e:	465b      	mov	r3, fp
 8009130:	f7f7 fa62 	bl	80005f8 <__aeabi_dmul>
 8009134:	4b82      	ldr	r3, [pc, #520]	; (8009340 <_dtoa_r+0x628>)
 8009136:	2200      	movs	r2, #0
 8009138:	f7f7 f8a8 	bl	800028c <__adddf3>
 800913c:	46d0      	mov	r8, sl
 800913e:	46d9      	mov	r9, fp
 8009140:	4682      	mov	sl, r0
 8009142:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009146:	2e00      	cmp	r6, #0
 8009148:	d158      	bne.n	80091fc <_dtoa_r+0x4e4>
 800914a:	4b7e      	ldr	r3, [pc, #504]	; (8009344 <_dtoa_r+0x62c>)
 800914c:	2200      	movs	r2, #0
 800914e:	4640      	mov	r0, r8
 8009150:	4649      	mov	r1, r9
 8009152:	f7f7 f899 	bl	8000288 <__aeabi_dsub>
 8009156:	4652      	mov	r2, sl
 8009158:	465b      	mov	r3, fp
 800915a:	4680      	mov	r8, r0
 800915c:	4689      	mov	r9, r1
 800915e:	f7f7 fcdb 	bl	8000b18 <__aeabi_dcmpgt>
 8009162:	2800      	cmp	r0, #0
 8009164:	f040 8295 	bne.w	8009692 <_dtoa_r+0x97a>
 8009168:	4652      	mov	r2, sl
 800916a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800916e:	4640      	mov	r0, r8
 8009170:	4649      	mov	r1, r9
 8009172:	f7f7 fcb3 	bl	8000adc <__aeabi_dcmplt>
 8009176:	2800      	cmp	r0, #0
 8009178:	f040 8289 	bne.w	800968e <_dtoa_r+0x976>
 800917c:	ec5b ab19 	vmov	sl, fp, d9
 8009180:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009182:	2b00      	cmp	r3, #0
 8009184:	f2c0 8148 	blt.w	8009418 <_dtoa_r+0x700>
 8009188:	9a00      	ldr	r2, [sp, #0]
 800918a:	2a0e      	cmp	r2, #14
 800918c:	f300 8144 	bgt.w	8009418 <_dtoa_r+0x700>
 8009190:	4b67      	ldr	r3, [pc, #412]	; (8009330 <_dtoa_r+0x618>)
 8009192:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009196:	e9d3 8900 	ldrd	r8, r9, [r3]
 800919a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800919c:	2b00      	cmp	r3, #0
 800919e:	f280 80d5 	bge.w	800934c <_dtoa_r+0x634>
 80091a2:	9b03      	ldr	r3, [sp, #12]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	f300 80d1 	bgt.w	800934c <_dtoa_r+0x634>
 80091aa:	f040 826f 	bne.w	800968c <_dtoa_r+0x974>
 80091ae:	4b65      	ldr	r3, [pc, #404]	; (8009344 <_dtoa_r+0x62c>)
 80091b0:	2200      	movs	r2, #0
 80091b2:	4640      	mov	r0, r8
 80091b4:	4649      	mov	r1, r9
 80091b6:	f7f7 fa1f 	bl	80005f8 <__aeabi_dmul>
 80091ba:	4652      	mov	r2, sl
 80091bc:	465b      	mov	r3, fp
 80091be:	f7f7 fca1 	bl	8000b04 <__aeabi_dcmpge>
 80091c2:	9e03      	ldr	r6, [sp, #12]
 80091c4:	4637      	mov	r7, r6
 80091c6:	2800      	cmp	r0, #0
 80091c8:	f040 8245 	bne.w	8009656 <_dtoa_r+0x93e>
 80091cc:	9d01      	ldr	r5, [sp, #4]
 80091ce:	2331      	movs	r3, #49	; 0x31
 80091d0:	f805 3b01 	strb.w	r3, [r5], #1
 80091d4:	9b00      	ldr	r3, [sp, #0]
 80091d6:	3301      	adds	r3, #1
 80091d8:	9300      	str	r3, [sp, #0]
 80091da:	e240      	b.n	800965e <_dtoa_r+0x946>
 80091dc:	07f2      	lsls	r2, r6, #31
 80091de:	d505      	bpl.n	80091ec <_dtoa_r+0x4d4>
 80091e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091e4:	f7f7 fa08 	bl	80005f8 <__aeabi_dmul>
 80091e8:	3501      	adds	r5, #1
 80091ea:	2301      	movs	r3, #1
 80091ec:	1076      	asrs	r6, r6, #1
 80091ee:	3708      	adds	r7, #8
 80091f0:	e777      	b.n	80090e2 <_dtoa_r+0x3ca>
 80091f2:	2502      	movs	r5, #2
 80091f4:	e779      	b.n	80090ea <_dtoa_r+0x3d2>
 80091f6:	9f00      	ldr	r7, [sp, #0]
 80091f8:	9e03      	ldr	r6, [sp, #12]
 80091fa:	e794      	b.n	8009126 <_dtoa_r+0x40e>
 80091fc:	9901      	ldr	r1, [sp, #4]
 80091fe:	4b4c      	ldr	r3, [pc, #304]	; (8009330 <_dtoa_r+0x618>)
 8009200:	4431      	add	r1, r6
 8009202:	910d      	str	r1, [sp, #52]	; 0x34
 8009204:	9908      	ldr	r1, [sp, #32]
 8009206:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800920a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800920e:	2900      	cmp	r1, #0
 8009210:	d043      	beq.n	800929a <_dtoa_r+0x582>
 8009212:	494d      	ldr	r1, [pc, #308]	; (8009348 <_dtoa_r+0x630>)
 8009214:	2000      	movs	r0, #0
 8009216:	f7f7 fb19 	bl	800084c <__aeabi_ddiv>
 800921a:	4652      	mov	r2, sl
 800921c:	465b      	mov	r3, fp
 800921e:	f7f7 f833 	bl	8000288 <__aeabi_dsub>
 8009222:	9d01      	ldr	r5, [sp, #4]
 8009224:	4682      	mov	sl, r0
 8009226:	468b      	mov	fp, r1
 8009228:	4649      	mov	r1, r9
 800922a:	4640      	mov	r0, r8
 800922c:	f7f7 fc94 	bl	8000b58 <__aeabi_d2iz>
 8009230:	4606      	mov	r6, r0
 8009232:	f7f7 f977 	bl	8000524 <__aeabi_i2d>
 8009236:	4602      	mov	r2, r0
 8009238:	460b      	mov	r3, r1
 800923a:	4640      	mov	r0, r8
 800923c:	4649      	mov	r1, r9
 800923e:	f7f7 f823 	bl	8000288 <__aeabi_dsub>
 8009242:	3630      	adds	r6, #48	; 0x30
 8009244:	f805 6b01 	strb.w	r6, [r5], #1
 8009248:	4652      	mov	r2, sl
 800924a:	465b      	mov	r3, fp
 800924c:	4680      	mov	r8, r0
 800924e:	4689      	mov	r9, r1
 8009250:	f7f7 fc44 	bl	8000adc <__aeabi_dcmplt>
 8009254:	2800      	cmp	r0, #0
 8009256:	d163      	bne.n	8009320 <_dtoa_r+0x608>
 8009258:	4642      	mov	r2, r8
 800925a:	464b      	mov	r3, r9
 800925c:	4936      	ldr	r1, [pc, #216]	; (8009338 <_dtoa_r+0x620>)
 800925e:	2000      	movs	r0, #0
 8009260:	f7f7 f812 	bl	8000288 <__aeabi_dsub>
 8009264:	4652      	mov	r2, sl
 8009266:	465b      	mov	r3, fp
 8009268:	f7f7 fc38 	bl	8000adc <__aeabi_dcmplt>
 800926c:	2800      	cmp	r0, #0
 800926e:	f040 80b5 	bne.w	80093dc <_dtoa_r+0x6c4>
 8009272:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009274:	429d      	cmp	r5, r3
 8009276:	d081      	beq.n	800917c <_dtoa_r+0x464>
 8009278:	4b30      	ldr	r3, [pc, #192]	; (800933c <_dtoa_r+0x624>)
 800927a:	2200      	movs	r2, #0
 800927c:	4650      	mov	r0, sl
 800927e:	4659      	mov	r1, fp
 8009280:	f7f7 f9ba 	bl	80005f8 <__aeabi_dmul>
 8009284:	4b2d      	ldr	r3, [pc, #180]	; (800933c <_dtoa_r+0x624>)
 8009286:	4682      	mov	sl, r0
 8009288:	468b      	mov	fp, r1
 800928a:	4640      	mov	r0, r8
 800928c:	4649      	mov	r1, r9
 800928e:	2200      	movs	r2, #0
 8009290:	f7f7 f9b2 	bl	80005f8 <__aeabi_dmul>
 8009294:	4680      	mov	r8, r0
 8009296:	4689      	mov	r9, r1
 8009298:	e7c6      	b.n	8009228 <_dtoa_r+0x510>
 800929a:	4650      	mov	r0, sl
 800929c:	4659      	mov	r1, fp
 800929e:	f7f7 f9ab 	bl	80005f8 <__aeabi_dmul>
 80092a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092a4:	9d01      	ldr	r5, [sp, #4]
 80092a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80092a8:	4682      	mov	sl, r0
 80092aa:	468b      	mov	fp, r1
 80092ac:	4649      	mov	r1, r9
 80092ae:	4640      	mov	r0, r8
 80092b0:	f7f7 fc52 	bl	8000b58 <__aeabi_d2iz>
 80092b4:	4606      	mov	r6, r0
 80092b6:	f7f7 f935 	bl	8000524 <__aeabi_i2d>
 80092ba:	3630      	adds	r6, #48	; 0x30
 80092bc:	4602      	mov	r2, r0
 80092be:	460b      	mov	r3, r1
 80092c0:	4640      	mov	r0, r8
 80092c2:	4649      	mov	r1, r9
 80092c4:	f7f6 ffe0 	bl	8000288 <__aeabi_dsub>
 80092c8:	f805 6b01 	strb.w	r6, [r5], #1
 80092cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092ce:	429d      	cmp	r5, r3
 80092d0:	4680      	mov	r8, r0
 80092d2:	4689      	mov	r9, r1
 80092d4:	f04f 0200 	mov.w	r2, #0
 80092d8:	d124      	bne.n	8009324 <_dtoa_r+0x60c>
 80092da:	4b1b      	ldr	r3, [pc, #108]	; (8009348 <_dtoa_r+0x630>)
 80092dc:	4650      	mov	r0, sl
 80092de:	4659      	mov	r1, fp
 80092e0:	f7f6 ffd4 	bl	800028c <__adddf3>
 80092e4:	4602      	mov	r2, r0
 80092e6:	460b      	mov	r3, r1
 80092e8:	4640      	mov	r0, r8
 80092ea:	4649      	mov	r1, r9
 80092ec:	f7f7 fc14 	bl	8000b18 <__aeabi_dcmpgt>
 80092f0:	2800      	cmp	r0, #0
 80092f2:	d173      	bne.n	80093dc <_dtoa_r+0x6c4>
 80092f4:	4652      	mov	r2, sl
 80092f6:	465b      	mov	r3, fp
 80092f8:	4913      	ldr	r1, [pc, #76]	; (8009348 <_dtoa_r+0x630>)
 80092fa:	2000      	movs	r0, #0
 80092fc:	f7f6 ffc4 	bl	8000288 <__aeabi_dsub>
 8009300:	4602      	mov	r2, r0
 8009302:	460b      	mov	r3, r1
 8009304:	4640      	mov	r0, r8
 8009306:	4649      	mov	r1, r9
 8009308:	f7f7 fbe8 	bl	8000adc <__aeabi_dcmplt>
 800930c:	2800      	cmp	r0, #0
 800930e:	f43f af35 	beq.w	800917c <_dtoa_r+0x464>
 8009312:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009314:	1e6b      	subs	r3, r5, #1
 8009316:	930f      	str	r3, [sp, #60]	; 0x3c
 8009318:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800931c:	2b30      	cmp	r3, #48	; 0x30
 800931e:	d0f8      	beq.n	8009312 <_dtoa_r+0x5fa>
 8009320:	9700      	str	r7, [sp, #0]
 8009322:	e049      	b.n	80093b8 <_dtoa_r+0x6a0>
 8009324:	4b05      	ldr	r3, [pc, #20]	; (800933c <_dtoa_r+0x624>)
 8009326:	f7f7 f967 	bl	80005f8 <__aeabi_dmul>
 800932a:	4680      	mov	r8, r0
 800932c:	4689      	mov	r9, r1
 800932e:	e7bd      	b.n	80092ac <_dtoa_r+0x594>
 8009330:	0800b038 	.word	0x0800b038
 8009334:	0800b010 	.word	0x0800b010
 8009338:	3ff00000 	.word	0x3ff00000
 800933c:	40240000 	.word	0x40240000
 8009340:	401c0000 	.word	0x401c0000
 8009344:	40140000 	.word	0x40140000
 8009348:	3fe00000 	.word	0x3fe00000
 800934c:	9d01      	ldr	r5, [sp, #4]
 800934e:	4656      	mov	r6, sl
 8009350:	465f      	mov	r7, fp
 8009352:	4642      	mov	r2, r8
 8009354:	464b      	mov	r3, r9
 8009356:	4630      	mov	r0, r6
 8009358:	4639      	mov	r1, r7
 800935a:	f7f7 fa77 	bl	800084c <__aeabi_ddiv>
 800935e:	f7f7 fbfb 	bl	8000b58 <__aeabi_d2iz>
 8009362:	4682      	mov	sl, r0
 8009364:	f7f7 f8de 	bl	8000524 <__aeabi_i2d>
 8009368:	4642      	mov	r2, r8
 800936a:	464b      	mov	r3, r9
 800936c:	f7f7 f944 	bl	80005f8 <__aeabi_dmul>
 8009370:	4602      	mov	r2, r0
 8009372:	460b      	mov	r3, r1
 8009374:	4630      	mov	r0, r6
 8009376:	4639      	mov	r1, r7
 8009378:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800937c:	f7f6 ff84 	bl	8000288 <__aeabi_dsub>
 8009380:	f805 6b01 	strb.w	r6, [r5], #1
 8009384:	9e01      	ldr	r6, [sp, #4]
 8009386:	9f03      	ldr	r7, [sp, #12]
 8009388:	1bae      	subs	r6, r5, r6
 800938a:	42b7      	cmp	r7, r6
 800938c:	4602      	mov	r2, r0
 800938e:	460b      	mov	r3, r1
 8009390:	d135      	bne.n	80093fe <_dtoa_r+0x6e6>
 8009392:	f7f6 ff7b 	bl	800028c <__adddf3>
 8009396:	4642      	mov	r2, r8
 8009398:	464b      	mov	r3, r9
 800939a:	4606      	mov	r6, r0
 800939c:	460f      	mov	r7, r1
 800939e:	f7f7 fbbb 	bl	8000b18 <__aeabi_dcmpgt>
 80093a2:	b9d0      	cbnz	r0, 80093da <_dtoa_r+0x6c2>
 80093a4:	4642      	mov	r2, r8
 80093a6:	464b      	mov	r3, r9
 80093a8:	4630      	mov	r0, r6
 80093aa:	4639      	mov	r1, r7
 80093ac:	f7f7 fb8c 	bl	8000ac8 <__aeabi_dcmpeq>
 80093b0:	b110      	cbz	r0, 80093b8 <_dtoa_r+0x6a0>
 80093b2:	f01a 0f01 	tst.w	sl, #1
 80093b6:	d110      	bne.n	80093da <_dtoa_r+0x6c2>
 80093b8:	4620      	mov	r0, r4
 80093ba:	ee18 1a10 	vmov	r1, s16
 80093be:	f000 fbc5 	bl	8009b4c <_Bfree>
 80093c2:	2300      	movs	r3, #0
 80093c4:	9800      	ldr	r0, [sp, #0]
 80093c6:	702b      	strb	r3, [r5, #0]
 80093c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093ca:	3001      	adds	r0, #1
 80093cc:	6018      	str	r0, [r3, #0]
 80093ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f43f acf1 	beq.w	8008db8 <_dtoa_r+0xa0>
 80093d6:	601d      	str	r5, [r3, #0]
 80093d8:	e4ee      	b.n	8008db8 <_dtoa_r+0xa0>
 80093da:	9f00      	ldr	r7, [sp, #0]
 80093dc:	462b      	mov	r3, r5
 80093de:	461d      	mov	r5, r3
 80093e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80093e4:	2a39      	cmp	r2, #57	; 0x39
 80093e6:	d106      	bne.n	80093f6 <_dtoa_r+0x6de>
 80093e8:	9a01      	ldr	r2, [sp, #4]
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d1f7      	bne.n	80093de <_dtoa_r+0x6c6>
 80093ee:	9901      	ldr	r1, [sp, #4]
 80093f0:	2230      	movs	r2, #48	; 0x30
 80093f2:	3701      	adds	r7, #1
 80093f4:	700a      	strb	r2, [r1, #0]
 80093f6:	781a      	ldrb	r2, [r3, #0]
 80093f8:	3201      	adds	r2, #1
 80093fa:	701a      	strb	r2, [r3, #0]
 80093fc:	e790      	b.n	8009320 <_dtoa_r+0x608>
 80093fe:	4ba6      	ldr	r3, [pc, #664]	; (8009698 <_dtoa_r+0x980>)
 8009400:	2200      	movs	r2, #0
 8009402:	f7f7 f8f9 	bl	80005f8 <__aeabi_dmul>
 8009406:	2200      	movs	r2, #0
 8009408:	2300      	movs	r3, #0
 800940a:	4606      	mov	r6, r0
 800940c:	460f      	mov	r7, r1
 800940e:	f7f7 fb5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009412:	2800      	cmp	r0, #0
 8009414:	d09d      	beq.n	8009352 <_dtoa_r+0x63a>
 8009416:	e7cf      	b.n	80093b8 <_dtoa_r+0x6a0>
 8009418:	9a08      	ldr	r2, [sp, #32]
 800941a:	2a00      	cmp	r2, #0
 800941c:	f000 80d7 	beq.w	80095ce <_dtoa_r+0x8b6>
 8009420:	9a06      	ldr	r2, [sp, #24]
 8009422:	2a01      	cmp	r2, #1
 8009424:	f300 80ba 	bgt.w	800959c <_dtoa_r+0x884>
 8009428:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800942a:	2a00      	cmp	r2, #0
 800942c:	f000 80b2 	beq.w	8009594 <_dtoa_r+0x87c>
 8009430:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009434:	9e07      	ldr	r6, [sp, #28]
 8009436:	9d04      	ldr	r5, [sp, #16]
 8009438:	9a04      	ldr	r2, [sp, #16]
 800943a:	441a      	add	r2, r3
 800943c:	9204      	str	r2, [sp, #16]
 800943e:	9a05      	ldr	r2, [sp, #20]
 8009440:	2101      	movs	r1, #1
 8009442:	441a      	add	r2, r3
 8009444:	4620      	mov	r0, r4
 8009446:	9205      	str	r2, [sp, #20]
 8009448:	f000 fc38 	bl	8009cbc <__i2b>
 800944c:	4607      	mov	r7, r0
 800944e:	2d00      	cmp	r5, #0
 8009450:	dd0c      	ble.n	800946c <_dtoa_r+0x754>
 8009452:	9b05      	ldr	r3, [sp, #20]
 8009454:	2b00      	cmp	r3, #0
 8009456:	dd09      	ble.n	800946c <_dtoa_r+0x754>
 8009458:	42ab      	cmp	r3, r5
 800945a:	9a04      	ldr	r2, [sp, #16]
 800945c:	bfa8      	it	ge
 800945e:	462b      	movge	r3, r5
 8009460:	1ad2      	subs	r2, r2, r3
 8009462:	9204      	str	r2, [sp, #16]
 8009464:	9a05      	ldr	r2, [sp, #20]
 8009466:	1aed      	subs	r5, r5, r3
 8009468:	1ad3      	subs	r3, r2, r3
 800946a:	9305      	str	r3, [sp, #20]
 800946c:	9b07      	ldr	r3, [sp, #28]
 800946e:	b31b      	cbz	r3, 80094b8 <_dtoa_r+0x7a0>
 8009470:	9b08      	ldr	r3, [sp, #32]
 8009472:	2b00      	cmp	r3, #0
 8009474:	f000 80af 	beq.w	80095d6 <_dtoa_r+0x8be>
 8009478:	2e00      	cmp	r6, #0
 800947a:	dd13      	ble.n	80094a4 <_dtoa_r+0x78c>
 800947c:	4639      	mov	r1, r7
 800947e:	4632      	mov	r2, r6
 8009480:	4620      	mov	r0, r4
 8009482:	f000 fcdb 	bl	8009e3c <__pow5mult>
 8009486:	ee18 2a10 	vmov	r2, s16
 800948a:	4601      	mov	r1, r0
 800948c:	4607      	mov	r7, r0
 800948e:	4620      	mov	r0, r4
 8009490:	f000 fc2a 	bl	8009ce8 <__multiply>
 8009494:	ee18 1a10 	vmov	r1, s16
 8009498:	4680      	mov	r8, r0
 800949a:	4620      	mov	r0, r4
 800949c:	f000 fb56 	bl	8009b4c <_Bfree>
 80094a0:	ee08 8a10 	vmov	s16, r8
 80094a4:	9b07      	ldr	r3, [sp, #28]
 80094a6:	1b9a      	subs	r2, r3, r6
 80094a8:	d006      	beq.n	80094b8 <_dtoa_r+0x7a0>
 80094aa:	ee18 1a10 	vmov	r1, s16
 80094ae:	4620      	mov	r0, r4
 80094b0:	f000 fcc4 	bl	8009e3c <__pow5mult>
 80094b4:	ee08 0a10 	vmov	s16, r0
 80094b8:	2101      	movs	r1, #1
 80094ba:	4620      	mov	r0, r4
 80094bc:	f000 fbfe 	bl	8009cbc <__i2b>
 80094c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	4606      	mov	r6, r0
 80094c6:	f340 8088 	ble.w	80095da <_dtoa_r+0x8c2>
 80094ca:	461a      	mov	r2, r3
 80094cc:	4601      	mov	r1, r0
 80094ce:	4620      	mov	r0, r4
 80094d0:	f000 fcb4 	bl	8009e3c <__pow5mult>
 80094d4:	9b06      	ldr	r3, [sp, #24]
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	4606      	mov	r6, r0
 80094da:	f340 8081 	ble.w	80095e0 <_dtoa_r+0x8c8>
 80094de:	f04f 0800 	mov.w	r8, #0
 80094e2:	6933      	ldr	r3, [r6, #16]
 80094e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80094e8:	6918      	ldr	r0, [r3, #16]
 80094ea:	f000 fb97 	bl	8009c1c <__hi0bits>
 80094ee:	f1c0 0020 	rsb	r0, r0, #32
 80094f2:	9b05      	ldr	r3, [sp, #20]
 80094f4:	4418      	add	r0, r3
 80094f6:	f010 001f 	ands.w	r0, r0, #31
 80094fa:	f000 8092 	beq.w	8009622 <_dtoa_r+0x90a>
 80094fe:	f1c0 0320 	rsb	r3, r0, #32
 8009502:	2b04      	cmp	r3, #4
 8009504:	f340 808a 	ble.w	800961c <_dtoa_r+0x904>
 8009508:	f1c0 001c 	rsb	r0, r0, #28
 800950c:	9b04      	ldr	r3, [sp, #16]
 800950e:	4403      	add	r3, r0
 8009510:	9304      	str	r3, [sp, #16]
 8009512:	9b05      	ldr	r3, [sp, #20]
 8009514:	4403      	add	r3, r0
 8009516:	4405      	add	r5, r0
 8009518:	9305      	str	r3, [sp, #20]
 800951a:	9b04      	ldr	r3, [sp, #16]
 800951c:	2b00      	cmp	r3, #0
 800951e:	dd07      	ble.n	8009530 <_dtoa_r+0x818>
 8009520:	ee18 1a10 	vmov	r1, s16
 8009524:	461a      	mov	r2, r3
 8009526:	4620      	mov	r0, r4
 8009528:	f000 fce2 	bl	8009ef0 <__lshift>
 800952c:	ee08 0a10 	vmov	s16, r0
 8009530:	9b05      	ldr	r3, [sp, #20]
 8009532:	2b00      	cmp	r3, #0
 8009534:	dd05      	ble.n	8009542 <_dtoa_r+0x82a>
 8009536:	4631      	mov	r1, r6
 8009538:	461a      	mov	r2, r3
 800953a:	4620      	mov	r0, r4
 800953c:	f000 fcd8 	bl	8009ef0 <__lshift>
 8009540:	4606      	mov	r6, r0
 8009542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009544:	2b00      	cmp	r3, #0
 8009546:	d06e      	beq.n	8009626 <_dtoa_r+0x90e>
 8009548:	ee18 0a10 	vmov	r0, s16
 800954c:	4631      	mov	r1, r6
 800954e:	f000 fd3f 	bl	8009fd0 <__mcmp>
 8009552:	2800      	cmp	r0, #0
 8009554:	da67      	bge.n	8009626 <_dtoa_r+0x90e>
 8009556:	9b00      	ldr	r3, [sp, #0]
 8009558:	3b01      	subs	r3, #1
 800955a:	ee18 1a10 	vmov	r1, s16
 800955e:	9300      	str	r3, [sp, #0]
 8009560:	220a      	movs	r2, #10
 8009562:	2300      	movs	r3, #0
 8009564:	4620      	mov	r0, r4
 8009566:	f000 fb13 	bl	8009b90 <__multadd>
 800956a:	9b08      	ldr	r3, [sp, #32]
 800956c:	ee08 0a10 	vmov	s16, r0
 8009570:	2b00      	cmp	r3, #0
 8009572:	f000 81b1 	beq.w	80098d8 <_dtoa_r+0xbc0>
 8009576:	2300      	movs	r3, #0
 8009578:	4639      	mov	r1, r7
 800957a:	220a      	movs	r2, #10
 800957c:	4620      	mov	r0, r4
 800957e:	f000 fb07 	bl	8009b90 <__multadd>
 8009582:	9b02      	ldr	r3, [sp, #8]
 8009584:	2b00      	cmp	r3, #0
 8009586:	4607      	mov	r7, r0
 8009588:	f300 808e 	bgt.w	80096a8 <_dtoa_r+0x990>
 800958c:	9b06      	ldr	r3, [sp, #24]
 800958e:	2b02      	cmp	r3, #2
 8009590:	dc51      	bgt.n	8009636 <_dtoa_r+0x91e>
 8009592:	e089      	b.n	80096a8 <_dtoa_r+0x990>
 8009594:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009596:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800959a:	e74b      	b.n	8009434 <_dtoa_r+0x71c>
 800959c:	9b03      	ldr	r3, [sp, #12]
 800959e:	1e5e      	subs	r6, r3, #1
 80095a0:	9b07      	ldr	r3, [sp, #28]
 80095a2:	42b3      	cmp	r3, r6
 80095a4:	bfbf      	itttt	lt
 80095a6:	9b07      	ldrlt	r3, [sp, #28]
 80095a8:	9607      	strlt	r6, [sp, #28]
 80095aa:	1af2      	sublt	r2, r6, r3
 80095ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80095ae:	bfb6      	itet	lt
 80095b0:	189b      	addlt	r3, r3, r2
 80095b2:	1b9e      	subge	r6, r3, r6
 80095b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80095b6:	9b03      	ldr	r3, [sp, #12]
 80095b8:	bfb8      	it	lt
 80095ba:	2600      	movlt	r6, #0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	bfb7      	itett	lt
 80095c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80095c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80095c8:	1a9d      	sublt	r5, r3, r2
 80095ca:	2300      	movlt	r3, #0
 80095cc:	e734      	b.n	8009438 <_dtoa_r+0x720>
 80095ce:	9e07      	ldr	r6, [sp, #28]
 80095d0:	9d04      	ldr	r5, [sp, #16]
 80095d2:	9f08      	ldr	r7, [sp, #32]
 80095d4:	e73b      	b.n	800944e <_dtoa_r+0x736>
 80095d6:	9a07      	ldr	r2, [sp, #28]
 80095d8:	e767      	b.n	80094aa <_dtoa_r+0x792>
 80095da:	9b06      	ldr	r3, [sp, #24]
 80095dc:	2b01      	cmp	r3, #1
 80095de:	dc18      	bgt.n	8009612 <_dtoa_r+0x8fa>
 80095e0:	f1ba 0f00 	cmp.w	sl, #0
 80095e4:	d115      	bne.n	8009612 <_dtoa_r+0x8fa>
 80095e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80095ea:	b993      	cbnz	r3, 8009612 <_dtoa_r+0x8fa>
 80095ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80095f0:	0d1b      	lsrs	r3, r3, #20
 80095f2:	051b      	lsls	r3, r3, #20
 80095f4:	b183      	cbz	r3, 8009618 <_dtoa_r+0x900>
 80095f6:	9b04      	ldr	r3, [sp, #16]
 80095f8:	3301      	adds	r3, #1
 80095fa:	9304      	str	r3, [sp, #16]
 80095fc:	9b05      	ldr	r3, [sp, #20]
 80095fe:	3301      	adds	r3, #1
 8009600:	9305      	str	r3, [sp, #20]
 8009602:	f04f 0801 	mov.w	r8, #1
 8009606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009608:	2b00      	cmp	r3, #0
 800960a:	f47f af6a 	bne.w	80094e2 <_dtoa_r+0x7ca>
 800960e:	2001      	movs	r0, #1
 8009610:	e76f      	b.n	80094f2 <_dtoa_r+0x7da>
 8009612:	f04f 0800 	mov.w	r8, #0
 8009616:	e7f6      	b.n	8009606 <_dtoa_r+0x8ee>
 8009618:	4698      	mov	r8, r3
 800961a:	e7f4      	b.n	8009606 <_dtoa_r+0x8ee>
 800961c:	f43f af7d 	beq.w	800951a <_dtoa_r+0x802>
 8009620:	4618      	mov	r0, r3
 8009622:	301c      	adds	r0, #28
 8009624:	e772      	b.n	800950c <_dtoa_r+0x7f4>
 8009626:	9b03      	ldr	r3, [sp, #12]
 8009628:	2b00      	cmp	r3, #0
 800962a:	dc37      	bgt.n	800969c <_dtoa_r+0x984>
 800962c:	9b06      	ldr	r3, [sp, #24]
 800962e:	2b02      	cmp	r3, #2
 8009630:	dd34      	ble.n	800969c <_dtoa_r+0x984>
 8009632:	9b03      	ldr	r3, [sp, #12]
 8009634:	9302      	str	r3, [sp, #8]
 8009636:	9b02      	ldr	r3, [sp, #8]
 8009638:	b96b      	cbnz	r3, 8009656 <_dtoa_r+0x93e>
 800963a:	4631      	mov	r1, r6
 800963c:	2205      	movs	r2, #5
 800963e:	4620      	mov	r0, r4
 8009640:	f000 faa6 	bl	8009b90 <__multadd>
 8009644:	4601      	mov	r1, r0
 8009646:	4606      	mov	r6, r0
 8009648:	ee18 0a10 	vmov	r0, s16
 800964c:	f000 fcc0 	bl	8009fd0 <__mcmp>
 8009650:	2800      	cmp	r0, #0
 8009652:	f73f adbb 	bgt.w	80091cc <_dtoa_r+0x4b4>
 8009656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009658:	9d01      	ldr	r5, [sp, #4]
 800965a:	43db      	mvns	r3, r3
 800965c:	9300      	str	r3, [sp, #0]
 800965e:	f04f 0800 	mov.w	r8, #0
 8009662:	4631      	mov	r1, r6
 8009664:	4620      	mov	r0, r4
 8009666:	f000 fa71 	bl	8009b4c <_Bfree>
 800966a:	2f00      	cmp	r7, #0
 800966c:	f43f aea4 	beq.w	80093b8 <_dtoa_r+0x6a0>
 8009670:	f1b8 0f00 	cmp.w	r8, #0
 8009674:	d005      	beq.n	8009682 <_dtoa_r+0x96a>
 8009676:	45b8      	cmp	r8, r7
 8009678:	d003      	beq.n	8009682 <_dtoa_r+0x96a>
 800967a:	4641      	mov	r1, r8
 800967c:	4620      	mov	r0, r4
 800967e:	f000 fa65 	bl	8009b4c <_Bfree>
 8009682:	4639      	mov	r1, r7
 8009684:	4620      	mov	r0, r4
 8009686:	f000 fa61 	bl	8009b4c <_Bfree>
 800968a:	e695      	b.n	80093b8 <_dtoa_r+0x6a0>
 800968c:	2600      	movs	r6, #0
 800968e:	4637      	mov	r7, r6
 8009690:	e7e1      	b.n	8009656 <_dtoa_r+0x93e>
 8009692:	9700      	str	r7, [sp, #0]
 8009694:	4637      	mov	r7, r6
 8009696:	e599      	b.n	80091cc <_dtoa_r+0x4b4>
 8009698:	40240000 	.word	0x40240000
 800969c:	9b08      	ldr	r3, [sp, #32]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	f000 80ca 	beq.w	8009838 <_dtoa_r+0xb20>
 80096a4:	9b03      	ldr	r3, [sp, #12]
 80096a6:	9302      	str	r3, [sp, #8]
 80096a8:	2d00      	cmp	r5, #0
 80096aa:	dd05      	ble.n	80096b8 <_dtoa_r+0x9a0>
 80096ac:	4639      	mov	r1, r7
 80096ae:	462a      	mov	r2, r5
 80096b0:	4620      	mov	r0, r4
 80096b2:	f000 fc1d 	bl	8009ef0 <__lshift>
 80096b6:	4607      	mov	r7, r0
 80096b8:	f1b8 0f00 	cmp.w	r8, #0
 80096bc:	d05b      	beq.n	8009776 <_dtoa_r+0xa5e>
 80096be:	6879      	ldr	r1, [r7, #4]
 80096c0:	4620      	mov	r0, r4
 80096c2:	f000 fa03 	bl	8009acc <_Balloc>
 80096c6:	4605      	mov	r5, r0
 80096c8:	b928      	cbnz	r0, 80096d6 <_dtoa_r+0x9be>
 80096ca:	4b87      	ldr	r3, [pc, #540]	; (80098e8 <_dtoa_r+0xbd0>)
 80096cc:	4602      	mov	r2, r0
 80096ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80096d2:	f7ff bb3b 	b.w	8008d4c <_dtoa_r+0x34>
 80096d6:	693a      	ldr	r2, [r7, #16]
 80096d8:	3202      	adds	r2, #2
 80096da:	0092      	lsls	r2, r2, #2
 80096dc:	f107 010c 	add.w	r1, r7, #12
 80096e0:	300c      	adds	r0, #12
 80096e2:	f7fe fc76 	bl	8007fd2 <memcpy>
 80096e6:	2201      	movs	r2, #1
 80096e8:	4629      	mov	r1, r5
 80096ea:	4620      	mov	r0, r4
 80096ec:	f000 fc00 	bl	8009ef0 <__lshift>
 80096f0:	9b01      	ldr	r3, [sp, #4]
 80096f2:	f103 0901 	add.w	r9, r3, #1
 80096f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80096fa:	4413      	add	r3, r2
 80096fc:	9305      	str	r3, [sp, #20]
 80096fe:	f00a 0301 	and.w	r3, sl, #1
 8009702:	46b8      	mov	r8, r7
 8009704:	9304      	str	r3, [sp, #16]
 8009706:	4607      	mov	r7, r0
 8009708:	4631      	mov	r1, r6
 800970a:	ee18 0a10 	vmov	r0, s16
 800970e:	f7ff fa75 	bl	8008bfc <quorem>
 8009712:	4641      	mov	r1, r8
 8009714:	9002      	str	r0, [sp, #8]
 8009716:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800971a:	ee18 0a10 	vmov	r0, s16
 800971e:	f000 fc57 	bl	8009fd0 <__mcmp>
 8009722:	463a      	mov	r2, r7
 8009724:	9003      	str	r0, [sp, #12]
 8009726:	4631      	mov	r1, r6
 8009728:	4620      	mov	r0, r4
 800972a:	f000 fc6d 	bl	800a008 <__mdiff>
 800972e:	68c2      	ldr	r2, [r0, #12]
 8009730:	f109 3bff 	add.w	fp, r9, #4294967295
 8009734:	4605      	mov	r5, r0
 8009736:	bb02      	cbnz	r2, 800977a <_dtoa_r+0xa62>
 8009738:	4601      	mov	r1, r0
 800973a:	ee18 0a10 	vmov	r0, s16
 800973e:	f000 fc47 	bl	8009fd0 <__mcmp>
 8009742:	4602      	mov	r2, r0
 8009744:	4629      	mov	r1, r5
 8009746:	4620      	mov	r0, r4
 8009748:	9207      	str	r2, [sp, #28]
 800974a:	f000 f9ff 	bl	8009b4c <_Bfree>
 800974e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009752:	ea43 0102 	orr.w	r1, r3, r2
 8009756:	9b04      	ldr	r3, [sp, #16]
 8009758:	430b      	orrs	r3, r1
 800975a:	464d      	mov	r5, r9
 800975c:	d10f      	bne.n	800977e <_dtoa_r+0xa66>
 800975e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009762:	d02a      	beq.n	80097ba <_dtoa_r+0xaa2>
 8009764:	9b03      	ldr	r3, [sp, #12]
 8009766:	2b00      	cmp	r3, #0
 8009768:	dd02      	ble.n	8009770 <_dtoa_r+0xa58>
 800976a:	9b02      	ldr	r3, [sp, #8]
 800976c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009770:	f88b a000 	strb.w	sl, [fp]
 8009774:	e775      	b.n	8009662 <_dtoa_r+0x94a>
 8009776:	4638      	mov	r0, r7
 8009778:	e7ba      	b.n	80096f0 <_dtoa_r+0x9d8>
 800977a:	2201      	movs	r2, #1
 800977c:	e7e2      	b.n	8009744 <_dtoa_r+0xa2c>
 800977e:	9b03      	ldr	r3, [sp, #12]
 8009780:	2b00      	cmp	r3, #0
 8009782:	db04      	blt.n	800978e <_dtoa_r+0xa76>
 8009784:	9906      	ldr	r1, [sp, #24]
 8009786:	430b      	orrs	r3, r1
 8009788:	9904      	ldr	r1, [sp, #16]
 800978a:	430b      	orrs	r3, r1
 800978c:	d122      	bne.n	80097d4 <_dtoa_r+0xabc>
 800978e:	2a00      	cmp	r2, #0
 8009790:	ddee      	ble.n	8009770 <_dtoa_r+0xa58>
 8009792:	ee18 1a10 	vmov	r1, s16
 8009796:	2201      	movs	r2, #1
 8009798:	4620      	mov	r0, r4
 800979a:	f000 fba9 	bl	8009ef0 <__lshift>
 800979e:	4631      	mov	r1, r6
 80097a0:	ee08 0a10 	vmov	s16, r0
 80097a4:	f000 fc14 	bl	8009fd0 <__mcmp>
 80097a8:	2800      	cmp	r0, #0
 80097aa:	dc03      	bgt.n	80097b4 <_dtoa_r+0xa9c>
 80097ac:	d1e0      	bne.n	8009770 <_dtoa_r+0xa58>
 80097ae:	f01a 0f01 	tst.w	sl, #1
 80097b2:	d0dd      	beq.n	8009770 <_dtoa_r+0xa58>
 80097b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80097b8:	d1d7      	bne.n	800976a <_dtoa_r+0xa52>
 80097ba:	2339      	movs	r3, #57	; 0x39
 80097bc:	f88b 3000 	strb.w	r3, [fp]
 80097c0:	462b      	mov	r3, r5
 80097c2:	461d      	mov	r5, r3
 80097c4:	3b01      	subs	r3, #1
 80097c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80097ca:	2a39      	cmp	r2, #57	; 0x39
 80097cc:	d071      	beq.n	80098b2 <_dtoa_r+0xb9a>
 80097ce:	3201      	adds	r2, #1
 80097d0:	701a      	strb	r2, [r3, #0]
 80097d2:	e746      	b.n	8009662 <_dtoa_r+0x94a>
 80097d4:	2a00      	cmp	r2, #0
 80097d6:	dd07      	ble.n	80097e8 <_dtoa_r+0xad0>
 80097d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80097dc:	d0ed      	beq.n	80097ba <_dtoa_r+0xaa2>
 80097de:	f10a 0301 	add.w	r3, sl, #1
 80097e2:	f88b 3000 	strb.w	r3, [fp]
 80097e6:	e73c      	b.n	8009662 <_dtoa_r+0x94a>
 80097e8:	9b05      	ldr	r3, [sp, #20]
 80097ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 80097ee:	4599      	cmp	r9, r3
 80097f0:	d047      	beq.n	8009882 <_dtoa_r+0xb6a>
 80097f2:	ee18 1a10 	vmov	r1, s16
 80097f6:	2300      	movs	r3, #0
 80097f8:	220a      	movs	r2, #10
 80097fa:	4620      	mov	r0, r4
 80097fc:	f000 f9c8 	bl	8009b90 <__multadd>
 8009800:	45b8      	cmp	r8, r7
 8009802:	ee08 0a10 	vmov	s16, r0
 8009806:	f04f 0300 	mov.w	r3, #0
 800980a:	f04f 020a 	mov.w	r2, #10
 800980e:	4641      	mov	r1, r8
 8009810:	4620      	mov	r0, r4
 8009812:	d106      	bne.n	8009822 <_dtoa_r+0xb0a>
 8009814:	f000 f9bc 	bl	8009b90 <__multadd>
 8009818:	4680      	mov	r8, r0
 800981a:	4607      	mov	r7, r0
 800981c:	f109 0901 	add.w	r9, r9, #1
 8009820:	e772      	b.n	8009708 <_dtoa_r+0x9f0>
 8009822:	f000 f9b5 	bl	8009b90 <__multadd>
 8009826:	4639      	mov	r1, r7
 8009828:	4680      	mov	r8, r0
 800982a:	2300      	movs	r3, #0
 800982c:	220a      	movs	r2, #10
 800982e:	4620      	mov	r0, r4
 8009830:	f000 f9ae 	bl	8009b90 <__multadd>
 8009834:	4607      	mov	r7, r0
 8009836:	e7f1      	b.n	800981c <_dtoa_r+0xb04>
 8009838:	9b03      	ldr	r3, [sp, #12]
 800983a:	9302      	str	r3, [sp, #8]
 800983c:	9d01      	ldr	r5, [sp, #4]
 800983e:	ee18 0a10 	vmov	r0, s16
 8009842:	4631      	mov	r1, r6
 8009844:	f7ff f9da 	bl	8008bfc <quorem>
 8009848:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800984c:	9b01      	ldr	r3, [sp, #4]
 800984e:	f805 ab01 	strb.w	sl, [r5], #1
 8009852:	1aea      	subs	r2, r5, r3
 8009854:	9b02      	ldr	r3, [sp, #8]
 8009856:	4293      	cmp	r3, r2
 8009858:	dd09      	ble.n	800986e <_dtoa_r+0xb56>
 800985a:	ee18 1a10 	vmov	r1, s16
 800985e:	2300      	movs	r3, #0
 8009860:	220a      	movs	r2, #10
 8009862:	4620      	mov	r0, r4
 8009864:	f000 f994 	bl	8009b90 <__multadd>
 8009868:	ee08 0a10 	vmov	s16, r0
 800986c:	e7e7      	b.n	800983e <_dtoa_r+0xb26>
 800986e:	9b02      	ldr	r3, [sp, #8]
 8009870:	2b00      	cmp	r3, #0
 8009872:	bfc8      	it	gt
 8009874:	461d      	movgt	r5, r3
 8009876:	9b01      	ldr	r3, [sp, #4]
 8009878:	bfd8      	it	le
 800987a:	2501      	movle	r5, #1
 800987c:	441d      	add	r5, r3
 800987e:	f04f 0800 	mov.w	r8, #0
 8009882:	ee18 1a10 	vmov	r1, s16
 8009886:	2201      	movs	r2, #1
 8009888:	4620      	mov	r0, r4
 800988a:	f000 fb31 	bl	8009ef0 <__lshift>
 800988e:	4631      	mov	r1, r6
 8009890:	ee08 0a10 	vmov	s16, r0
 8009894:	f000 fb9c 	bl	8009fd0 <__mcmp>
 8009898:	2800      	cmp	r0, #0
 800989a:	dc91      	bgt.n	80097c0 <_dtoa_r+0xaa8>
 800989c:	d102      	bne.n	80098a4 <_dtoa_r+0xb8c>
 800989e:	f01a 0f01 	tst.w	sl, #1
 80098a2:	d18d      	bne.n	80097c0 <_dtoa_r+0xaa8>
 80098a4:	462b      	mov	r3, r5
 80098a6:	461d      	mov	r5, r3
 80098a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098ac:	2a30      	cmp	r2, #48	; 0x30
 80098ae:	d0fa      	beq.n	80098a6 <_dtoa_r+0xb8e>
 80098b0:	e6d7      	b.n	8009662 <_dtoa_r+0x94a>
 80098b2:	9a01      	ldr	r2, [sp, #4]
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d184      	bne.n	80097c2 <_dtoa_r+0xaaa>
 80098b8:	9b00      	ldr	r3, [sp, #0]
 80098ba:	3301      	adds	r3, #1
 80098bc:	9300      	str	r3, [sp, #0]
 80098be:	2331      	movs	r3, #49	; 0x31
 80098c0:	7013      	strb	r3, [r2, #0]
 80098c2:	e6ce      	b.n	8009662 <_dtoa_r+0x94a>
 80098c4:	4b09      	ldr	r3, [pc, #36]	; (80098ec <_dtoa_r+0xbd4>)
 80098c6:	f7ff ba95 	b.w	8008df4 <_dtoa_r+0xdc>
 80098ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	f47f aa6e 	bne.w	8008dae <_dtoa_r+0x96>
 80098d2:	4b07      	ldr	r3, [pc, #28]	; (80098f0 <_dtoa_r+0xbd8>)
 80098d4:	f7ff ba8e 	b.w	8008df4 <_dtoa_r+0xdc>
 80098d8:	9b02      	ldr	r3, [sp, #8]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	dcae      	bgt.n	800983c <_dtoa_r+0xb24>
 80098de:	9b06      	ldr	r3, [sp, #24]
 80098e0:	2b02      	cmp	r3, #2
 80098e2:	f73f aea8 	bgt.w	8009636 <_dtoa_r+0x91e>
 80098e6:	e7a9      	b.n	800983c <_dtoa_r+0xb24>
 80098e8:	0800afa3 	.word	0x0800afa3
 80098ec:	0800af00 	.word	0x0800af00
 80098f0:	0800af24 	.word	0x0800af24

080098f4 <__sflush_r>:
 80098f4:	898a      	ldrh	r2, [r1, #12]
 80098f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098fa:	4605      	mov	r5, r0
 80098fc:	0710      	lsls	r0, r2, #28
 80098fe:	460c      	mov	r4, r1
 8009900:	d458      	bmi.n	80099b4 <__sflush_r+0xc0>
 8009902:	684b      	ldr	r3, [r1, #4]
 8009904:	2b00      	cmp	r3, #0
 8009906:	dc05      	bgt.n	8009914 <__sflush_r+0x20>
 8009908:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800990a:	2b00      	cmp	r3, #0
 800990c:	dc02      	bgt.n	8009914 <__sflush_r+0x20>
 800990e:	2000      	movs	r0, #0
 8009910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009914:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009916:	2e00      	cmp	r6, #0
 8009918:	d0f9      	beq.n	800990e <__sflush_r+0x1a>
 800991a:	2300      	movs	r3, #0
 800991c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009920:	682f      	ldr	r7, [r5, #0]
 8009922:	602b      	str	r3, [r5, #0]
 8009924:	d032      	beq.n	800998c <__sflush_r+0x98>
 8009926:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009928:	89a3      	ldrh	r3, [r4, #12]
 800992a:	075a      	lsls	r2, r3, #29
 800992c:	d505      	bpl.n	800993a <__sflush_r+0x46>
 800992e:	6863      	ldr	r3, [r4, #4]
 8009930:	1ac0      	subs	r0, r0, r3
 8009932:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009934:	b10b      	cbz	r3, 800993a <__sflush_r+0x46>
 8009936:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009938:	1ac0      	subs	r0, r0, r3
 800993a:	2300      	movs	r3, #0
 800993c:	4602      	mov	r2, r0
 800993e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009940:	6a21      	ldr	r1, [r4, #32]
 8009942:	4628      	mov	r0, r5
 8009944:	47b0      	blx	r6
 8009946:	1c43      	adds	r3, r0, #1
 8009948:	89a3      	ldrh	r3, [r4, #12]
 800994a:	d106      	bne.n	800995a <__sflush_r+0x66>
 800994c:	6829      	ldr	r1, [r5, #0]
 800994e:	291d      	cmp	r1, #29
 8009950:	d82c      	bhi.n	80099ac <__sflush_r+0xb8>
 8009952:	4a2a      	ldr	r2, [pc, #168]	; (80099fc <__sflush_r+0x108>)
 8009954:	40ca      	lsrs	r2, r1
 8009956:	07d6      	lsls	r6, r2, #31
 8009958:	d528      	bpl.n	80099ac <__sflush_r+0xb8>
 800995a:	2200      	movs	r2, #0
 800995c:	6062      	str	r2, [r4, #4]
 800995e:	04d9      	lsls	r1, r3, #19
 8009960:	6922      	ldr	r2, [r4, #16]
 8009962:	6022      	str	r2, [r4, #0]
 8009964:	d504      	bpl.n	8009970 <__sflush_r+0x7c>
 8009966:	1c42      	adds	r2, r0, #1
 8009968:	d101      	bne.n	800996e <__sflush_r+0x7a>
 800996a:	682b      	ldr	r3, [r5, #0]
 800996c:	b903      	cbnz	r3, 8009970 <__sflush_r+0x7c>
 800996e:	6560      	str	r0, [r4, #84]	; 0x54
 8009970:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009972:	602f      	str	r7, [r5, #0]
 8009974:	2900      	cmp	r1, #0
 8009976:	d0ca      	beq.n	800990e <__sflush_r+0x1a>
 8009978:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800997c:	4299      	cmp	r1, r3
 800997e:	d002      	beq.n	8009986 <__sflush_r+0x92>
 8009980:	4628      	mov	r0, r5
 8009982:	f000 fc3d 	bl	800a200 <_free_r>
 8009986:	2000      	movs	r0, #0
 8009988:	6360      	str	r0, [r4, #52]	; 0x34
 800998a:	e7c1      	b.n	8009910 <__sflush_r+0x1c>
 800998c:	6a21      	ldr	r1, [r4, #32]
 800998e:	2301      	movs	r3, #1
 8009990:	4628      	mov	r0, r5
 8009992:	47b0      	blx	r6
 8009994:	1c41      	adds	r1, r0, #1
 8009996:	d1c7      	bne.n	8009928 <__sflush_r+0x34>
 8009998:	682b      	ldr	r3, [r5, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d0c4      	beq.n	8009928 <__sflush_r+0x34>
 800999e:	2b1d      	cmp	r3, #29
 80099a0:	d001      	beq.n	80099a6 <__sflush_r+0xb2>
 80099a2:	2b16      	cmp	r3, #22
 80099a4:	d101      	bne.n	80099aa <__sflush_r+0xb6>
 80099a6:	602f      	str	r7, [r5, #0]
 80099a8:	e7b1      	b.n	800990e <__sflush_r+0x1a>
 80099aa:	89a3      	ldrh	r3, [r4, #12]
 80099ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099b0:	81a3      	strh	r3, [r4, #12]
 80099b2:	e7ad      	b.n	8009910 <__sflush_r+0x1c>
 80099b4:	690f      	ldr	r7, [r1, #16]
 80099b6:	2f00      	cmp	r7, #0
 80099b8:	d0a9      	beq.n	800990e <__sflush_r+0x1a>
 80099ba:	0793      	lsls	r3, r2, #30
 80099bc:	680e      	ldr	r6, [r1, #0]
 80099be:	bf08      	it	eq
 80099c0:	694b      	ldreq	r3, [r1, #20]
 80099c2:	600f      	str	r7, [r1, #0]
 80099c4:	bf18      	it	ne
 80099c6:	2300      	movne	r3, #0
 80099c8:	eba6 0807 	sub.w	r8, r6, r7
 80099cc:	608b      	str	r3, [r1, #8]
 80099ce:	f1b8 0f00 	cmp.w	r8, #0
 80099d2:	dd9c      	ble.n	800990e <__sflush_r+0x1a>
 80099d4:	6a21      	ldr	r1, [r4, #32]
 80099d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80099d8:	4643      	mov	r3, r8
 80099da:	463a      	mov	r2, r7
 80099dc:	4628      	mov	r0, r5
 80099de:	47b0      	blx	r6
 80099e0:	2800      	cmp	r0, #0
 80099e2:	dc06      	bgt.n	80099f2 <__sflush_r+0xfe>
 80099e4:	89a3      	ldrh	r3, [r4, #12]
 80099e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099ea:	81a3      	strh	r3, [r4, #12]
 80099ec:	f04f 30ff 	mov.w	r0, #4294967295
 80099f0:	e78e      	b.n	8009910 <__sflush_r+0x1c>
 80099f2:	4407      	add	r7, r0
 80099f4:	eba8 0800 	sub.w	r8, r8, r0
 80099f8:	e7e9      	b.n	80099ce <__sflush_r+0xda>
 80099fa:	bf00      	nop
 80099fc:	20400001 	.word	0x20400001

08009a00 <_fflush_r>:
 8009a00:	b538      	push	{r3, r4, r5, lr}
 8009a02:	690b      	ldr	r3, [r1, #16]
 8009a04:	4605      	mov	r5, r0
 8009a06:	460c      	mov	r4, r1
 8009a08:	b913      	cbnz	r3, 8009a10 <_fflush_r+0x10>
 8009a0a:	2500      	movs	r5, #0
 8009a0c:	4628      	mov	r0, r5
 8009a0e:	bd38      	pop	{r3, r4, r5, pc}
 8009a10:	b118      	cbz	r0, 8009a1a <_fflush_r+0x1a>
 8009a12:	6983      	ldr	r3, [r0, #24]
 8009a14:	b90b      	cbnz	r3, 8009a1a <_fflush_r+0x1a>
 8009a16:	f7fe fa07 	bl	8007e28 <__sinit>
 8009a1a:	4b14      	ldr	r3, [pc, #80]	; (8009a6c <_fflush_r+0x6c>)
 8009a1c:	429c      	cmp	r4, r3
 8009a1e:	d11b      	bne.n	8009a58 <_fflush_r+0x58>
 8009a20:	686c      	ldr	r4, [r5, #4]
 8009a22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d0ef      	beq.n	8009a0a <_fflush_r+0xa>
 8009a2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a2c:	07d0      	lsls	r0, r2, #31
 8009a2e:	d404      	bmi.n	8009a3a <_fflush_r+0x3a>
 8009a30:	0599      	lsls	r1, r3, #22
 8009a32:	d402      	bmi.n	8009a3a <_fflush_r+0x3a>
 8009a34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a36:	f7fe faba 	bl	8007fae <__retarget_lock_acquire_recursive>
 8009a3a:	4628      	mov	r0, r5
 8009a3c:	4621      	mov	r1, r4
 8009a3e:	f7ff ff59 	bl	80098f4 <__sflush_r>
 8009a42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a44:	07da      	lsls	r2, r3, #31
 8009a46:	4605      	mov	r5, r0
 8009a48:	d4e0      	bmi.n	8009a0c <_fflush_r+0xc>
 8009a4a:	89a3      	ldrh	r3, [r4, #12]
 8009a4c:	059b      	lsls	r3, r3, #22
 8009a4e:	d4dd      	bmi.n	8009a0c <_fflush_r+0xc>
 8009a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a52:	f7fe faad 	bl	8007fb0 <__retarget_lock_release_recursive>
 8009a56:	e7d9      	b.n	8009a0c <_fflush_r+0xc>
 8009a58:	4b05      	ldr	r3, [pc, #20]	; (8009a70 <_fflush_r+0x70>)
 8009a5a:	429c      	cmp	r4, r3
 8009a5c:	d101      	bne.n	8009a62 <_fflush_r+0x62>
 8009a5e:	68ac      	ldr	r4, [r5, #8]
 8009a60:	e7df      	b.n	8009a22 <_fflush_r+0x22>
 8009a62:	4b04      	ldr	r3, [pc, #16]	; (8009a74 <_fflush_r+0x74>)
 8009a64:	429c      	cmp	r4, r3
 8009a66:	bf08      	it	eq
 8009a68:	68ec      	ldreq	r4, [r5, #12]
 8009a6a:	e7da      	b.n	8009a22 <_fflush_r+0x22>
 8009a6c:	0800aeac 	.word	0x0800aeac
 8009a70:	0800aecc 	.word	0x0800aecc
 8009a74:	0800ae8c 	.word	0x0800ae8c

08009a78 <_localeconv_r>:
 8009a78:	4800      	ldr	r0, [pc, #0]	; (8009a7c <_localeconv_r+0x4>)
 8009a7a:	4770      	bx	lr
 8009a7c:	20000164 	.word	0x20000164

08009a80 <_lseek_r>:
 8009a80:	b538      	push	{r3, r4, r5, lr}
 8009a82:	4d07      	ldr	r5, [pc, #28]	; (8009aa0 <_lseek_r+0x20>)
 8009a84:	4604      	mov	r4, r0
 8009a86:	4608      	mov	r0, r1
 8009a88:	4611      	mov	r1, r2
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	602a      	str	r2, [r5, #0]
 8009a8e:	461a      	mov	r2, r3
 8009a90:	f7f7 fca2 	bl	80013d8 <_lseek>
 8009a94:	1c43      	adds	r3, r0, #1
 8009a96:	d102      	bne.n	8009a9e <_lseek_r+0x1e>
 8009a98:	682b      	ldr	r3, [r5, #0]
 8009a9a:	b103      	cbz	r3, 8009a9e <_lseek_r+0x1e>
 8009a9c:	6023      	str	r3, [r4, #0]
 8009a9e:	bd38      	pop	{r3, r4, r5, pc}
 8009aa0:	20001bcc 	.word	0x20001bcc

08009aa4 <malloc>:
 8009aa4:	4b02      	ldr	r3, [pc, #8]	; (8009ab0 <malloc+0xc>)
 8009aa6:	4601      	mov	r1, r0
 8009aa8:	6818      	ldr	r0, [r3, #0]
 8009aaa:	f7fe bac9 	b.w	8008040 <_malloc_r>
 8009aae:	bf00      	nop
 8009ab0:	20000010 	.word	0x20000010

08009ab4 <__malloc_lock>:
 8009ab4:	4801      	ldr	r0, [pc, #4]	; (8009abc <__malloc_lock+0x8>)
 8009ab6:	f7fe ba7a 	b.w	8007fae <__retarget_lock_acquire_recursive>
 8009aba:	bf00      	nop
 8009abc:	20001bc0 	.word	0x20001bc0

08009ac0 <__malloc_unlock>:
 8009ac0:	4801      	ldr	r0, [pc, #4]	; (8009ac8 <__malloc_unlock+0x8>)
 8009ac2:	f7fe ba75 	b.w	8007fb0 <__retarget_lock_release_recursive>
 8009ac6:	bf00      	nop
 8009ac8:	20001bc0 	.word	0x20001bc0

08009acc <_Balloc>:
 8009acc:	b570      	push	{r4, r5, r6, lr}
 8009ace:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ad0:	4604      	mov	r4, r0
 8009ad2:	460d      	mov	r5, r1
 8009ad4:	b976      	cbnz	r6, 8009af4 <_Balloc+0x28>
 8009ad6:	2010      	movs	r0, #16
 8009ad8:	f7ff ffe4 	bl	8009aa4 <malloc>
 8009adc:	4602      	mov	r2, r0
 8009ade:	6260      	str	r0, [r4, #36]	; 0x24
 8009ae0:	b920      	cbnz	r0, 8009aec <_Balloc+0x20>
 8009ae2:	4b18      	ldr	r3, [pc, #96]	; (8009b44 <_Balloc+0x78>)
 8009ae4:	4818      	ldr	r0, [pc, #96]	; (8009b48 <_Balloc+0x7c>)
 8009ae6:	2166      	movs	r1, #102	; 0x66
 8009ae8:	f000 fd44 	bl	800a574 <__assert_func>
 8009aec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009af0:	6006      	str	r6, [r0, #0]
 8009af2:	60c6      	str	r6, [r0, #12]
 8009af4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009af6:	68f3      	ldr	r3, [r6, #12]
 8009af8:	b183      	cbz	r3, 8009b1c <_Balloc+0x50>
 8009afa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b02:	b9b8      	cbnz	r0, 8009b34 <_Balloc+0x68>
 8009b04:	2101      	movs	r1, #1
 8009b06:	fa01 f605 	lsl.w	r6, r1, r5
 8009b0a:	1d72      	adds	r2, r6, #5
 8009b0c:	0092      	lsls	r2, r2, #2
 8009b0e:	4620      	mov	r0, r4
 8009b10:	f000 fb60 	bl	800a1d4 <_calloc_r>
 8009b14:	b160      	cbz	r0, 8009b30 <_Balloc+0x64>
 8009b16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b1a:	e00e      	b.n	8009b3a <_Balloc+0x6e>
 8009b1c:	2221      	movs	r2, #33	; 0x21
 8009b1e:	2104      	movs	r1, #4
 8009b20:	4620      	mov	r0, r4
 8009b22:	f000 fb57 	bl	800a1d4 <_calloc_r>
 8009b26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b28:	60f0      	str	r0, [r6, #12]
 8009b2a:	68db      	ldr	r3, [r3, #12]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d1e4      	bne.n	8009afa <_Balloc+0x2e>
 8009b30:	2000      	movs	r0, #0
 8009b32:	bd70      	pop	{r4, r5, r6, pc}
 8009b34:	6802      	ldr	r2, [r0, #0]
 8009b36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b40:	e7f7      	b.n	8009b32 <_Balloc+0x66>
 8009b42:	bf00      	nop
 8009b44:	0800af31 	.word	0x0800af31
 8009b48:	0800afb4 	.word	0x0800afb4

08009b4c <_Bfree>:
 8009b4c:	b570      	push	{r4, r5, r6, lr}
 8009b4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b50:	4605      	mov	r5, r0
 8009b52:	460c      	mov	r4, r1
 8009b54:	b976      	cbnz	r6, 8009b74 <_Bfree+0x28>
 8009b56:	2010      	movs	r0, #16
 8009b58:	f7ff ffa4 	bl	8009aa4 <malloc>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	6268      	str	r0, [r5, #36]	; 0x24
 8009b60:	b920      	cbnz	r0, 8009b6c <_Bfree+0x20>
 8009b62:	4b09      	ldr	r3, [pc, #36]	; (8009b88 <_Bfree+0x3c>)
 8009b64:	4809      	ldr	r0, [pc, #36]	; (8009b8c <_Bfree+0x40>)
 8009b66:	218a      	movs	r1, #138	; 0x8a
 8009b68:	f000 fd04 	bl	800a574 <__assert_func>
 8009b6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b70:	6006      	str	r6, [r0, #0]
 8009b72:	60c6      	str	r6, [r0, #12]
 8009b74:	b13c      	cbz	r4, 8009b86 <_Bfree+0x3a>
 8009b76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009b78:	6862      	ldr	r2, [r4, #4]
 8009b7a:	68db      	ldr	r3, [r3, #12]
 8009b7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b80:	6021      	str	r1, [r4, #0]
 8009b82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b86:	bd70      	pop	{r4, r5, r6, pc}
 8009b88:	0800af31 	.word	0x0800af31
 8009b8c:	0800afb4 	.word	0x0800afb4

08009b90 <__multadd>:
 8009b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b94:	690d      	ldr	r5, [r1, #16]
 8009b96:	4607      	mov	r7, r0
 8009b98:	460c      	mov	r4, r1
 8009b9a:	461e      	mov	r6, r3
 8009b9c:	f101 0c14 	add.w	ip, r1, #20
 8009ba0:	2000      	movs	r0, #0
 8009ba2:	f8dc 3000 	ldr.w	r3, [ip]
 8009ba6:	b299      	uxth	r1, r3
 8009ba8:	fb02 6101 	mla	r1, r2, r1, r6
 8009bac:	0c1e      	lsrs	r6, r3, #16
 8009bae:	0c0b      	lsrs	r3, r1, #16
 8009bb0:	fb02 3306 	mla	r3, r2, r6, r3
 8009bb4:	b289      	uxth	r1, r1
 8009bb6:	3001      	adds	r0, #1
 8009bb8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009bbc:	4285      	cmp	r5, r0
 8009bbe:	f84c 1b04 	str.w	r1, [ip], #4
 8009bc2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009bc6:	dcec      	bgt.n	8009ba2 <__multadd+0x12>
 8009bc8:	b30e      	cbz	r6, 8009c0e <__multadd+0x7e>
 8009bca:	68a3      	ldr	r3, [r4, #8]
 8009bcc:	42ab      	cmp	r3, r5
 8009bce:	dc19      	bgt.n	8009c04 <__multadd+0x74>
 8009bd0:	6861      	ldr	r1, [r4, #4]
 8009bd2:	4638      	mov	r0, r7
 8009bd4:	3101      	adds	r1, #1
 8009bd6:	f7ff ff79 	bl	8009acc <_Balloc>
 8009bda:	4680      	mov	r8, r0
 8009bdc:	b928      	cbnz	r0, 8009bea <__multadd+0x5a>
 8009bde:	4602      	mov	r2, r0
 8009be0:	4b0c      	ldr	r3, [pc, #48]	; (8009c14 <__multadd+0x84>)
 8009be2:	480d      	ldr	r0, [pc, #52]	; (8009c18 <__multadd+0x88>)
 8009be4:	21b5      	movs	r1, #181	; 0xb5
 8009be6:	f000 fcc5 	bl	800a574 <__assert_func>
 8009bea:	6922      	ldr	r2, [r4, #16]
 8009bec:	3202      	adds	r2, #2
 8009bee:	f104 010c 	add.w	r1, r4, #12
 8009bf2:	0092      	lsls	r2, r2, #2
 8009bf4:	300c      	adds	r0, #12
 8009bf6:	f7fe f9ec 	bl	8007fd2 <memcpy>
 8009bfa:	4621      	mov	r1, r4
 8009bfc:	4638      	mov	r0, r7
 8009bfe:	f7ff ffa5 	bl	8009b4c <_Bfree>
 8009c02:	4644      	mov	r4, r8
 8009c04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c08:	3501      	adds	r5, #1
 8009c0a:	615e      	str	r6, [r3, #20]
 8009c0c:	6125      	str	r5, [r4, #16]
 8009c0e:	4620      	mov	r0, r4
 8009c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c14:	0800afa3 	.word	0x0800afa3
 8009c18:	0800afb4 	.word	0x0800afb4

08009c1c <__hi0bits>:
 8009c1c:	0c03      	lsrs	r3, r0, #16
 8009c1e:	041b      	lsls	r3, r3, #16
 8009c20:	b9d3      	cbnz	r3, 8009c58 <__hi0bits+0x3c>
 8009c22:	0400      	lsls	r0, r0, #16
 8009c24:	2310      	movs	r3, #16
 8009c26:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009c2a:	bf04      	itt	eq
 8009c2c:	0200      	lsleq	r0, r0, #8
 8009c2e:	3308      	addeq	r3, #8
 8009c30:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009c34:	bf04      	itt	eq
 8009c36:	0100      	lsleq	r0, r0, #4
 8009c38:	3304      	addeq	r3, #4
 8009c3a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009c3e:	bf04      	itt	eq
 8009c40:	0080      	lsleq	r0, r0, #2
 8009c42:	3302      	addeq	r3, #2
 8009c44:	2800      	cmp	r0, #0
 8009c46:	db05      	blt.n	8009c54 <__hi0bits+0x38>
 8009c48:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009c4c:	f103 0301 	add.w	r3, r3, #1
 8009c50:	bf08      	it	eq
 8009c52:	2320      	moveq	r3, #32
 8009c54:	4618      	mov	r0, r3
 8009c56:	4770      	bx	lr
 8009c58:	2300      	movs	r3, #0
 8009c5a:	e7e4      	b.n	8009c26 <__hi0bits+0xa>

08009c5c <__lo0bits>:
 8009c5c:	6803      	ldr	r3, [r0, #0]
 8009c5e:	f013 0207 	ands.w	r2, r3, #7
 8009c62:	4601      	mov	r1, r0
 8009c64:	d00b      	beq.n	8009c7e <__lo0bits+0x22>
 8009c66:	07da      	lsls	r2, r3, #31
 8009c68:	d423      	bmi.n	8009cb2 <__lo0bits+0x56>
 8009c6a:	0798      	lsls	r0, r3, #30
 8009c6c:	bf49      	itett	mi
 8009c6e:	085b      	lsrmi	r3, r3, #1
 8009c70:	089b      	lsrpl	r3, r3, #2
 8009c72:	2001      	movmi	r0, #1
 8009c74:	600b      	strmi	r3, [r1, #0]
 8009c76:	bf5c      	itt	pl
 8009c78:	600b      	strpl	r3, [r1, #0]
 8009c7a:	2002      	movpl	r0, #2
 8009c7c:	4770      	bx	lr
 8009c7e:	b298      	uxth	r0, r3
 8009c80:	b9a8      	cbnz	r0, 8009cae <__lo0bits+0x52>
 8009c82:	0c1b      	lsrs	r3, r3, #16
 8009c84:	2010      	movs	r0, #16
 8009c86:	b2da      	uxtb	r2, r3
 8009c88:	b90a      	cbnz	r2, 8009c8e <__lo0bits+0x32>
 8009c8a:	3008      	adds	r0, #8
 8009c8c:	0a1b      	lsrs	r3, r3, #8
 8009c8e:	071a      	lsls	r2, r3, #28
 8009c90:	bf04      	itt	eq
 8009c92:	091b      	lsreq	r3, r3, #4
 8009c94:	3004      	addeq	r0, #4
 8009c96:	079a      	lsls	r2, r3, #30
 8009c98:	bf04      	itt	eq
 8009c9a:	089b      	lsreq	r3, r3, #2
 8009c9c:	3002      	addeq	r0, #2
 8009c9e:	07da      	lsls	r2, r3, #31
 8009ca0:	d403      	bmi.n	8009caa <__lo0bits+0x4e>
 8009ca2:	085b      	lsrs	r3, r3, #1
 8009ca4:	f100 0001 	add.w	r0, r0, #1
 8009ca8:	d005      	beq.n	8009cb6 <__lo0bits+0x5a>
 8009caa:	600b      	str	r3, [r1, #0]
 8009cac:	4770      	bx	lr
 8009cae:	4610      	mov	r0, r2
 8009cb0:	e7e9      	b.n	8009c86 <__lo0bits+0x2a>
 8009cb2:	2000      	movs	r0, #0
 8009cb4:	4770      	bx	lr
 8009cb6:	2020      	movs	r0, #32
 8009cb8:	4770      	bx	lr
	...

08009cbc <__i2b>:
 8009cbc:	b510      	push	{r4, lr}
 8009cbe:	460c      	mov	r4, r1
 8009cc0:	2101      	movs	r1, #1
 8009cc2:	f7ff ff03 	bl	8009acc <_Balloc>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	b928      	cbnz	r0, 8009cd6 <__i2b+0x1a>
 8009cca:	4b05      	ldr	r3, [pc, #20]	; (8009ce0 <__i2b+0x24>)
 8009ccc:	4805      	ldr	r0, [pc, #20]	; (8009ce4 <__i2b+0x28>)
 8009cce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009cd2:	f000 fc4f 	bl	800a574 <__assert_func>
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	6144      	str	r4, [r0, #20]
 8009cda:	6103      	str	r3, [r0, #16]
 8009cdc:	bd10      	pop	{r4, pc}
 8009cde:	bf00      	nop
 8009ce0:	0800afa3 	.word	0x0800afa3
 8009ce4:	0800afb4 	.word	0x0800afb4

08009ce8 <__multiply>:
 8009ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cec:	4691      	mov	r9, r2
 8009cee:	690a      	ldr	r2, [r1, #16]
 8009cf0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	bfb8      	it	lt
 8009cf8:	460b      	movlt	r3, r1
 8009cfa:	460c      	mov	r4, r1
 8009cfc:	bfbc      	itt	lt
 8009cfe:	464c      	movlt	r4, r9
 8009d00:	4699      	movlt	r9, r3
 8009d02:	6927      	ldr	r7, [r4, #16]
 8009d04:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009d08:	68a3      	ldr	r3, [r4, #8]
 8009d0a:	6861      	ldr	r1, [r4, #4]
 8009d0c:	eb07 060a 	add.w	r6, r7, sl
 8009d10:	42b3      	cmp	r3, r6
 8009d12:	b085      	sub	sp, #20
 8009d14:	bfb8      	it	lt
 8009d16:	3101      	addlt	r1, #1
 8009d18:	f7ff fed8 	bl	8009acc <_Balloc>
 8009d1c:	b930      	cbnz	r0, 8009d2c <__multiply+0x44>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	4b44      	ldr	r3, [pc, #272]	; (8009e34 <__multiply+0x14c>)
 8009d22:	4845      	ldr	r0, [pc, #276]	; (8009e38 <__multiply+0x150>)
 8009d24:	f240 115d 	movw	r1, #349	; 0x15d
 8009d28:	f000 fc24 	bl	800a574 <__assert_func>
 8009d2c:	f100 0514 	add.w	r5, r0, #20
 8009d30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009d34:	462b      	mov	r3, r5
 8009d36:	2200      	movs	r2, #0
 8009d38:	4543      	cmp	r3, r8
 8009d3a:	d321      	bcc.n	8009d80 <__multiply+0x98>
 8009d3c:	f104 0314 	add.w	r3, r4, #20
 8009d40:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009d44:	f109 0314 	add.w	r3, r9, #20
 8009d48:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009d4c:	9202      	str	r2, [sp, #8]
 8009d4e:	1b3a      	subs	r2, r7, r4
 8009d50:	3a15      	subs	r2, #21
 8009d52:	f022 0203 	bic.w	r2, r2, #3
 8009d56:	3204      	adds	r2, #4
 8009d58:	f104 0115 	add.w	r1, r4, #21
 8009d5c:	428f      	cmp	r7, r1
 8009d5e:	bf38      	it	cc
 8009d60:	2204      	movcc	r2, #4
 8009d62:	9201      	str	r2, [sp, #4]
 8009d64:	9a02      	ldr	r2, [sp, #8]
 8009d66:	9303      	str	r3, [sp, #12]
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d80c      	bhi.n	8009d86 <__multiply+0x9e>
 8009d6c:	2e00      	cmp	r6, #0
 8009d6e:	dd03      	ble.n	8009d78 <__multiply+0x90>
 8009d70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d05a      	beq.n	8009e2e <__multiply+0x146>
 8009d78:	6106      	str	r6, [r0, #16]
 8009d7a:	b005      	add	sp, #20
 8009d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d80:	f843 2b04 	str.w	r2, [r3], #4
 8009d84:	e7d8      	b.n	8009d38 <__multiply+0x50>
 8009d86:	f8b3 a000 	ldrh.w	sl, [r3]
 8009d8a:	f1ba 0f00 	cmp.w	sl, #0
 8009d8e:	d024      	beq.n	8009dda <__multiply+0xf2>
 8009d90:	f104 0e14 	add.w	lr, r4, #20
 8009d94:	46a9      	mov	r9, r5
 8009d96:	f04f 0c00 	mov.w	ip, #0
 8009d9a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009d9e:	f8d9 1000 	ldr.w	r1, [r9]
 8009da2:	fa1f fb82 	uxth.w	fp, r2
 8009da6:	b289      	uxth	r1, r1
 8009da8:	fb0a 110b 	mla	r1, sl, fp, r1
 8009dac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009db0:	f8d9 2000 	ldr.w	r2, [r9]
 8009db4:	4461      	add	r1, ip
 8009db6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009dba:	fb0a c20b 	mla	r2, sl, fp, ip
 8009dbe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009dc2:	b289      	uxth	r1, r1
 8009dc4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009dc8:	4577      	cmp	r7, lr
 8009dca:	f849 1b04 	str.w	r1, [r9], #4
 8009dce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009dd2:	d8e2      	bhi.n	8009d9a <__multiply+0xb2>
 8009dd4:	9a01      	ldr	r2, [sp, #4]
 8009dd6:	f845 c002 	str.w	ip, [r5, r2]
 8009dda:	9a03      	ldr	r2, [sp, #12]
 8009ddc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009de0:	3304      	adds	r3, #4
 8009de2:	f1b9 0f00 	cmp.w	r9, #0
 8009de6:	d020      	beq.n	8009e2a <__multiply+0x142>
 8009de8:	6829      	ldr	r1, [r5, #0]
 8009dea:	f104 0c14 	add.w	ip, r4, #20
 8009dee:	46ae      	mov	lr, r5
 8009df0:	f04f 0a00 	mov.w	sl, #0
 8009df4:	f8bc b000 	ldrh.w	fp, [ip]
 8009df8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009dfc:	fb09 220b 	mla	r2, r9, fp, r2
 8009e00:	4492      	add	sl, r2
 8009e02:	b289      	uxth	r1, r1
 8009e04:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009e08:	f84e 1b04 	str.w	r1, [lr], #4
 8009e0c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009e10:	f8be 1000 	ldrh.w	r1, [lr]
 8009e14:	0c12      	lsrs	r2, r2, #16
 8009e16:	fb09 1102 	mla	r1, r9, r2, r1
 8009e1a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009e1e:	4567      	cmp	r7, ip
 8009e20:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009e24:	d8e6      	bhi.n	8009df4 <__multiply+0x10c>
 8009e26:	9a01      	ldr	r2, [sp, #4]
 8009e28:	50a9      	str	r1, [r5, r2]
 8009e2a:	3504      	adds	r5, #4
 8009e2c:	e79a      	b.n	8009d64 <__multiply+0x7c>
 8009e2e:	3e01      	subs	r6, #1
 8009e30:	e79c      	b.n	8009d6c <__multiply+0x84>
 8009e32:	bf00      	nop
 8009e34:	0800afa3 	.word	0x0800afa3
 8009e38:	0800afb4 	.word	0x0800afb4

08009e3c <__pow5mult>:
 8009e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e40:	4615      	mov	r5, r2
 8009e42:	f012 0203 	ands.w	r2, r2, #3
 8009e46:	4606      	mov	r6, r0
 8009e48:	460f      	mov	r7, r1
 8009e4a:	d007      	beq.n	8009e5c <__pow5mult+0x20>
 8009e4c:	4c25      	ldr	r4, [pc, #148]	; (8009ee4 <__pow5mult+0xa8>)
 8009e4e:	3a01      	subs	r2, #1
 8009e50:	2300      	movs	r3, #0
 8009e52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e56:	f7ff fe9b 	bl	8009b90 <__multadd>
 8009e5a:	4607      	mov	r7, r0
 8009e5c:	10ad      	asrs	r5, r5, #2
 8009e5e:	d03d      	beq.n	8009edc <__pow5mult+0xa0>
 8009e60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009e62:	b97c      	cbnz	r4, 8009e84 <__pow5mult+0x48>
 8009e64:	2010      	movs	r0, #16
 8009e66:	f7ff fe1d 	bl	8009aa4 <malloc>
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	6270      	str	r0, [r6, #36]	; 0x24
 8009e6e:	b928      	cbnz	r0, 8009e7c <__pow5mult+0x40>
 8009e70:	4b1d      	ldr	r3, [pc, #116]	; (8009ee8 <__pow5mult+0xac>)
 8009e72:	481e      	ldr	r0, [pc, #120]	; (8009eec <__pow5mult+0xb0>)
 8009e74:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009e78:	f000 fb7c 	bl	800a574 <__assert_func>
 8009e7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e80:	6004      	str	r4, [r0, #0]
 8009e82:	60c4      	str	r4, [r0, #12]
 8009e84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009e88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009e8c:	b94c      	cbnz	r4, 8009ea2 <__pow5mult+0x66>
 8009e8e:	f240 2171 	movw	r1, #625	; 0x271
 8009e92:	4630      	mov	r0, r6
 8009e94:	f7ff ff12 	bl	8009cbc <__i2b>
 8009e98:	2300      	movs	r3, #0
 8009e9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e9e:	4604      	mov	r4, r0
 8009ea0:	6003      	str	r3, [r0, #0]
 8009ea2:	f04f 0900 	mov.w	r9, #0
 8009ea6:	07eb      	lsls	r3, r5, #31
 8009ea8:	d50a      	bpl.n	8009ec0 <__pow5mult+0x84>
 8009eaa:	4639      	mov	r1, r7
 8009eac:	4622      	mov	r2, r4
 8009eae:	4630      	mov	r0, r6
 8009eb0:	f7ff ff1a 	bl	8009ce8 <__multiply>
 8009eb4:	4639      	mov	r1, r7
 8009eb6:	4680      	mov	r8, r0
 8009eb8:	4630      	mov	r0, r6
 8009eba:	f7ff fe47 	bl	8009b4c <_Bfree>
 8009ebe:	4647      	mov	r7, r8
 8009ec0:	106d      	asrs	r5, r5, #1
 8009ec2:	d00b      	beq.n	8009edc <__pow5mult+0xa0>
 8009ec4:	6820      	ldr	r0, [r4, #0]
 8009ec6:	b938      	cbnz	r0, 8009ed8 <__pow5mult+0x9c>
 8009ec8:	4622      	mov	r2, r4
 8009eca:	4621      	mov	r1, r4
 8009ecc:	4630      	mov	r0, r6
 8009ece:	f7ff ff0b 	bl	8009ce8 <__multiply>
 8009ed2:	6020      	str	r0, [r4, #0]
 8009ed4:	f8c0 9000 	str.w	r9, [r0]
 8009ed8:	4604      	mov	r4, r0
 8009eda:	e7e4      	b.n	8009ea6 <__pow5mult+0x6a>
 8009edc:	4638      	mov	r0, r7
 8009ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ee2:	bf00      	nop
 8009ee4:	0800b100 	.word	0x0800b100
 8009ee8:	0800af31 	.word	0x0800af31
 8009eec:	0800afb4 	.word	0x0800afb4

08009ef0 <__lshift>:
 8009ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ef4:	460c      	mov	r4, r1
 8009ef6:	6849      	ldr	r1, [r1, #4]
 8009ef8:	6923      	ldr	r3, [r4, #16]
 8009efa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009efe:	68a3      	ldr	r3, [r4, #8]
 8009f00:	4607      	mov	r7, r0
 8009f02:	4691      	mov	r9, r2
 8009f04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f08:	f108 0601 	add.w	r6, r8, #1
 8009f0c:	42b3      	cmp	r3, r6
 8009f0e:	db0b      	blt.n	8009f28 <__lshift+0x38>
 8009f10:	4638      	mov	r0, r7
 8009f12:	f7ff fddb 	bl	8009acc <_Balloc>
 8009f16:	4605      	mov	r5, r0
 8009f18:	b948      	cbnz	r0, 8009f2e <__lshift+0x3e>
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	4b2a      	ldr	r3, [pc, #168]	; (8009fc8 <__lshift+0xd8>)
 8009f1e:	482b      	ldr	r0, [pc, #172]	; (8009fcc <__lshift+0xdc>)
 8009f20:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009f24:	f000 fb26 	bl	800a574 <__assert_func>
 8009f28:	3101      	adds	r1, #1
 8009f2a:	005b      	lsls	r3, r3, #1
 8009f2c:	e7ee      	b.n	8009f0c <__lshift+0x1c>
 8009f2e:	2300      	movs	r3, #0
 8009f30:	f100 0114 	add.w	r1, r0, #20
 8009f34:	f100 0210 	add.w	r2, r0, #16
 8009f38:	4618      	mov	r0, r3
 8009f3a:	4553      	cmp	r3, sl
 8009f3c:	db37      	blt.n	8009fae <__lshift+0xbe>
 8009f3e:	6920      	ldr	r0, [r4, #16]
 8009f40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f44:	f104 0314 	add.w	r3, r4, #20
 8009f48:	f019 091f 	ands.w	r9, r9, #31
 8009f4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f50:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009f54:	d02f      	beq.n	8009fb6 <__lshift+0xc6>
 8009f56:	f1c9 0e20 	rsb	lr, r9, #32
 8009f5a:	468a      	mov	sl, r1
 8009f5c:	f04f 0c00 	mov.w	ip, #0
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	fa02 f209 	lsl.w	r2, r2, r9
 8009f66:	ea42 020c 	orr.w	r2, r2, ip
 8009f6a:	f84a 2b04 	str.w	r2, [sl], #4
 8009f6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f72:	4298      	cmp	r0, r3
 8009f74:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009f78:	d8f2      	bhi.n	8009f60 <__lshift+0x70>
 8009f7a:	1b03      	subs	r3, r0, r4
 8009f7c:	3b15      	subs	r3, #21
 8009f7e:	f023 0303 	bic.w	r3, r3, #3
 8009f82:	3304      	adds	r3, #4
 8009f84:	f104 0215 	add.w	r2, r4, #21
 8009f88:	4290      	cmp	r0, r2
 8009f8a:	bf38      	it	cc
 8009f8c:	2304      	movcc	r3, #4
 8009f8e:	f841 c003 	str.w	ip, [r1, r3]
 8009f92:	f1bc 0f00 	cmp.w	ip, #0
 8009f96:	d001      	beq.n	8009f9c <__lshift+0xac>
 8009f98:	f108 0602 	add.w	r6, r8, #2
 8009f9c:	3e01      	subs	r6, #1
 8009f9e:	4638      	mov	r0, r7
 8009fa0:	612e      	str	r6, [r5, #16]
 8009fa2:	4621      	mov	r1, r4
 8009fa4:	f7ff fdd2 	bl	8009b4c <_Bfree>
 8009fa8:	4628      	mov	r0, r5
 8009faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fae:	f842 0f04 	str.w	r0, [r2, #4]!
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	e7c1      	b.n	8009f3a <__lshift+0x4a>
 8009fb6:	3904      	subs	r1, #4
 8009fb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fbc:	f841 2f04 	str.w	r2, [r1, #4]!
 8009fc0:	4298      	cmp	r0, r3
 8009fc2:	d8f9      	bhi.n	8009fb8 <__lshift+0xc8>
 8009fc4:	e7ea      	b.n	8009f9c <__lshift+0xac>
 8009fc6:	bf00      	nop
 8009fc8:	0800afa3 	.word	0x0800afa3
 8009fcc:	0800afb4 	.word	0x0800afb4

08009fd0 <__mcmp>:
 8009fd0:	b530      	push	{r4, r5, lr}
 8009fd2:	6902      	ldr	r2, [r0, #16]
 8009fd4:	690c      	ldr	r4, [r1, #16]
 8009fd6:	1b12      	subs	r2, r2, r4
 8009fd8:	d10e      	bne.n	8009ff8 <__mcmp+0x28>
 8009fda:	f100 0314 	add.w	r3, r0, #20
 8009fde:	3114      	adds	r1, #20
 8009fe0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009fe4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009fe8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009fec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009ff0:	42a5      	cmp	r5, r4
 8009ff2:	d003      	beq.n	8009ffc <__mcmp+0x2c>
 8009ff4:	d305      	bcc.n	800a002 <__mcmp+0x32>
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	4610      	mov	r0, r2
 8009ffa:	bd30      	pop	{r4, r5, pc}
 8009ffc:	4283      	cmp	r3, r0
 8009ffe:	d3f3      	bcc.n	8009fe8 <__mcmp+0x18>
 800a000:	e7fa      	b.n	8009ff8 <__mcmp+0x28>
 800a002:	f04f 32ff 	mov.w	r2, #4294967295
 800a006:	e7f7      	b.n	8009ff8 <__mcmp+0x28>

0800a008 <__mdiff>:
 800a008:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a00c:	460c      	mov	r4, r1
 800a00e:	4606      	mov	r6, r0
 800a010:	4611      	mov	r1, r2
 800a012:	4620      	mov	r0, r4
 800a014:	4690      	mov	r8, r2
 800a016:	f7ff ffdb 	bl	8009fd0 <__mcmp>
 800a01a:	1e05      	subs	r5, r0, #0
 800a01c:	d110      	bne.n	800a040 <__mdiff+0x38>
 800a01e:	4629      	mov	r1, r5
 800a020:	4630      	mov	r0, r6
 800a022:	f7ff fd53 	bl	8009acc <_Balloc>
 800a026:	b930      	cbnz	r0, 800a036 <__mdiff+0x2e>
 800a028:	4b3a      	ldr	r3, [pc, #232]	; (800a114 <__mdiff+0x10c>)
 800a02a:	4602      	mov	r2, r0
 800a02c:	f240 2132 	movw	r1, #562	; 0x232
 800a030:	4839      	ldr	r0, [pc, #228]	; (800a118 <__mdiff+0x110>)
 800a032:	f000 fa9f 	bl	800a574 <__assert_func>
 800a036:	2301      	movs	r3, #1
 800a038:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a03c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a040:	bfa4      	itt	ge
 800a042:	4643      	movge	r3, r8
 800a044:	46a0      	movge	r8, r4
 800a046:	4630      	mov	r0, r6
 800a048:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a04c:	bfa6      	itte	ge
 800a04e:	461c      	movge	r4, r3
 800a050:	2500      	movge	r5, #0
 800a052:	2501      	movlt	r5, #1
 800a054:	f7ff fd3a 	bl	8009acc <_Balloc>
 800a058:	b920      	cbnz	r0, 800a064 <__mdiff+0x5c>
 800a05a:	4b2e      	ldr	r3, [pc, #184]	; (800a114 <__mdiff+0x10c>)
 800a05c:	4602      	mov	r2, r0
 800a05e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a062:	e7e5      	b.n	800a030 <__mdiff+0x28>
 800a064:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a068:	6926      	ldr	r6, [r4, #16]
 800a06a:	60c5      	str	r5, [r0, #12]
 800a06c:	f104 0914 	add.w	r9, r4, #20
 800a070:	f108 0514 	add.w	r5, r8, #20
 800a074:	f100 0e14 	add.w	lr, r0, #20
 800a078:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a07c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a080:	f108 0210 	add.w	r2, r8, #16
 800a084:	46f2      	mov	sl, lr
 800a086:	2100      	movs	r1, #0
 800a088:	f859 3b04 	ldr.w	r3, [r9], #4
 800a08c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a090:	fa1f f883 	uxth.w	r8, r3
 800a094:	fa11 f18b 	uxtah	r1, r1, fp
 800a098:	0c1b      	lsrs	r3, r3, #16
 800a09a:	eba1 0808 	sub.w	r8, r1, r8
 800a09e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a0a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a0a6:	fa1f f888 	uxth.w	r8, r8
 800a0aa:	1419      	asrs	r1, r3, #16
 800a0ac:	454e      	cmp	r6, r9
 800a0ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a0b2:	f84a 3b04 	str.w	r3, [sl], #4
 800a0b6:	d8e7      	bhi.n	800a088 <__mdiff+0x80>
 800a0b8:	1b33      	subs	r3, r6, r4
 800a0ba:	3b15      	subs	r3, #21
 800a0bc:	f023 0303 	bic.w	r3, r3, #3
 800a0c0:	3304      	adds	r3, #4
 800a0c2:	3415      	adds	r4, #21
 800a0c4:	42a6      	cmp	r6, r4
 800a0c6:	bf38      	it	cc
 800a0c8:	2304      	movcc	r3, #4
 800a0ca:	441d      	add	r5, r3
 800a0cc:	4473      	add	r3, lr
 800a0ce:	469e      	mov	lr, r3
 800a0d0:	462e      	mov	r6, r5
 800a0d2:	4566      	cmp	r6, ip
 800a0d4:	d30e      	bcc.n	800a0f4 <__mdiff+0xec>
 800a0d6:	f10c 0203 	add.w	r2, ip, #3
 800a0da:	1b52      	subs	r2, r2, r5
 800a0dc:	f022 0203 	bic.w	r2, r2, #3
 800a0e0:	3d03      	subs	r5, #3
 800a0e2:	45ac      	cmp	ip, r5
 800a0e4:	bf38      	it	cc
 800a0e6:	2200      	movcc	r2, #0
 800a0e8:	441a      	add	r2, r3
 800a0ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a0ee:	b17b      	cbz	r3, 800a110 <__mdiff+0x108>
 800a0f0:	6107      	str	r7, [r0, #16]
 800a0f2:	e7a3      	b.n	800a03c <__mdiff+0x34>
 800a0f4:	f856 8b04 	ldr.w	r8, [r6], #4
 800a0f8:	fa11 f288 	uxtah	r2, r1, r8
 800a0fc:	1414      	asrs	r4, r2, #16
 800a0fe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a102:	b292      	uxth	r2, r2
 800a104:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a108:	f84e 2b04 	str.w	r2, [lr], #4
 800a10c:	1421      	asrs	r1, r4, #16
 800a10e:	e7e0      	b.n	800a0d2 <__mdiff+0xca>
 800a110:	3f01      	subs	r7, #1
 800a112:	e7ea      	b.n	800a0ea <__mdiff+0xe2>
 800a114:	0800afa3 	.word	0x0800afa3
 800a118:	0800afb4 	.word	0x0800afb4

0800a11c <__d2b>:
 800a11c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a120:	4689      	mov	r9, r1
 800a122:	2101      	movs	r1, #1
 800a124:	ec57 6b10 	vmov	r6, r7, d0
 800a128:	4690      	mov	r8, r2
 800a12a:	f7ff fccf 	bl	8009acc <_Balloc>
 800a12e:	4604      	mov	r4, r0
 800a130:	b930      	cbnz	r0, 800a140 <__d2b+0x24>
 800a132:	4602      	mov	r2, r0
 800a134:	4b25      	ldr	r3, [pc, #148]	; (800a1cc <__d2b+0xb0>)
 800a136:	4826      	ldr	r0, [pc, #152]	; (800a1d0 <__d2b+0xb4>)
 800a138:	f240 310a 	movw	r1, #778	; 0x30a
 800a13c:	f000 fa1a 	bl	800a574 <__assert_func>
 800a140:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a144:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a148:	bb35      	cbnz	r5, 800a198 <__d2b+0x7c>
 800a14a:	2e00      	cmp	r6, #0
 800a14c:	9301      	str	r3, [sp, #4]
 800a14e:	d028      	beq.n	800a1a2 <__d2b+0x86>
 800a150:	4668      	mov	r0, sp
 800a152:	9600      	str	r6, [sp, #0]
 800a154:	f7ff fd82 	bl	8009c5c <__lo0bits>
 800a158:	9900      	ldr	r1, [sp, #0]
 800a15a:	b300      	cbz	r0, 800a19e <__d2b+0x82>
 800a15c:	9a01      	ldr	r2, [sp, #4]
 800a15e:	f1c0 0320 	rsb	r3, r0, #32
 800a162:	fa02 f303 	lsl.w	r3, r2, r3
 800a166:	430b      	orrs	r3, r1
 800a168:	40c2      	lsrs	r2, r0
 800a16a:	6163      	str	r3, [r4, #20]
 800a16c:	9201      	str	r2, [sp, #4]
 800a16e:	9b01      	ldr	r3, [sp, #4]
 800a170:	61a3      	str	r3, [r4, #24]
 800a172:	2b00      	cmp	r3, #0
 800a174:	bf14      	ite	ne
 800a176:	2202      	movne	r2, #2
 800a178:	2201      	moveq	r2, #1
 800a17a:	6122      	str	r2, [r4, #16]
 800a17c:	b1d5      	cbz	r5, 800a1b4 <__d2b+0x98>
 800a17e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a182:	4405      	add	r5, r0
 800a184:	f8c9 5000 	str.w	r5, [r9]
 800a188:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a18c:	f8c8 0000 	str.w	r0, [r8]
 800a190:	4620      	mov	r0, r4
 800a192:	b003      	add	sp, #12
 800a194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a198:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a19c:	e7d5      	b.n	800a14a <__d2b+0x2e>
 800a19e:	6161      	str	r1, [r4, #20]
 800a1a0:	e7e5      	b.n	800a16e <__d2b+0x52>
 800a1a2:	a801      	add	r0, sp, #4
 800a1a4:	f7ff fd5a 	bl	8009c5c <__lo0bits>
 800a1a8:	9b01      	ldr	r3, [sp, #4]
 800a1aa:	6163      	str	r3, [r4, #20]
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	6122      	str	r2, [r4, #16]
 800a1b0:	3020      	adds	r0, #32
 800a1b2:	e7e3      	b.n	800a17c <__d2b+0x60>
 800a1b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a1b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a1bc:	f8c9 0000 	str.w	r0, [r9]
 800a1c0:	6918      	ldr	r0, [r3, #16]
 800a1c2:	f7ff fd2b 	bl	8009c1c <__hi0bits>
 800a1c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a1ca:	e7df      	b.n	800a18c <__d2b+0x70>
 800a1cc:	0800afa3 	.word	0x0800afa3
 800a1d0:	0800afb4 	.word	0x0800afb4

0800a1d4 <_calloc_r>:
 800a1d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1d6:	fba1 2402 	umull	r2, r4, r1, r2
 800a1da:	b94c      	cbnz	r4, 800a1f0 <_calloc_r+0x1c>
 800a1dc:	4611      	mov	r1, r2
 800a1de:	9201      	str	r2, [sp, #4]
 800a1e0:	f7fd ff2e 	bl	8008040 <_malloc_r>
 800a1e4:	9a01      	ldr	r2, [sp, #4]
 800a1e6:	4605      	mov	r5, r0
 800a1e8:	b930      	cbnz	r0, 800a1f8 <_calloc_r+0x24>
 800a1ea:	4628      	mov	r0, r5
 800a1ec:	b003      	add	sp, #12
 800a1ee:	bd30      	pop	{r4, r5, pc}
 800a1f0:	220c      	movs	r2, #12
 800a1f2:	6002      	str	r2, [r0, #0]
 800a1f4:	2500      	movs	r5, #0
 800a1f6:	e7f8      	b.n	800a1ea <_calloc_r+0x16>
 800a1f8:	4621      	mov	r1, r4
 800a1fa:	f7fd fef8 	bl	8007fee <memset>
 800a1fe:	e7f4      	b.n	800a1ea <_calloc_r+0x16>

0800a200 <_free_r>:
 800a200:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a202:	2900      	cmp	r1, #0
 800a204:	d044      	beq.n	800a290 <_free_r+0x90>
 800a206:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a20a:	9001      	str	r0, [sp, #4]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	f1a1 0404 	sub.w	r4, r1, #4
 800a212:	bfb8      	it	lt
 800a214:	18e4      	addlt	r4, r4, r3
 800a216:	f7ff fc4d 	bl	8009ab4 <__malloc_lock>
 800a21a:	4a1e      	ldr	r2, [pc, #120]	; (800a294 <_free_r+0x94>)
 800a21c:	9801      	ldr	r0, [sp, #4]
 800a21e:	6813      	ldr	r3, [r2, #0]
 800a220:	b933      	cbnz	r3, 800a230 <_free_r+0x30>
 800a222:	6063      	str	r3, [r4, #4]
 800a224:	6014      	str	r4, [r2, #0]
 800a226:	b003      	add	sp, #12
 800a228:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a22c:	f7ff bc48 	b.w	8009ac0 <__malloc_unlock>
 800a230:	42a3      	cmp	r3, r4
 800a232:	d908      	bls.n	800a246 <_free_r+0x46>
 800a234:	6825      	ldr	r5, [r4, #0]
 800a236:	1961      	adds	r1, r4, r5
 800a238:	428b      	cmp	r3, r1
 800a23a:	bf01      	itttt	eq
 800a23c:	6819      	ldreq	r1, [r3, #0]
 800a23e:	685b      	ldreq	r3, [r3, #4]
 800a240:	1949      	addeq	r1, r1, r5
 800a242:	6021      	streq	r1, [r4, #0]
 800a244:	e7ed      	b.n	800a222 <_free_r+0x22>
 800a246:	461a      	mov	r2, r3
 800a248:	685b      	ldr	r3, [r3, #4]
 800a24a:	b10b      	cbz	r3, 800a250 <_free_r+0x50>
 800a24c:	42a3      	cmp	r3, r4
 800a24e:	d9fa      	bls.n	800a246 <_free_r+0x46>
 800a250:	6811      	ldr	r1, [r2, #0]
 800a252:	1855      	adds	r5, r2, r1
 800a254:	42a5      	cmp	r5, r4
 800a256:	d10b      	bne.n	800a270 <_free_r+0x70>
 800a258:	6824      	ldr	r4, [r4, #0]
 800a25a:	4421      	add	r1, r4
 800a25c:	1854      	adds	r4, r2, r1
 800a25e:	42a3      	cmp	r3, r4
 800a260:	6011      	str	r1, [r2, #0]
 800a262:	d1e0      	bne.n	800a226 <_free_r+0x26>
 800a264:	681c      	ldr	r4, [r3, #0]
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	6053      	str	r3, [r2, #4]
 800a26a:	4421      	add	r1, r4
 800a26c:	6011      	str	r1, [r2, #0]
 800a26e:	e7da      	b.n	800a226 <_free_r+0x26>
 800a270:	d902      	bls.n	800a278 <_free_r+0x78>
 800a272:	230c      	movs	r3, #12
 800a274:	6003      	str	r3, [r0, #0]
 800a276:	e7d6      	b.n	800a226 <_free_r+0x26>
 800a278:	6825      	ldr	r5, [r4, #0]
 800a27a:	1961      	adds	r1, r4, r5
 800a27c:	428b      	cmp	r3, r1
 800a27e:	bf04      	itt	eq
 800a280:	6819      	ldreq	r1, [r3, #0]
 800a282:	685b      	ldreq	r3, [r3, #4]
 800a284:	6063      	str	r3, [r4, #4]
 800a286:	bf04      	itt	eq
 800a288:	1949      	addeq	r1, r1, r5
 800a28a:	6021      	streq	r1, [r4, #0]
 800a28c:	6054      	str	r4, [r2, #4]
 800a28e:	e7ca      	b.n	800a226 <_free_r+0x26>
 800a290:	b003      	add	sp, #12
 800a292:	bd30      	pop	{r4, r5, pc}
 800a294:	20001bc4 	.word	0x20001bc4

0800a298 <__ssputs_r>:
 800a298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a29c:	688e      	ldr	r6, [r1, #8]
 800a29e:	429e      	cmp	r6, r3
 800a2a0:	4682      	mov	sl, r0
 800a2a2:	460c      	mov	r4, r1
 800a2a4:	4690      	mov	r8, r2
 800a2a6:	461f      	mov	r7, r3
 800a2a8:	d838      	bhi.n	800a31c <__ssputs_r+0x84>
 800a2aa:	898a      	ldrh	r2, [r1, #12]
 800a2ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a2b0:	d032      	beq.n	800a318 <__ssputs_r+0x80>
 800a2b2:	6825      	ldr	r5, [r4, #0]
 800a2b4:	6909      	ldr	r1, [r1, #16]
 800a2b6:	eba5 0901 	sub.w	r9, r5, r1
 800a2ba:	6965      	ldr	r5, [r4, #20]
 800a2bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a2c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	444b      	add	r3, r9
 800a2c8:	106d      	asrs	r5, r5, #1
 800a2ca:	429d      	cmp	r5, r3
 800a2cc:	bf38      	it	cc
 800a2ce:	461d      	movcc	r5, r3
 800a2d0:	0553      	lsls	r3, r2, #21
 800a2d2:	d531      	bpl.n	800a338 <__ssputs_r+0xa0>
 800a2d4:	4629      	mov	r1, r5
 800a2d6:	f7fd feb3 	bl	8008040 <_malloc_r>
 800a2da:	4606      	mov	r6, r0
 800a2dc:	b950      	cbnz	r0, 800a2f4 <__ssputs_r+0x5c>
 800a2de:	230c      	movs	r3, #12
 800a2e0:	f8ca 3000 	str.w	r3, [sl]
 800a2e4:	89a3      	ldrh	r3, [r4, #12]
 800a2e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2ea:	81a3      	strh	r3, [r4, #12]
 800a2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2f4:	6921      	ldr	r1, [r4, #16]
 800a2f6:	464a      	mov	r2, r9
 800a2f8:	f7fd fe6b 	bl	8007fd2 <memcpy>
 800a2fc:	89a3      	ldrh	r3, [r4, #12]
 800a2fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a306:	81a3      	strh	r3, [r4, #12]
 800a308:	6126      	str	r6, [r4, #16]
 800a30a:	6165      	str	r5, [r4, #20]
 800a30c:	444e      	add	r6, r9
 800a30e:	eba5 0509 	sub.w	r5, r5, r9
 800a312:	6026      	str	r6, [r4, #0]
 800a314:	60a5      	str	r5, [r4, #8]
 800a316:	463e      	mov	r6, r7
 800a318:	42be      	cmp	r6, r7
 800a31a:	d900      	bls.n	800a31e <__ssputs_r+0x86>
 800a31c:	463e      	mov	r6, r7
 800a31e:	6820      	ldr	r0, [r4, #0]
 800a320:	4632      	mov	r2, r6
 800a322:	4641      	mov	r1, r8
 800a324:	f000 f968 	bl	800a5f8 <memmove>
 800a328:	68a3      	ldr	r3, [r4, #8]
 800a32a:	1b9b      	subs	r3, r3, r6
 800a32c:	60a3      	str	r3, [r4, #8]
 800a32e:	6823      	ldr	r3, [r4, #0]
 800a330:	4433      	add	r3, r6
 800a332:	6023      	str	r3, [r4, #0]
 800a334:	2000      	movs	r0, #0
 800a336:	e7db      	b.n	800a2f0 <__ssputs_r+0x58>
 800a338:	462a      	mov	r2, r5
 800a33a:	f000 f977 	bl	800a62c <_realloc_r>
 800a33e:	4606      	mov	r6, r0
 800a340:	2800      	cmp	r0, #0
 800a342:	d1e1      	bne.n	800a308 <__ssputs_r+0x70>
 800a344:	6921      	ldr	r1, [r4, #16]
 800a346:	4650      	mov	r0, sl
 800a348:	f7ff ff5a 	bl	800a200 <_free_r>
 800a34c:	e7c7      	b.n	800a2de <__ssputs_r+0x46>
	...

0800a350 <_svfiprintf_r>:
 800a350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a354:	4698      	mov	r8, r3
 800a356:	898b      	ldrh	r3, [r1, #12]
 800a358:	061b      	lsls	r3, r3, #24
 800a35a:	b09d      	sub	sp, #116	; 0x74
 800a35c:	4607      	mov	r7, r0
 800a35e:	460d      	mov	r5, r1
 800a360:	4614      	mov	r4, r2
 800a362:	d50e      	bpl.n	800a382 <_svfiprintf_r+0x32>
 800a364:	690b      	ldr	r3, [r1, #16]
 800a366:	b963      	cbnz	r3, 800a382 <_svfiprintf_r+0x32>
 800a368:	2140      	movs	r1, #64	; 0x40
 800a36a:	f7fd fe69 	bl	8008040 <_malloc_r>
 800a36e:	6028      	str	r0, [r5, #0]
 800a370:	6128      	str	r0, [r5, #16]
 800a372:	b920      	cbnz	r0, 800a37e <_svfiprintf_r+0x2e>
 800a374:	230c      	movs	r3, #12
 800a376:	603b      	str	r3, [r7, #0]
 800a378:	f04f 30ff 	mov.w	r0, #4294967295
 800a37c:	e0d1      	b.n	800a522 <_svfiprintf_r+0x1d2>
 800a37e:	2340      	movs	r3, #64	; 0x40
 800a380:	616b      	str	r3, [r5, #20]
 800a382:	2300      	movs	r3, #0
 800a384:	9309      	str	r3, [sp, #36]	; 0x24
 800a386:	2320      	movs	r3, #32
 800a388:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a38c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a390:	2330      	movs	r3, #48	; 0x30
 800a392:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a53c <_svfiprintf_r+0x1ec>
 800a396:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a39a:	f04f 0901 	mov.w	r9, #1
 800a39e:	4623      	mov	r3, r4
 800a3a0:	469a      	mov	sl, r3
 800a3a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3a6:	b10a      	cbz	r2, 800a3ac <_svfiprintf_r+0x5c>
 800a3a8:	2a25      	cmp	r2, #37	; 0x25
 800a3aa:	d1f9      	bne.n	800a3a0 <_svfiprintf_r+0x50>
 800a3ac:	ebba 0b04 	subs.w	fp, sl, r4
 800a3b0:	d00b      	beq.n	800a3ca <_svfiprintf_r+0x7a>
 800a3b2:	465b      	mov	r3, fp
 800a3b4:	4622      	mov	r2, r4
 800a3b6:	4629      	mov	r1, r5
 800a3b8:	4638      	mov	r0, r7
 800a3ba:	f7ff ff6d 	bl	800a298 <__ssputs_r>
 800a3be:	3001      	adds	r0, #1
 800a3c0:	f000 80aa 	beq.w	800a518 <_svfiprintf_r+0x1c8>
 800a3c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3c6:	445a      	add	r2, fp
 800a3c8:	9209      	str	r2, [sp, #36]	; 0x24
 800a3ca:	f89a 3000 	ldrb.w	r3, [sl]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	f000 80a2 	beq.w	800a518 <_svfiprintf_r+0x1c8>
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a3da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3de:	f10a 0a01 	add.w	sl, sl, #1
 800a3e2:	9304      	str	r3, [sp, #16]
 800a3e4:	9307      	str	r3, [sp, #28]
 800a3e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3ea:	931a      	str	r3, [sp, #104]	; 0x68
 800a3ec:	4654      	mov	r4, sl
 800a3ee:	2205      	movs	r2, #5
 800a3f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3f4:	4851      	ldr	r0, [pc, #324]	; (800a53c <_svfiprintf_r+0x1ec>)
 800a3f6:	f7f5 fef3 	bl	80001e0 <memchr>
 800a3fa:	9a04      	ldr	r2, [sp, #16]
 800a3fc:	b9d8      	cbnz	r0, 800a436 <_svfiprintf_r+0xe6>
 800a3fe:	06d0      	lsls	r0, r2, #27
 800a400:	bf44      	itt	mi
 800a402:	2320      	movmi	r3, #32
 800a404:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a408:	0711      	lsls	r1, r2, #28
 800a40a:	bf44      	itt	mi
 800a40c:	232b      	movmi	r3, #43	; 0x2b
 800a40e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a412:	f89a 3000 	ldrb.w	r3, [sl]
 800a416:	2b2a      	cmp	r3, #42	; 0x2a
 800a418:	d015      	beq.n	800a446 <_svfiprintf_r+0xf6>
 800a41a:	9a07      	ldr	r2, [sp, #28]
 800a41c:	4654      	mov	r4, sl
 800a41e:	2000      	movs	r0, #0
 800a420:	f04f 0c0a 	mov.w	ip, #10
 800a424:	4621      	mov	r1, r4
 800a426:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a42a:	3b30      	subs	r3, #48	; 0x30
 800a42c:	2b09      	cmp	r3, #9
 800a42e:	d94e      	bls.n	800a4ce <_svfiprintf_r+0x17e>
 800a430:	b1b0      	cbz	r0, 800a460 <_svfiprintf_r+0x110>
 800a432:	9207      	str	r2, [sp, #28]
 800a434:	e014      	b.n	800a460 <_svfiprintf_r+0x110>
 800a436:	eba0 0308 	sub.w	r3, r0, r8
 800a43a:	fa09 f303 	lsl.w	r3, r9, r3
 800a43e:	4313      	orrs	r3, r2
 800a440:	9304      	str	r3, [sp, #16]
 800a442:	46a2      	mov	sl, r4
 800a444:	e7d2      	b.n	800a3ec <_svfiprintf_r+0x9c>
 800a446:	9b03      	ldr	r3, [sp, #12]
 800a448:	1d19      	adds	r1, r3, #4
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	9103      	str	r1, [sp, #12]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	bfbb      	ittet	lt
 800a452:	425b      	neglt	r3, r3
 800a454:	f042 0202 	orrlt.w	r2, r2, #2
 800a458:	9307      	strge	r3, [sp, #28]
 800a45a:	9307      	strlt	r3, [sp, #28]
 800a45c:	bfb8      	it	lt
 800a45e:	9204      	strlt	r2, [sp, #16]
 800a460:	7823      	ldrb	r3, [r4, #0]
 800a462:	2b2e      	cmp	r3, #46	; 0x2e
 800a464:	d10c      	bne.n	800a480 <_svfiprintf_r+0x130>
 800a466:	7863      	ldrb	r3, [r4, #1]
 800a468:	2b2a      	cmp	r3, #42	; 0x2a
 800a46a:	d135      	bne.n	800a4d8 <_svfiprintf_r+0x188>
 800a46c:	9b03      	ldr	r3, [sp, #12]
 800a46e:	1d1a      	adds	r2, r3, #4
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	9203      	str	r2, [sp, #12]
 800a474:	2b00      	cmp	r3, #0
 800a476:	bfb8      	it	lt
 800a478:	f04f 33ff 	movlt.w	r3, #4294967295
 800a47c:	3402      	adds	r4, #2
 800a47e:	9305      	str	r3, [sp, #20]
 800a480:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a54c <_svfiprintf_r+0x1fc>
 800a484:	7821      	ldrb	r1, [r4, #0]
 800a486:	2203      	movs	r2, #3
 800a488:	4650      	mov	r0, sl
 800a48a:	f7f5 fea9 	bl	80001e0 <memchr>
 800a48e:	b140      	cbz	r0, 800a4a2 <_svfiprintf_r+0x152>
 800a490:	2340      	movs	r3, #64	; 0x40
 800a492:	eba0 000a 	sub.w	r0, r0, sl
 800a496:	fa03 f000 	lsl.w	r0, r3, r0
 800a49a:	9b04      	ldr	r3, [sp, #16]
 800a49c:	4303      	orrs	r3, r0
 800a49e:	3401      	adds	r4, #1
 800a4a0:	9304      	str	r3, [sp, #16]
 800a4a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4a6:	4826      	ldr	r0, [pc, #152]	; (800a540 <_svfiprintf_r+0x1f0>)
 800a4a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4ac:	2206      	movs	r2, #6
 800a4ae:	f7f5 fe97 	bl	80001e0 <memchr>
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	d038      	beq.n	800a528 <_svfiprintf_r+0x1d8>
 800a4b6:	4b23      	ldr	r3, [pc, #140]	; (800a544 <_svfiprintf_r+0x1f4>)
 800a4b8:	bb1b      	cbnz	r3, 800a502 <_svfiprintf_r+0x1b2>
 800a4ba:	9b03      	ldr	r3, [sp, #12]
 800a4bc:	3307      	adds	r3, #7
 800a4be:	f023 0307 	bic.w	r3, r3, #7
 800a4c2:	3308      	adds	r3, #8
 800a4c4:	9303      	str	r3, [sp, #12]
 800a4c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4c8:	4433      	add	r3, r6
 800a4ca:	9309      	str	r3, [sp, #36]	; 0x24
 800a4cc:	e767      	b.n	800a39e <_svfiprintf_r+0x4e>
 800a4ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4d2:	460c      	mov	r4, r1
 800a4d4:	2001      	movs	r0, #1
 800a4d6:	e7a5      	b.n	800a424 <_svfiprintf_r+0xd4>
 800a4d8:	2300      	movs	r3, #0
 800a4da:	3401      	adds	r4, #1
 800a4dc:	9305      	str	r3, [sp, #20]
 800a4de:	4619      	mov	r1, r3
 800a4e0:	f04f 0c0a 	mov.w	ip, #10
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4ea:	3a30      	subs	r2, #48	; 0x30
 800a4ec:	2a09      	cmp	r2, #9
 800a4ee:	d903      	bls.n	800a4f8 <_svfiprintf_r+0x1a8>
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d0c5      	beq.n	800a480 <_svfiprintf_r+0x130>
 800a4f4:	9105      	str	r1, [sp, #20]
 800a4f6:	e7c3      	b.n	800a480 <_svfiprintf_r+0x130>
 800a4f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4fc:	4604      	mov	r4, r0
 800a4fe:	2301      	movs	r3, #1
 800a500:	e7f0      	b.n	800a4e4 <_svfiprintf_r+0x194>
 800a502:	ab03      	add	r3, sp, #12
 800a504:	9300      	str	r3, [sp, #0]
 800a506:	462a      	mov	r2, r5
 800a508:	4b0f      	ldr	r3, [pc, #60]	; (800a548 <_svfiprintf_r+0x1f8>)
 800a50a:	a904      	add	r1, sp, #16
 800a50c:	4638      	mov	r0, r7
 800a50e:	f7fd feab 	bl	8008268 <_printf_float>
 800a512:	1c42      	adds	r2, r0, #1
 800a514:	4606      	mov	r6, r0
 800a516:	d1d6      	bne.n	800a4c6 <_svfiprintf_r+0x176>
 800a518:	89ab      	ldrh	r3, [r5, #12]
 800a51a:	065b      	lsls	r3, r3, #25
 800a51c:	f53f af2c 	bmi.w	800a378 <_svfiprintf_r+0x28>
 800a520:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a522:	b01d      	add	sp, #116	; 0x74
 800a524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a528:	ab03      	add	r3, sp, #12
 800a52a:	9300      	str	r3, [sp, #0]
 800a52c:	462a      	mov	r2, r5
 800a52e:	4b06      	ldr	r3, [pc, #24]	; (800a548 <_svfiprintf_r+0x1f8>)
 800a530:	a904      	add	r1, sp, #16
 800a532:	4638      	mov	r0, r7
 800a534:	f7fe f93c 	bl	80087b0 <_printf_i>
 800a538:	e7eb      	b.n	800a512 <_svfiprintf_r+0x1c2>
 800a53a:	bf00      	nop
 800a53c:	0800b10c 	.word	0x0800b10c
 800a540:	0800b116 	.word	0x0800b116
 800a544:	08008269 	.word	0x08008269
 800a548:	0800a299 	.word	0x0800a299
 800a54c:	0800b112 	.word	0x0800b112

0800a550 <_read_r>:
 800a550:	b538      	push	{r3, r4, r5, lr}
 800a552:	4d07      	ldr	r5, [pc, #28]	; (800a570 <_read_r+0x20>)
 800a554:	4604      	mov	r4, r0
 800a556:	4608      	mov	r0, r1
 800a558:	4611      	mov	r1, r2
 800a55a:	2200      	movs	r2, #0
 800a55c:	602a      	str	r2, [r5, #0]
 800a55e:	461a      	mov	r2, r3
 800a560:	f7f6 feda 	bl	8001318 <_read>
 800a564:	1c43      	adds	r3, r0, #1
 800a566:	d102      	bne.n	800a56e <_read_r+0x1e>
 800a568:	682b      	ldr	r3, [r5, #0]
 800a56a:	b103      	cbz	r3, 800a56e <_read_r+0x1e>
 800a56c:	6023      	str	r3, [r4, #0]
 800a56e:	bd38      	pop	{r3, r4, r5, pc}
 800a570:	20001bcc 	.word	0x20001bcc

0800a574 <__assert_func>:
 800a574:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a576:	4614      	mov	r4, r2
 800a578:	461a      	mov	r2, r3
 800a57a:	4b09      	ldr	r3, [pc, #36]	; (800a5a0 <__assert_func+0x2c>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4605      	mov	r5, r0
 800a580:	68d8      	ldr	r0, [r3, #12]
 800a582:	b14c      	cbz	r4, 800a598 <__assert_func+0x24>
 800a584:	4b07      	ldr	r3, [pc, #28]	; (800a5a4 <__assert_func+0x30>)
 800a586:	9100      	str	r1, [sp, #0]
 800a588:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a58c:	4906      	ldr	r1, [pc, #24]	; (800a5a8 <__assert_func+0x34>)
 800a58e:	462b      	mov	r3, r5
 800a590:	f000 f80e 	bl	800a5b0 <fiprintf>
 800a594:	f000 faa0 	bl	800aad8 <abort>
 800a598:	4b04      	ldr	r3, [pc, #16]	; (800a5ac <__assert_func+0x38>)
 800a59a:	461c      	mov	r4, r3
 800a59c:	e7f3      	b.n	800a586 <__assert_func+0x12>
 800a59e:	bf00      	nop
 800a5a0:	20000010 	.word	0x20000010
 800a5a4:	0800b11d 	.word	0x0800b11d
 800a5a8:	0800b12a 	.word	0x0800b12a
 800a5ac:	0800b158 	.word	0x0800b158

0800a5b0 <fiprintf>:
 800a5b0:	b40e      	push	{r1, r2, r3}
 800a5b2:	b503      	push	{r0, r1, lr}
 800a5b4:	4601      	mov	r1, r0
 800a5b6:	ab03      	add	r3, sp, #12
 800a5b8:	4805      	ldr	r0, [pc, #20]	; (800a5d0 <fiprintf+0x20>)
 800a5ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5be:	6800      	ldr	r0, [r0, #0]
 800a5c0:	9301      	str	r3, [sp, #4]
 800a5c2:	f000 f88b 	bl	800a6dc <_vfiprintf_r>
 800a5c6:	b002      	add	sp, #8
 800a5c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5cc:	b003      	add	sp, #12
 800a5ce:	4770      	bx	lr
 800a5d0:	20000010 	.word	0x20000010

0800a5d4 <__ascii_mbtowc>:
 800a5d4:	b082      	sub	sp, #8
 800a5d6:	b901      	cbnz	r1, 800a5da <__ascii_mbtowc+0x6>
 800a5d8:	a901      	add	r1, sp, #4
 800a5da:	b142      	cbz	r2, 800a5ee <__ascii_mbtowc+0x1a>
 800a5dc:	b14b      	cbz	r3, 800a5f2 <__ascii_mbtowc+0x1e>
 800a5de:	7813      	ldrb	r3, [r2, #0]
 800a5e0:	600b      	str	r3, [r1, #0]
 800a5e2:	7812      	ldrb	r2, [r2, #0]
 800a5e4:	1e10      	subs	r0, r2, #0
 800a5e6:	bf18      	it	ne
 800a5e8:	2001      	movne	r0, #1
 800a5ea:	b002      	add	sp, #8
 800a5ec:	4770      	bx	lr
 800a5ee:	4610      	mov	r0, r2
 800a5f0:	e7fb      	b.n	800a5ea <__ascii_mbtowc+0x16>
 800a5f2:	f06f 0001 	mvn.w	r0, #1
 800a5f6:	e7f8      	b.n	800a5ea <__ascii_mbtowc+0x16>

0800a5f8 <memmove>:
 800a5f8:	4288      	cmp	r0, r1
 800a5fa:	b510      	push	{r4, lr}
 800a5fc:	eb01 0402 	add.w	r4, r1, r2
 800a600:	d902      	bls.n	800a608 <memmove+0x10>
 800a602:	4284      	cmp	r4, r0
 800a604:	4623      	mov	r3, r4
 800a606:	d807      	bhi.n	800a618 <memmove+0x20>
 800a608:	1e43      	subs	r3, r0, #1
 800a60a:	42a1      	cmp	r1, r4
 800a60c:	d008      	beq.n	800a620 <memmove+0x28>
 800a60e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a612:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a616:	e7f8      	b.n	800a60a <memmove+0x12>
 800a618:	4402      	add	r2, r0
 800a61a:	4601      	mov	r1, r0
 800a61c:	428a      	cmp	r2, r1
 800a61e:	d100      	bne.n	800a622 <memmove+0x2a>
 800a620:	bd10      	pop	{r4, pc}
 800a622:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a626:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a62a:	e7f7      	b.n	800a61c <memmove+0x24>

0800a62c <_realloc_r>:
 800a62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a630:	4680      	mov	r8, r0
 800a632:	4614      	mov	r4, r2
 800a634:	460e      	mov	r6, r1
 800a636:	b921      	cbnz	r1, 800a642 <_realloc_r+0x16>
 800a638:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a63c:	4611      	mov	r1, r2
 800a63e:	f7fd bcff 	b.w	8008040 <_malloc_r>
 800a642:	b92a      	cbnz	r2, 800a650 <_realloc_r+0x24>
 800a644:	f7ff fddc 	bl	800a200 <_free_r>
 800a648:	4625      	mov	r5, r4
 800a64a:	4628      	mov	r0, r5
 800a64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a650:	f000 faae 	bl	800abb0 <_malloc_usable_size_r>
 800a654:	4284      	cmp	r4, r0
 800a656:	4607      	mov	r7, r0
 800a658:	d802      	bhi.n	800a660 <_realloc_r+0x34>
 800a65a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a65e:	d812      	bhi.n	800a686 <_realloc_r+0x5a>
 800a660:	4621      	mov	r1, r4
 800a662:	4640      	mov	r0, r8
 800a664:	f7fd fcec 	bl	8008040 <_malloc_r>
 800a668:	4605      	mov	r5, r0
 800a66a:	2800      	cmp	r0, #0
 800a66c:	d0ed      	beq.n	800a64a <_realloc_r+0x1e>
 800a66e:	42bc      	cmp	r4, r7
 800a670:	4622      	mov	r2, r4
 800a672:	4631      	mov	r1, r6
 800a674:	bf28      	it	cs
 800a676:	463a      	movcs	r2, r7
 800a678:	f7fd fcab 	bl	8007fd2 <memcpy>
 800a67c:	4631      	mov	r1, r6
 800a67e:	4640      	mov	r0, r8
 800a680:	f7ff fdbe 	bl	800a200 <_free_r>
 800a684:	e7e1      	b.n	800a64a <_realloc_r+0x1e>
 800a686:	4635      	mov	r5, r6
 800a688:	e7df      	b.n	800a64a <_realloc_r+0x1e>

0800a68a <__sfputc_r>:
 800a68a:	6893      	ldr	r3, [r2, #8]
 800a68c:	3b01      	subs	r3, #1
 800a68e:	2b00      	cmp	r3, #0
 800a690:	b410      	push	{r4}
 800a692:	6093      	str	r3, [r2, #8]
 800a694:	da08      	bge.n	800a6a8 <__sfputc_r+0x1e>
 800a696:	6994      	ldr	r4, [r2, #24]
 800a698:	42a3      	cmp	r3, r4
 800a69a:	db01      	blt.n	800a6a0 <__sfputc_r+0x16>
 800a69c:	290a      	cmp	r1, #10
 800a69e:	d103      	bne.n	800a6a8 <__sfputc_r+0x1e>
 800a6a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6a4:	f000 b94a 	b.w	800a93c <__swbuf_r>
 800a6a8:	6813      	ldr	r3, [r2, #0]
 800a6aa:	1c58      	adds	r0, r3, #1
 800a6ac:	6010      	str	r0, [r2, #0]
 800a6ae:	7019      	strb	r1, [r3, #0]
 800a6b0:	4608      	mov	r0, r1
 800a6b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <__sfputs_r>:
 800a6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ba:	4606      	mov	r6, r0
 800a6bc:	460f      	mov	r7, r1
 800a6be:	4614      	mov	r4, r2
 800a6c0:	18d5      	adds	r5, r2, r3
 800a6c2:	42ac      	cmp	r4, r5
 800a6c4:	d101      	bne.n	800a6ca <__sfputs_r+0x12>
 800a6c6:	2000      	movs	r0, #0
 800a6c8:	e007      	b.n	800a6da <__sfputs_r+0x22>
 800a6ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6ce:	463a      	mov	r2, r7
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	f7ff ffda 	bl	800a68a <__sfputc_r>
 800a6d6:	1c43      	adds	r3, r0, #1
 800a6d8:	d1f3      	bne.n	800a6c2 <__sfputs_r+0xa>
 800a6da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a6dc <_vfiprintf_r>:
 800a6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e0:	460d      	mov	r5, r1
 800a6e2:	b09d      	sub	sp, #116	; 0x74
 800a6e4:	4614      	mov	r4, r2
 800a6e6:	4698      	mov	r8, r3
 800a6e8:	4606      	mov	r6, r0
 800a6ea:	b118      	cbz	r0, 800a6f4 <_vfiprintf_r+0x18>
 800a6ec:	6983      	ldr	r3, [r0, #24]
 800a6ee:	b90b      	cbnz	r3, 800a6f4 <_vfiprintf_r+0x18>
 800a6f0:	f7fd fb9a 	bl	8007e28 <__sinit>
 800a6f4:	4b89      	ldr	r3, [pc, #548]	; (800a91c <_vfiprintf_r+0x240>)
 800a6f6:	429d      	cmp	r5, r3
 800a6f8:	d11b      	bne.n	800a732 <_vfiprintf_r+0x56>
 800a6fa:	6875      	ldr	r5, [r6, #4]
 800a6fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6fe:	07d9      	lsls	r1, r3, #31
 800a700:	d405      	bmi.n	800a70e <_vfiprintf_r+0x32>
 800a702:	89ab      	ldrh	r3, [r5, #12]
 800a704:	059a      	lsls	r2, r3, #22
 800a706:	d402      	bmi.n	800a70e <_vfiprintf_r+0x32>
 800a708:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a70a:	f7fd fc50 	bl	8007fae <__retarget_lock_acquire_recursive>
 800a70e:	89ab      	ldrh	r3, [r5, #12]
 800a710:	071b      	lsls	r3, r3, #28
 800a712:	d501      	bpl.n	800a718 <_vfiprintf_r+0x3c>
 800a714:	692b      	ldr	r3, [r5, #16]
 800a716:	b9eb      	cbnz	r3, 800a754 <_vfiprintf_r+0x78>
 800a718:	4629      	mov	r1, r5
 800a71a:	4630      	mov	r0, r6
 800a71c:	f000 f96e 	bl	800a9fc <__swsetup_r>
 800a720:	b1c0      	cbz	r0, 800a754 <_vfiprintf_r+0x78>
 800a722:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a724:	07dc      	lsls	r4, r3, #31
 800a726:	d50e      	bpl.n	800a746 <_vfiprintf_r+0x6a>
 800a728:	f04f 30ff 	mov.w	r0, #4294967295
 800a72c:	b01d      	add	sp, #116	; 0x74
 800a72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a732:	4b7b      	ldr	r3, [pc, #492]	; (800a920 <_vfiprintf_r+0x244>)
 800a734:	429d      	cmp	r5, r3
 800a736:	d101      	bne.n	800a73c <_vfiprintf_r+0x60>
 800a738:	68b5      	ldr	r5, [r6, #8]
 800a73a:	e7df      	b.n	800a6fc <_vfiprintf_r+0x20>
 800a73c:	4b79      	ldr	r3, [pc, #484]	; (800a924 <_vfiprintf_r+0x248>)
 800a73e:	429d      	cmp	r5, r3
 800a740:	bf08      	it	eq
 800a742:	68f5      	ldreq	r5, [r6, #12]
 800a744:	e7da      	b.n	800a6fc <_vfiprintf_r+0x20>
 800a746:	89ab      	ldrh	r3, [r5, #12]
 800a748:	0598      	lsls	r0, r3, #22
 800a74a:	d4ed      	bmi.n	800a728 <_vfiprintf_r+0x4c>
 800a74c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a74e:	f7fd fc2f 	bl	8007fb0 <__retarget_lock_release_recursive>
 800a752:	e7e9      	b.n	800a728 <_vfiprintf_r+0x4c>
 800a754:	2300      	movs	r3, #0
 800a756:	9309      	str	r3, [sp, #36]	; 0x24
 800a758:	2320      	movs	r3, #32
 800a75a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a75e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a762:	2330      	movs	r3, #48	; 0x30
 800a764:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a928 <_vfiprintf_r+0x24c>
 800a768:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a76c:	f04f 0901 	mov.w	r9, #1
 800a770:	4623      	mov	r3, r4
 800a772:	469a      	mov	sl, r3
 800a774:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a778:	b10a      	cbz	r2, 800a77e <_vfiprintf_r+0xa2>
 800a77a:	2a25      	cmp	r2, #37	; 0x25
 800a77c:	d1f9      	bne.n	800a772 <_vfiprintf_r+0x96>
 800a77e:	ebba 0b04 	subs.w	fp, sl, r4
 800a782:	d00b      	beq.n	800a79c <_vfiprintf_r+0xc0>
 800a784:	465b      	mov	r3, fp
 800a786:	4622      	mov	r2, r4
 800a788:	4629      	mov	r1, r5
 800a78a:	4630      	mov	r0, r6
 800a78c:	f7ff ff94 	bl	800a6b8 <__sfputs_r>
 800a790:	3001      	adds	r0, #1
 800a792:	f000 80aa 	beq.w	800a8ea <_vfiprintf_r+0x20e>
 800a796:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a798:	445a      	add	r2, fp
 800a79a:	9209      	str	r2, [sp, #36]	; 0x24
 800a79c:	f89a 3000 	ldrb.w	r3, [sl]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	f000 80a2 	beq.w	800a8ea <_vfiprintf_r+0x20e>
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7b0:	f10a 0a01 	add.w	sl, sl, #1
 800a7b4:	9304      	str	r3, [sp, #16]
 800a7b6:	9307      	str	r3, [sp, #28]
 800a7b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7bc:	931a      	str	r3, [sp, #104]	; 0x68
 800a7be:	4654      	mov	r4, sl
 800a7c0:	2205      	movs	r2, #5
 800a7c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7c6:	4858      	ldr	r0, [pc, #352]	; (800a928 <_vfiprintf_r+0x24c>)
 800a7c8:	f7f5 fd0a 	bl	80001e0 <memchr>
 800a7cc:	9a04      	ldr	r2, [sp, #16]
 800a7ce:	b9d8      	cbnz	r0, 800a808 <_vfiprintf_r+0x12c>
 800a7d0:	06d1      	lsls	r1, r2, #27
 800a7d2:	bf44      	itt	mi
 800a7d4:	2320      	movmi	r3, #32
 800a7d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7da:	0713      	lsls	r3, r2, #28
 800a7dc:	bf44      	itt	mi
 800a7de:	232b      	movmi	r3, #43	; 0x2b
 800a7e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a7e8:	2b2a      	cmp	r3, #42	; 0x2a
 800a7ea:	d015      	beq.n	800a818 <_vfiprintf_r+0x13c>
 800a7ec:	9a07      	ldr	r2, [sp, #28]
 800a7ee:	4654      	mov	r4, sl
 800a7f0:	2000      	movs	r0, #0
 800a7f2:	f04f 0c0a 	mov.w	ip, #10
 800a7f6:	4621      	mov	r1, r4
 800a7f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7fc:	3b30      	subs	r3, #48	; 0x30
 800a7fe:	2b09      	cmp	r3, #9
 800a800:	d94e      	bls.n	800a8a0 <_vfiprintf_r+0x1c4>
 800a802:	b1b0      	cbz	r0, 800a832 <_vfiprintf_r+0x156>
 800a804:	9207      	str	r2, [sp, #28]
 800a806:	e014      	b.n	800a832 <_vfiprintf_r+0x156>
 800a808:	eba0 0308 	sub.w	r3, r0, r8
 800a80c:	fa09 f303 	lsl.w	r3, r9, r3
 800a810:	4313      	orrs	r3, r2
 800a812:	9304      	str	r3, [sp, #16]
 800a814:	46a2      	mov	sl, r4
 800a816:	e7d2      	b.n	800a7be <_vfiprintf_r+0xe2>
 800a818:	9b03      	ldr	r3, [sp, #12]
 800a81a:	1d19      	adds	r1, r3, #4
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	9103      	str	r1, [sp, #12]
 800a820:	2b00      	cmp	r3, #0
 800a822:	bfbb      	ittet	lt
 800a824:	425b      	neglt	r3, r3
 800a826:	f042 0202 	orrlt.w	r2, r2, #2
 800a82a:	9307      	strge	r3, [sp, #28]
 800a82c:	9307      	strlt	r3, [sp, #28]
 800a82e:	bfb8      	it	lt
 800a830:	9204      	strlt	r2, [sp, #16]
 800a832:	7823      	ldrb	r3, [r4, #0]
 800a834:	2b2e      	cmp	r3, #46	; 0x2e
 800a836:	d10c      	bne.n	800a852 <_vfiprintf_r+0x176>
 800a838:	7863      	ldrb	r3, [r4, #1]
 800a83a:	2b2a      	cmp	r3, #42	; 0x2a
 800a83c:	d135      	bne.n	800a8aa <_vfiprintf_r+0x1ce>
 800a83e:	9b03      	ldr	r3, [sp, #12]
 800a840:	1d1a      	adds	r2, r3, #4
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	9203      	str	r2, [sp, #12]
 800a846:	2b00      	cmp	r3, #0
 800a848:	bfb8      	it	lt
 800a84a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a84e:	3402      	adds	r4, #2
 800a850:	9305      	str	r3, [sp, #20]
 800a852:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a938 <_vfiprintf_r+0x25c>
 800a856:	7821      	ldrb	r1, [r4, #0]
 800a858:	2203      	movs	r2, #3
 800a85a:	4650      	mov	r0, sl
 800a85c:	f7f5 fcc0 	bl	80001e0 <memchr>
 800a860:	b140      	cbz	r0, 800a874 <_vfiprintf_r+0x198>
 800a862:	2340      	movs	r3, #64	; 0x40
 800a864:	eba0 000a 	sub.w	r0, r0, sl
 800a868:	fa03 f000 	lsl.w	r0, r3, r0
 800a86c:	9b04      	ldr	r3, [sp, #16]
 800a86e:	4303      	orrs	r3, r0
 800a870:	3401      	adds	r4, #1
 800a872:	9304      	str	r3, [sp, #16]
 800a874:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a878:	482c      	ldr	r0, [pc, #176]	; (800a92c <_vfiprintf_r+0x250>)
 800a87a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a87e:	2206      	movs	r2, #6
 800a880:	f7f5 fcae 	bl	80001e0 <memchr>
 800a884:	2800      	cmp	r0, #0
 800a886:	d03f      	beq.n	800a908 <_vfiprintf_r+0x22c>
 800a888:	4b29      	ldr	r3, [pc, #164]	; (800a930 <_vfiprintf_r+0x254>)
 800a88a:	bb1b      	cbnz	r3, 800a8d4 <_vfiprintf_r+0x1f8>
 800a88c:	9b03      	ldr	r3, [sp, #12]
 800a88e:	3307      	adds	r3, #7
 800a890:	f023 0307 	bic.w	r3, r3, #7
 800a894:	3308      	adds	r3, #8
 800a896:	9303      	str	r3, [sp, #12]
 800a898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a89a:	443b      	add	r3, r7
 800a89c:	9309      	str	r3, [sp, #36]	; 0x24
 800a89e:	e767      	b.n	800a770 <_vfiprintf_r+0x94>
 800a8a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8a4:	460c      	mov	r4, r1
 800a8a6:	2001      	movs	r0, #1
 800a8a8:	e7a5      	b.n	800a7f6 <_vfiprintf_r+0x11a>
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	3401      	adds	r4, #1
 800a8ae:	9305      	str	r3, [sp, #20]
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	f04f 0c0a 	mov.w	ip, #10
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8bc:	3a30      	subs	r2, #48	; 0x30
 800a8be:	2a09      	cmp	r2, #9
 800a8c0:	d903      	bls.n	800a8ca <_vfiprintf_r+0x1ee>
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d0c5      	beq.n	800a852 <_vfiprintf_r+0x176>
 800a8c6:	9105      	str	r1, [sp, #20]
 800a8c8:	e7c3      	b.n	800a852 <_vfiprintf_r+0x176>
 800a8ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8ce:	4604      	mov	r4, r0
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	e7f0      	b.n	800a8b6 <_vfiprintf_r+0x1da>
 800a8d4:	ab03      	add	r3, sp, #12
 800a8d6:	9300      	str	r3, [sp, #0]
 800a8d8:	462a      	mov	r2, r5
 800a8da:	4b16      	ldr	r3, [pc, #88]	; (800a934 <_vfiprintf_r+0x258>)
 800a8dc:	a904      	add	r1, sp, #16
 800a8de:	4630      	mov	r0, r6
 800a8e0:	f7fd fcc2 	bl	8008268 <_printf_float>
 800a8e4:	4607      	mov	r7, r0
 800a8e6:	1c78      	adds	r0, r7, #1
 800a8e8:	d1d6      	bne.n	800a898 <_vfiprintf_r+0x1bc>
 800a8ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8ec:	07d9      	lsls	r1, r3, #31
 800a8ee:	d405      	bmi.n	800a8fc <_vfiprintf_r+0x220>
 800a8f0:	89ab      	ldrh	r3, [r5, #12]
 800a8f2:	059a      	lsls	r2, r3, #22
 800a8f4:	d402      	bmi.n	800a8fc <_vfiprintf_r+0x220>
 800a8f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8f8:	f7fd fb5a 	bl	8007fb0 <__retarget_lock_release_recursive>
 800a8fc:	89ab      	ldrh	r3, [r5, #12]
 800a8fe:	065b      	lsls	r3, r3, #25
 800a900:	f53f af12 	bmi.w	800a728 <_vfiprintf_r+0x4c>
 800a904:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a906:	e711      	b.n	800a72c <_vfiprintf_r+0x50>
 800a908:	ab03      	add	r3, sp, #12
 800a90a:	9300      	str	r3, [sp, #0]
 800a90c:	462a      	mov	r2, r5
 800a90e:	4b09      	ldr	r3, [pc, #36]	; (800a934 <_vfiprintf_r+0x258>)
 800a910:	a904      	add	r1, sp, #16
 800a912:	4630      	mov	r0, r6
 800a914:	f7fd ff4c 	bl	80087b0 <_printf_i>
 800a918:	e7e4      	b.n	800a8e4 <_vfiprintf_r+0x208>
 800a91a:	bf00      	nop
 800a91c:	0800aeac 	.word	0x0800aeac
 800a920:	0800aecc 	.word	0x0800aecc
 800a924:	0800ae8c 	.word	0x0800ae8c
 800a928:	0800b10c 	.word	0x0800b10c
 800a92c:	0800b116 	.word	0x0800b116
 800a930:	08008269 	.word	0x08008269
 800a934:	0800a6b9 	.word	0x0800a6b9
 800a938:	0800b112 	.word	0x0800b112

0800a93c <__swbuf_r>:
 800a93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a93e:	460e      	mov	r6, r1
 800a940:	4614      	mov	r4, r2
 800a942:	4605      	mov	r5, r0
 800a944:	b118      	cbz	r0, 800a94e <__swbuf_r+0x12>
 800a946:	6983      	ldr	r3, [r0, #24]
 800a948:	b90b      	cbnz	r3, 800a94e <__swbuf_r+0x12>
 800a94a:	f7fd fa6d 	bl	8007e28 <__sinit>
 800a94e:	4b21      	ldr	r3, [pc, #132]	; (800a9d4 <__swbuf_r+0x98>)
 800a950:	429c      	cmp	r4, r3
 800a952:	d12b      	bne.n	800a9ac <__swbuf_r+0x70>
 800a954:	686c      	ldr	r4, [r5, #4]
 800a956:	69a3      	ldr	r3, [r4, #24]
 800a958:	60a3      	str	r3, [r4, #8]
 800a95a:	89a3      	ldrh	r3, [r4, #12]
 800a95c:	071a      	lsls	r2, r3, #28
 800a95e:	d52f      	bpl.n	800a9c0 <__swbuf_r+0x84>
 800a960:	6923      	ldr	r3, [r4, #16]
 800a962:	b36b      	cbz	r3, 800a9c0 <__swbuf_r+0x84>
 800a964:	6923      	ldr	r3, [r4, #16]
 800a966:	6820      	ldr	r0, [r4, #0]
 800a968:	1ac0      	subs	r0, r0, r3
 800a96a:	6963      	ldr	r3, [r4, #20]
 800a96c:	b2f6      	uxtb	r6, r6
 800a96e:	4283      	cmp	r3, r0
 800a970:	4637      	mov	r7, r6
 800a972:	dc04      	bgt.n	800a97e <__swbuf_r+0x42>
 800a974:	4621      	mov	r1, r4
 800a976:	4628      	mov	r0, r5
 800a978:	f7ff f842 	bl	8009a00 <_fflush_r>
 800a97c:	bb30      	cbnz	r0, 800a9cc <__swbuf_r+0x90>
 800a97e:	68a3      	ldr	r3, [r4, #8]
 800a980:	3b01      	subs	r3, #1
 800a982:	60a3      	str	r3, [r4, #8]
 800a984:	6823      	ldr	r3, [r4, #0]
 800a986:	1c5a      	adds	r2, r3, #1
 800a988:	6022      	str	r2, [r4, #0]
 800a98a:	701e      	strb	r6, [r3, #0]
 800a98c:	6963      	ldr	r3, [r4, #20]
 800a98e:	3001      	adds	r0, #1
 800a990:	4283      	cmp	r3, r0
 800a992:	d004      	beq.n	800a99e <__swbuf_r+0x62>
 800a994:	89a3      	ldrh	r3, [r4, #12]
 800a996:	07db      	lsls	r3, r3, #31
 800a998:	d506      	bpl.n	800a9a8 <__swbuf_r+0x6c>
 800a99a:	2e0a      	cmp	r6, #10
 800a99c:	d104      	bne.n	800a9a8 <__swbuf_r+0x6c>
 800a99e:	4621      	mov	r1, r4
 800a9a0:	4628      	mov	r0, r5
 800a9a2:	f7ff f82d 	bl	8009a00 <_fflush_r>
 800a9a6:	b988      	cbnz	r0, 800a9cc <__swbuf_r+0x90>
 800a9a8:	4638      	mov	r0, r7
 800a9aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9ac:	4b0a      	ldr	r3, [pc, #40]	; (800a9d8 <__swbuf_r+0x9c>)
 800a9ae:	429c      	cmp	r4, r3
 800a9b0:	d101      	bne.n	800a9b6 <__swbuf_r+0x7a>
 800a9b2:	68ac      	ldr	r4, [r5, #8]
 800a9b4:	e7cf      	b.n	800a956 <__swbuf_r+0x1a>
 800a9b6:	4b09      	ldr	r3, [pc, #36]	; (800a9dc <__swbuf_r+0xa0>)
 800a9b8:	429c      	cmp	r4, r3
 800a9ba:	bf08      	it	eq
 800a9bc:	68ec      	ldreq	r4, [r5, #12]
 800a9be:	e7ca      	b.n	800a956 <__swbuf_r+0x1a>
 800a9c0:	4621      	mov	r1, r4
 800a9c2:	4628      	mov	r0, r5
 800a9c4:	f000 f81a 	bl	800a9fc <__swsetup_r>
 800a9c8:	2800      	cmp	r0, #0
 800a9ca:	d0cb      	beq.n	800a964 <__swbuf_r+0x28>
 800a9cc:	f04f 37ff 	mov.w	r7, #4294967295
 800a9d0:	e7ea      	b.n	800a9a8 <__swbuf_r+0x6c>
 800a9d2:	bf00      	nop
 800a9d4:	0800aeac 	.word	0x0800aeac
 800a9d8:	0800aecc 	.word	0x0800aecc
 800a9dc:	0800ae8c 	.word	0x0800ae8c

0800a9e0 <__ascii_wctomb>:
 800a9e0:	b149      	cbz	r1, 800a9f6 <__ascii_wctomb+0x16>
 800a9e2:	2aff      	cmp	r2, #255	; 0xff
 800a9e4:	bf85      	ittet	hi
 800a9e6:	238a      	movhi	r3, #138	; 0x8a
 800a9e8:	6003      	strhi	r3, [r0, #0]
 800a9ea:	700a      	strbls	r2, [r1, #0]
 800a9ec:	f04f 30ff 	movhi.w	r0, #4294967295
 800a9f0:	bf98      	it	ls
 800a9f2:	2001      	movls	r0, #1
 800a9f4:	4770      	bx	lr
 800a9f6:	4608      	mov	r0, r1
 800a9f8:	4770      	bx	lr
	...

0800a9fc <__swsetup_r>:
 800a9fc:	4b32      	ldr	r3, [pc, #200]	; (800aac8 <__swsetup_r+0xcc>)
 800a9fe:	b570      	push	{r4, r5, r6, lr}
 800aa00:	681d      	ldr	r5, [r3, #0]
 800aa02:	4606      	mov	r6, r0
 800aa04:	460c      	mov	r4, r1
 800aa06:	b125      	cbz	r5, 800aa12 <__swsetup_r+0x16>
 800aa08:	69ab      	ldr	r3, [r5, #24]
 800aa0a:	b913      	cbnz	r3, 800aa12 <__swsetup_r+0x16>
 800aa0c:	4628      	mov	r0, r5
 800aa0e:	f7fd fa0b 	bl	8007e28 <__sinit>
 800aa12:	4b2e      	ldr	r3, [pc, #184]	; (800aacc <__swsetup_r+0xd0>)
 800aa14:	429c      	cmp	r4, r3
 800aa16:	d10f      	bne.n	800aa38 <__swsetup_r+0x3c>
 800aa18:	686c      	ldr	r4, [r5, #4]
 800aa1a:	89a3      	ldrh	r3, [r4, #12]
 800aa1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa20:	0719      	lsls	r1, r3, #28
 800aa22:	d42c      	bmi.n	800aa7e <__swsetup_r+0x82>
 800aa24:	06dd      	lsls	r5, r3, #27
 800aa26:	d411      	bmi.n	800aa4c <__swsetup_r+0x50>
 800aa28:	2309      	movs	r3, #9
 800aa2a:	6033      	str	r3, [r6, #0]
 800aa2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aa30:	81a3      	strh	r3, [r4, #12]
 800aa32:	f04f 30ff 	mov.w	r0, #4294967295
 800aa36:	e03e      	b.n	800aab6 <__swsetup_r+0xba>
 800aa38:	4b25      	ldr	r3, [pc, #148]	; (800aad0 <__swsetup_r+0xd4>)
 800aa3a:	429c      	cmp	r4, r3
 800aa3c:	d101      	bne.n	800aa42 <__swsetup_r+0x46>
 800aa3e:	68ac      	ldr	r4, [r5, #8]
 800aa40:	e7eb      	b.n	800aa1a <__swsetup_r+0x1e>
 800aa42:	4b24      	ldr	r3, [pc, #144]	; (800aad4 <__swsetup_r+0xd8>)
 800aa44:	429c      	cmp	r4, r3
 800aa46:	bf08      	it	eq
 800aa48:	68ec      	ldreq	r4, [r5, #12]
 800aa4a:	e7e6      	b.n	800aa1a <__swsetup_r+0x1e>
 800aa4c:	0758      	lsls	r0, r3, #29
 800aa4e:	d512      	bpl.n	800aa76 <__swsetup_r+0x7a>
 800aa50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa52:	b141      	cbz	r1, 800aa66 <__swsetup_r+0x6a>
 800aa54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa58:	4299      	cmp	r1, r3
 800aa5a:	d002      	beq.n	800aa62 <__swsetup_r+0x66>
 800aa5c:	4630      	mov	r0, r6
 800aa5e:	f7ff fbcf 	bl	800a200 <_free_r>
 800aa62:	2300      	movs	r3, #0
 800aa64:	6363      	str	r3, [r4, #52]	; 0x34
 800aa66:	89a3      	ldrh	r3, [r4, #12]
 800aa68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aa6c:	81a3      	strh	r3, [r4, #12]
 800aa6e:	2300      	movs	r3, #0
 800aa70:	6063      	str	r3, [r4, #4]
 800aa72:	6923      	ldr	r3, [r4, #16]
 800aa74:	6023      	str	r3, [r4, #0]
 800aa76:	89a3      	ldrh	r3, [r4, #12]
 800aa78:	f043 0308 	orr.w	r3, r3, #8
 800aa7c:	81a3      	strh	r3, [r4, #12]
 800aa7e:	6923      	ldr	r3, [r4, #16]
 800aa80:	b94b      	cbnz	r3, 800aa96 <__swsetup_r+0x9a>
 800aa82:	89a3      	ldrh	r3, [r4, #12]
 800aa84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa8c:	d003      	beq.n	800aa96 <__swsetup_r+0x9a>
 800aa8e:	4621      	mov	r1, r4
 800aa90:	4630      	mov	r0, r6
 800aa92:	f000 f84d 	bl	800ab30 <__smakebuf_r>
 800aa96:	89a0      	ldrh	r0, [r4, #12]
 800aa98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa9c:	f010 0301 	ands.w	r3, r0, #1
 800aaa0:	d00a      	beq.n	800aab8 <__swsetup_r+0xbc>
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	60a3      	str	r3, [r4, #8]
 800aaa6:	6963      	ldr	r3, [r4, #20]
 800aaa8:	425b      	negs	r3, r3
 800aaaa:	61a3      	str	r3, [r4, #24]
 800aaac:	6923      	ldr	r3, [r4, #16]
 800aaae:	b943      	cbnz	r3, 800aac2 <__swsetup_r+0xc6>
 800aab0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aab4:	d1ba      	bne.n	800aa2c <__swsetup_r+0x30>
 800aab6:	bd70      	pop	{r4, r5, r6, pc}
 800aab8:	0781      	lsls	r1, r0, #30
 800aaba:	bf58      	it	pl
 800aabc:	6963      	ldrpl	r3, [r4, #20]
 800aabe:	60a3      	str	r3, [r4, #8]
 800aac0:	e7f4      	b.n	800aaac <__swsetup_r+0xb0>
 800aac2:	2000      	movs	r0, #0
 800aac4:	e7f7      	b.n	800aab6 <__swsetup_r+0xba>
 800aac6:	bf00      	nop
 800aac8:	20000010 	.word	0x20000010
 800aacc:	0800aeac 	.word	0x0800aeac
 800aad0:	0800aecc 	.word	0x0800aecc
 800aad4:	0800ae8c 	.word	0x0800ae8c

0800aad8 <abort>:
 800aad8:	b508      	push	{r3, lr}
 800aada:	2006      	movs	r0, #6
 800aadc:	f000 f898 	bl	800ac10 <raise>
 800aae0:	2001      	movs	r0, #1
 800aae2:	f7f6 fc0f 	bl	8001304 <_exit>

0800aae6 <__swhatbuf_r>:
 800aae6:	b570      	push	{r4, r5, r6, lr}
 800aae8:	460e      	mov	r6, r1
 800aaea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaee:	2900      	cmp	r1, #0
 800aaf0:	b096      	sub	sp, #88	; 0x58
 800aaf2:	4614      	mov	r4, r2
 800aaf4:	461d      	mov	r5, r3
 800aaf6:	da08      	bge.n	800ab0a <__swhatbuf_r+0x24>
 800aaf8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aafc:	2200      	movs	r2, #0
 800aafe:	602a      	str	r2, [r5, #0]
 800ab00:	061a      	lsls	r2, r3, #24
 800ab02:	d410      	bmi.n	800ab26 <__swhatbuf_r+0x40>
 800ab04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab08:	e00e      	b.n	800ab28 <__swhatbuf_r+0x42>
 800ab0a:	466a      	mov	r2, sp
 800ab0c:	f000 f89c 	bl	800ac48 <_fstat_r>
 800ab10:	2800      	cmp	r0, #0
 800ab12:	dbf1      	blt.n	800aaf8 <__swhatbuf_r+0x12>
 800ab14:	9a01      	ldr	r2, [sp, #4]
 800ab16:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ab1a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ab1e:	425a      	negs	r2, r3
 800ab20:	415a      	adcs	r2, r3
 800ab22:	602a      	str	r2, [r5, #0]
 800ab24:	e7ee      	b.n	800ab04 <__swhatbuf_r+0x1e>
 800ab26:	2340      	movs	r3, #64	; 0x40
 800ab28:	2000      	movs	r0, #0
 800ab2a:	6023      	str	r3, [r4, #0]
 800ab2c:	b016      	add	sp, #88	; 0x58
 800ab2e:	bd70      	pop	{r4, r5, r6, pc}

0800ab30 <__smakebuf_r>:
 800ab30:	898b      	ldrh	r3, [r1, #12]
 800ab32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab34:	079d      	lsls	r5, r3, #30
 800ab36:	4606      	mov	r6, r0
 800ab38:	460c      	mov	r4, r1
 800ab3a:	d507      	bpl.n	800ab4c <__smakebuf_r+0x1c>
 800ab3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab40:	6023      	str	r3, [r4, #0]
 800ab42:	6123      	str	r3, [r4, #16]
 800ab44:	2301      	movs	r3, #1
 800ab46:	6163      	str	r3, [r4, #20]
 800ab48:	b002      	add	sp, #8
 800ab4a:	bd70      	pop	{r4, r5, r6, pc}
 800ab4c:	ab01      	add	r3, sp, #4
 800ab4e:	466a      	mov	r2, sp
 800ab50:	f7ff ffc9 	bl	800aae6 <__swhatbuf_r>
 800ab54:	9900      	ldr	r1, [sp, #0]
 800ab56:	4605      	mov	r5, r0
 800ab58:	4630      	mov	r0, r6
 800ab5a:	f7fd fa71 	bl	8008040 <_malloc_r>
 800ab5e:	b948      	cbnz	r0, 800ab74 <__smakebuf_r+0x44>
 800ab60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab64:	059a      	lsls	r2, r3, #22
 800ab66:	d4ef      	bmi.n	800ab48 <__smakebuf_r+0x18>
 800ab68:	f023 0303 	bic.w	r3, r3, #3
 800ab6c:	f043 0302 	orr.w	r3, r3, #2
 800ab70:	81a3      	strh	r3, [r4, #12]
 800ab72:	e7e3      	b.n	800ab3c <__smakebuf_r+0xc>
 800ab74:	4b0d      	ldr	r3, [pc, #52]	; (800abac <__smakebuf_r+0x7c>)
 800ab76:	62b3      	str	r3, [r6, #40]	; 0x28
 800ab78:	89a3      	ldrh	r3, [r4, #12]
 800ab7a:	6020      	str	r0, [r4, #0]
 800ab7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab80:	81a3      	strh	r3, [r4, #12]
 800ab82:	9b00      	ldr	r3, [sp, #0]
 800ab84:	6163      	str	r3, [r4, #20]
 800ab86:	9b01      	ldr	r3, [sp, #4]
 800ab88:	6120      	str	r0, [r4, #16]
 800ab8a:	b15b      	cbz	r3, 800aba4 <__smakebuf_r+0x74>
 800ab8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab90:	4630      	mov	r0, r6
 800ab92:	f000 f86b 	bl	800ac6c <_isatty_r>
 800ab96:	b128      	cbz	r0, 800aba4 <__smakebuf_r+0x74>
 800ab98:	89a3      	ldrh	r3, [r4, #12]
 800ab9a:	f023 0303 	bic.w	r3, r3, #3
 800ab9e:	f043 0301 	orr.w	r3, r3, #1
 800aba2:	81a3      	strh	r3, [r4, #12]
 800aba4:	89a0      	ldrh	r0, [r4, #12]
 800aba6:	4305      	orrs	r5, r0
 800aba8:	81a5      	strh	r5, [r4, #12]
 800abaa:	e7cd      	b.n	800ab48 <__smakebuf_r+0x18>
 800abac:	08007dc1 	.word	0x08007dc1

0800abb0 <_malloc_usable_size_r>:
 800abb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abb4:	1f18      	subs	r0, r3, #4
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	bfbc      	itt	lt
 800abba:	580b      	ldrlt	r3, [r1, r0]
 800abbc:	18c0      	addlt	r0, r0, r3
 800abbe:	4770      	bx	lr

0800abc0 <_raise_r>:
 800abc0:	291f      	cmp	r1, #31
 800abc2:	b538      	push	{r3, r4, r5, lr}
 800abc4:	4604      	mov	r4, r0
 800abc6:	460d      	mov	r5, r1
 800abc8:	d904      	bls.n	800abd4 <_raise_r+0x14>
 800abca:	2316      	movs	r3, #22
 800abcc:	6003      	str	r3, [r0, #0]
 800abce:	f04f 30ff 	mov.w	r0, #4294967295
 800abd2:	bd38      	pop	{r3, r4, r5, pc}
 800abd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800abd6:	b112      	cbz	r2, 800abde <_raise_r+0x1e>
 800abd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800abdc:	b94b      	cbnz	r3, 800abf2 <_raise_r+0x32>
 800abde:	4620      	mov	r0, r4
 800abe0:	f000 f830 	bl	800ac44 <_getpid_r>
 800abe4:	462a      	mov	r2, r5
 800abe6:	4601      	mov	r1, r0
 800abe8:	4620      	mov	r0, r4
 800abea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abee:	f000 b817 	b.w	800ac20 <_kill_r>
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	d00a      	beq.n	800ac0c <_raise_r+0x4c>
 800abf6:	1c59      	adds	r1, r3, #1
 800abf8:	d103      	bne.n	800ac02 <_raise_r+0x42>
 800abfa:	2316      	movs	r3, #22
 800abfc:	6003      	str	r3, [r0, #0]
 800abfe:	2001      	movs	r0, #1
 800ac00:	e7e7      	b.n	800abd2 <_raise_r+0x12>
 800ac02:	2400      	movs	r4, #0
 800ac04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac08:	4628      	mov	r0, r5
 800ac0a:	4798      	blx	r3
 800ac0c:	2000      	movs	r0, #0
 800ac0e:	e7e0      	b.n	800abd2 <_raise_r+0x12>

0800ac10 <raise>:
 800ac10:	4b02      	ldr	r3, [pc, #8]	; (800ac1c <raise+0xc>)
 800ac12:	4601      	mov	r1, r0
 800ac14:	6818      	ldr	r0, [r3, #0]
 800ac16:	f7ff bfd3 	b.w	800abc0 <_raise_r>
 800ac1a:	bf00      	nop
 800ac1c:	20000010 	.word	0x20000010

0800ac20 <_kill_r>:
 800ac20:	b538      	push	{r3, r4, r5, lr}
 800ac22:	4d07      	ldr	r5, [pc, #28]	; (800ac40 <_kill_r+0x20>)
 800ac24:	2300      	movs	r3, #0
 800ac26:	4604      	mov	r4, r0
 800ac28:	4608      	mov	r0, r1
 800ac2a:	4611      	mov	r1, r2
 800ac2c:	602b      	str	r3, [r5, #0]
 800ac2e:	f7f6 fb59 	bl	80012e4 <_kill>
 800ac32:	1c43      	adds	r3, r0, #1
 800ac34:	d102      	bne.n	800ac3c <_kill_r+0x1c>
 800ac36:	682b      	ldr	r3, [r5, #0]
 800ac38:	b103      	cbz	r3, 800ac3c <_kill_r+0x1c>
 800ac3a:	6023      	str	r3, [r4, #0]
 800ac3c:	bd38      	pop	{r3, r4, r5, pc}
 800ac3e:	bf00      	nop
 800ac40:	20001bcc 	.word	0x20001bcc

0800ac44 <_getpid_r>:
 800ac44:	f7f6 bb46 	b.w	80012d4 <_getpid>

0800ac48 <_fstat_r>:
 800ac48:	b538      	push	{r3, r4, r5, lr}
 800ac4a:	4d07      	ldr	r5, [pc, #28]	; (800ac68 <_fstat_r+0x20>)
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	4604      	mov	r4, r0
 800ac50:	4608      	mov	r0, r1
 800ac52:	4611      	mov	r1, r2
 800ac54:	602b      	str	r3, [r5, #0]
 800ac56:	f7f6 fba4 	bl	80013a2 <_fstat>
 800ac5a:	1c43      	adds	r3, r0, #1
 800ac5c:	d102      	bne.n	800ac64 <_fstat_r+0x1c>
 800ac5e:	682b      	ldr	r3, [r5, #0]
 800ac60:	b103      	cbz	r3, 800ac64 <_fstat_r+0x1c>
 800ac62:	6023      	str	r3, [r4, #0]
 800ac64:	bd38      	pop	{r3, r4, r5, pc}
 800ac66:	bf00      	nop
 800ac68:	20001bcc 	.word	0x20001bcc

0800ac6c <_isatty_r>:
 800ac6c:	b538      	push	{r3, r4, r5, lr}
 800ac6e:	4d06      	ldr	r5, [pc, #24]	; (800ac88 <_isatty_r+0x1c>)
 800ac70:	2300      	movs	r3, #0
 800ac72:	4604      	mov	r4, r0
 800ac74:	4608      	mov	r0, r1
 800ac76:	602b      	str	r3, [r5, #0]
 800ac78:	f7f6 fba3 	bl	80013c2 <_isatty>
 800ac7c:	1c43      	adds	r3, r0, #1
 800ac7e:	d102      	bne.n	800ac86 <_isatty_r+0x1a>
 800ac80:	682b      	ldr	r3, [r5, #0]
 800ac82:	b103      	cbz	r3, 800ac86 <_isatty_r+0x1a>
 800ac84:	6023      	str	r3, [r4, #0]
 800ac86:	bd38      	pop	{r3, r4, r5, pc}
 800ac88:	20001bcc 	.word	0x20001bcc

0800ac8c <_init>:
 800ac8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac8e:	bf00      	nop
 800ac90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac92:	bc08      	pop	{r3}
 800ac94:	469e      	mov	lr, r3
 800ac96:	4770      	bx	lr

0800ac98 <_fini>:
 800ac98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac9a:	bf00      	nop
 800ac9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac9e:	bc08      	pop	{r3}
 800aca0:	469e      	mov	lr, r3
 800aca2:	4770      	bx	lr
