
XBeeS2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aec4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000664  0800b058  0800b058  0001b058  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6bc  0800b6bc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6bc  0800b6bc  0001b6bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6c4  0800b6c4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6c4  0800b6c4  0001b6c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6c8  0800b6c8  0001b6c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b6cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000033f8  200001e0  0800b8ac  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200035d8  0800b8ac  000235d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d8fd  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004728  00000000  00000000  0003db0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001898  00000000  00000000  00042238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016a0  00000000  00000000  00043ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025eda  00000000  00000000  00045170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000222ba  00000000  00000000  0006b04a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6a7e  00000000  00000000  0008d304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00163d82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075dc  00000000  00000000  00163dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b03c 	.word	0x0800b03c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800b03c 	.word	0x0800b03c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ebc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	4a06      	ldr	r2, [pc, #24]	; (8000edc <vApplicationGetIdleTaskMemory+0x30>)
 8000ec2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2280      	movs	r2, #128	; 0x80
 8000ec8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	200023b8 	.word	0x200023b8
 8000edc:	2000246c 	.word	0x2000246c

08000ee0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ee0:	b5b0      	push	{r4, r5, r7, lr}
 8000ee2:	b090      	sub	sp, #64	; 0x40
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of traceMutex */
  osMutexStaticDef(traceMutex, &traceMutexControlBlock);
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	63bb      	str	r3, [r7, #56]	; 0x38
 8000eea:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <MX_FREERTOS_Init+0x74>)
 8000eec:	63fb      	str	r3, [r7, #60]	; 0x3c
  traceMutexHandle = osMutexCreate(osMutex(traceMutex));
 8000eee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f004 fd15 	bl	8005922 <osMutexCreate>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	4a17      	ldr	r2, [pc, #92]	; (8000f58 <MX_FREERTOS_Init+0x78>)
 8000efc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of blinkTask */
  osThreadStaticDef(blinkTask, StartBlinkTask, osPriorityIdle, 0, 1024, blinkTaskBuffer, &blinkTaskControlBlock);
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <MX_FREERTOS_Init+0x7c>)
 8000f00:	f107 041c 	add.w	r4, r7, #28
 8000f04:	461d      	mov	r5, r3
 8000f06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  blinkTaskHandle = osThreadCreate(osThread(blinkTask), NULL);
 8000f12:	f107 031c 	add.w	r3, r7, #28
 8000f16:	2100      	movs	r1, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f004 fca2 	bl	8005862 <osThreadCreate>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	4a0f      	ldr	r2, [pc, #60]	; (8000f60 <MX_FREERTOS_Init+0x80>)
 8000f22:	6013      	str	r3, [r2, #0]

  /* definition and creation of xbeeTask */
  osThreadStaticDef(xbeeTask, StartXbeeTask, osPriorityNormal, 0, 1024, XbeeTaskBuffer, &XbeeTaskControlBlock);
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <MX_FREERTOS_Init+0x84>)
 8000f26:	463c      	mov	r4, r7
 8000f28:	461d      	mov	r5, r3
 8000f2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  xbeeTaskHandle = osThreadCreate(osThread(xbeeTask), NULL);
 8000f36:	463b      	mov	r3, r7
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f004 fc91 	bl	8005862 <osThreadCreate>
 8000f40:	4603      	mov	r3, r0
 8000f42:	4a09      	ldr	r2, [pc, #36]	; (8000f68 <MX_FREERTOS_Init+0x88>)
 8000f44:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  PRINT("\n\n\033[2J\033[H/---- StartUp ----/\n\n");
 8000f46:	4809      	ldr	r0, [pc, #36]	; (8000f6c <MX_FREERTOS_Init+0x8c>)
 8000f48:	f003 ff86 	bl	8004e58 <PRINT>
  /* USER CODE END RTOS_THREADS */

}
 8000f4c:	bf00      	nop
 8000f4e:	3740      	adds	r7, #64	; 0x40
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bdb0      	pop	{r4, r5, r7, pc}
 8000f54:	20002370 	.word	0x20002370
 8000f58:	2000236c 	.word	0x2000236c
 8000f5c:	0800b090 	.word	0x0800b090
 8000f60:	200001fc 	.word	0x200001fc
 8000f64:	0800b0ac 	.word	0x0800b0ac
 8000f68:	200012b4 	.word	0x200012b4
 8000f6c:	0800b070 	.word	0x0800b070

08000f70 <StartBlinkTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlinkTask */
void StartBlinkTask(void const * argument)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkTask */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000f78:	2108      	movs	r1, #8
 8000f7a:	4810      	ldr	r0, [pc, #64]	; (8000fbc <StartBlinkTask+0x4c>)
 8000f7c:	f000 fef8 	bl	8001d70 <HAL_GPIO_TogglePin>
    osDelay(100);
 8000f80:	2064      	movs	r0, #100	; 0x64
 8000f82:	f004 fcba 	bl	80058fa <osDelay>
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000f86:	2108      	movs	r1, #8
 8000f88:	480c      	ldr	r0, [pc, #48]	; (8000fbc <StartBlinkTask+0x4c>)
 8000f8a:	f000 fef1 	bl	8001d70 <HAL_GPIO_TogglePin>
    osDelay(100);
 8000f8e:	2064      	movs	r0, #100	; 0x64
 8000f90:	f004 fcb3 	bl	80058fa <osDelay>
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000f94:	2108      	movs	r1, #8
 8000f96:	4809      	ldr	r0, [pc, #36]	; (8000fbc <StartBlinkTask+0x4c>)
 8000f98:	f000 feea 	bl	8001d70 <HAL_GPIO_TogglePin>
    osDelay(100);
 8000f9c:	2064      	movs	r0, #100	; 0x64
 8000f9e:	f004 fcac 	bl	80058fa <osDelay>
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000fa2:	2108      	movs	r1, #8
 8000fa4:	4805      	ldr	r0, [pc, #20]	; (8000fbc <StartBlinkTask+0x4c>)
 8000fa6:	f000 fee3 	bl	8001d70 <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000faa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fae:	f004 fca4 	bl	80058fa <osDelay>

    LOG_INFO("CA GUY");
 8000fb2:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <StartBlinkTask+0x50>)
 8000fb4:	f003 fe8d 	bl	8004cd2 <LOG_INFO>
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000fb8:	e7de      	b.n	8000f78 <StartBlinkTask+0x8>
 8000fba:	bf00      	nop
 8000fbc:	48000400 	.word	0x48000400
 8000fc0:	0800b0c8 	.word	0x0800b0c8

08000fc4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fda:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <MX_GPIO_Init+0x8c>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	4a1c      	ldr	r2, [pc, #112]	; (8001050 <MX_GPIO_Init+0x8c>)
 8000fe0:	f043 0304 	orr.w	r3, r3, #4
 8000fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <MX_GPIO_Init+0x8c>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	f003 0304 	and.w	r3, r3, #4
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff2:	4b17      	ldr	r3, [pc, #92]	; (8001050 <MX_GPIO_Init+0x8c>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	4a16      	ldr	r2, [pc, #88]	; (8001050 <MX_GPIO_Init+0x8c>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <MX_GPIO_Init+0x8c>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <MX_GPIO_Init+0x8c>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	4a10      	ldr	r2, [pc, #64]	; (8001050 <MX_GPIO_Init+0x8c>)
 8001010:	f043 0302 	orr.w	r3, r3, #2
 8001014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <MX_GPIO_Init+0x8c>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	2108      	movs	r1, #8
 8001026:	480b      	ldr	r0, [pc, #44]	; (8001054 <MX_GPIO_Init+0x90>)
 8001028:	f000 fe8a 	bl	8001d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800102c:	2308      	movs	r3, #8
 800102e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	2301      	movs	r3, #1
 8001032:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	4619      	mov	r1, r3
 8001042:	4804      	ldr	r0, [pc, #16]	; (8001054 <MX_GPIO_Init+0x90>)
 8001044:	f000 fd12 	bl	8001a6c <HAL_GPIO_Init>

}
 8001048:	bf00      	nop
 800104a:	3720      	adds	r7, #32
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40021000 	.word	0x40021000
 8001054:	48000400 	.word	0x48000400

08001058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105c:	f000 fb6b 	bl	8001736 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001060:	f000 f80c 	bl	800107c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001064:	f7ff ffae 	bl	8000fc4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001068:	f000 fa42 	bl	80014f0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800106c:	f000 fa10 	bl	8001490 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001070:	f7ff ff36 	bl	8000ee0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001074:	f004 fbee 	bl	8005854 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001078:	e7fe      	b.n	8001078 <main+0x20>
	...

0800107c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b096      	sub	sp, #88	; 0x58
 8001080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	2244      	movs	r2, #68	; 0x44
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f007 f990 	bl	80083b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001090:	463b      	mov	r3, r7
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800109e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010a2:	f000 fe9d 	bl	8001de0 <HAL_PWREx_ControlVoltageScaling>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010ac:	f000 f85a 	bl	8001164 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010b0:	f000 fe78 	bl	8001da4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010b4:	4b21      	ldr	r3, [pc, #132]	; (800113c <SystemClock_Config+0xc0>)
 80010b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010ba:	4a20      	ldr	r2, [pc, #128]	; (800113c <SystemClock_Config+0xc0>)
 80010bc:	f023 0318 	bic.w	r3, r3, #24
 80010c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80010c4:	2314      	movs	r3, #20
 80010c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010c8:	2301      	movs	r3, #1
 80010ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010cc:	2301      	movs	r3, #1
 80010ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010d4:	2360      	movs	r3, #96	; 0x60
 80010d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d8:	2302      	movs	r3, #2
 80010da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010dc:	2301      	movs	r3, #1
 80010de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010e0:	2301      	movs	r3, #1
 80010e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80010e4:	2328      	movs	r3, #40	; 0x28
 80010e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010e8:	2307      	movs	r3, #7
 80010ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010f0:	2302      	movs	r3, #2
 80010f2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 fec7 	bl	8001e8c <HAL_RCC_OscConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001104:	f000 f82e 	bl	8001164 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001108:	230f      	movs	r3, #15
 800110a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800110c:	2303      	movs	r3, #3
 800110e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800111c:	463b      	mov	r3, r7
 800111e:	2104      	movs	r1, #4
 8001120:	4618      	mov	r0, r3
 8001122:	f001 fac7 	bl	80026b4 <HAL_RCC_ClockConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800112c:	f000 f81a 	bl	8001164 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001130:	f001 ff0c 	bl	8002f4c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001134:	bf00      	nop
 8001136:	3758      	adds	r7, #88	; 0x58
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40021000 	.word	0x40021000

08001140 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a04      	ldr	r2, [pc, #16]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d101      	bne.n	8001156 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001152:	f000 fb09 	bl	8001768 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40001000 	.word	0x40001000

08001164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001168:	b672      	cpsid	i
}
 800116a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800116c:	e7fe      	b.n	800116c <Error_Handler+0x8>
	...

08001170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001176:	4b11      	ldr	r3, [pc, #68]	; (80011bc <HAL_MspInit+0x4c>)
 8001178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800117a:	4a10      	ldr	r2, [pc, #64]	; (80011bc <HAL_MspInit+0x4c>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6613      	str	r3, [r2, #96]	; 0x60
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <HAL_MspInit+0x4c>)
 8001184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <HAL_MspInit+0x4c>)
 8001190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001192:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <HAL_MspInit+0x4c>)
 8001194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001198:	6593      	str	r3, [r2, #88]	; 0x58
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <HAL_MspInit+0x4c>)
 800119c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a2:	603b      	str	r3, [r7, #0]
 80011a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	210f      	movs	r1, #15
 80011aa:	f06f 0001 	mvn.w	r0, #1
 80011ae:	f000 fbb3 	bl	8001918 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40021000 	.word	0x40021000

080011c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08c      	sub	sp, #48	; 0x30
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80011d0:	2200      	movs	r2, #0
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	2036      	movs	r0, #54	; 0x36
 80011d6:	f000 fb9f 	bl	8001918 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011da:	2036      	movs	r0, #54	; 0x36
 80011dc:	f000 fbb8 	bl	8001950 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011e0:	4b1e      	ldr	r3, [pc, #120]	; (800125c <HAL_InitTick+0x9c>)
 80011e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e4:	4a1d      	ldr	r2, [pc, #116]	; (800125c <HAL_InitTick+0x9c>)
 80011e6:	f043 0310 	orr.w	r3, r3, #16
 80011ea:	6593      	str	r3, [r2, #88]	; 0x58
 80011ec:	4b1b      	ldr	r3, [pc, #108]	; (800125c <HAL_InitTick+0x9c>)
 80011ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f0:	f003 0310 	and.w	r3, r3, #16
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011f8:	f107 0210 	add.w	r2, r7, #16
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4611      	mov	r1, r2
 8001202:	4618      	mov	r0, r3
 8001204:	f001 fc1a 	bl	8002a3c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001208:	f001 fbec 	bl	80029e4 <HAL_RCC_GetPCLK1Freq>
 800120c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800120e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001210:	4a13      	ldr	r2, [pc, #76]	; (8001260 <HAL_InitTick+0xa0>)
 8001212:	fba2 2303 	umull	r2, r3, r2, r3
 8001216:	0c9b      	lsrs	r3, r3, #18
 8001218:	3b01      	subs	r3, #1
 800121a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800121c:	4b11      	ldr	r3, [pc, #68]	; (8001264 <HAL_InitTick+0xa4>)
 800121e:	4a12      	ldr	r2, [pc, #72]	; (8001268 <HAL_InitTick+0xa8>)
 8001220:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <HAL_InitTick+0xa4>)
 8001224:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001228:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800122a:	4a0e      	ldr	r2, [pc, #56]	; (8001264 <HAL_InitTick+0xa4>)
 800122c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800122e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <HAL_InitTick+0xa4>)
 8001232:	2200      	movs	r2, #0
 8001234:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001236:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <HAL_InitTick+0xa4>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800123c:	4809      	ldr	r0, [pc, #36]	; (8001264 <HAL_InitTick+0xa4>)
 800123e:	f001 ff87 	bl	8003150 <HAL_TIM_Base_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d104      	bne.n	8001252 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001248:	4806      	ldr	r0, [pc, #24]	; (8001264 <HAL_InitTick+0xa4>)
 800124a:	f001 ffe3 	bl	8003214 <HAL_TIM_Base_Start_IT>
 800124e:	4603      	mov	r3, r0
 8001250:	e000      	b.n	8001254 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
}
 8001254:	4618      	mov	r0, r3
 8001256:	3730      	adds	r7, #48	; 0x30
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40021000 	.word	0x40021000
 8001260:	431bde83 	.word	0x431bde83
 8001264:	2000266c 	.word	0x2000266c
 8001268:	40001000 	.word	0x40001000

0800126c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <NMI_Handler+0x4>
	...

08001274 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	PRINT("!!! HARD FAULT HANDLER !!!");
 8001278:	4801      	ldr	r0, [pc, #4]	; (8001280 <HardFault_Handler+0xc>)
 800127a:	f003 fded 	bl	8004e58 <PRINT>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800127e:	e7fe      	b.n	800127e <HardFault_Handler+0xa>
 8001280:	0800b0d0 	.word	0x0800b0d0

08001284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <MemManage_Handler+0x4>

0800128a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800128e:	e7fe      	b.n	800128e <BusFault_Handler+0x4>

08001290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <UsageFault_Handler+0x4>

08001296 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012a8:	4802      	ldr	r0, [pc, #8]	; (80012b4 <USART1_IRQHandler+0x10>)
 80012aa:	f002 fb09 	bl	80038c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200026bc 	.word	0x200026bc

080012b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012bc:	4802      	ldr	r0, [pc, #8]	; (80012c8 <USART2_IRQHandler+0x10>)
 80012be:	f002 faff 	bl	80038c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20002740 	.word	0x20002740

080012cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012d0:	4802      	ldr	r0, [pc, #8]	; (80012dc <TIM6_DAC_IRQHandler+0x10>)
 80012d2:	f001 fff3 	bl	80032bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	2000266c 	.word	0x2000266c

080012e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
	return 1;
 80012e4:	2301      	movs	r3, #1
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <_kill>:

int _kill(int pid, int sig)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80012fa:	f006 ff07 	bl	800810c <__errno>
 80012fe:	4603      	mov	r3, r0
 8001300:	2216      	movs	r2, #22
 8001302:	601a      	str	r2, [r3, #0]
	return -1;
 8001304:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001308:	4618      	mov	r0, r3
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <_exit>:

void _exit (int status)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001318:	f04f 31ff 	mov.w	r1, #4294967295
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff ffe7 	bl	80012f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001322:	e7fe      	b.n	8001322 <_exit+0x12>

08001324 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	e00a      	b.n	800134c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001336:	f3af 8000 	nop.w
 800133a:	4601      	mov	r1, r0
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	1c5a      	adds	r2, r3, #1
 8001340:	60ba      	str	r2, [r7, #8]
 8001342:	b2ca      	uxtb	r2, r1
 8001344:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	3301      	adds	r3, #1
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	697a      	ldr	r2, [r7, #20]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	429a      	cmp	r2, r3
 8001352:	dbf0      	blt.n	8001336 <_read+0x12>
	}

return len;
 8001354:	687b      	ldr	r3, [r7, #4]
}
 8001356:	4618      	mov	r0, r3
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b086      	sub	sp, #24
 8001362:	af00      	add	r7, sp, #0
 8001364:	60f8      	str	r0, [r7, #12]
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	e009      	b.n	8001384 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	1c5a      	adds	r2, r3, #1
 8001374:	60ba      	str	r2, [r7, #8]
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	3301      	adds	r3, #1
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	429a      	cmp	r2, r3
 800138a:	dbf1      	blt.n	8001370 <_write+0x12>
	}
	return len;
 800138c:	687b      	ldr	r3, [r7, #4]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <_close>:

int _close(int file)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
	return -1;
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
 80013b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013be:	605a      	str	r2, [r3, #4]
	return 0;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <_isatty>:

int _isatty(int file)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
	return 1;
 80013d6:	2301      	movs	r3, #1
}
 80013d8:	4618      	mov	r0, r3
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
	return 0;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
	...

08001400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001408:	4a14      	ldr	r2, [pc, #80]	; (800145c <_sbrk+0x5c>)
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <_sbrk+0x60>)
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001414:	4b13      	ldr	r3, [pc, #76]	; (8001464 <_sbrk+0x64>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d102      	bne.n	8001422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <_sbrk+0x64>)
 800141e:	4a12      	ldr	r2, [pc, #72]	; (8001468 <_sbrk+0x68>)
 8001420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <_sbrk+0x64>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	429a      	cmp	r2, r3
 800142e:	d207      	bcs.n	8001440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001430:	f006 fe6c 	bl	800810c <__errno>
 8001434:	4603      	mov	r3, r0
 8001436:	220c      	movs	r2, #12
 8001438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800143a:	f04f 33ff 	mov.w	r3, #4294967295
 800143e:	e009      	b.n	8001454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <_sbrk+0x64>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001446:	4b07      	ldr	r3, [pc, #28]	; (8001464 <_sbrk+0x64>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	4a05      	ldr	r2, [pc, #20]	; (8001464 <_sbrk+0x64>)
 8001450:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001452:	68fb      	ldr	r3, [r7, #12]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20010000 	.word	0x20010000
 8001460:	00000400 	.word	0x00000400
 8001464:	200026b8 	.word	0x200026b8
 8001468:	200035d8 	.word	0x200035d8

0800146c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <SystemInit+0x20>)
 8001472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001476:	4a05      	ldr	r2, [pc, #20]	; (800148c <SystemInit+0x20>)
 8001478:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800147c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <MX_USART1_UART_Init+0x58>)
 8001496:	4a15      	ldr	r2, [pc, #84]	; (80014ec <MX_USART1_UART_Init+0x5c>)
 8001498:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800149a:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <MX_USART1_UART_Init+0x58>)
 800149c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80014a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <MX_USART1_UART_Init+0x58>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014a8:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <MX_USART1_UART_Init+0x58>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <MX_USART1_UART_Init+0x58>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <MX_USART1_UART_Init+0x58>)
 80014b6:	220c      	movs	r2, #12
 80014b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <MX_USART1_UART_Init+0x58>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <MX_USART1_UART_Init+0x58>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <MX_USART1_UART_Init+0x58>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <MX_USART1_UART_Init+0x58>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_USART1_UART_Init+0x58>)
 80014d4:	f002 f8bc 	bl	8003650 <HAL_UART_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80014de:	f7ff fe41 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200026bc 	.word	0x200026bc
 80014ec:	40013800 	.word	0x40013800

080014f0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014f4:	4b14      	ldr	r3, [pc, #80]	; (8001548 <MX_USART2_UART_Init+0x58>)
 80014f6:	4a15      	ldr	r2, [pc, #84]	; (800154c <MX_USART2_UART_Init+0x5c>)
 80014f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014fa:	4b13      	ldr	r3, [pc, #76]	; (8001548 <MX_USART2_UART_Init+0x58>)
 80014fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001500:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <MX_USART2_UART_Init+0x58>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <MX_USART2_UART_Init+0x58>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800150e:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <MX_USART2_UART_Init+0x58>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <MX_USART2_UART_Init+0x58>)
 8001516:	220c      	movs	r2, #12
 8001518:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151a:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <MX_USART2_UART_Init+0x58>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001520:	4b09      	ldr	r3, [pc, #36]	; (8001548 <MX_USART2_UART_Init+0x58>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001526:	4b08      	ldr	r3, [pc, #32]	; (8001548 <MX_USART2_UART_Init+0x58>)
 8001528:	2200      	movs	r2, #0
 800152a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <MX_USART2_UART_Init+0x58>)
 800152e:	2200      	movs	r2, #0
 8001530:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001532:	4805      	ldr	r0, [pc, #20]	; (8001548 <MX_USART2_UART_Init+0x58>)
 8001534:	f002 f88c 	bl	8003650 <HAL_UART_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800153e:	f7ff fe11 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20002740 	.word	0x20002740
 800154c:	40004400 	.word	0x40004400

08001550 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b0a0      	sub	sp, #128	; 0x80
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001568:	f107 0318 	add.w	r3, r7, #24
 800156c:	2254      	movs	r2, #84	; 0x54
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f006 ff1d 	bl	80083b0 <memset>
  if(uartHandle->Instance==USART1)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a4f      	ldr	r2, [pc, #316]	; (80016b8 <HAL_UART_MspInit+0x168>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d140      	bne.n	8001602 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001580:	2301      	movs	r3, #1
 8001582:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001584:	2300      	movs	r3, #0
 8001586:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001588:	f107 0318 	add.w	r3, r7, #24
 800158c:	4618      	mov	r0, r3
 800158e:	f001 fae7 	bl	8002b60 <HAL_RCCEx_PeriphCLKConfig>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001598:	f7ff fde4 	bl	8001164 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800159c:	4b47      	ldr	r3, [pc, #284]	; (80016bc <HAL_UART_MspInit+0x16c>)
 800159e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a0:	4a46      	ldr	r2, [pc, #280]	; (80016bc <HAL_UART_MspInit+0x16c>)
 80015a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a6:	6613      	str	r3, [r2, #96]	; 0x60
 80015a8:	4b44      	ldr	r3, [pc, #272]	; (80016bc <HAL_UART_MspInit+0x16c>)
 80015aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b4:	4b41      	ldr	r3, [pc, #260]	; (80016bc <HAL_UART_MspInit+0x16c>)
 80015b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b8:	4a40      	ldr	r2, [pc, #256]	; (80016bc <HAL_UART_MspInit+0x16c>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015c0:	4b3e      	ldr	r3, [pc, #248]	; (80016bc <HAL_UART_MspInit+0x16c>)
 80015c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015cc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015d0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015da:	2303      	movs	r3, #3
 80015dc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015de:	2307      	movs	r3, #7
 80015e0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015e6:	4619      	mov	r1, r3
 80015e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ec:	f000 fa3e 	bl	8001a6c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2105      	movs	r1, #5
 80015f4:	2025      	movs	r0, #37	; 0x25
 80015f6:	f000 f98f 	bl	8001918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015fa:	2025      	movs	r0, #37	; 0x25
 80015fc:	f000 f9a8 	bl	8001950 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001600:	e055      	b.n	80016ae <HAL_UART_MspInit+0x15e>
  else if(uartHandle->Instance==USART2)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a2e      	ldr	r2, [pc, #184]	; (80016c0 <HAL_UART_MspInit+0x170>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d150      	bne.n	80016ae <HAL_UART_MspInit+0x15e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800160c:	2302      	movs	r3, #2
 800160e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001610:	2300      	movs	r3, #0
 8001612:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001614:	f107 0318 	add.w	r3, r7, #24
 8001618:	4618      	mov	r0, r3
 800161a:	f001 faa1 	bl	8002b60 <HAL_RCCEx_PeriphCLKConfig>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8001624:	f7ff fd9e 	bl	8001164 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001628:	4b24      	ldr	r3, [pc, #144]	; (80016bc <HAL_UART_MspInit+0x16c>)
 800162a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162c:	4a23      	ldr	r2, [pc, #140]	; (80016bc <HAL_UART_MspInit+0x16c>)
 800162e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001632:	6593      	str	r3, [r2, #88]	; 0x58
 8001634:	4b21      	ldr	r3, [pc, #132]	; (80016bc <HAL_UART_MspInit+0x16c>)
 8001636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001640:	4b1e      	ldr	r3, [pc, #120]	; (80016bc <HAL_UART_MspInit+0x16c>)
 8001642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001644:	4a1d      	ldr	r2, [pc, #116]	; (80016bc <HAL_UART_MspInit+0x16c>)
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <HAL_UART_MspInit+0x16c>)
 800164e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001658:	2304      	movs	r3, #4
 800165a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165c:	2302      	movs	r3, #2
 800165e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001664:	2303      	movs	r3, #3
 8001666:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001668:	2307      	movs	r3, #7
 800166a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800166c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001670:	4619      	mov	r1, r3
 8001672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001676:	f000 f9f9 	bl	8001a6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800167a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800167e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001680:	2302      	movs	r3, #2
 8001682:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001688:	2303      	movs	r3, #3
 800168a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800168c:	2303      	movs	r3, #3
 800168e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001690:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001694:	4619      	mov	r1, r3
 8001696:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169a:	f000 f9e7 	bl	8001a6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800169e:	2200      	movs	r2, #0
 80016a0:	2105      	movs	r1, #5
 80016a2:	2026      	movs	r0, #38	; 0x26
 80016a4:	f000 f938 	bl	8001918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016a8:	2026      	movs	r0, #38	; 0x26
 80016aa:	f000 f951 	bl	8001950 <HAL_NVIC_EnableIRQ>
}
 80016ae:	bf00      	nop
 80016b0:	3780      	adds	r7, #128	; 0x80
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40013800 	.word	0x40013800
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40004400 	.word	0x40004400

080016c4 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <HAL_UART_RxCpltCallback+0x1c>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d101      	bne.n	80016d8 <HAL_UART_RxCpltCallback+0x14>
	{
		xbeeSerial_rxCallback();
 80016d4:	f004 f850 	bl	8005778 <xbeeSerial_rxCallback>
	}
	else if(huart == &huart2)
	{
		//GPS Callback
	}
}
 80016d8:	bf00      	nop
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	200026bc 	.word	0x200026bc

080016e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800171c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016e8:	f7ff fec0 	bl	800146c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016ec:	480c      	ldr	r0, [pc, #48]	; (8001720 <LoopForever+0x6>)
  ldr r1, =_edata
 80016ee:	490d      	ldr	r1, [pc, #52]	; (8001724 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016f0:	4a0d      	ldr	r2, [pc, #52]	; (8001728 <LoopForever+0xe>)
  movs r3, #0
 80016f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f4:	e002      	b.n	80016fc <LoopCopyDataInit>

080016f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016fa:	3304      	adds	r3, #4

080016fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001700:	d3f9      	bcc.n	80016f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001702:	4a0a      	ldr	r2, [pc, #40]	; (800172c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001704:	4c0a      	ldr	r4, [pc, #40]	; (8001730 <LoopForever+0x16>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001708:	e001      	b.n	800170e <LoopFillZerobss>

0800170a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800170a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800170c:	3204      	adds	r2, #4

0800170e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800170e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001710:	d3fb      	bcc.n	800170a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001712:	f006 fdf7 	bl	8008304 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001716:	f7ff fc9f 	bl	8001058 <main>

0800171a <LoopForever>:

LoopForever:
    b LoopForever
 800171a:	e7fe      	b.n	800171a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800171c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001724:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001728:	0800b6cc 	.word	0x0800b6cc
  ldr r2, =_sbss
 800172c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001730:	200035d8 	.word	0x200035d8

08001734 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001734:	e7fe      	b.n	8001734 <ADC1_IRQHandler>

08001736 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800173c:	2300      	movs	r3, #0
 800173e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001740:	2003      	movs	r0, #3
 8001742:	f000 f8de 	bl	8001902 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001746:	200f      	movs	r0, #15
 8001748:	f7ff fd3a 	bl	80011c0 <HAL_InitTick>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d002      	beq.n	8001758 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	71fb      	strb	r3, [r7, #7]
 8001756:	e001      	b.n	800175c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001758:	f7ff fd0a 	bl	8001170 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800175c:	79fb      	ldrb	r3, [r7, #7]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_IncTick+0x20>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_IncTick+0x24>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4413      	add	r3, r2
 8001778:	4a04      	ldr	r2, [pc, #16]	; (800178c <HAL_IncTick+0x24>)
 800177a:	6013      	str	r3, [r2, #0]
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20000008 	.word	0x20000008
 800178c:	200027c4 	.word	0x200027c4

08001790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return uwTick;
 8001794:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <HAL_GetTick+0x14>)
 8001796:	681b      	ldr	r3, [r3, #0]
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	200027c4 	.word	0x200027c4

080017a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c4:	4013      	ands	r3, r2
 80017c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017da:	4a04      	ldr	r2, [pc, #16]	; (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	60d3      	str	r3, [r2, #12]
}
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <__NVIC_GetPriorityGrouping+0x18>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	f003 0307 	and.w	r3, r3, #7
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	2b00      	cmp	r3, #0
 800181c:	db0b      	blt.n	8001836 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	f003 021f 	and.w	r2, r3, #31
 8001824:	4907      	ldr	r1, [pc, #28]	; (8001844 <__NVIC_EnableIRQ+0x38>)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	095b      	lsrs	r3, r3, #5
 800182c:	2001      	movs	r0, #1
 800182e:	fa00 f202 	lsl.w	r2, r0, r2
 8001832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000e100 	.word	0xe000e100

08001848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001858:	2b00      	cmp	r3, #0
 800185a:	db0a      	blt.n	8001872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	490c      	ldr	r1, [pc, #48]	; (8001894 <__NVIC_SetPriority+0x4c>)
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	0112      	lsls	r2, r2, #4
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	440b      	add	r3, r1
 800186c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001870:	e00a      	b.n	8001888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4908      	ldr	r1, [pc, #32]	; (8001898 <__NVIC_SetPriority+0x50>)
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	3b04      	subs	r3, #4
 8001880:	0112      	lsls	r2, r2, #4
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	440b      	add	r3, r1
 8001886:	761a      	strb	r2, [r3, #24]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000e100 	.word	0xe000e100
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800189c:	b480      	push	{r7}
 800189e:	b089      	sub	sp, #36	; 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f1c3 0307 	rsb	r3, r3, #7
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	bf28      	it	cs
 80018ba:	2304      	movcs	r3, #4
 80018bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3304      	adds	r3, #4
 80018c2:	2b06      	cmp	r3, #6
 80018c4:	d902      	bls.n	80018cc <NVIC_EncodePriority+0x30>
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3b03      	subs	r3, #3
 80018ca:	e000      	b.n	80018ce <NVIC_EncodePriority+0x32>
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	f04f 32ff 	mov.w	r2, #4294967295
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43da      	mvns	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	401a      	ands	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e4:	f04f 31ff 	mov.w	r1, #4294967295
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	43d9      	mvns	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	4313      	orrs	r3, r2
         );
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3724      	adds	r7, #36	; 0x24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff ff4c 	bl	80017a8 <__NVIC_SetPriorityGrouping>
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
 8001924:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800192a:	f7ff ff61 	bl	80017f0 <__NVIC_GetPriorityGrouping>
 800192e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	68b9      	ldr	r1, [r7, #8]
 8001934:	6978      	ldr	r0, [r7, #20]
 8001936:	f7ff ffb1 	bl	800189c <NVIC_EncodePriority>
 800193a:	4602      	mov	r2, r0
 800193c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001940:	4611      	mov	r1, r2
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff ff80 	bl	8001848 <__NVIC_SetPriority>
}
 8001948:	bf00      	nop
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff ff54 	bl	800180c <__NVIC_EnableIRQ>
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001974:	2300      	movs	r3, #0
 8001976:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d008      	beq.n	8001996 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2204      	movs	r2, #4
 8001988:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e022      	b.n	80019dc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f022 020e 	bic.w	r2, r2, #14
 80019a4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f022 0201 	bic.w	r2, r2, #1
 80019b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	f003 021c 	and.w	r2, r3, #28
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	2101      	movs	r1, #1
 80019c4:	fa01 f202 	lsl.w	r2, r1, r2
 80019c8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2201      	movs	r2, #1
 80019ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80019da:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019f0:	2300      	movs	r3, #0
 80019f2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d005      	beq.n	8001a0c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2204      	movs	r2, #4
 8001a04:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	73fb      	strb	r3, [r7, #15]
 8001a0a:	e029      	b.n	8001a60 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 020e 	bic.w	r2, r2, #14
 8001a1a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f022 0201 	bic.w	r2, r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a30:	f003 021c 	and.w	r2, r3, #28
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	2101      	movs	r1, #1
 8001a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a3e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	4798      	blx	r3
    }
  }
  return status;
 8001a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b087      	sub	sp, #28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a7a:	e148      	b.n	8001d0e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	2101      	movs	r1, #1
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	fa01 f303 	lsl.w	r3, r1, r3
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 813a 	beq.w	8001d08 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d005      	beq.n	8001aac <HAL_GPIO_Init+0x40>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d130      	bne.n	8001b0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	68da      	ldr	r2, [r3, #12]
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	4013      	ands	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	091b      	lsrs	r3, r3, #4
 8001af8:	f003 0201 	and.w	r2, r3, #1
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	2b03      	cmp	r3, #3
 8001b18:	d017      	beq.n	8001b4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	2203      	movs	r2, #3
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d123      	bne.n	8001b9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	08da      	lsrs	r2, r3, #3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3208      	adds	r2, #8
 8001b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	220f      	movs	r2, #15
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4013      	ands	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	691a      	ldr	r2, [r3, #16]
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	08da      	lsrs	r2, r3, #3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3208      	adds	r2, #8
 8001b98:	6939      	ldr	r1, [r7, #16]
 8001b9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	2203      	movs	r2, #3
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f003 0203 	and.w	r2, r3, #3
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 8094 	beq.w	8001d08 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be0:	4b52      	ldr	r3, [pc, #328]	; (8001d2c <HAL_GPIO_Init+0x2c0>)
 8001be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001be4:	4a51      	ldr	r2, [pc, #324]	; (8001d2c <HAL_GPIO_Init+0x2c0>)
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	6613      	str	r3, [r2, #96]	; 0x60
 8001bec:	4b4f      	ldr	r3, [pc, #316]	; (8001d2c <HAL_GPIO_Init+0x2c0>)
 8001bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bf8:	4a4d      	ldr	r2, [pc, #308]	; (8001d30 <HAL_GPIO_Init+0x2c4>)
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	089b      	lsrs	r3, r3, #2
 8001bfe:	3302      	adds	r3, #2
 8001c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	220f      	movs	r2, #15
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c22:	d00d      	beq.n	8001c40 <HAL_GPIO_Init+0x1d4>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a43      	ldr	r2, [pc, #268]	; (8001d34 <HAL_GPIO_Init+0x2c8>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d007      	beq.n	8001c3c <HAL_GPIO_Init+0x1d0>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a42      	ldr	r2, [pc, #264]	; (8001d38 <HAL_GPIO_Init+0x2cc>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d101      	bne.n	8001c38 <HAL_GPIO_Init+0x1cc>
 8001c34:	2302      	movs	r3, #2
 8001c36:	e004      	b.n	8001c42 <HAL_GPIO_Init+0x1d6>
 8001c38:	2307      	movs	r3, #7
 8001c3a:	e002      	b.n	8001c42 <HAL_GPIO_Init+0x1d6>
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e000      	b.n	8001c42 <HAL_GPIO_Init+0x1d6>
 8001c40:	2300      	movs	r3, #0
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	f002 0203 	and.w	r2, r2, #3
 8001c48:	0092      	lsls	r2, r2, #2
 8001c4a:	4093      	lsls	r3, r2
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c52:	4937      	ldr	r1, [pc, #220]	; (8001d30 <HAL_GPIO_Init+0x2c4>)
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	089b      	lsrs	r3, r3, #2
 8001c58:	3302      	adds	r3, #2
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c60:	4b36      	ldr	r3, [pc, #216]	; (8001d3c <HAL_GPIO_Init+0x2d0>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c84:	4a2d      	ldr	r2, [pc, #180]	; (8001d3c <HAL_GPIO_Init+0x2d0>)
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c8a:	4b2c      	ldr	r3, [pc, #176]	; (8001d3c <HAL_GPIO_Init+0x2d0>)
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	43db      	mvns	r3, r3
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	4013      	ands	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cae:	4a23      	ldr	r2, [pc, #140]	; (8001d3c <HAL_GPIO_Init+0x2d0>)
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001cb4:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <HAL_GPIO_Init+0x2d0>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cd8:	4a18      	ldr	r2, [pc, #96]	; (8001d3c <HAL_GPIO_Init+0x2d0>)
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001cde:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <HAL_GPIO_Init+0x2d0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	4013      	ands	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d02:	4a0e      	ldr	r2, [pc, #56]	; (8001d3c <HAL_GPIO_Init+0x2d0>)
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	fa22 f303 	lsr.w	r3, r2, r3
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f47f aeaf 	bne.w	8001a7c <HAL_GPIO_Init+0x10>
  }
}
 8001d1e:	bf00      	nop
 8001d20:	bf00      	nop
 8001d22:	371c      	adds	r7, #28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	40010000 	.word	0x40010000
 8001d34:	48000400 	.word	0x48000400
 8001d38:	48000800 	.word	0x48000800
 8001d3c:	40010400 	.word	0x40010400

08001d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	807b      	strh	r3, [r7, #2]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d50:	787b      	ldrb	r3, [r7, #1]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d56:	887a      	ldrh	r2, [r7, #2]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d5c:	e002      	b.n	8001d64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d5e:	887a      	ldrh	r2, [r7, #2]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d82:	887a      	ldrh	r2, [r7, #2]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4013      	ands	r3, r2
 8001d88:	041a      	lsls	r2, r3, #16
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	43d9      	mvns	r1, r3
 8001d8e:	887b      	ldrh	r3, [r7, #2]
 8001d90:	400b      	ands	r3, r1
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	619a      	str	r2, [r3, #24]
}
 8001d98:	bf00      	nop
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a04      	ldr	r2, [pc, #16]	; (8001dc0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db2:	6013      	str	r3, [r2, #0]
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	40007000 	.word	0x40007000

08001dc4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001dc8:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <HAL_PWREx_GetVoltageRange+0x18>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	40007000 	.word	0x40007000

08001de0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dee:	d130      	bne.n	8001e52 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001df0:	4b23      	ldr	r3, [pc, #140]	; (8001e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dfc:	d038      	beq.n	8001e70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dfe:	4b20      	ldr	r3, [pc, #128]	; (8001e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e06:	4a1e      	ldr	r2, [pc, #120]	; (8001e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e0e:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2232      	movs	r2, #50	; 0x32
 8001e14:	fb02 f303 	mul.w	r3, r2, r3
 8001e18:	4a1b      	ldr	r2, [pc, #108]	; (8001e88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1e:	0c9b      	lsrs	r3, r3, #18
 8001e20:	3301      	adds	r3, #1
 8001e22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e24:	e002      	b.n	8001e2c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e2c:	4b14      	ldr	r3, [pc, #80]	; (8001e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e38:	d102      	bne.n	8001e40 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1f2      	bne.n	8001e26 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e40:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e4c:	d110      	bne.n	8001e70 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e00f      	b.n	8001e72 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e52:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e5e:	d007      	beq.n	8001e70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e68:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40007000 	.word	0x40007000
 8001e84:	20000000 	.word	0x20000000
 8001e88:	431bde83 	.word	0x431bde83

08001e8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d102      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	f000 bc02 	b.w	80026a4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ea0:	4b96      	ldr	r3, [pc, #600]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f003 030c 	and.w	r3, r3, #12
 8001ea8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001eaa:	4b94      	ldr	r3, [pc, #592]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0310 	and.w	r3, r3, #16
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 80e4 	beq.w	800208a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d007      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x4c>
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	2b0c      	cmp	r3, #12
 8001ecc:	f040 808b 	bne.w	8001fe6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	f040 8087 	bne.w	8001fe6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ed8:	4b88      	ldr	r3, [pc, #544]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d005      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x64>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e3d9      	b.n	80026a4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a1a      	ldr	r2, [r3, #32]
 8001ef4:	4b81      	ldr	r3, [pc, #516]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d004      	beq.n	8001f0a <HAL_RCC_OscConfig+0x7e>
 8001f00:	4b7e      	ldr	r3, [pc, #504]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f08:	e005      	b.n	8001f16 <HAL_RCC_OscConfig+0x8a>
 8001f0a:	4b7c      	ldr	r3, [pc, #496]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 8001f0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f10:	091b      	lsrs	r3, r3, #4
 8001f12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d223      	bcs.n	8001f62 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 fdbe 	bl	8002aa0 <RCC_SetFlashLatencyFromMSIRange>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e3ba      	b.n	80026a4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f2e:	4b73      	ldr	r3, [pc, #460]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a72      	ldr	r2, [pc, #456]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 8001f34:	f043 0308 	orr.w	r3, r3, #8
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	4b70      	ldr	r3, [pc, #448]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	496d      	ldr	r1, [pc, #436]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f4c:	4b6b      	ldr	r3, [pc, #428]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69db      	ldr	r3, [r3, #28]
 8001f58:	021b      	lsls	r3, r3, #8
 8001f5a:	4968      	ldr	r1, [pc, #416]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	604b      	str	r3, [r1, #4]
 8001f60:	e025      	b.n	8001fae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f62:	4b66      	ldr	r3, [pc, #408]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a65      	ldr	r2, [pc, #404]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 8001f68:	f043 0308 	orr.w	r3, r3, #8
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	4b63      	ldr	r3, [pc, #396]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	4960      	ldr	r1, [pc, #384]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f80:	4b5e      	ldr	r3, [pc, #376]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	021b      	lsls	r3, r3, #8
 8001f8e:	495b      	ldr	r1, [pc, #364]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d109      	bne.n	8001fae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 fd7e 	bl	8002aa0 <RCC_SetFlashLatencyFromMSIRange>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e37a      	b.n	80026a4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fae:	f000 fc81 	bl	80028b4 <HAL_RCC_GetSysClockFreq>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	4b51      	ldr	r3, [pc, #324]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	091b      	lsrs	r3, r3, #4
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	4950      	ldr	r1, [pc, #320]	; (8002100 <HAL_RCC_OscConfig+0x274>)
 8001fc0:	5ccb      	ldrb	r3, [r1, r3]
 8001fc2:	f003 031f 	and.w	r3, r3, #31
 8001fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fca:	4a4e      	ldr	r2, [pc, #312]	; (8002104 <HAL_RCC_OscConfig+0x278>)
 8001fcc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001fce:	4b4e      	ldr	r3, [pc, #312]	; (8002108 <HAL_RCC_OscConfig+0x27c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff f8f4 	bl	80011c0 <HAL_InitTick>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d052      	beq.n	8002088 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
 8001fe4:	e35e      	b.n	80026a4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d032      	beq.n	8002054 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fee:	4b43      	ldr	r3, [pc, #268]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a42      	ldr	r2, [pc, #264]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ffa:	f7ff fbc9 	bl	8001790 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002002:	f7ff fbc5 	bl	8001790 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e347      	b.n	80026a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002014:	4b39      	ldr	r3, [pc, #228]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0f0      	beq.n	8002002 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002020:	4b36      	ldr	r3, [pc, #216]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a35      	ldr	r2, [pc, #212]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 8002026:	f043 0308 	orr.w	r3, r3, #8
 800202a:	6013      	str	r3, [r2, #0]
 800202c:	4b33      	ldr	r3, [pc, #204]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	4930      	ldr	r1, [pc, #192]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 800203a:	4313      	orrs	r3, r2
 800203c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800203e:	4b2f      	ldr	r3, [pc, #188]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	021b      	lsls	r3, r3, #8
 800204c:	492b      	ldr	r1, [pc, #172]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 800204e:	4313      	orrs	r3, r2
 8002050:	604b      	str	r3, [r1, #4]
 8002052:	e01a      	b.n	800208a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002054:	4b29      	ldr	r3, [pc, #164]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a28      	ldr	r2, [pc, #160]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 800205a:	f023 0301 	bic.w	r3, r3, #1
 800205e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002060:	f7ff fb96 	bl	8001790 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002068:	f7ff fb92 	bl	8001790 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e314      	b.n	80026a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800207a:	4b20      	ldr	r3, [pc, #128]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x1dc>
 8002086:	e000      	b.n	800208a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002088:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d073      	beq.n	800217e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	2b08      	cmp	r3, #8
 800209a:	d005      	beq.n	80020a8 <HAL_RCC_OscConfig+0x21c>
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	2b0c      	cmp	r3, #12
 80020a0:	d10e      	bne.n	80020c0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d10b      	bne.n	80020c0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a8:	4b14      	ldr	r3, [pc, #80]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d063      	beq.n	800217c <HAL_RCC_OscConfig+0x2f0>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d15f      	bne.n	800217c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e2f1      	b.n	80026a4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c8:	d106      	bne.n	80020d8 <HAL_RCC_OscConfig+0x24c>
 80020ca:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a0b      	ldr	r2, [pc, #44]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 80020d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	e025      	b.n	8002124 <HAL_RCC_OscConfig+0x298>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020e0:	d114      	bne.n	800210c <HAL_RCC_OscConfig+0x280>
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a05      	ldr	r2, [pc, #20]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 80020e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	4b03      	ldr	r3, [pc, #12]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a02      	ldr	r2, [pc, #8]	; (80020fc <HAL_RCC_OscConfig+0x270>)
 80020f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	e013      	b.n	8002124 <HAL_RCC_OscConfig+0x298>
 80020fc:	40021000 	.word	0x40021000
 8002100:	0800b298 	.word	0x0800b298
 8002104:	20000000 	.word	0x20000000
 8002108:	20000004 	.word	0x20000004
 800210c:	4ba0      	ldr	r3, [pc, #640]	; (8002390 <HAL_RCC_OscConfig+0x504>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a9f      	ldr	r2, [pc, #636]	; (8002390 <HAL_RCC_OscConfig+0x504>)
 8002112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002116:	6013      	str	r3, [r2, #0]
 8002118:	4b9d      	ldr	r3, [pc, #628]	; (8002390 <HAL_RCC_OscConfig+0x504>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a9c      	ldr	r2, [pc, #624]	; (8002390 <HAL_RCC_OscConfig+0x504>)
 800211e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002122:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d013      	beq.n	8002154 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212c:	f7ff fb30 	bl	8001790 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002134:	f7ff fb2c 	bl	8001790 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b64      	cmp	r3, #100	; 0x64
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e2ae      	b.n	80026a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002146:	4b92      	ldr	r3, [pc, #584]	; (8002390 <HAL_RCC_OscConfig+0x504>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0f0      	beq.n	8002134 <HAL_RCC_OscConfig+0x2a8>
 8002152:	e014      	b.n	800217e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002154:	f7ff fb1c 	bl	8001790 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800215c:	f7ff fb18 	bl	8001790 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b64      	cmp	r3, #100	; 0x64
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e29a      	b.n	80026a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800216e:	4b88      	ldr	r3, [pc, #544]	; (8002390 <HAL_RCC_OscConfig+0x504>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f0      	bne.n	800215c <HAL_RCC_OscConfig+0x2d0>
 800217a:	e000      	b.n	800217e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800217c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d060      	beq.n	800224c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	2b04      	cmp	r3, #4
 800218e:	d005      	beq.n	800219c <HAL_RCC_OscConfig+0x310>
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	2b0c      	cmp	r3, #12
 8002194:	d119      	bne.n	80021ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	2b02      	cmp	r3, #2
 800219a:	d116      	bne.n	80021ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800219c:	4b7c      	ldr	r3, [pc, #496]	; (8002390 <HAL_RCC_OscConfig+0x504>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d005      	beq.n	80021b4 <HAL_RCC_OscConfig+0x328>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e277      	b.n	80026a4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b4:	4b76      	ldr	r3, [pc, #472]	; (8002390 <HAL_RCC_OscConfig+0x504>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	061b      	lsls	r3, r3, #24
 80021c2:	4973      	ldr	r1, [pc, #460]	; (8002390 <HAL_RCC_OscConfig+0x504>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021c8:	e040      	b.n	800224c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d023      	beq.n	800221a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021d2:	4b6f      	ldr	r3, [pc, #444]	; (8002390 <HAL_RCC_OscConfig+0x504>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a6e      	ldr	r2, [pc, #440]	; (8002390 <HAL_RCC_OscConfig+0x504>)
 80021d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021de:	f7ff fad7 	bl	8001790 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e6:	f7ff fad3 	bl	8001790 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e255      	b.n	80026a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021f8:	4b65      	ldr	r3, [pc, #404]	; (8002390 <HAL_RCC_OscConfig+0x504>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0f0      	beq.n	80021e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002204:	4b62      	ldr	r3, [pc, #392]	; (8002390 <HAL_RCC_OscConfig+0x504>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	061b      	lsls	r3, r3, #24
 8002212:	495f      	ldr	r1, [pc, #380]	; (8002390 <HAL_RCC_OscConfig+0x504>)
 8002214:	4313      	orrs	r3, r2
 8002216:	604b      	str	r3, [r1, #4]
 8002218:	e018      	b.n	800224c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800221a:	4b5d      	ldr	r3, [pc, #372]	; (8002390 <HAL_RCC_OscConfig+0x504>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a5c      	ldr	r2, [pc, #368]	; (8002390 <HAL_RCC_OscConfig+0x504>)
 8002220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002224:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002226:	f7ff fab3 	bl	8001790 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800222e:	f7ff faaf 	bl	8001790 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e231      	b.n	80026a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002240:	4b53      	ldr	r3, [pc, #332]	; (8002390 <HAL_RCC_OscConfig+0x504>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1f0      	bne.n	800222e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b00      	cmp	r3, #0
 8002256:	d03c      	beq.n	80022d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d01c      	beq.n	800229a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002260:	4b4b      	ldr	r3, [pc, #300]	; (8002390 <HAL_RCC_OscConfig+0x504>)
 8002262:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002266:	4a4a      	ldr	r2, [pc, #296]	; (8002390 <HAL_RCC_OscConfig+0x504>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002270:	f7ff fa8e 	bl	8001790 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002278:	f7ff fa8a 	bl	8001790 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e20c      	b.n	80026a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800228a:	4b41      	ldr	r3, [pc, #260]	; (8002390 <HAL_RCC_OscConfig+0x504>)
 800228c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0ef      	beq.n	8002278 <HAL_RCC_OscConfig+0x3ec>
 8002298:	e01b      	b.n	80022d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800229a:	4b3d      	ldr	r3, [pc, #244]	; (8002390 <HAL_RCC_OscConfig+0x504>)
 800229c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022a0:	4a3b      	ldr	r2, [pc, #236]	; (8002390 <HAL_RCC_OscConfig+0x504>)
 80022a2:	f023 0301 	bic.w	r3, r3, #1
 80022a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022aa:	f7ff fa71 	bl	8001790 <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b2:	f7ff fa6d 	bl	8001790 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e1ef      	b.n	80026a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022c4:	4b32      	ldr	r3, [pc, #200]	; (8002390 <HAL_RCC_OscConfig+0x504>)
 80022c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1ef      	bne.n	80022b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 80a6 	beq.w	800242c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022e0:	2300      	movs	r3, #0
 80022e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80022e4:	4b2a      	ldr	r3, [pc, #168]	; (8002390 <HAL_RCC_OscConfig+0x504>)
 80022e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10d      	bne.n	800230c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022f0:	4b27      	ldr	r3, [pc, #156]	; (8002390 <HAL_RCC_OscConfig+0x504>)
 80022f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f4:	4a26      	ldr	r2, [pc, #152]	; (8002390 <HAL_RCC_OscConfig+0x504>)
 80022f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022fa:	6593      	str	r3, [r2, #88]	; 0x58
 80022fc:	4b24      	ldr	r3, [pc, #144]	; (8002390 <HAL_RCC_OscConfig+0x504>)
 80022fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002308:	2301      	movs	r3, #1
 800230a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800230c:	4b21      	ldr	r3, [pc, #132]	; (8002394 <HAL_RCC_OscConfig+0x508>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002314:	2b00      	cmp	r3, #0
 8002316:	d118      	bne.n	800234a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002318:	4b1e      	ldr	r3, [pc, #120]	; (8002394 <HAL_RCC_OscConfig+0x508>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a1d      	ldr	r2, [pc, #116]	; (8002394 <HAL_RCC_OscConfig+0x508>)
 800231e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002322:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002324:	f7ff fa34 	bl	8001790 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800232c:	f7ff fa30 	bl	8001790 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e1b2      	b.n	80026a4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800233e:	4b15      	ldr	r3, [pc, #84]	; (8002394 <HAL_RCC_OscConfig+0x508>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0f0      	beq.n	800232c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d108      	bne.n	8002364 <HAL_RCC_OscConfig+0x4d8>
 8002352:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <HAL_RCC_OscConfig+0x504>)
 8002354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002358:	4a0d      	ldr	r2, [pc, #52]	; (8002390 <HAL_RCC_OscConfig+0x504>)
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002362:	e029      	b.n	80023b8 <HAL_RCC_OscConfig+0x52c>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	2b05      	cmp	r3, #5
 800236a:	d115      	bne.n	8002398 <HAL_RCC_OscConfig+0x50c>
 800236c:	4b08      	ldr	r3, [pc, #32]	; (8002390 <HAL_RCC_OscConfig+0x504>)
 800236e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002372:	4a07      	ldr	r2, [pc, #28]	; (8002390 <HAL_RCC_OscConfig+0x504>)
 8002374:	f043 0304 	orr.w	r3, r3, #4
 8002378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800237c:	4b04      	ldr	r3, [pc, #16]	; (8002390 <HAL_RCC_OscConfig+0x504>)
 800237e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002382:	4a03      	ldr	r2, [pc, #12]	; (8002390 <HAL_RCC_OscConfig+0x504>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800238c:	e014      	b.n	80023b8 <HAL_RCC_OscConfig+0x52c>
 800238e:	bf00      	nop
 8002390:	40021000 	.word	0x40021000
 8002394:	40007000 	.word	0x40007000
 8002398:	4b9a      	ldr	r3, [pc, #616]	; (8002604 <HAL_RCC_OscConfig+0x778>)
 800239a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239e:	4a99      	ldr	r2, [pc, #612]	; (8002604 <HAL_RCC_OscConfig+0x778>)
 80023a0:	f023 0301 	bic.w	r3, r3, #1
 80023a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023a8:	4b96      	ldr	r3, [pc, #600]	; (8002604 <HAL_RCC_OscConfig+0x778>)
 80023aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ae:	4a95      	ldr	r2, [pc, #596]	; (8002604 <HAL_RCC_OscConfig+0x778>)
 80023b0:	f023 0304 	bic.w	r3, r3, #4
 80023b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d016      	beq.n	80023ee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c0:	f7ff f9e6 	bl	8001790 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023c6:	e00a      	b.n	80023de <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c8:	f7ff f9e2 	bl	8001790 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e162      	b.n	80026a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023de:	4b89      	ldr	r3, [pc, #548]	; (8002604 <HAL_RCC_OscConfig+0x778>)
 80023e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0ed      	beq.n	80023c8 <HAL_RCC_OscConfig+0x53c>
 80023ec:	e015      	b.n	800241a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ee:	f7ff f9cf 	bl	8001790 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023f4:	e00a      	b.n	800240c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f6:	f7ff f9cb 	bl	8001790 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	f241 3288 	movw	r2, #5000	; 0x1388
 8002404:	4293      	cmp	r3, r2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e14b      	b.n	80026a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800240c:	4b7d      	ldr	r3, [pc, #500]	; (8002604 <HAL_RCC_OscConfig+0x778>)
 800240e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1ed      	bne.n	80023f6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800241a:	7ffb      	ldrb	r3, [r7, #31]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d105      	bne.n	800242c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002420:	4b78      	ldr	r3, [pc, #480]	; (8002604 <HAL_RCC_OscConfig+0x778>)
 8002422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002424:	4a77      	ldr	r2, [pc, #476]	; (8002604 <HAL_RCC_OscConfig+0x778>)
 8002426:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800242a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0320 	and.w	r3, r3, #32
 8002434:	2b00      	cmp	r3, #0
 8002436:	d03c      	beq.n	80024b2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	2b00      	cmp	r3, #0
 800243e:	d01c      	beq.n	800247a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002440:	4b70      	ldr	r3, [pc, #448]	; (8002604 <HAL_RCC_OscConfig+0x778>)
 8002442:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002446:	4a6f      	ldr	r2, [pc, #444]	; (8002604 <HAL_RCC_OscConfig+0x778>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002450:	f7ff f99e 	bl	8001790 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002458:	f7ff f99a 	bl	8001790 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e11c      	b.n	80026a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800246a:	4b66      	ldr	r3, [pc, #408]	; (8002604 <HAL_RCC_OscConfig+0x778>)
 800246c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0ef      	beq.n	8002458 <HAL_RCC_OscConfig+0x5cc>
 8002478:	e01b      	b.n	80024b2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800247a:	4b62      	ldr	r3, [pc, #392]	; (8002604 <HAL_RCC_OscConfig+0x778>)
 800247c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002480:	4a60      	ldr	r2, [pc, #384]	; (8002604 <HAL_RCC_OscConfig+0x778>)
 8002482:	f023 0301 	bic.w	r3, r3, #1
 8002486:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800248a:	f7ff f981 	bl	8001790 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002492:	f7ff f97d 	bl	8001790 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e0ff      	b.n	80026a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024a4:	4b57      	ldr	r3, [pc, #348]	; (8002604 <HAL_RCC_OscConfig+0x778>)
 80024a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1ef      	bne.n	8002492 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 80f3 	beq.w	80026a2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	f040 80c9 	bne.w	8002658 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80024c6:	4b4f      	ldr	r3, [pc, #316]	; (8002604 <HAL_RCC_OscConfig+0x778>)
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f003 0203 	and.w	r2, r3, #3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d12c      	bne.n	8002534 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	3b01      	subs	r3, #1
 80024e6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d123      	bne.n	8002534 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d11b      	bne.n	8002534 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002506:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002508:	429a      	cmp	r2, r3
 800250a:	d113      	bne.n	8002534 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002516:	085b      	lsrs	r3, r3, #1
 8002518:	3b01      	subs	r3, #1
 800251a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800251c:	429a      	cmp	r2, r3
 800251e:	d109      	bne.n	8002534 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	085b      	lsrs	r3, r3, #1
 800252c:	3b01      	subs	r3, #1
 800252e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002530:	429a      	cmp	r2, r3
 8002532:	d06b      	beq.n	800260c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	2b0c      	cmp	r3, #12
 8002538:	d062      	beq.n	8002600 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800253a:	4b32      	ldr	r3, [pc, #200]	; (8002604 <HAL_RCC_OscConfig+0x778>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e0ac      	b.n	80026a4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800254a:	4b2e      	ldr	r3, [pc, #184]	; (8002604 <HAL_RCC_OscConfig+0x778>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a2d      	ldr	r2, [pc, #180]	; (8002604 <HAL_RCC_OscConfig+0x778>)
 8002550:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002554:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002556:	f7ff f91b 	bl	8001790 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255e:	f7ff f917 	bl	8001790 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e099      	b.n	80026a4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002570:	4b24      	ldr	r3, [pc, #144]	; (8002604 <HAL_RCC_OscConfig+0x778>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1f0      	bne.n	800255e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800257c:	4b21      	ldr	r3, [pc, #132]	; (8002604 <HAL_RCC_OscConfig+0x778>)
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	4b21      	ldr	r3, [pc, #132]	; (8002608 <HAL_RCC_OscConfig+0x77c>)
 8002582:	4013      	ands	r3, r2
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800258c:	3a01      	subs	r2, #1
 800258e:	0112      	lsls	r2, r2, #4
 8002590:	4311      	orrs	r1, r2
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002596:	0212      	lsls	r2, r2, #8
 8002598:	4311      	orrs	r1, r2
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800259e:	0852      	lsrs	r2, r2, #1
 80025a0:	3a01      	subs	r2, #1
 80025a2:	0552      	lsls	r2, r2, #21
 80025a4:	4311      	orrs	r1, r2
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025aa:	0852      	lsrs	r2, r2, #1
 80025ac:	3a01      	subs	r2, #1
 80025ae:	0652      	lsls	r2, r2, #25
 80025b0:	4311      	orrs	r1, r2
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025b6:	06d2      	lsls	r2, r2, #27
 80025b8:	430a      	orrs	r2, r1
 80025ba:	4912      	ldr	r1, [pc, #72]	; (8002604 <HAL_RCC_OscConfig+0x778>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025c0:	4b10      	ldr	r3, [pc, #64]	; (8002604 <HAL_RCC_OscConfig+0x778>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a0f      	ldr	r2, [pc, #60]	; (8002604 <HAL_RCC_OscConfig+0x778>)
 80025c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025cc:	4b0d      	ldr	r3, [pc, #52]	; (8002604 <HAL_RCC_OscConfig+0x778>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	4a0c      	ldr	r2, [pc, #48]	; (8002604 <HAL_RCC_OscConfig+0x778>)
 80025d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025d8:	f7ff f8da 	bl	8001790 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e0:	f7ff f8d6 	bl	8001790 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e058      	b.n	80026a4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025f2:	4b04      	ldr	r3, [pc, #16]	; (8002604 <HAL_RCC_OscConfig+0x778>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025fe:	e050      	b.n	80026a2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e04f      	b.n	80026a4 <HAL_RCC_OscConfig+0x818>
 8002604:	40021000 	.word	0x40021000
 8002608:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800260c:	4b27      	ldr	r3, [pc, #156]	; (80026ac <HAL_RCC_OscConfig+0x820>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d144      	bne.n	80026a2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002618:	4b24      	ldr	r3, [pc, #144]	; (80026ac <HAL_RCC_OscConfig+0x820>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a23      	ldr	r2, [pc, #140]	; (80026ac <HAL_RCC_OscConfig+0x820>)
 800261e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002622:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002624:	4b21      	ldr	r3, [pc, #132]	; (80026ac <HAL_RCC_OscConfig+0x820>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	4a20      	ldr	r2, [pc, #128]	; (80026ac <HAL_RCC_OscConfig+0x820>)
 800262a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800262e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002630:	f7ff f8ae 	bl	8001790 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002638:	f7ff f8aa 	bl	8001790 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e02c      	b.n	80026a4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800264a:	4b18      	ldr	r3, [pc, #96]	; (80026ac <HAL_RCC_OscConfig+0x820>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0f0      	beq.n	8002638 <HAL_RCC_OscConfig+0x7ac>
 8002656:	e024      	b.n	80026a2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	2b0c      	cmp	r3, #12
 800265c:	d01f      	beq.n	800269e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265e:	4b13      	ldr	r3, [pc, #76]	; (80026ac <HAL_RCC_OscConfig+0x820>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a12      	ldr	r2, [pc, #72]	; (80026ac <HAL_RCC_OscConfig+0x820>)
 8002664:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266a:	f7ff f891 	bl	8001790 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002672:	f7ff f88d 	bl	8001790 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e00f      	b.n	80026a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002684:	4b09      	ldr	r3, [pc, #36]	; (80026ac <HAL_RCC_OscConfig+0x820>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1f0      	bne.n	8002672 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <HAL_RCC_OscConfig+0x820>)
 8002692:	68da      	ldr	r2, [r3, #12]
 8002694:	4905      	ldr	r1, [pc, #20]	; (80026ac <HAL_RCC_OscConfig+0x820>)
 8002696:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <HAL_RCC_OscConfig+0x824>)
 8002698:	4013      	ands	r3, r2
 800269a:	60cb      	str	r3, [r1, #12]
 800269c:	e001      	b.n	80026a2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3720      	adds	r7, #32
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40021000 	.word	0x40021000
 80026b0:	feeefffc 	.word	0xfeeefffc

080026b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0e7      	b.n	8002898 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026c8:	4b75      	ldr	r3, [pc, #468]	; (80028a0 <HAL_RCC_ClockConfig+0x1ec>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d910      	bls.n	80026f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d6:	4b72      	ldr	r3, [pc, #456]	; (80028a0 <HAL_RCC_ClockConfig+0x1ec>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f023 0207 	bic.w	r2, r3, #7
 80026de:	4970      	ldr	r1, [pc, #448]	; (80028a0 <HAL_RCC_ClockConfig+0x1ec>)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e6:	4b6e      	ldr	r3, [pc, #440]	; (80028a0 <HAL_RCC_ClockConfig+0x1ec>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d001      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0cf      	b.n	8002898 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d010      	beq.n	8002726 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	4b66      	ldr	r3, [pc, #408]	; (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002710:	429a      	cmp	r2, r3
 8002712:	d908      	bls.n	8002726 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002714:	4b63      	ldr	r3, [pc, #396]	; (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	4960      	ldr	r1, [pc, #384]	; (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002722:	4313      	orrs	r3, r2
 8002724:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d04c      	beq.n	80027cc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b03      	cmp	r3, #3
 8002738:	d107      	bne.n	800274a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800273a:	4b5a      	ldr	r3, [pc, #360]	; (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d121      	bne.n	800278a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e0a6      	b.n	8002898 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b02      	cmp	r3, #2
 8002750:	d107      	bne.n	8002762 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002752:	4b54      	ldr	r3, [pc, #336]	; (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d115      	bne.n	800278a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e09a      	b.n	8002898 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d107      	bne.n	800277a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800276a:	4b4e      	ldr	r3, [pc, #312]	; (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d109      	bne.n	800278a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e08e      	b.n	8002898 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800277a:	4b4a      	ldr	r3, [pc, #296]	; (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e086      	b.n	8002898 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800278a:	4b46      	ldr	r3, [pc, #280]	; (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f023 0203 	bic.w	r2, r3, #3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	4943      	ldr	r1, [pc, #268]	; (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002798:	4313      	orrs	r3, r2
 800279a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800279c:	f7fe fff8 	bl	8001790 <HAL_GetTick>
 80027a0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a2:	e00a      	b.n	80027ba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a4:	f7fe fff4 	bl	8001790 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e06e      	b.n	8002898 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ba:	4b3a      	ldr	r3, [pc, #232]	; (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 020c 	and.w	r2, r3, #12
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d1eb      	bne.n	80027a4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d010      	beq.n	80027fa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	4b31      	ldr	r3, [pc, #196]	; (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d208      	bcs.n	80027fa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e8:	4b2e      	ldr	r3, [pc, #184]	; (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	492b      	ldr	r1, [pc, #172]	; (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027fa:	4b29      	ldr	r3, [pc, #164]	; (80028a0 <HAL_RCC_ClockConfig+0x1ec>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d210      	bcs.n	800282a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002808:	4b25      	ldr	r3, [pc, #148]	; (80028a0 <HAL_RCC_ClockConfig+0x1ec>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f023 0207 	bic.w	r2, r3, #7
 8002810:	4923      	ldr	r1, [pc, #140]	; (80028a0 <HAL_RCC_ClockConfig+0x1ec>)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	4313      	orrs	r3, r2
 8002816:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002818:	4b21      	ldr	r3, [pc, #132]	; (80028a0 <HAL_RCC_ClockConfig+0x1ec>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	d001      	beq.n	800282a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e036      	b.n	8002898 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0304 	and.w	r3, r3, #4
 8002832:	2b00      	cmp	r3, #0
 8002834:	d008      	beq.n	8002848 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002836:	4b1b      	ldr	r3, [pc, #108]	; (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	4918      	ldr	r1, [pc, #96]	; (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002844:	4313      	orrs	r3, r2
 8002846:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0308 	and.w	r3, r3, #8
 8002850:	2b00      	cmp	r3, #0
 8002852:	d009      	beq.n	8002868 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002854:	4b13      	ldr	r3, [pc, #76]	; (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	4910      	ldr	r1, [pc, #64]	; (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002864:	4313      	orrs	r3, r2
 8002866:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002868:	f000 f824 	bl	80028b4 <HAL_RCC_GetSysClockFreq>
 800286c:	4602      	mov	r2, r0
 800286e:	4b0d      	ldr	r3, [pc, #52]	; (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	091b      	lsrs	r3, r3, #4
 8002874:	f003 030f 	and.w	r3, r3, #15
 8002878:	490b      	ldr	r1, [pc, #44]	; (80028a8 <HAL_RCC_ClockConfig+0x1f4>)
 800287a:	5ccb      	ldrb	r3, [r1, r3]
 800287c:	f003 031f 	and.w	r3, r3, #31
 8002880:	fa22 f303 	lsr.w	r3, r2, r3
 8002884:	4a09      	ldr	r2, [pc, #36]	; (80028ac <HAL_RCC_ClockConfig+0x1f8>)
 8002886:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002888:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <HAL_RCC_ClockConfig+0x1fc>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f7fe fc97 	bl	80011c0 <HAL_InitTick>
 8002892:	4603      	mov	r3, r0
 8002894:	72fb      	strb	r3, [r7, #11]

  return status;
 8002896:	7afb      	ldrb	r3, [r7, #11]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40022000 	.word	0x40022000
 80028a4:	40021000 	.word	0x40021000
 80028a8:	0800b298 	.word	0x0800b298
 80028ac:	20000000 	.word	0x20000000
 80028b0:	20000004 	.word	0x20000004

080028b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b089      	sub	sp, #36	; 0x24
 80028b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	61fb      	str	r3, [r7, #28]
 80028be:	2300      	movs	r3, #0
 80028c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028c2:	4b3e      	ldr	r3, [pc, #248]	; (80029bc <HAL_RCC_GetSysClockFreq+0x108>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 030c 	and.w	r3, r3, #12
 80028ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028cc:	4b3b      	ldr	r3, [pc, #236]	; (80029bc <HAL_RCC_GetSysClockFreq+0x108>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f003 0303 	and.w	r3, r3, #3
 80028d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d005      	beq.n	80028e8 <HAL_RCC_GetSysClockFreq+0x34>
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	2b0c      	cmp	r3, #12
 80028e0:	d121      	bne.n	8002926 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d11e      	bne.n	8002926 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028e8:	4b34      	ldr	r3, [pc, #208]	; (80029bc <HAL_RCC_GetSysClockFreq+0x108>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d107      	bne.n	8002904 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028f4:	4b31      	ldr	r3, [pc, #196]	; (80029bc <HAL_RCC_GetSysClockFreq+0x108>)
 80028f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028fa:	0a1b      	lsrs	r3, r3, #8
 80028fc:	f003 030f 	and.w	r3, r3, #15
 8002900:	61fb      	str	r3, [r7, #28]
 8002902:	e005      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002904:	4b2d      	ldr	r3, [pc, #180]	; (80029bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	091b      	lsrs	r3, r3, #4
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002910:	4a2b      	ldr	r2, [pc, #172]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002918:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10d      	bne.n	800293c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002924:	e00a      	b.n	800293c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	2b04      	cmp	r3, #4
 800292a:	d102      	bne.n	8002932 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800292c:	4b25      	ldr	r3, [pc, #148]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800292e:	61bb      	str	r3, [r7, #24]
 8002930:	e004      	b.n	800293c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	2b08      	cmp	r3, #8
 8002936:	d101      	bne.n	800293c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002938:	4b23      	ldr	r3, [pc, #140]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800293a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	2b0c      	cmp	r3, #12
 8002940:	d134      	bne.n	80029ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002942:	4b1e      	ldr	r3, [pc, #120]	; (80029bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d003      	beq.n	800295a <HAL_RCC_GetSysClockFreq+0xa6>
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	2b03      	cmp	r3, #3
 8002956:	d003      	beq.n	8002960 <HAL_RCC_GetSysClockFreq+0xac>
 8002958:	e005      	b.n	8002966 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800295a:	4b1a      	ldr	r3, [pc, #104]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800295c:	617b      	str	r3, [r7, #20]
      break;
 800295e:	e005      	b.n	800296c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002960:	4b19      	ldr	r3, [pc, #100]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002962:	617b      	str	r3, [r7, #20]
      break;
 8002964:	e002      	b.n	800296c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	617b      	str	r3, [r7, #20]
      break;
 800296a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800296c:	4b13      	ldr	r3, [pc, #76]	; (80029bc <HAL_RCC_GetSysClockFreq+0x108>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	091b      	lsrs	r3, r3, #4
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	3301      	adds	r3, #1
 8002978:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800297a:	4b10      	ldr	r3, [pc, #64]	; (80029bc <HAL_RCC_GetSysClockFreq+0x108>)
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	0a1b      	lsrs	r3, r3, #8
 8002980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	fb03 f202 	mul.w	r2, r3, r2
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002990:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002992:	4b0a      	ldr	r3, [pc, #40]	; (80029bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	0e5b      	lsrs	r3, r3, #25
 8002998:	f003 0303 	and.w	r3, r3, #3
 800299c:	3301      	adds	r3, #1
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80029ac:	69bb      	ldr	r3, [r7, #24]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3724      	adds	r7, #36	; 0x24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	40021000 	.word	0x40021000
 80029c0:	0800b2b0 	.word	0x0800b2b0
 80029c4:	00f42400 	.word	0x00f42400
 80029c8:	007a1200 	.word	0x007a1200

080029cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029d0:	4b03      	ldr	r3, [pc, #12]	; (80029e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80029d2:	681b      	ldr	r3, [r3, #0]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	20000000 	.word	0x20000000

080029e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80029e8:	f7ff fff0 	bl	80029cc <HAL_RCC_GetHCLKFreq>
 80029ec:	4602      	mov	r2, r0
 80029ee:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	0a1b      	lsrs	r3, r3, #8
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	4904      	ldr	r1, [pc, #16]	; (8002a0c <HAL_RCC_GetPCLK1Freq+0x28>)
 80029fa:	5ccb      	ldrb	r3, [r1, r3]
 80029fc:	f003 031f 	and.w	r3, r3, #31
 8002a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	0800b2a8 	.word	0x0800b2a8

08002a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a14:	f7ff ffda 	bl	80029cc <HAL_RCC_GetHCLKFreq>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	0adb      	lsrs	r3, r3, #11
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	4904      	ldr	r1, [pc, #16]	; (8002a38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a26:	5ccb      	ldrb	r3, [r1, r3]
 8002a28:	f003 031f 	and.w	r3, r3, #31
 8002a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40021000 	.word	0x40021000
 8002a38:	0800b2a8 	.word	0x0800b2a8

08002a3c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	220f      	movs	r2, #15
 8002a4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002a4c:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <HAL_RCC_GetClockConfig+0x5c>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 0203 	and.w	r2, r3, #3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002a58:	4b0f      	ldr	r3, [pc, #60]	; (8002a98 <HAL_RCC_GetClockConfig+0x5c>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002a64:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <HAL_RCC_GetClockConfig+0x5c>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002a70:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <HAL_RCC_GetClockConfig+0x5c>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	08db      	lsrs	r3, r3, #3
 8002a76:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002a7e:	4b07      	ldr	r3, [pc, #28]	; (8002a9c <HAL_RCC_GetClockConfig+0x60>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0207 	and.w	r2, r3, #7
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	601a      	str	r2, [r3, #0]
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40022000 	.word	0x40022000

08002aa0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002aac:	4b2a      	ldr	r3, [pc, #168]	; (8002b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ab8:	f7ff f984 	bl	8001dc4 <HAL_PWREx_GetVoltageRange>
 8002abc:	6178      	str	r0, [r7, #20]
 8002abe:	e014      	b.n	8002aea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ac0:	4b25      	ldr	r3, [pc, #148]	; (8002b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac4:	4a24      	ldr	r2, [pc, #144]	; (8002b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aca:	6593      	str	r3, [r2, #88]	; 0x58
 8002acc:	4b22      	ldr	r3, [pc, #136]	; (8002b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ad8:	f7ff f974 	bl	8001dc4 <HAL_PWREx_GetVoltageRange>
 8002adc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ade:	4b1e      	ldr	r3, [pc, #120]	; (8002b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae2:	4a1d      	ldr	r2, [pc, #116]	; (8002b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ae4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ae8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002af0:	d10b      	bne.n	8002b0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b80      	cmp	r3, #128	; 0x80
 8002af6:	d919      	bls.n	8002b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2ba0      	cmp	r3, #160	; 0xa0
 8002afc:	d902      	bls.n	8002b04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002afe:	2302      	movs	r3, #2
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	e013      	b.n	8002b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b04:	2301      	movs	r3, #1
 8002b06:	613b      	str	r3, [r7, #16]
 8002b08:	e010      	b.n	8002b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b80      	cmp	r3, #128	; 0x80
 8002b0e:	d902      	bls.n	8002b16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b10:	2303      	movs	r3, #3
 8002b12:	613b      	str	r3, [r7, #16]
 8002b14:	e00a      	b.n	8002b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b80      	cmp	r3, #128	; 0x80
 8002b1a:	d102      	bne.n	8002b22 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	613b      	str	r3, [r7, #16]
 8002b20:	e004      	b.n	8002b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b70      	cmp	r3, #112	; 0x70
 8002b26:	d101      	bne.n	8002b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b28:	2301      	movs	r3, #1
 8002b2a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f023 0207 	bic.w	r2, r3, #7
 8002b34:	4909      	ldr	r1, [pc, #36]	; (8002b5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b3c:	4b07      	ldr	r3, [pc, #28]	; (8002b5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d001      	beq.n	8002b4e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	40022000 	.word	0x40022000

08002b60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b68:	2300      	movs	r3, #0
 8002b6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d031      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b80:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b84:	d01a      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002b86:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b8a:	d814      	bhi.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d009      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b94:	d10f      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002b96:	4b5d      	ldr	r3, [pc, #372]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	4a5c      	ldr	r2, [pc, #368]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ba2:	e00c      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3304      	adds	r3, #4
 8002ba8:	2100      	movs	r1, #0
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 f9de 	bl	8002f6c <RCCEx_PLLSAI1_Config>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bb4:	e003      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	74fb      	strb	r3, [r7, #19]
      break;
 8002bba:	e000      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002bbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bbe:	7cfb      	ldrb	r3, [r7, #19]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10b      	bne.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bc4:	4b51      	ldr	r3, [pc, #324]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd2:	494e      	ldr	r1, [pc, #312]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002bda:	e001      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bdc:	7cfb      	ldrb	r3, [r7, #19]
 8002bde:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 809e 	beq.w	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bf2:	4b46      	ldr	r3, [pc, #280]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002c02:	2300      	movs	r3, #0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00d      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c08:	4b40      	ldr	r3, [pc, #256]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0c:	4a3f      	ldr	r2, [pc, #252]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c12:	6593      	str	r3, [r2, #88]	; 0x58
 8002c14:	4b3d      	ldr	r3, [pc, #244]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c20:	2301      	movs	r3, #1
 8002c22:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c24:	4b3a      	ldr	r3, [pc, #232]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a39      	ldr	r2, [pc, #228]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c30:	f7fe fdae 	bl	8001790 <HAL_GetTick>
 8002c34:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c36:	e009      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c38:	f7fe fdaa 	bl	8001790 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d902      	bls.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	74fb      	strb	r3, [r7, #19]
        break;
 8002c4a:	e005      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c4c:	4b30      	ldr	r3, [pc, #192]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d0ef      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002c58:	7cfb      	ldrb	r3, [r7, #19]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d15a      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c5e:	4b2b      	ldr	r3, [pc, #172]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c68:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d01e      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d019      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c7a:	4b24      	ldr	r3, [pc, #144]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c84:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c86:	4b21      	ldr	r3, [pc, #132]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8c:	4a1f      	ldr	r2, [pc, #124]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c96:	4b1d      	ldr	r3, [pc, #116]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9c:	4a1b      	ldr	r2, [pc, #108]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ca6:	4a19      	ldr	r2, [pc, #100]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d016      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb8:	f7fe fd6a 	bl	8001790 <HAL_GetTick>
 8002cbc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cbe:	e00b      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc0:	f7fe fd66 	bl	8001790 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d902      	bls.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	74fb      	strb	r3, [r7, #19]
            break;
 8002cd6:	e006      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0ec      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002ce6:	7cfb      	ldrb	r3, [r7, #19]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10b      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cec:	4b07      	ldr	r3, [pc, #28]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cfa:	4904      	ldr	r1, [pc, #16]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d02:	e009      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d04:	7cfb      	ldrb	r3, [r7, #19]
 8002d06:	74bb      	strb	r3, [r7, #18]
 8002d08:	e006      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002d0a:	bf00      	nop
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d14:	7cfb      	ldrb	r3, [r7, #19]
 8002d16:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d18:	7c7b      	ldrb	r3, [r7, #17]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d105      	bne.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d1e:	4b8a      	ldr	r3, [pc, #552]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d22:	4a89      	ldr	r2, [pc, #548]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d28:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00a      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d36:	4b84      	ldr	r3, [pc, #528]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3c:	f023 0203 	bic.w	r2, r3, #3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	4980      	ldr	r1, [pc, #512]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00a      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d58:	4b7b      	ldr	r3, [pc, #492]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5e:	f023 020c 	bic.w	r2, r3, #12
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	4978      	ldr	r1, [pc, #480]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0320 	and.w	r3, r3, #32
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00a      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d7a:	4b73      	ldr	r3, [pc, #460]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d80:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d88:	496f      	ldr	r1, [pc, #444]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00a      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d9c:	4b6a      	ldr	r3, [pc, #424]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002daa:	4967      	ldr	r1, [pc, #412]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00a      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002dbe:	4b62      	ldr	r3, [pc, #392]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dcc:	495e      	ldr	r1, [pc, #376]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00a      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002de0:	4b59      	ldr	r3, [pc, #356]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dee:	4956      	ldr	r1, [pc, #344]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00a      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e02:	4b51      	ldr	r3, [pc, #324]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e10:	494d      	ldr	r1, [pc, #308]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d028      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e24:	4b48      	ldr	r3, [pc, #288]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	4945      	ldr	r1, [pc, #276]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e42:	d106      	bne.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e44:	4b40      	ldr	r3, [pc, #256]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	4a3f      	ldr	r2, [pc, #252]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e4e:	60d3      	str	r3, [r2, #12]
 8002e50:	e011      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e5a:	d10c      	bne.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3304      	adds	r3, #4
 8002e60:	2101      	movs	r1, #1
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 f882 	bl	8002f6c <RCCEx_PLLSAI1_Config>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e6c:	7cfb      	ldrb	r3, [r7, #19]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002e72:	7cfb      	ldrb	r3, [r7, #19]
 8002e74:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d028      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e82:	4b31      	ldr	r3, [pc, #196]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e88:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e90:	492d      	ldr	r1, [pc, #180]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ea0:	d106      	bne.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ea2:	4b29      	ldr	r3, [pc, #164]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	4a28      	ldr	r2, [pc, #160]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ea8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eac:	60d3      	str	r3, [r2, #12]
 8002eae:	e011      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002eb8:	d10c      	bne.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 f853 	bl	8002f6c <RCCEx_PLLSAI1_Config>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002eca:	7cfb      	ldrb	r3, [r7, #19]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002ed0:	7cfb      	ldrb	r3, [r7, #19]
 8002ed2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d01c      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ee0:	4b19      	ldr	r3, [pc, #100]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eee:	4916      	ldr	r1, [pc, #88]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002efa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002efe:	d10c      	bne.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3304      	adds	r3, #4
 8002f04:	2102      	movs	r1, #2
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 f830 	bl	8002f6c <RCCEx_PLLSAI1_Config>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f10:	7cfb      	ldrb	r3, [r7, #19]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002f16:	7cfb      	ldrb	r3, [r7, #19]
 8002f18:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00a      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f26:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f34:	4904      	ldr	r1, [pc, #16]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f3c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40021000 	.word	0x40021000

08002f4c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002f50:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a04      	ldr	r2, [pc, #16]	; (8002f68 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002f56:	f043 0304 	orr.w	r3, r3, #4
 8002f5a:	6013      	str	r3, [r2, #0]
}
 8002f5c:	bf00      	nop
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	40021000 	.word	0x40021000

08002f6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f7a:	4b74      	ldr	r3, [pc, #464]	; (800314c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d018      	beq.n	8002fb8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f86:	4b71      	ldr	r3, [pc, #452]	; (800314c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f003 0203 	and.w	r2, r3, #3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d10d      	bne.n	8002fb2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
       ||
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d009      	beq.n	8002fb2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f9e:	4b6b      	ldr	r3, [pc, #428]	; (800314c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	091b      	lsrs	r3, r3, #4
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	1c5a      	adds	r2, r3, #1
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
       ||
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d047      	beq.n	8003042 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	73fb      	strb	r3, [r7, #15]
 8002fb6:	e044      	b.n	8003042 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b03      	cmp	r3, #3
 8002fbe:	d018      	beq.n	8002ff2 <RCCEx_PLLSAI1_Config+0x86>
 8002fc0:	2b03      	cmp	r3, #3
 8002fc2:	d825      	bhi.n	8003010 <RCCEx_PLLSAI1_Config+0xa4>
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d002      	beq.n	8002fce <RCCEx_PLLSAI1_Config+0x62>
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d009      	beq.n	8002fe0 <RCCEx_PLLSAI1_Config+0x74>
 8002fcc:	e020      	b.n	8003010 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fce:	4b5f      	ldr	r3, [pc, #380]	; (800314c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d11d      	bne.n	8003016 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fde:	e01a      	b.n	8003016 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fe0:	4b5a      	ldr	r3, [pc, #360]	; (800314c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d116      	bne.n	800301a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ff0:	e013      	b.n	800301a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ff2:	4b56      	ldr	r3, [pc, #344]	; (800314c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10f      	bne.n	800301e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ffe:	4b53      	ldr	r3, [pc, #332]	; (800314c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d109      	bne.n	800301e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800300e:	e006      	b.n	800301e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	73fb      	strb	r3, [r7, #15]
      break;
 8003014:	e004      	b.n	8003020 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003016:	bf00      	nop
 8003018:	e002      	b.n	8003020 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800301a:	bf00      	nop
 800301c:	e000      	b.n	8003020 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800301e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003020:	7bfb      	ldrb	r3, [r7, #15]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10d      	bne.n	8003042 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003026:	4b49      	ldr	r3, [pc, #292]	; (800314c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6819      	ldr	r1, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	3b01      	subs	r3, #1
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	430b      	orrs	r3, r1
 800303c:	4943      	ldr	r1, [pc, #268]	; (800314c <RCCEx_PLLSAI1_Config+0x1e0>)
 800303e:	4313      	orrs	r3, r2
 8003040:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003042:	7bfb      	ldrb	r3, [r7, #15]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d17c      	bne.n	8003142 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003048:	4b40      	ldr	r3, [pc, #256]	; (800314c <RCCEx_PLLSAI1_Config+0x1e0>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a3f      	ldr	r2, [pc, #252]	; (800314c <RCCEx_PLLSAI1_Config+0x1e0>)
 800304e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003052:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003054:	f7fe fb9c 	bl	8001790 <HAL_GetTick>
 8003058:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800305a:	e009      	b.n	8003070 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800305c:	f7fe fb98 	bl	8001790 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d902      	bls.n	8003070 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	73fb      	strb	r3, [r7, #15]
        break;
 800306e:	e005      	b.n	800307c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003070:	4b36      	ldr	r3, [pc, #216]	; (800314c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1ef      	bne.n	800305c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800307c:	7bfb      	ldrb	r3, [r7, #15]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d15f      	bne.n	8003142 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d110      	bne.n	80030aa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003088:	4b30      	ldr	r3, [pc, #192]	; (800314c <RCCEx_PLLSAI1_Config+0x1e0>)
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003090:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6892      	ldr	r2, [r2, #8]
 8003098:	0211      	lsls	r1, r2, #8
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	68d2      	ldr	r2, [r2, #12]
 800309e:	06d2      	lsls	r2, r2, #27
 80030a0:	430a      	orrs	r2, r1
 80030a2:	492a      	ldr	r1, [pc, #168]	; (800314c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	610b      	str	r3, [r1, #16]
 80030a8:	e027      	b.n	80030fa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d112      	bne.n	80030d6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030b0:	4b26      	ldr	r3, [pc, #152]	; (800314c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80030b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6892      	ldr	r2, [r2, #8]
 80030c0:	0211      	lsls	r1, r2, #8
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6912      	ldr	r2, [r2, #16]
 80030c6:	0852      	lsrs	r2, r2, #1
 80030c8:	3a01      	subs	r2, #1
 80030ca:	0552      	lsls	r2, r2, #21
 80030cc:	430a      	orrs	r2, r1
 80030ce:	491f      	ldr	r1, [pc, #124]	; (800314c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	610b      	str	r3, [r1, #16]
 80030d4:	e011      	b.n	80030fa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030d6:	4b1d      	ldr	r3, [pc, #116]	; (800314c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6892      	ldr	r2, [r2, #8]
 80030e6:	0211      	lsls	r1, r2, #8
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6952      	ldr	r2, [r2, #20]
 80030ec:	0852      	lsrs	r2, r2, #1
 80030ee:	3a01      	subs	r2, #1
 80030f0:	0652      	lsls	r2, r2, #25
 80030f2:	430a      	orrs	r2, r1
 80030f4:	4915      	ldr	r1, [pc, #84]	; (800314c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80030fa:	4b14      	ldr	r3, [pc, #80]	; (800314c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a13      	ldr	r2, [pc, #76]	; (800314c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003100:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003104:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003106:	f7fe fb43 	bl	8001790 <HAL_GetTick>
 800310a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800310c:	e009      	b.n	8003122 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800310e:	f7fe fb3f 	bl	8001790 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d902      	bls.n	8003122 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	73fb      	strb	r3, [r7, #15]
          break;
 8003120:	e005      	b.n	800312e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003122:	4b0a      	ldr	r3, [pc, #40]	; (800314c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0ef      	beq.n	800310e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800312e:	7bfb      	ldrb	r3, [r7, #15]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d106      	bne.n	8003142 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003134:	4b05      	ldr	r3, [pc, #20]	; (800314c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	4903      	ldr	r1, [pc, #12]	; (800314c <RCCEx_PLLSAI1_Config+0x1e0>)
 800313e:	4313      	orrs	r3, r2
 8003140:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003142:	7bfb      	ldrb	r3, [r7, #15]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40021000 	.word	0x40021000

08003150 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e049      	b.n	80031f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d106      	bne.n	800317c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f841 	bl	80031fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3304      	adds	r3, #4
 800318c:	4619      	mov	r1, r3
 800318e:	4610      	mov	r0, r2
 8003190:	f000 f9dc 	bl	800354c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
	...

08003214 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b01      	cmp	r3, #1
 8003226:	d001      	beq.n	800322c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e03b      	b.n	80032a4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0201 	orr.w	r2, r2, #1
 8003242:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a19      	ldr	r2, [pc, #100]	; (80032b0 <HAL_TIM_Base_Start_IT+0x9c>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d009      	beq.n	8003262 <HAL_TIM_Base_Start_IT+0x4e>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003256:	d004      	beq.n	8003262 <HAL_TIM_Base_Start_IT+0x4e>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a15      	ldr	r2, [pc, #84]	; (80032b4 <HAL_TIM_Base_Start_IT+0xa0>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d115      	bne.n	800328e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	4b13      	ldr	r3, [pc, #76]	; (80032b8 <HAL_TIM_Base_Start_IT+0xa4>)
 800326a:	4013      	ands	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2b06      	cmp	r3, #6
 8003272:	d015      	beq.n	80032a0 <HAL_TIM_Base_Start_IT+0x8c>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800327a:	d011      	beq.n	80032a0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0201 	orr.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800328c:	e008      	b.n	80032a0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f042 0201 	orr.w	r2, r2, #1
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	e000      	b.n	80032a2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	40012c00 	.word	0x40012c00
 80032b4:	40014000 	.word	0x40014000
 80032b8:	00010007 	.word	0x00010007

080032bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d122      	bne.n	8003318 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d11b      	bne.n	8003318 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f06f 0202 	mvn.w	r2, #2
 80032e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f905 	bl	800350e <HAL_TIM_IC_CaptureCallback>
 8003304:	e005      	b.n	8003312 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f8f7 	bl	80034fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 f908 	bl	8003522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	2b04      	cmp	r3, #4
 8003324:	d122      	bne.n	800336c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b04      	cmp	r3, #4
 8003332:	d11b      	bne.n	800336c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f06f 0204 	mvn.w	r2, #4
 800333c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2202      	movs	r2, #2
 8003342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f8db 	bl	800350e <HAL_TIM_IC_CaptureCallback>
 8003358:	e005      	b.n	8003366 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f8cd 	bl	80034fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 f8de 	bl	8003522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b08      	cmp	r3, #8
 8003378:	d122      	bne.n	80033c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f003 0308 	and.w	r3, r3, #8
 8003384:	2b08      	cmp	r3, #8
 8003386:	d11b      	bne.n	80033c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f06f 0208 	mvn.w	r2, #8
 8003390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2204      	movs	r2, #4
 8003396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f8b1 	bl	800350e <HAL_TIM_IC_CaptureCallback>
 80033ac:	e005      	b.n	80033ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 f8a3 	bl	80034fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f8b4 	bl	8003522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	f003 0310 	and.w	r3, r3, #16
 80033ca:	2b10      	cmp	r3, #16
 80033cc:	d122      	bne.n	8003414 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f003 0310 	and.w	r3, r3, #16
 80033d8:	2b10      	cmp	r3, #16
 80033da:	d11b      	bne.n	8003414 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f06f 0210 	mvn.w	r2, #16
 80033e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2208      	movs	r2, #8
 80033ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f887 	bl	800350e <HAL_TIM_IC_CaptureCallback>
 8003400:	e005      	b.n	800340e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f879 	bl	80034fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f88a 	bl	8003522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b01      	cmp	r3, #1
 8003420:	d10e      	bne.n	8003440 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b01      	cmp	r3, #1
 800342e:	d107      	bne.n	8003440 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f06f 0201 	mvn.w	r2, #1
 8003438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7fd fe80 	bl	8001140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344a:	2b80      	cmp	r3, #128	; 0x80
 800344c:	d10e      	bne.n	800346c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003458:	2b80      	cmp	r3, #128	; 0x80
 800345a:	d107      	bne.n	800346c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f8de 	bl	8003628 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800347a:	d10e      	bne.n	800349a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003486:	2b80      	cmp	r3, #128	; 0x80
 8003488:	d107      	bne.n	800349a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f8d1 	bl	800363c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a4:	2b40      	cmp	r3, #64	; 0x40
 80034a6:	d10e      	bne.n	80034c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b2:	2b40      	cmp	r3, #64	; 0x40
 80034b4:	d107      	bne.n	80034c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f838 	bl	8003536 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	f003 0320 	and.w	r3, r3, #32
 80034d0:	2b20      	cmp	r3, #32
 80034d2:	d10e      	bne.n	80034f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b20      	cmp	r3, #32
 80034e0:	d107      	bne.n	80034f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f06f 0220 	mvn.w	r2, #32
 80034ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f891 	bl	8003614 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034f2:	bf00      	nop
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
	...

0800354c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a2a      	ldr	r2, [pc, #168]	; (8003608 <TIM_Base_SetConfig+0xbc>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d003      	beq.n	800356c <TIM_Base_SetConfig+0x20>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800356a:	d108      	bne.n	800357e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003572:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a21      	ldr	r2, [pc, #132]	; (8003608 <TIM_Base_SetConfig+0xbc>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00b      	beq.n	800359e <TIM_Base_SetConfig+0x52>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358c:	d007      	beq.n	800359e <TIM_Base_SetConfig+0x52>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a1e      	ldr	r2, [pc, #120]	; (800360c <TIM_Base_SetConfig+0xc0>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d003      	beq.n	800359e <TIM_Base_SetConfig+0x52>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a1d      	ldr	r2, [pc, #116]	; (8003610 <TIM_Base_SetConfig+0xc4>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d108      	bne.n	80035b0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a0c      	ldr	r2, [pc, #48]	; (8003608 <TIM_Base_SetConfig+0xbc>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d007      	beq.n	80035ec <TIM_Base_SetConfig+0xa0>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a0b      	ldr	r2, [pc, #44]	; (800360c <TIM_Base_SetConfig+0xc0>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d003      	beq.n	80035ec <TIM_Base_SetConfig+0xa0>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a0a      	ldr	r2, [pc, #40]	; (8003610 <TIM_Base_SetConfig+0xc4>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d103      	bne.n	80035f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	691a      	ldr	r2, [r3, #16]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	615a      	str	r2, [r3, #20]
}
 80035fa:	bf00      	nop
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40012c00 	.word	0x40012c00
 800360c:	40014000 	.word	0x40014000
 8003610:	40014400 	.word	0x40014400

08003614 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e040      	b.n	80036e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003666:	2b00      	cmp	r3, #0
 8003668:	d106      	bne.n	8003678 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7fd ff6c 	bl	8001550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2224      	movs	r2, #36	; 0x24
 800367c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0201 	bic.w	r2, r2, #1
 800368c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 fc18 	bl	8003ec4 <UART_SetConfig>
 8003694:	4603      	mov	r3, r0
 8003696:	2b01      	cmp	r3, #1
 8003698:	d101      	bne.n	800369e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e022      	b.n	80036e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d002      	beq.n	80036ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 fe38 	bl	800431c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689a      	ldr	r2, [r3, #8]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0201 	orr.w	r2, r2, #1
 80036da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 febf 	bl	8004460 <UART_CheckIdleState>
 80036e2:	4603      	mov	r3, r0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b08a      	sub	sp, #40	; 0x28
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	603b      	str	r3, [r7, #0]
 80036f8:	4613      	mov	r3, r2
 80036fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003700:	2b20      	cmp	r3, #32
 8003702:	f040 8082 	bne.w	800380a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d002      	beq.n	8003712 <HAL_UART_Transmit+0x26>
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e07a      	b.n	800380c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800371c:	2b01      	cmp	r3, #1
 800371e:	d101      	bne.n	8003724 <HAL_UART_Transmit+0x38>
 8003720:	2302      	movs	r3, #2
 8003722:	e073      	b.n	800380c <HAL_UART_Transmit+0x120>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2221      	movs	r2, #33	; 0x21
 8003738:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800373a:	f7fe f829 	bl	8001790 <HAL_GetTick>
 800373e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	88fa      	ldrh	r2, [r7, #6]
 8003744:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	88fa      	ldrh	r2, [r7, #6]
 800374c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003758:	d108      	bne.n	800376c <HAL_UART_Transmit+0x80>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d104      	bne.n	800376c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003762:	2300      	movs	r3, #0
 8003764:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	61bb      	str	r3, [r7, #24]
 800376a:	e003      	b.n	8003774 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003770:	2300      	movs	r3, #0
 8003772:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800377c:	e02d      	b.n	80037da <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	2200      	movs	r2, #0
 8003786:	2180      	movs	r1, #128	; 0x80
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f000 feb2 	bl	80044f2 <UART_WaitOnFlagUntilTimeout>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e039      	b.n	800380c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10b      	bne.n	80037b6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	881a      	ldrh	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037aa:	b292      	uxth	r2, r2
 80037ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	3302      	adds	r3, #2
 80037b2:	61bb      	str	r3, [r7, #24]
 80037b4:	e008      	b.n	80037c8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	781a      	ldrb	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	b292      	uxth	r2, r2
 80037c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	3301      	adds	r3, #1
 80037c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	3b01      	subs	r3, #1
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1cb      	bne.n	800377e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	2200      	movs	r2, #0
 80037ee:	2140      	movs	r1, #64	; 0x40
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 fe7e 	bl	80044f2 <UART_WaitOnFlagUntilTimeout>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e005      	b.n	800380c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2220      	movs	r2, #32
 8003804:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003806:	2300      	movs	r3, #0
 8003808:	e000      	b.n	800380c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800380a:	2302      	movs	r3, #2
  }
}
 800380c:	4618      	mov	r0, r3
 800380e:	3720      	adds	r7, #32
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b08a      	sub	sp, #40	; 0x28
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	4613      	mov	r3, r2
 8003820:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003826:	2b20      	cmp	r3, #32
 8003828:	d142      	bne.n	80038b0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d002      	beq.n	8003836 <HAL_UART_Receive_IT+0x22>
 8003830:	88fb      	ldrh	r3, [r7, #6]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e03b      	b.n	80038b2 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003840:	2b01      	cmp	r3, #1
 8003842:	d101      	bne.n	8003848 <HAL_UART_Receive_IT+0x34>
 8003844:	2302      	movs	r3, #2
 8003846:	e034      	b.n	80038b2 <HAL_UART_Receive_IT+0x9e>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a18      	ldr	r2, [pc, #96]	; (80038bc <HAL_UART_Receive_IT+0xa8>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d01f      	beq.n	80038a0 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d018      	beq.n	80038a0 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	e853 3f00 	ldrex	r3, [r3]
 800387a:	613b      	str	r3, [r7, #16]
   return(result);
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003882:	627b      	str	r3, [r7, #36]	; 0x24
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	461a      	mov	r2, r3
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	623b      	str	r3, [r7, #32]
 800388e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003890:	69f9      	ldr	r1, [r7, #28]
 8003892:	6a3a      	ldr	r2, [r7, #32]
 8003894:	e841 2300 	strex	r3, r2, [r1]
 8003898:	61bb      	str	r3, [r7, #24]
   return(result);
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1e6      	bne.n	800386e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80038a0:	88fb      	ldrh	r3, [r7, #6]
 80038a2:	461a      	mov	r2, r3
 80038a4:	68b9      	ldr	r1, [r7, #8]
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 fee8 	bl	800467c <UART_Start_Receive_IT>
 80038ac:	4603      	mov	r3, r0
 80038ae:	e000      	b.n	80038b2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80038b0:	2302      	movs	r3, #2
  }
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3728      	adds	r7, #40	; 0x28
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	40008000 	.word	0x40008000

080038c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b0ba      	sub	sp, #232	; 0xe8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80038e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80038ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80038ee:	4013      	ands	r3, r2
 80038f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80038f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d115      	bne.n	8003928 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80038fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003900:	f003 0320 	and.w	r3, r3, #32
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00f      	beq.n	8003928 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800390c:	f003 0320 	and.w	r3, r3, #32
 8003910:	2b00      	cmp	r3, #0
 8003912:	d009      	beq.n	8003928 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 82a6 	beq.w	8003e6a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	4798      	blx	r3
      }
      return;
 8003926:	e2a0      	b.n	8003e6a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003928:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 8117 	beq.w	8003b60 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d106      	bne.n	800394c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800393e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003942:	4b85      	ldr	r3, [pc, #532]	; (8003b58 <HAL_UART_IRQHandler+0x298>)
 8003944:	4013      	ands	r3, r2
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 810a 	beq.w	8003b60 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800394c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b00      	cmp	r3, #0
 8003956:	d011      	beq.n	800397c <HAL_UART_IRQHandler+0xbc>
 8003958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800395c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00b      	beq.n	800397c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2201      	movs	r2, #1
 800396a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003972:	f043 0201 	orr.w	r2, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800397c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d011      	beq.n	80039ac <HAL_UART_IRQHandler+0xec>
 8003988:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00b      	beq.n	80039ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2202      	movs	r2, #2
 800399a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039a2:	f043 0204 	orr.w	r2, r3, #4
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d011      	beq.n	80039dc <HAL_UART_IRQHandler+0x11c>
 80039b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00b      	beq.n	80039dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2204      	movs	r2, #4
 80039ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039d2:	f043 0202 	orr.w	r2, r3, #2
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80039dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039e0:	f003 0308 	and.w	r3, r3, #8
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d017      	beq.n	8003a18 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039ec:	f003 0320 	and.w	r3, r3, #32
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d105      	bne.n	8003a00 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80039f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00b      	beq.n	8003a18 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2208      	movs	r2, #8
 8003a06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a0e:	f043 0208 	orr.w	r2, r3, #8
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d012      	beq.n	8003a4a <HAL_UART_IRQHandler+0x18a>
 8003a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00c      	beq.n	8003a4a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a40:	f043 0220 	orr.w	r2, r3, #32
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 820c 	beq.w	8003e6e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a5a:	f003 0320 	and.w	r3, r3, #32
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00d      	beq.n	8003a7e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a66:	f003 0320 	and.w	r3, r3, #32
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d007      	beq.n	8003a7e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a92:	2b40      	cmp	r3, #64	; 0x40
 8003a94:	d005      	beq.n	8003aa2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d04f      	beq.n	8003b42 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 feb4 	bl	8004810 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab2:	2b40      	cmp	r3, #64	; 0x40
 8003ab4:	d141      	bne.n	8003b3a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	3308      	adds	r3, #8
 8003abc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ac4:	e853 3f00 	ldrex	r3, [r3]
 8003ac8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003acc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ad4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3308      	adds	r3, #8
 8003ade:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ae2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ae6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003aee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003af2:	e841 2300 	strex	r3, r2, [r1]
 8003af6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003afa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1d9      	bne.n	8003ab6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d013      	beq.n	8003b32 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0e:	4a13      	ldr	r2, [pc, #76]	; (8003b5c <HAL_UART_IRQHandler+0x29c>)
 8003b10:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fd ff66 	bl	80019e8 <HAL_DMA_Abort_IT>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d017      	beq.n	8003b52 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003b2c:	4610      	mov	r0, r2
 8003b2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b30:	e00f      	b.n	8003b52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f9b0 	bl	8003e98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b38:	e00b      	b.n	8003b52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f9ac 	bl	8003e98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b40:	e007      	b.n	8003b52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f9a8 	bl	8003e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003b50:	e18d      	b.n	8003e6e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b52:	bf00      	nop
    return;
 8003b54:	e18b      	b.n	8003e6e <HAL_UART_IRQHandler+0x5ae>
 8003b56:	bf00      	nop
 8003b58:	04000120 	.word	0x04000120
 8003b5c:	080048d7 	.word	0x080048d7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	f040 8146 	bne.w	8003df6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b6e:	f003 0310 	and.w	r3, r3, #16
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 813f 	beq.w	8003df6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b7c:	f003 0310 	and.w	r3, r3, #16
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 8138 	beq.w	8003df6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2210      	movs	r2, #16
 8003b8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b98:	2b40      	cmp	r3, #64	; 0x40
 8003b9a:	f040 80b4 	bne.w	8003d06 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003baa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 815f 	beq.w	8003e72 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003bba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	f080 8157 	bcs.w	8003e72 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0320 	and.w	r3, r3, #32
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f040 8085 	bne.w	8003cea <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bec:	e853 3f00 	ldrex	r3, [r3]
 8003bf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003bf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	461a      	mov	r2, r3
 8003c06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003c0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c0e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c12:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c1a:	e841 2300 	strex	r3, r2, [r1]
 8003c1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1da      	bne.n	8003be0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3308      	adds	r3, #8
 8003c30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c34:	e853 3f00 	ldrex	r3, [r3]
 8003c38:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c3c:	f023 0301 	bic.w	r3, r3, #1
 8003c40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3308      	adds	r3, #8
 8003c4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c4e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c52:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c54:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c5a:	e841 2300 	strex	r3, r2, [r1]
 8003c5e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1e1      	bne.n	8003c2a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	3308      	adds	r3, #8
 8003c6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c70:	e853 3f00 	ldrex	r3, [r3]
 8003c74:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	3308      	adds	r3, #8
 8003c86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c92:	e841 2300 	strex	r3, r2, [r1]
 8003c96:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1e3      	bne.n	8003c66 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cb2:	e853 3f00 	ldrex	r3, [r3]
 8003cb6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cba:	f023 0310 	bic.w	r3, r3, #16
 8003cbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ccc:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cce:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003cd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cd4:	e841 2300 	strex	r3, r2, [r1]
 8003cd8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1e4      	bne.n	8003caa <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7fd fe41 	bl	800196c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f8d4 	bl	8003eac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d04:	e0b5      	b.n	8003e72 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 80a7 	beq.w	8003e76 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003d28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 80a2 	beq.w	8003e76 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3a:	e853 3f00 	ldrex	r3, [r3]
 8003d3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003d54:	647b      	str	r3, [r7, #68]	; 0x44
 8003d56:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d5c:	e841 2300 	strex	r3, r2, [r1]
 8003d60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1e4      	bne.n	8003d32 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3308      	adds	r3, #8
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	e853 3f00 	ldrex	r3, [r3]
 8003d76:	623b      	str	r3, [r7, #32]
   return(result);
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	f023 0301 	bic.w	r3, r3, #1
 8003d7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	3308      	adds	r3, #8
 8003d88:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d8c:	633a      	str	r2, [r7, #48]	; 0x30
 8003d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d94:	e841 2300 	strex	r3, r2, [r1]
 8003d98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1e3      	bne.n	8003d68 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2220      	movs	r2, #32
 8003da4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	e853 3f00 	ldrex	r3, [r3]
 8003dbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f023 0310 	bic.w	r3, r3, #16
 8003dc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003dd4:	61fb      	str	r3, [r7, #28]
 8003dd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd8:	69b9      	ldr	r1, [r7, #24]
 8003dda:	69fa      	ldr	r2, [r7, #28]
 8003ddc:	e841 2300 	strex	r3, r2, [r1]
 8003de0:	617b      	str	r3, [r7, #20]
   return(result);
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1e4      	bne.n	8003db2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003de8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003dec:	4619      	mov	r1, r3
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f85c 	bl	8003eac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003df4:	e03f      	b.n	8003e76 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00e      	beq.n	8003e20 <HAL_UART_IRQHandler+0x560>
 8003e02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d008      	beq.n	8003e20 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003e16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 fefc 	bl	8004c16 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e1e:	e02d      	b.n	8003e7c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00e      	beq.n	8003e4a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d008      	beq.n	8003e4a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d01c      	beq.n	8003e7a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	4798      	blx	r3
    }
    return;
 8003e48:	e017      	b.n	8003e7a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d012      	beq.n	8003e7c <HAL_UART_IRQHandler+0x5bc>
 8003e56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00c      	beq.n	8003e7c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fd4d 	bl	8004902 <UART_EndTransmit_IT>
    return;
 8003e68:	e008      	b.n	8003e7c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003e6a:	bf00      	nop
 8003e6c:	e006      	b.n	8003e7c <HAL_UART_IRQHandler+0x5bc>
    return;
 8003e6e:	bf00      	nop
 8003e70:	e004      	b.n	8003e7c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003e72:	bf00      	nop
 8003e74:	e002      	b.n	8003e7c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003e76:	bf00      	nop
 8003e78:	e000      	b.n	8003e7c <HAL_UART_IRQHandler+0x5bc>
    return;
 8003e7a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003e7c:	37e8      	adds	r7, #232	; 0xe8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop

08003e84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ec8:	b08a      	sub	sp, #40	; 0x28
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	431a      	orrs	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	4bb4      	ldr	r3, [pc, #720]	; (80041c4 <UART_SetConfig+0x300>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	6812      	ldr	r2, [r2, #0]
 8003efa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003efc:	430b      	orrs	r3, r1
 8003efe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	68da      	ldr	r2, [r3, #12]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4aa9      	ldr	r2, [pc, #676]	; (80041c8 <UART_SetConfig+0x304>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d004      	beq.n	8003f30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f40:	430a      	orrs	r2, r1
 8003f42:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4aa0      	ldr	r2, [pc, #640]	; (80041cc <UART_SetConfig+0x308>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d126      	bne.n	8003f9c <UART_SetConfig+0xd8>
 8003f4e:	4ba0      	ldr	r3, [pc, #640]	; (80041d0 <UART_SetConfig+0x30c>)
 8003f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f54:	f003 0303 	and.w	r3, r3, #3
 8003f58:	2b03      	cmp	r3, #3
 8003f5a:	d81b      	bhi.n	8003f94 <UART_SetConfig+0xd0>
 8003f5c:	a201      	add	r2, pc, #4	; (adr r2, 8003f64 <UART_SetConfig+0xa0>)
 8003f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f62:	bf00      	nop
 8003f64:	08003f75 	.word	0x08003f75
 8003f68:	08003f85 	.word	0x08003f85
 8003f6c:	08003f7d 	.word	0x08003f7d
 8003f70:	08003f8d 	.word	0x08003f8d
 8003f74:	2301      	movs	r3, #1
 8003f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f7a:	e080      	b.n	800407e <UART_SetConfig+0x1ba>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f82:	e07c      	b.n	800407e <UART_SetConfig+0x1ba>
 8003f84:	2304      	movs	r3, #4
 8003f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f8a:	e078      	b.n	800407e <UART_SetConfig+0x1ba>
 8003f8c:	2308      	movs	r3, #8
 8003f8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f92:	e074      	b.n	800407e <UART_SetConfig+0x1ba>
 8003f94:	2310      	movs	r3, #16
 8003f96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f9a:	e070      	b.n	800407e <UART_SetConfig+0x1ba>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a8c      	ldr	r2, [pc, #560]	; (80041d4 <UART_SetConfig+0x310>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d138      	bne.n	8004018 <UART_SetConfig+0x154>
 8003fa6:	4b8a      	ldr	r3, [pc, #552]	; (80041d0 <UART_SetConfig+0x30c>)
 8003fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fac:	f003 030c 	and.w	r3, r3, #12
 8003fb0:	2b0c      	cmp	r3, #12
 8003fb2:	d82d      	bhi.n	8004010 <UART_SetConfig+0x14c>
 8003fb4:	a201      	add	r2, pc, #4	; (adr r2, 8003fbc <UART_SetConfig+0xf8>)
 8003fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fba:	bf00      	nop
 8003fbc:	08003ff1 	.word	0x08003ff1
 8003fc0:	08004011 	.word	0x08004011
 8003fc4:	08004011 	.word	0x08004011
 8003fc8:	08004011 	.word	0x08004011
 8003fcc:	08004001 	.word	0x08004001
 8003fd0:	08004011 	.word	0x08004011
 8003fd4:	08004011 	.word	0x08004011
 8003fd8:	08004011 	.word	0x08004011
 8003fdc:	08003ff9 	.word	0x08003ff9
 8003fe0:	08004011 	.word	0x08004011
 8003fe4:	08004011 	.word	0x08004011
 8003fe8:	08004011 	.word	0x08004011
 8003fec:	08004009 	.word	0x08004009
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ff6:	e042      	b.n	800407e <UART_SetConfig+0x1ba>
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ffe:	e03e      	b.n	800407e <UART_SetConfig+0x1ba>
 8004000:	2304      	movs	r3, #4
 8004002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004006:	e03a      	b.n	800407e <UART_SetConfig+0x1ba>
 8004008:	2308      	movs	r3, #8
 800400a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800400e:	e036      	b.n	800407e <UART_SetConfig+0x1ba>
 8004010:	2310      	movs	r3, #16
 8004012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004016:	e032      	b.n	800407e <UART_SetConfig+0x1ba>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a6a      	ldr	r2, [pc, #424]	; (80041c8 <UART_SetConfig+0x304>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d12a      	bne.n	8004078 <UART_SetConfig+0x1b4>
 8004022:	4b6b      	ldr	r3, [pc, #428]	; (80041d0 <UART_SetConfig+0x30c>)
 8004024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004028:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800402c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004030:	d01a      	beq.n	8004068 <UART_SetConfig+0x1a4>
 8004032:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004036:	d81b      	bhi.n	8004070 <UART_SetConfig+0x1ac>
 8004038:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800403c:	d00c      	beq.n	8004058 <UART_SetConfig+0x194>
 800403e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004042:	d815      	bhi.n	8004070 <UART_SetConfig+0x1ac>
 8004044:	2b00      	cmp	r3, #0
 8004046:	d003      	beq.n	8004050 <UART_SetConfig+0x18c>
 8004048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800404c:	d008      	beq.n	8004060 <UART_SetConfig+0x19c>
 800404e:	e00f      	b.n	8004070 <UART_SetConfig+0x1ac>
 8004050:	2300      	movs	r3, #0
 8004052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004056:	e012      	b.n	800407e <UART_SetConfig+0x1ba>
 8004058:	2302      	movs	r3, #2
 800405a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800405e:	e00e      	b.n	800407e <UART_SetConfig+0x1ba>
 8004060:	2304      	movs	r3, #4
 8004062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004066:	e00a      	b.n	800407e <UART_SetConfig+0x1ba>
 8004068:	2308      	movs	r3, #8
 800406a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800406e:	e006      	b.n	800407e <UART_SetConfig+0x1ba>
 8004070:	2310      	movs	r3, #16
 8004072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004076:	e002      	b.n	800407e <UART_SetConfig+0x1ba>
 8004078:	2310      	movs	r3, #16
 800407a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a51      	ldr	r2, [pc, #324]	; (80041c8 <UART_SetConfig+0x304>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d17a      	bne.n	800417e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004088:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800408c:	2b08      	cmp	r3, #8
 800408e:	d824      	bhi.n	80040da <UART_SetConfig+0x216>
 8004090:	a201      	add	r2, pc, #4	; (adr r2, 8004098 <UART_SetConfig+0x1d4>)
 8004092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004096:	bf00      	nop
 8004098:	080040bd 	.word	0x080040bd
 800409c:	080040db 	.word	0x080040db
 80040a0:	080040c5 	.word	0x080040c5
 80040a4:	080040db 	.word	0x080040db
 80040a8:	080040cb 	.word	0x080040cb
 80040ac:	080040db 	.word	0x080040db
 80040b0:	080040db 	.word	0x080040db
 80040b4:	080040db 	.word	0x080040db
 80040b8:	080040d3 	.word	0x080040d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040bc:	f7fe fc92 	bl	80029e4 <HAL_RCC_GetPCLK1Freq>
 80040c0:	61f8      	str	r0, [r7, #28]
        break;
 80040c2:	e010      	b.n	80040e6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040c4:	4b44      	ldr	r3, [pc, #272]	; (80041d8 <UART_SetConfig+0x314>)
 80040c6:	61fb      	str	r3, [r7, #28]
        break;
 80040c8:	e00d      	b.n	80040e6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ca:	f7fe fbf3 	bl	80028b4 <HAL_RCC_GetSysClockFreq>
 80040ce:	61f8      	str	r0, [r7, #28]
        break;
 80040d0:	e009      	b.n	80040e6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040d6:	61fb      	str	r3, [r7, #28]
        break;
 80040d8:	e005      	b.n	80040e6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80040da:	2300      	movs	r3, #0
 80040dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80040e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 8107 	beq.w	80042fc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	4613      	mov	r3, r2
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	4413      	add	r3, r2
 80040f8:	69fa      	ldr	r2, [r7, #28]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d305      	bcc.n	800410a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004104:	69fa      	ldr	r2, [r7, #28]
 8004106:	429a      	cmp	r2, r3
 8004108:	d903      	bls.n	8004112 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004110:	e0f4      	b.n	80042fc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	2200      	movs	r2, #0
 8004116:	461c      	mov	r4, r3
 8004118:	4615      	mov	r5, r2
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	f04f 0300 	mov.w	r3, #0
 8004122:	022b      	lsls	r3, r5, #8
 8004124:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004128:	0222      	lsls	r2, r4, #8
 800412a:	68f9      	ldr	r1, [r7, #12]
 800412c:	6849      	ldr	r1, [r1, #4]
 800412e:	0849      	lsrs	r1, r1, #1
 8004130:	2000      	movs	r0, #0
 8004132:	4688      	mov	r8, r1
 8004134:	4681      	mov	r9, r0
 8004136:	eb12 0a08 	adds.w	sl, r2, r8
 800413a:	eb43 0b09 	adc.w	fp, r3, r9
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	603b      	str	r3, [r7, #0]
 8004146:	607a      	str	r2, [r7, #4]
 8004148:	e9d7 2300 	ldrd	r2, r3, [r7]
 800414c:	4650      	mov	r0, sl
 800414e:	4659      	mov	r1, fp
 8004150:	f7fc fd2a 	bl	8000ba8 <__aeabi_uldivmod>
 8004154:	4602      	mov	r2, r0
 8004156:	460b      	mov	r3, r1
 8004158:	4613      	mov	r3, r2
 800415a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004162:	d308      	bcc.n	8004176 <UART_SetConfig+0x2b2>
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800416a:	d204      	bcs.n	8004176 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	60da      	str	r2, [r3, #12]
 8004174:	e0c2      	b.n	80042fc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800417c:	e0be      	b.n	80042fc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004186:	d16a      	bne.n	800425e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004188:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800418c:	2b08      	cmp	r3, #8
 800418e:	d834      	bhi.n	80041fa <UART_SetConfig+0x336>
 8004190:	a201      	add	r2, pc, #4	; (adr r2, 8004198 <UART_SetConfig+0x2d4>)
 8004192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004196:	bf00      	nop
 8004198:	080041bd 	.word	0x080041bd
 800419c:	080041dd 	.word	0x080041dd
 80041a0:	080041e5 	.word	0x080041e5
 80041a4:	080041fb 	.word	0x080041fb
 80041a8:	080041eb 	.word	0x080041eb
 80041ac:	080041fb 	.word	0x080041fb
 80041b0:	080041fb 	.word	0x080041fb
 80041b4:	080041fb 	.word	0x080041fb
 80041b8:	080041f3 	.word	0x080041f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041bc:	f7fe fc12 	bl	80029e4 <HAL_RCC_GetPCLK1Freq>
 80041c0:	61f8      	str	r0, [r7, #28]
        break;
 80041c2:	e020      	b.n	8004206 <UART_SetConfig+0x342>
 80041c4:	efff69f3 	.word	0xefff69f3
 80041c8:	40008000 	.word	0x40008000
 80041cc:	40013800 	.word	0x40013800
 80041d0:	40021000 	.word	0x40021000
 80041d4:	40004400 	.word	0x40004400
 80041d8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041dc:	f7fe fc18 	bl	8002a10 <HAL_RCC_GetPCLK2Freq>
 80041e0:	61f8      	str	r0, [r7, #28]
        break;
 80041e2:	e010      	b.n	8004206 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041e4:	4b4c      	ldr	r3, [pc, #304]	; (8004318 <UART_SetConfig+0x454>)
 80041e6:	61fb      	str	r3, [r7, #28]
        break;
 80041e8:	e00d      	b.n	8004206 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041ea:	f7fe fb63 	bl	80028b4 <HAL_RCC_GetSysClockFreq>
 80041ee:	61f8      	str	r0, [r7, #28]
        break;
 80041f0:	e009      	b.n	8004206 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041f6:	61fb      	str	r3, [r7, #28]
        break;
 80041f8:	e005      	b.n	8004206 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004204:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d077      	beq.n	80042fc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	005a      	lsls	r2, r3, #1
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	085b      	lsrs	r3, r3, #1
 8004216:	441a      	add	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004220:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	2b0f      	cmp	r3, #15
 8004226:	d916      	bls.n	8004256 <UART_SetConfig+0x392>
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800422e:	d212      	bcs.n	8004256 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	b29b      	uxth	r3, r3
 8004234:	f023 030f 	bic.w	r3, r3, #15
 8004238:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	085b      	lsrs	r3, r3, #1
 800423e:	b29b      	uxth	r3, r3
 8004240:	f003 0307 	and.w	r3, r3, #7
 8004244:	b29a      	uxth	r2, r3
 8004246:	8afb      	ldrh	r3, [r7, #22]
 8004248:	4313      	orrs	r3, r2
 800424a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	8afa      	ldrh	r2, [r7, #22]
 8004252:	60da      	str	r2, [r3, #12]
 8004254:	e052      	b.n	80042fc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800425c:	e04e      	b.n	80042fc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800425e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004262:	2b08      	cmp	r3, #8
 8004264:	d827      	bhi.n	80042b6 <UART_SetConfig+0x3f2>
 8004266:	a201      	add	r2, pc, #4	; (adr r2, 800426c <UART_SetConfig+0x3a8>)
 8004268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426c:	08004291 	.word	0x08004291
 8004270:	08004299 	.word	0x08004299
 8004274:	080042a1 	.word	0x080042a1
 8004278:	080042b7 	.word	0x080042b7
 800427c:	080042a7 	.word	0x080042a7
 8004280:	080042b7 	.word	0x080042b7
 8004284:	080042b7 	.word	0x080042b7
 8004288:	080042b7 	.word	0x080042b7
 800428c:	080042af 	.word	0x080042af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004290:	f7fe fba8 	bl	80029e4 <HAL_RCC_GetPCLK1Freq>
 8004294:	61f8      	str	r0, [r7, #28]
        break;
 8004296:	e014      	b.n	80042c2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004298:	f7fe fbba 	bl	8002a10 <HAL_RCC_GetPCLK2Freq>
 800429c:	61f8      	str	r0, [r7, #28]
        break;
 800429e:	e010      	b.n	80042c2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042a0:	4b1d      	ldr	r3, [pc, #116]	; (8004318 <UART_SetConfig+0x454>)
 80042a2:	61fb      	str	r3, [r7, #28]
        break;
 80042a4:	e00d      	b.n	80042c2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042a6:	f7fe fb05 	bl	80028b4 <HAL_RCC_GetSysClockFreq>
 80042aa:	61f8      	str	r0, [r7, #28]
        break;
 80042ac:	e009      	b.n	80042c2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042b2:	61fb      	str	r3, [r7, #28]
        break;
 80042b4:	e005      	b.n	80042c2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80042b6:	2300      	movs	r3, #0
 80042b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80042c0:	bf00      	nop
    }

    if (pclk != 0U)
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d019      	beq.n	80042fc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	085a      	lsrs	r2, r3, #1
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	441a      	add	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042da:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	2b0f      	cmp	r3, #15
 80042e0:	d909      	bls.n	80042f6 <UART_SetConfig+0x432>
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e8:	d205      	bcs.n	80042f6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	60da      	str	r2, [r3, #12]
 80042f4:	e002      	b.n	80042fc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004308:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800430c:	4618      	mov	r0, r3
 800430e:	3728      	adds	r7, #40	; 0x28
 8004310:	46bd      	mov	sp, r7
 8004312:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004316:	bf00      	nop
 8004318:	00f42400 	.word	0x00f42400

0800431c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00a      	beq.n	8004346 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00a      	beq.n	8004368 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	430a      	orrs	r2, r1
 8004366:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00a      	beq.n	800438a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00a      	beq.n	80043ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	430a      	orrs	r2, r1
 80043aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	f003 0310 	and.w	r3, r3, #16
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00a      	beq.n	80043ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	f003 0320 	and.w	r3, r3, #32
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00a      	beq.n	80043f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d01a      	beq.n	8004432 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	430a      	orrs	r2, r1
 8004410:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800441a:	d10a      	bne.n	8004432 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00a      	beq.n	8004454 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	605a      	str	r2, [r3, #4]
  }
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af02      	add	r7, sp, #8
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004470:	f7fd f98e 	bl	8001790 <HAL_GetTick>
 8004474:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0308 	and.w	r3, r3, #8
 8004480:	2b08      	cmp	r3, #8
 8004482:	d10e      	bne.n	80044a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004484:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f82d 	bl	80044f2 <UART_WaitOnFlagUntilTimeout>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e023      	b.n	80044ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b04      	cmp	r3, #4
 80044ae:	d10e      	bne.n	80044ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f817 	bl	80044f2 <UART_WaitOnFlagUntilTimeout>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e00d      	b.n	80044ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2220      	movs	r2, #32
 80044d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2220      	movs	r2, #32
 80044d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b09c      	sub	sp, #112	; 0x70
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	60f8      	str	r0, [r7, #12]
 80044fa:	60b9      	str	r1, [r7, #8]
 80044fc:	603b      	str	r3, [r7, #0]
 80044fe:	4613      	mov	r3, r2
 8004500:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004502:	e0a5      	b.n	8004650 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004504:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450a:	f000 80a1 	beq.w	8004650 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800450e:	f7fd f93f 	bl	8001790 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800451a:	429a      	cmp	r2, r3
 800451c:	d302      	bcc.n	8004524 <UART_WaitOnFlagUntilTimeout+0x32>
 800451e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004520:	2b00      	cmp	r3, #0
 8004522:	d13e      	bne.n	80045a2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800452c:	e853 3f00 	ldrex	r3, [r3]
 8004530:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004534:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004538:	667b      	str	r3, [r7, #100]	; 0x64
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	461a      	mov	r2, r3
 8004540:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004542:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004544:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004546:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004548:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800454a:	e841 2300 	strex	r3, r2, [r1]
 800454e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1e6      	bne.n	8004524 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	3308      	adds	r3, #8
 800455c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004560:	e853 3f00 	ldrex	r3, [r3]
 8004564:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004568:	f023 0301 	bic.w	r3, r3, #1
 800456c:	663b      	str	r3, [r7, #96]	; 0x60
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	3308      	adds	r3, #8
 8004574:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004576:	64ba      	str	r2, [r7, #72]	; 0x48
 8004578:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800457c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800457e:	e841 2300 	strex	r3, r2, [r1]
 8004582:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1e5      	bne.n	8004556 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2220      	movs	r2, #32
 800458e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2220      	movs	r2, #32
 8004594:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e067      	b.n	8004672 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d04f      	beq.n	8004650 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045be:	d147      	bne.n	8004650 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045c8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d2:	e853 3f00 	ldrex	r3, [r3]
 80045d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	461a      	mov	r2, r3
 80045e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045e8:	637b      	str	r3, [r7, #52]	; 0x34
 80045ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045f0:	e841 2300 	strex	r3, r2, [r1]
 80045f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80045f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e6      	bne.n	80045ca <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	3308      	adds	r3, #8
 8004602:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	e853 3f00 	ldrex	r3, [r3]
 800460a:	613b      	str	r3, [r7, #16]
   return(result);
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f023 0301 	bic.w	r3, r3, #1
 8004612:	66bb      	str	r3, [r7, #104]	; 0x68
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	3308      	adds	r3, #8
 800461a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800461c:	623a      	str	r2, [r7, #32]
 800461e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004620:	69f9      	ldr	r1, [r7, #28]
 8004622:	6a3a      	ldr	r2, [r7, #32]
 8004624:	e841 2300 	strex	r3, r2, [r1]
 8004628:	61bb      	str	r3, [r7, #24]
   return(result);
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1e5      	bne.n	80045fc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2220      	movs	r2, #32
 8004634:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2220      	movs	r2, #32
 800463a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2220      	movs	r2, #32
 8004640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e010      	b.n	8004672 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	69da      	ldr	r2, [r3, #28]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	4013      	ands	r3, r2
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	429a      	cmp	r2, r3
 800465e:	bf0c      	ite	eq
 8004660:	2301      	moveq	r3, #1
 8004662:	2300      	movne	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	461a      	mov	r2, r3
 8004668:	79fb      	ldrb	r3, [r7, #7]
 800466a:	429a      	cmp	r2, r3
 800466c:	f43f af4a 	beq.w	8004504 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3770      	adds	r7, #112	; 0x70
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
	...

0800467c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800467c:	b480      	push	{r7}
 800467e:	b097      	sub	sp, #92	; 0x5c
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	4613      	mov	r3, r2
 8004688:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	88fa      	ldrh	r2, [r7, #6]
 8004694:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	88fa      	ldrh	r2, [r7, #6]
 800469c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ae:	d10e      	bne.n	80046ce <UART_Start_Receive_IT+0x52>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d105      	bne.n	80046c4 <UART_Start_Receive_IT+0x48>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f240 12ff 	movw	r2, #511	; 0x1ff
 80046be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046c2:	e02d      	b.n	8004720 <UART_Start_Receive_IT+0xa4>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	22ff      	movs	r2, #255	; 0xff
 80046c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046cc:	e028      	b.n	8004720 <UART_Start_Receive_IT+0xa4>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10d      	bne.n	80046f2 <UART_Start_Receive_IT+0x76>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d104      	bne.n	80046e8 <UART_Start_Receive_IT+0x6c>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	22ff      	movs	r2, #255	; 0xff
 80046e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046e6:	e01b      	b.n	8004720 <UART_Start_Receive_IT+0xa4>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	227f      	movs	r2, #127	; 0x7f
 80046ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046f0:	e016      	b.n	8004720 <UART_Start_Receive_IT+0xa4>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046fa:	d10d      	bne.n	8004718 <UART_Start_Receive_IT+0x9c>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d104      	bne.n	800470e <UART_Start_Receive_IT+0x92>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	227f      	movs	r2, #127	; 0x7f
 8004708:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800470c:	e008      	b.n	8004720 <UART_Start_Receive_IT+0xa4>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	223f      	movs	r2, #63	; 0x3f
 8004712:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004716:	e003      	b.n	8004720 <UART_Start_Receive_IT+0xa4>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2222      	movs	r2, #34	; 0x22
 800472c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3308      	adds	r3, #8
 8004734:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004738:	e853 3f00 	ldrex	r3, [r3]
 800473c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800473e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004740:	f043 0301 	orr.w	r3, r3, #1
 8004744:	657b      	str	r3, [r7, #84]	; 0x54
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	3308      	adds	r3, #8
 800474c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800474e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004750:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004752:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004754:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004756:	e841 2300 	strex	r3, r2, [r1]
 800475a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800475c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1e5      	bne.n	800472e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800476a:	d107      	bne.n	800477c <UART_Start_Receive_IT+0x100>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d103      	bne.n	800477c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4a24      	ldr	r2, [pc, #144]	; (8004808 <UART_Start_Receive_IT+0x18c>)
 8004778:	665a      	str	r2, [r3, #100]	; 0x64
 800477a:	e002      	b.n	8004782 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4a23      	ldr	r2, [pc, #140]	; (800480c <UART_Start_Receive_IT+0x190>)
 8004780:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d019      	beq.n	80047c6 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479a:	e853 3f00 	ldrex	r3, [r3]
 800479e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80047a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	461a      	mov	r2, r3
 80047ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047b0:	637b      	str	r3, [r7, #52]	; 0x34
 80047b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047b8:	e841 2300 	strex	r3, r2, [r1]
 80047bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1e6      	bne.n	8004792 <UART_Start_Receive_IT+0x116>
 80047c4:	e018      	b.n	80047f8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	e853 3f00 	ldrex	r3, [r3]
 80047d2:	613b      	str	r3, [r7, #16]
   return(result);
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	f043 0320 	orr.w	r3, r3, #32
 80047da:	653b      	str	r3, [r7, #80]	; 0x50
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	461a      	mov	r2, r3
 80047e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047e4:	623b      	str	r3, [r7, #32]
 80047e6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e8:	69f9      	ldr	r1, [r7, #28]
 80047ea:	6a3a      	ldr	r2, [r7, #32]
 80047ec:	e841 2300 	strex	r3, r2, [r1]
 80047f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1e6      	bne.n	80047c6 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	375c      	adds	r7, #92	; 0x5c
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	08004ab7 	.word	0x08004ab7
 800480c:	08004957 	.word	0x08004957

08004810 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004810:	b480      	push	{r7}
 8004812:	b095      	sub	sp, #84	; 0x54
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004820:	e853 3f00 	ldrex	r3, [r3]
 8004824:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004828:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800482c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	461a      	mov	r2, r3
 8004834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004836:	643b      	str	r3, [r7, #64]	; 0x40
 8004838:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800483c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800483e:	e841 2300 	strex	r3, r2, [r1]
 8004842:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1e6      	bne.n	8004818 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	3308      	adds	r3, #8
 8004850:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	e853 3f00 	ldrex	r3, [r3]
 8004858:	61fb      	str	r3, [r7, #28]
   return(result);
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	f023 0301 	bic.w	r3, r3, #1
 8004860:	64bb      	str	r3, [r7, #72]	; 0x48
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	3308      	adds	r3, #8
 8004868:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800486a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800486c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004872:	e841 2300 	strex	r3, r2, [r1]
 8004876:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1e5      	bne.n	800484a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004882:	2b01      	cmp	r3, #1
 8004884:	d118      	bne.n	80048b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	e853 3f00 	ldrex	r3, [r3]
 8004892:	60bb      	str	r3, [r7, #8]
   return(result);
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f023 0310 	bic.w	r3, r3, #16
 800489a:	647b      	str	r3, [r7, #68]	; 0x44
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	461a      	mov	r2, r3
 80048a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048a4:	61bb      	str	r3, [r7, #24]
 80048a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a8:	6979      	ldr	r1, [r7, #20]
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	e841 2300 	strex	r3, r2, [r1]
 80048b0:	613b      	str	r3, [r7, #16]
   return(result);
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1e6      	bne.n	8004886 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2220      	movs	r2, #32
 80048bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80048ca:	bf00      	nop
 80048cc:	3754      	adds	r7, #84	; 0x54
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b084      	sub	sp, #16
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f7ff facf 	bl	8003e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048fa:	bf00      	nop
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b088      	sub	sp, #32
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	e853 3f00 	ldrex	r3, [r3]
 8004916:	60bb      	str	r3, [r7, #8]
   return(result);
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800491e:	61fb      	str	r3, [r7, #28]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	461a      	mov	r2, r3
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	61bb      	str	r3, [r7, #24]
 800492a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492c:	6979      	ldr	r1, [r7, #20]
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	e841 2300 	strex	r3, r2, [r1]
 8004934:	613b      	str	r3, [r7, #16]
   return(result);
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1e6      	bne.n	800490a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2220      	movs	r2, #32
 8004940:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7ff fa9b 	bl	8003e84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800494e:	bf00      	nop
 8004950:	3720      	adds	r7, #32
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b096      	sub	sp, #88	; 0x58
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004964:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800496c:	2b22      	cmp	r3, #34	; 0x22
 800496e:	f040 8094 	bne.w	8004a9a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004978:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800497c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004980:	b2d9      	uxtb	r1, r3
 8004982:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004986:	b2da      	uxtb	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498c:	400a      	ands	r2, r1
 800498e:	b2d2      	uxtb	r2, r2
 8004990:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004996:	1c5a      	adds	r2, r3, #1
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	3b01      	subs	r3, #1
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d179      	bne.n	8004aae <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c2:	e853 3f00 	ldrex	r3, [r3]
 80049c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049ce:	653b      	str	r3, [r7, #80]	; 0x50
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	461a      	mov	r2, r3
 80049d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049d8:	647b      	str	r3, [r7, #68]	; 0x44
 80049da:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049e0:	e841 2300 	strex	r3, r2, [r1]
 80049e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1e6      	bne.n	80049ba <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	3308      	adds	r3, #8
 80049f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	e853 3f00 	ldrex	r3, [r3]
 80049fa:	623b      	str	r3, [r7, #32]
   return(result);
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	f023 0301 	bic.w	r3, r3, #1
 8004a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	3308      	adds	r3, #8
 8004a0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a0c:	633a      	str	r2, [r7, #48]	; 0x30
 8004a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a14:	e841 2300 	strex	r3, r2, [r1]
 8004a18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1e5      	bne.n	80049ec <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2220      	movs	r2, #32
 8004a24:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d12e      	bne.n	8004a92 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	e853 3f00 	ldrex	r3, [r3]
 8004a46:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f023 0310 	bic.w	r3, r3, #16
 8004a4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	461a      	mov	r2, r3
 8004a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a58:	61fb      	str	r3, [r7, #28]
 8004a5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5c:	69b9      	ldr	r1, [r7, #24]
 8004a5e:	69fa      	ldr	r2, [r7, #28]
 8004a60:	e841 2300 	strex	r3, r2, [r1]
 8004a64:	617b      	str	r3, [r7, #20]
   return(result);
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1e6      	bne.n	8004a3a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	f003 0310 	and.w	r3, r3, #16
 8004a76:	2b10      	cmp	r3, #16
 8004a78:	d103      	bne.n	8004a82 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2210      	movs	r2, #16
 8004a80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a88:	4619      	mov	r1, r3
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7ff fa0e 	bl	8003eac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a90:	e00d      	b.n	8004aae <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7fc fe16 	bl	80016c4 <HAL_UART_RxCpltCallback>
}
 8004a98:	e009      	b.n	8004aae <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	8b1b      	ldrh	r3, [r3, #24]
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 0208 	orr.w	r2, r2, #8
 8004aaa:	b292      	uxth	r2, r2
 8004aac:	831a      	strh	r2, [r3, #24]
}
 8004aae:	bf00      	nop
 8004ab0:	3758      	adds	r7, #88	; 0x58
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b096      	sub	sp, #88	; 0x58
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004ac4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004acc:	2b22      	cmp	r3, #34	; 0x22
 8004ace:	f040 8094 	bne.w	8004bfa <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004ad8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004ae2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004ae6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004aea:	4013      	ands	r3, r2
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004af0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af6:	1c9a      	adds	r2, r3, #2
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	3b01      	subs	r3, #1
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d179      	bne.n	8004c0e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b22:	e853 3f00 	ldrex	r3, [r3]
 8004b26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	461a      	mov	r2, r3
 8004b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b38:	643b      	str	r3, [r7, #64]	; 0x40
 8004b3a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b40:	e841 2300 	strex	r3, r2, [r1]
 8004b44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1e6      	bne.n	8004b1a <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3308      	adds	r3, #8
 8004b52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b54:	6a3b      	ldr	r3, [r7, #32]
 8004b56:	e853 3f00 	ldrex	r3, [r3]
 8004b5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	f023 0301 	bic.w	r3, r3, #1
 8004b62:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	3308      	adds	r3, #8
 8004b6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b74:	e841 2300 	strex	r3, r2, [r1]
 8004b78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1e5      	bne.n	8004b4c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2220      	movs	r2, #32
 8004b84:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d12e      	bne.n	8004bf2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	e853 3f00 	ldrex	r3, [r3]
 8004ba6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f023 0310 	bic.w	r3, r3, #16
 8004bae:	647b      	str	r3, [r7, #68]	; 0x44
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bb8:	61bb      	str	r3, [r7, #24]
 8004bba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbc:	6979      	ldr	r1, [r7, #20]
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	e841 2300 	strex	r3, r2, [r1]
 8004bc4:	613b      	str	r3, [r7, #16]
   return(result);
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1e6      	bne.n	8004b9a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	f003 0310 	and.w	r3, r3, #16
 8004bd6:	2b10      	cmp	r3, #16
 8004bd8:	d103      	bne.n	8004be2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2210      	movs	r2, #16
 8004be0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004be8:	4619      	mov	r1, r3
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7ff f95e 	bl	8003eac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004bf0:	e00d      	b.n	8004c0e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7fc fd66 	bl	80016c4 <HAL_UART_RxCpltCallback>
}
 8004bf8:	e009      	b.n	8004c0e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	8b1b      	ldrh	r3, [r3, #24]
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f042 0208 	orr.w	r2, r2, #8
 8004c0a:	b292      	uxth	r2, r2
 8004c0c:	831a      	strh	r2, [r3, #24]
}
 8004c0e:	bf00      	nop
 8004c10:	3758      	adds	r7, #88	; 0x58
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <frameCreate>:
#include "log/frame.h"
#include "main.h"


void frameCreate(genericFrame_t* frame)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b082      	sub	sp, #8
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
	frame->codeFunc = 0;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	701a      	strb	r2, [r3, #0]
	frame->mode = 0;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	705a      	strb	r2, [r3, #1]
	frame->dataSize = 0;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	709a      	strb	r2, [r3, #2]
	frame->data = malloc(MAX_DATA_SIZE);
 8004c44:	20fd      	movs	r0, #253	; 0xfd
 8004c46:	f003 fb85 	bl	8008354 <malloc>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f8c3 2003 	str.w	r2, [r3, #3]
	memset(frame->data, 0x0, MAX_DATA_SIZE);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8004c5a:	22fd      	movs	r2, #253	; 0xfd
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f003 fba6 	bl	80083b0 <memset>
}
 8004c64:	bf00      	nop
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <frameDelete>:

void frameDelete(genericFrame_t* frame)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
	free(frame->data);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f003 fb72 	bl	8008364 <free>
}
 8004c80:	bf00      	nop
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <serialize>:
{
	memcpy(rawBuffer, (uint8_t*) &frame, rawBuffer[3] + 3);
}

void serialize(const genericFrame_t frame, uint8_t* rawBuffer, uint32_t* rawBufferSize)
{
 8004c88:	b590      	push	{r4, r7, lr}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	f107 0408 	add.w	r4, r7, #8
 8004c92:	e884 0003 	stmia.w	r4, {r0, r1}
 8004c96:	607a      	str	r2, [r7, #4]
 8004c98:	603b      	str	r3, [r7, #0]
	rawBuffer[0] = frame.codeFunc;
 8004c9a:	7a3a      	ldrb	r2, [r7, #8]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	701a      	strb	r2, [r3, #0]
	rawBuffer[1] = frame.mode;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	7a7a      	ldrb	r2, [r7, #9]
 8004ca6:	701a      	strb	r2, [r3, #0]
	rawBuffer[2] = frame.dataSize;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3302      	adds	r3, #2
 8004cac:	7aba      	ldrb	r2, [r7, #10]
 8004cae:	701a      	strb	r2, [r3, #0]
	memcpy(&rawBuffer[3], (uint8_t*) frame.data, frame.dataSize);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	3303      	adds	r3, #3
 8004cb4:	f8d7 100b 	ldr.w	r1, [r7, #11]
 8004cb8:	7aba      	ldrb	r2, [r7, #10]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f003 fb6a 	bl	8008394 <memcpy>
	*rawBufferSize = 3 + frame.dataSize;
 8004cc0:	7abb      	ldrb	r3, [r7, #10]
 8004cc2:	3303      	adds	r3, #3
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	601a      	str	r2, [r3, #0]
}
 8004cca:	bf00      	nop
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd90      	pop	{r4, r7, pc}

08004cd2 <LOG_INFO>:
	memcpy(frame.data, (uint8_t*)&val, sizeof(float));
	LOG(frame);
}

//Fonctionne comme un printf
void LOG_INFO(const char *fmt, ...){
 8004cd2:	b40f      	push	{r0, r1, r2, r3}
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
	va_list argp;
    va_start(argp, fmt);
 8004cda:	f107 0314 	add.w	r3, r7, #20
 8004cde:	607b      	str	r3, [r7, #4]
	LOG_TEXT(fmt, argp, CODE_FUNC_LOG_INFO);
 8004ce0:	2209      	movs	r2, #9
 8004ce2:	6879      	ldr	r1, [r7, #4]
 8004ce4:	6938      	ldr	r0, [r7, #16]
 8004ce6:	f000 f807 	bl	8004cf8 <LOG_TEXT>
    va_end(argp);
}
 8004cea:	bf00      	nop
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cf4:	b004      	add	sp, #16
 8004cf6:	4770      	bx	lr

08004cf8 <LOG_TEXT>:
    va_start(argp, fmt);
//	LOG_TEXT(CODE_FUNC_LOG_ERROR, fmt, argp);
    va_end(argp);
}

void LOG_TEXT(const char *fmt, va_list arg, uint8_t codeFunc){
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b0c8      	sub	sp, #288	; 0x120
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004d02:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004d06:	6018      	str	r0, [r3, #0]
 8004d08:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004d0c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004d10:	6019      	str	r1, [r3, #0]
 8004d12:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004d16:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004d1a:	701a      	strb	r2, [r3, #0]
	genericFrame_t frame;
	frameCreate(&frame); //Allocate Memory
 8004d1c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff ff82 	bl	8004c2a <frameCreate>

	frame.codeFunc = codeFunc;
 8004d26:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004d2a:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110
	frame.mode = 1;
 8004d34:	2301      	movs	r3, #1
 8004d36:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111

	// build string
	char string[0xFF];
	uint16_t stringSize = 0;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
	stringSize = vsprintf(string,fmt,arg);
 8004d40:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004d44:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8004d48:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004d4c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004d50:	f107 0010 	add.w	r0, r7, #16
 8004d54:	6812      	ldr	r2, [r2, #0]
 8004d56:	6819      	ldr	r1, [r3, #0]
 8004d58:	f004 f950 	bl	8008ffc <vsiprintf>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a

	//Split string in multiple frames if too long
	uint32_t nbCharToSend = stringSize;
 8004d62:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8004d66:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	while(nbCharToSend != 0)
 8004d6a:	e037      	b.n	8004ddc <LOG_TEXT+0xe4>
	{
		if(nbCharToSend > MAX_DATA_SIZE)
 8004d6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d70:	2bfd      	cmp	r3, #253	; 0xfd
 8004d72:	d916      	bls.n	8004da2 <LOG_TEXT+0xaa>
		{
			memcpy(frame.data, &string[stringSize - nbCharToSend], MAX_DATA_SIZE);
 8004d74:	f8d7 0113 	ldr.w	r0, [r7, #275]	; 0x113
 8004d78:	f8b7 211a 	ldrh.w	r2, [r7, #282]	; 0x11a
 8004d7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	f107 0210 	add.w	r2, r7, #16
 8004d86:	4413      	add	r3, r2
 8004d88:	22fd      	movs	r2, #253	; 0xfd
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	f003 fb02 	bl	8008394 <memcpy>
			frame.dataSize = MAX_DATA_SIZE;
 8004d90:	23fd      	movs	r3, #253	; 0xfd
 8004d92:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
			nbCharToSend -= MAX_DATA_SIZE;
 8004d96:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d9a:	3bfd      	subs	r3, #253	; 0xfd
 8004d9c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004da0:	e016      	b.n	8004dd0 <LOG_TEXT+0xd8>
		}
		else
		{
			memcpy(frame.data, &string[stringSize - nbCharToSend], nbCharToSend);
 8004da2:	f8d7 0113 	ldr.w	r0, [r7, #275]	; 0x113
 8004da6:	f8b7 211a 	ldrh.w	r2, [r7, #282]	; 0x11a
 8004daa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	f107 0210 	add.w	r2, r7, #16
 8004db4:	4413      	add	r3, r2
 8004db6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004dba:	4619      	mov	r1, r3
 8004dbc:	f003 faea 	bl	8008394 <memcpy>
			frame.dataSize = nbCharToSend;
 8004dc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
			nbCharToSend = 0;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		}
		LOG(frame);
 8004dd0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004dd4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004dd8:	f000 f80a 	bl	8004df0 <LOG>
	while(nbCharToSend != 0)
 8004ddc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1c3      	bne.n	8004d6c <LOG_TEXT+0x74>
	}
}
 8004de4:	bf00      	nop
 8004de6:	bf00      	nop
 8004de8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <LOG>:

void LOG(const genericFrame_t frame)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	463b      	mov	r3, r7
 8004df8:	e883 0003 	stmia.w	r3, {r0, r1}
	xbee_sendFrame(frame);
 8004dfc:	463b      	mov	r3, r7
 8004dfe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004e02:	f000 fb27 	bl	8005454 <xbee_sendFrame>
}
 8004e06:	bf00      	nop
 8004e08:	3708      	adds	r7, #8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
	...

08004e10 <vprint>:
#include "cmsis_os.h"

extern osMutexId traceMutexHandle;

void vprint(const char *fmt, va_list argp)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b0b4      	sub	sp, #208	; 0xd0
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string,fmt,argp)) // build string
 8004e1a:	f107 0308 	add.w	r3, r7, #8
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	6879      	ldr	r1, [r7, #4]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f004 f8ea 	bl	8008ffc <vsiprintf>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	dd0d      	ble.n	8004e4a <vprint+0x3a>
    {
        HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
 8004e2e:	f107 0308 	add.w	r3, r7, #8
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7fb f9cc 	bl	80001d0 <strlen>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	f107 0108 	add.w	r1, r7, #8
 8004e40:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8004e44:	4803      	ldr	r0, [pc, #12]	; (8004e54 <vprint+0x44>)
 8004e46:	f7fe fc51 	bl	80036ec <HAL_UART_Transmit>
    }
}
 8004e4a:	bf00      	nop
 8004e4c:	37d0      	adds	r7, #208	; 0xd0
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	20002740 	.word	0x20002740

08004e58 <PRINT>:

void PRINT(const char *fmt, ...) // custom printf() function
{
 8004e58:	b40f      	push	{r0, r1, r2, r3}
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b082      	sub	sp, #8
 8004e5e:	af00      	add	r7, sp, #0
	if( osMutexWait(traceMutexHandle, 0) != osOK)
 8004e60:	4b0e      	ldr	r3, [pc, #56]	; (8004e9c <PRINT+0x44>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2100      	movs	r1, #0
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 fd74 	bl	8005954 <osMutexWait>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10c      	bne.n	8004e8c <PRINT+0x34>
		return;

	va_list argp;
    va_start(argp, fmt);
 8004e72:	f107 0314 	add.w	r3, r7, #20
 8004e76:	607b      	str	r3, [r7, #4]
    vprint(fmt, argp);
 8004e78:	6879      	ldr	r1, [r7, #4]
 8004e7a:	6938      	ldr	r0, [r7, #16]
 8004e7c:	f7ff ffc8 	bl	8004e10 <vprint>
    va_end(argp);

	osMutexRelease(traceMutexHandle);
 8004e80:	4b06      	ldr	r3, [pc, #24]	; (8004e9c <PRINT+0x44>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f000 fdb3 	bl	80059f0 <osMutexRelease>
 8004e8a:	e000      	b.n	8004e8e <PRINT+0x36>
		return;
 8004e8c:	bf00      	nop
}
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e96:	b004      	add	sp, #16
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	2000236c 	.word	0x2000236c

08004ea0 <FifoNext>:
#include <xbee/fifo.h>

#include "log/frame.h"

static uint16_t FifoNext( Fifo_t *fifo, uint16_t index )
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	807b      	strh	r3, [r7, #2]
    return ( index + 1 ) % fifo->fifoSize;
 8004eac:	887b      	ldrh	r3, [r7, #2]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	fbb2 f1f3 	udiv	r1, r2, r3
 8004eba:	fb01 f303 	mul.w	r3, r1, r3
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	b29b      	uxth	r3, r3
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <FifoInit>:
 * \param [IN] fifo   	 Pointer to the FIFO handler
 * \param [IN] dataSize  Size of each element stored
 * \param [IN] fifoSize  Number of element to store in fifo
 */
void FifoInit( Fifo_t *fifo, const size_t dataSize, const size_t fifoSize )
{
 8004ece:	b590      	push	{r4, r7, lr}
 8004ed0:	b087      	sub	sp, #28
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	60f8      	str	r0, [r7, #12]
 8004ed6:	60b9      	str	r1, [r7, #8]
 8004ed8:	607a      	str	r2, [r7, #4]
	//Allocate memory
	fifo->dataArray = (void**) malloc(fifoSize * sizeof(void*));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f003 fa38 	bl	8008354 <malloc>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	605a      	str	r2, [r3, #4]
	for(uint8_t i=0 ; i<fifoSize ; i++)
 8004eec:	2300      	movs	r3, #0
 8004eee:	75fb      	strb	r3, [r7, #23]
 8004ef0:	e00c      	b.n	8004f0c <FifoInit+0x3e>
		fifo->dataArray[i] = (void*) malloc(dataSize);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	7dfb      	ldrb	r3, [r7, #23]
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	18d4      	adds	r4, r2, r3
 8004efc:	68b8      	ldr	r0, [r7, #8]
 8004efe:	f003 fa29 	bl	8008354 <malloc>
 8004f02:	4603      	mov	r3, r0
 8004f04:	6023      	str	r3, [r4, #0]
	for(uint8_t i=0 ; i<fifoSize ; i++)
 8004f06:	7dfb      	ldrb	r3, [r7, #23]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	75fb      	strb	r3, [r7, #23]
 8004f0c:	7dfb      	ldrb	r3, [r7, #23]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d8ee      	bhi.n	8004ef2 <FifoInit+0x24>

    fifo->head = 0;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	801a      	strh	r2, [r3, #0]
    fifo->tail = 0;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	805a      	strh	r2, [r3, #2]
    fifo->dataSize = dataSize;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	609a      	str	r2, [r3, #8]
    fifo->fifoSize = fifoSize;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	60da      	str	r2, [r3, #12]
}
 8004f2c:	bf00      	nop
 8004f2e:	371c      	adds	r7, #28
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd90      	pop	{r4, r7, pc}

08004f34 <FifoPush>:
 *
 * \param [IN] fifo Pointer to the FIFO object
 * \param [IN] data Data to be pushed into the FIFO
 */
void FifoPush( Fifo_t *fifo, const void *in )
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
    fifo->tail = FifoNext( fifo, fifo->tail );
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	885b      	ldrh	r3, [r3, #2]
 8004f42:	4619      	mov	r1, r3
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f7ff ffab 	bl	8004ea0 <FifoNext>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	805a      	strh	r2, [r3, #2]
    memcpy(fifo->dataArray[fifo->tail], in, fifo->dataSize);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	885b      	ldrh	r3, [r3, #2]
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	6818      	ldr	r0, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	461a      	mov	r2, r3
 8004f66:	6839      	ldr	r1, [r7, #0]
 8004f68:	f003 fa14 	bl	8008394 <memcpy>
}
 8004f6c:	bf00      	nop
 8004f6e:	3708      	adds	r7, #8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <FifoPop>:
 *
 * \param [IN] fifo Pointer to the FIFO object
 * \retval data     Data popped from the FIFO
 */
void FifoPop( Fifo_t *fifo, void *out )
{
 8004f74:	b590      	push	{r4, r7, lr}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
    memcpy(out, fifo->dataArray[FifoNext( fifo, fifo->head )], fifo->dataSize);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685c      	ldr	r4, [r3, #4]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	4619      	mov	r1, r3
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7ff ff89 	bl	8004ea0 <FifoNext>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4423      	add	r3, r4
 8004f94:	6819      	ldr	r1, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	6838      	ldr	r0, [r7, #0]
 8004f9e:	f003 f9f9 	bl	8008394 <memcpy>
    fifo->head = FifoNext( fifo, fifo->head );
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	881b      	ldrh	r3, [r3, #0]
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f7ff ff79 	bl	8004ea0 <FifoNext>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	801a      	strh	r2, [r3, #0]
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd90      	pop	{r4, r7, pc}

08004fbe <IsFifoEmpty>:
 *
 * \param [IN] fifo   Pointer to the FIFO object
 * \retval isEmpty    true: FIFO is empty, false FIFO is not empty
 */
bool IsFifoEmpty( Fifo_t *fifo )
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b083      	sub	sp, #12
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
    return ( fifo->head == fifo->tail );
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	881a      	ldrh	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	885b      	ldrh	r3, [r3, #2]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	bf0c      	ite	eq
 8004fd2:	2301      	moveq	r3, #1
 8004fd4:	2300      	movne	r3, #0
 8004fd6:	b2db      	uxtb	r3, r3
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <StartXbeeTask>:
 * @brief FreeRTOS Task
 * Setup : config xbee module and start receiving
 * Loop : Process incoming messages
 */
void StartXbeeTask(void const * argument)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
	PRINT("XBee Start Task\n");
 8004fec:	480c      	ldr	r0, [pc, #48]	; (8005020 <StartXbeeTask+0x3c>)
 8004fee:	f7ff ff33 	bl	8004e58 <PRINT>

	if(xbee_init(&huart1) != 0)
 8004ff2:	480c      	ldr	r0, [pc, #48]	; (8005024 <StartXbeeTask+0x40>)
 8004ff4:	f000 f81c 	bl	8005030 <xbee_init>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d004      	beq.n	8005008 <StartXbeeTask+0x24>
		vTaskDelete(xbeeTaskHandle);
 8004ffe:	4b0a      	ldr	r3, [pc, #40]	; (8005028 <StartXbeeTask+0x44>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4618      	mov	r0, r3
 8005004:	f001 fd4e 	bl	8006aa4 <vTaskDelete>

	FifoInit(&frameFifo, sizeof(genericFrame_t), 100);
 8005008:	2264      	movs	r2, #100	; 0x64
 800500a:	2107      	movs	r1, #7
 800500c:	4807      	ldr	r0, [pc, #28]	; (800502c <StartXbeeTask+0x48>)
 800500e:	f7ff ff5e 	bl	8004ece <FifoInit>

//Loop
	for(;;)
	{
		xbee_process();
 8005012:	f000 f86f 	bl	80050f4 <xbee_process>
		osDelay(10);
 8005016:	200a      	movs	r0, #10
 8005018:	f000 fc6f 	bl	80058fa <osDelay>
		xbee_process();
 800501c:	e7f9      	b.n	8005012 <StartXbeeTask+0x2e>
 800501e:	bf00      	nop
 8005020:	0800b0ec 	.word	0x0800b0ec
 8005024:	200026bc 	.word	0x200026bc
 8005028:	200012b4 	.word	0x200012b4
 800502c:	20002834 	.word	0x20002834

08005030 <xbee_init>:

// Initialiser l'interface de communication avec le module XBee
// Return 0 if ok,
//		  1 if else
uint8_t xbee_init(UART_HandleTypeDef* uartHandle)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 8005038:	2300      	movs	r3, #0
 800503a:	73fb      	strb	r3, [r7, #15]

	PRINT("Init xbeeSerial...");
 800503c:	4825      	ldr	r0, [pc, #148]	; (80050d4 <xbee_init+0xa4>)
 800503e:	f7ff ff0b 	bl	8004e58 <PRINT>
	xbeeSerial_Init(uartHandle);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 fac8 	bl	80055d8 <xbeeSerial_Init>

	enteringCmdMode = 0;
 8005048:	4b23      	ldr	r3, [pc, #140]	; (80050d8 <xbee_init+0xa8>)
 800504a:	2200      	movs	r2, #0
 800504c:	701a      	strb	r2, [r3, #0]
	_resetFrame();
 800504e:	f000 fa79 	bl	8005544 <_resetFrame>

	_EnterCmdMode();
 8005052:	f000 fa11 	bl	8005478 <_EnterCmdMode>

	if(ret != 0)
 8005056:	7bfb      	ldrb	r3, [r7, #15]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d001      	beq.n	8005060 <xbee_init+0x30>
		return ret;
 800505c:	7bfb      	ldrb	r3, [r7, #15]
 800505e:	e035      	b.n	80050cc <xbee_init+0x9c>

	// Configuration PAN ID
	xbee_send_at_command("ID", "30");
 8005060:	491e      	ldr	r1, [pc, #120]	; (80050dc <xbee_init+0xac>)
 8005062:	481f      	ldr	r0, [pc, #124]	; (80050e0 <xbee_init+0xb0>)
 8005064:	f000 f8c8 	bl	80051f8 <xbee_send_at_command>
	ret = xbee_wait_for_AT_response();
 8005068:	f000 f940 	bl	80052ec <xbee_wait_for_AT_response>
 800506c:	4603      	mov	r3, r0
 800506e:	73fb      	strb	r3, [r7, #15]
	_processStatus(ret);
 8005070:	7bfb      	ldrb	r3, [r7, #15]
 8005072:	4618      	mov	r0, r3
 8005074:	f000 fa8e 	bl	8005594 <_processStatus>
	if(ret != 0)
 8005078:	7bfb      	ldrb	r3, [r7, #15]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <xbee_init+0x52>
		return ret;
 800507e:	7bfb      	ldrb	r3, [r7, #15]
 8005080:	e024      	b.n	80050cc <xbee_init+0x9c>

	// Configuration adresse de destination du second module XBee
	xbee_send_at_command("DH", "13A200");
 8005082:	4918      	ldr	r1, [pc, #96]	; (80050e4 <xbee_init+0xb4>)
 8005084:	4818      	ldr	r0, [pc, #96]	; (80050e8 <xbee_init+0xb8>)
 8005086:	f000 f8b7 	bl	80051f8 <xbee_send_at_command>
	ret = xbee_wait_for_AT_response();
 800508a:	f000 f92f 	bl	80052ec <xbee_wait_for_AT_response>
 800508e:	4603      	mov	r3, r0
 8005090:	73fb      	strb	r3, [r7, #15]
	_processStatus(ret);
 8005092:	7bfb      	ldrb	r3, [r7, #15]
 8005094:	4618      	mov	r0, r3
 8005096:	f000 fa7d 	bl	8005594 <_processStatus>
	if(ret != 0)
 800509a:	7bfb      	ldrb	r3, [r7, #15]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <xbee_init+0x74>
		return ret;
 80050a0:	7bfb      	ldrb	r3, [r7, #15]
 80050a2:	e013      	b.n	80050cc <xbee_init+0x9c>

	xbee_send_at_command("DL", "420D3B79");
 80050a4:	4911      	ldr	r1, [pc, #68]	; (80050ec <xbee_init+0xbc>)
 80050a6:	4812      	ldr	r0, [pc, #72]	; (80050f0 <xbee_init+0xc0>)
 80050a8:	f000 f8a6 	bl	80051f8 <xbee_send_at_command>
	ret = xbee_wait_for_AT_response();
 80050ac:	f000 f91e 	bl	80052ec <xbee_wait_for_AT_response>
 80050b0:	4603      	mov	r3, r0
 80050b2:	73fb      	strb	r3, [r7, #15]
	_processStatus(ret);
 80050b4:	7bfb      	ldrb	r3, [r7, #15]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 fa6c 	bl	8005594 <_processStatus>
	if(ret != 0)
 80050bc:	7bfb      	ldrb	r3, [r7, #15]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <xbee_init+0x96>
		return ret;
 80050c2:	7bfb      	ldrb	r3, [r7, #15]
 80050c4:	e002      	b.n	80050cc <xbee_init+0x9c>

	_ExitCmdMode();
 80050c6:	f000 fa11 	bl	80054ec <_ExitCmdMode>

	return ret;
 80050ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	0800b100 	.word	0x0800b100
 80050d8:	200027c9 	.word	0x200027c9
 80050dc:	0800b114 	.word	0x0800b114
 80050e0:	0800b118 	.word	0x0800b118
 80050e4:	0800b11c 	.word	0x0800b11c
 80050e8:	0800b124 	.word	0x0800b124
 80050ec:	0800b128 	.word	0x0800b128
 80050f0:	0800b134 	.word	0x0800b134

080050f4 <xbee_process>:

//Main process du module xbee
//Devrait être appelé toutes les 100ms
void xbee_process(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b0c4      	sub	sp, #272	; 0x110
 80050f8:	af00      	add	r7, sp, #0
    if(IsFifoEmpty(&frameFifo)){
 80050fa:	4837      	ldr	r0, [pc, #220]	; (80051d8 <xbee_process+0xe4>)
 80050fc:	f7ff ff5f 	bl	8004fbe <IsFifoEmpty>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d162      	bne.n	80051cc <xbee_process+0xd8>
    	return;
    }
	genericFrame_t frame;
	uint8_t buffer[256];
	uint32_t bufferSize = 0;
 8005106:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800510a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800510e:	2200      	movs	r2, #0
 8005110:	601a      	str	r2, [r3, #0]
	memset(buffer, 0x0, 256);
 8005112:	1d3b      	adds	r3, r7, #4
 8005114:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005118:	2100      	movs	r1, #0
 800511a:	4618      	mov	r0, r3
 800511c:	f003 f948 	bl	80083b0 <memset>

	FifoPop(&frameFifo, &frame);
 8005120:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8005124:	4619      	mov	r1, r3
 8005126:	482c      	ldr	r0, [pc, #176]	; (80051d8 <xbee_process+0xe4>)
 8005128:	f7ff ff24 	bl	8004f74 <FifoPop>
	serialize(frame, buffer, &bufferSize);
 800512c:	463b      	mov	r3, r7
 800512e:	1d3a      	adds	r2, r7, #4
 8005130:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8005134:	c903      	ldmia	r1, {r0, r1}
 8005136:	f7ff fda7 	bl	8004c88 <serialize>

	PRINT("[Xbee] Sending frame: \n\r");
 800513a:	4828      	ldr	r0, [pc, #160]	; (80051dc <xbee_process+0xe8>)
 800513c:	f7ff fe8c 	bl	8004e58 <PRINT>
	PRINT(" >func:     0x%02X\n\r", frame.codeFunc);
 8005140:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8005144:	4619      	mov	r1, r3
 8005146:	4826      	ldr	r0, [pc, #152]	; (80051e0 <xbee_process+0xec>)
 8005148:	f7ff fe86 	bl	8004e58 <PRINT>
	PRINT(" >mode:     0x%02X\n\r", frame.mode);
 800514c:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8005150:	4619      	mov	r1, r3
 8005152:	4824      	ldr	r0, [pc, #144]	; (80051e4 <xbee_process+0xf0>)
 8005154:	f7ff fe80 	bl	8004e58 <PRINT>
	PRINT(" >dataSize: 0x%02X\n\r", frame.dataSize);
 8005158:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800515c:	4619      	mov	r1, r3
 800515e:	4822      	ldr	r0, [pc, #136]	; (80051e8 <xbee_process+0xf4>)
 8005160:	f7ff fe7a 	bl	8004e58 <PRINT>
	PRINT(" >data:     ");
 8005164:	4821      	ldr	r0, [pc, #132]	; (80051ec <xbee_process+0xf8>)
 8005166:	f7ff fe77 	bl	8004e58 <PRINT>
	for (int i = 0; i < bufferSize; i++)
 800516a:	2300      	movs	r3, #0
 800516c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005170:	e010      	b.n	8005194 <xbee_process+0xa0>
	    PRINT("0x%02X ", buffer[i]);
 8005172:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005176:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 800517a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800517e:	4413      	add	r3, r2
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	4619      	mov	r1, r3
 8005184:	481a      	ldr	r0, [pc, #104]	; (80051f0 <xbee_process+0xfc>)
 8005186:	f7ff fe67 	bl	8004e58 <PRINT>
	for (int i = 0; i < bufferSize; i++)
 800518a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800518e:	3301      	adds	r3, #1
 8005190:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005194:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005198:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800519c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d3e5      	bcc.n	8005172 <xbee_process+0x7e>
	PRINT("\n\r\n\r");
 80051a6:	4813      	ldr	r0, [pc, #76]	; (80051f4 <xbee_process+0x100>)
 80051a8:	f7ff fe56 	bl	8004e58 <PRINT>

//	taskENTER_CRITICAL();
	xbeeSerial_Transmit(buffer, bufferSize);
 80051ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80051b0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	1d3b      	adds	r3, r7, #4
 80051b8:	4611      	mov	r1, r2
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 fa96 	bl	80056ec <xbeeSerial_Transmit>
//    taskEXIT_CRITICAL();

	frameDelete(&frame); //Free Memory
 80051c0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7ff fd51 	bl	8004c6c <frameDelete>
 80051ca:	e000      	b.n	80051ce <xbee_process+0xda>
    	return;
 80051cc:	bf00      	nop
}
 80051ce:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	20002834 	.word	0x20002834
 80051dc:	0800b138 	.word	0x0800b138
 80051e0:	0800b154 	.word	0x0800b154
 80051e4:	0800b16c 	.word	0x0800b16c
 80051e8:	0800b184 	.word	0x0800b184
 80051ec:	0800b19c 	.word	0x0800b19c
 80051f0:	0800b1ac 	.word	0x0800b1ac
 80051f4:	0800b1b4 	.word	0x0800b1b4

080051f8 <xbee_send_at_command>:
// Copy command to frame buffer
// User must execute 'xbee_wait_for_AT_response' to send the issued AT request
// Return 0 if ok
//		  1 if buffer overflow
uint8_t xbee_send_at_command(const char *command, const char* param)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
	if(!isCmdMode)
 8005202:	4b35      	ldr	r3, [pc, #212]	; (80052d8 <xbee_send_at_command+0xe0>)
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <xbee_send_at_command+0x16>
		_EnterCmdMode();
 800520a:	f000 f935 	bl	8005478 <_EnterCmdMode>

	// add comma if daisy chained commands
	if(_size != 0)
 800520e:	4b33      	ldr	r3, [pc, #204]	; (80052dc <xbee_send_at_command+0xe4>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00f      	beq.n	8005236 <xbee_send_at_command+0x3e>
	{
		if(_allocateFrame(1))
 8005216:	2001      	movs	r0, #1
 8005218:	f000 f9a4 	bl	8005564 <_allocateFrame>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <xbee_send_at_command+0x2e>
			return 1;
 8005222:	2301      	movs	r3, #1
 8005224:	e053      	b.n	80052ce <xbee_send_at_command+0xd6>
		_frame[_size++] = ',';
 8005226:	4b2d      	ldr	r3, [pc, #180]	; (80052dc <xbee_send_at_command+0xe4>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	1c5a      	adds	r2, r3, #1
 800522c:	492b      	ldr	r1, [pc, #172]	; (80052dc <xbee_send_at_command+0xe4>)
 800522e:	600a      	str	r2, [r1, #0]
 8005230:	4a2b      	ldr	r2, [pc, #172]	; (80052e0 <xbee_send_at_command+0xe8>)
 8005232:	212c      	movs	r1, #44	; 0x2c
 8005234:	54d1      	strb	r1, [r2, r3]
	}

	if(_allocateFrame(4))
 8005236:	2004      	movs	r0, #4
 8005238:	f000 f994 	bl	8005564 <_allocateFrame>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <xbee_send_at_command+0x4e>
		return 1;
 8005242:	2301      	movs	r3, #1
 8005244:	e043      	b.n	80052ce <xbee_send_at_command+0xd6>

	memcpy(&_frame[_size], "AT", 2);
 8005246:	4b25      	ldr	r3, [pc, #148]	; (80052dc <xbee_send_at_command+0xe4>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a25      	ldr	r2, [pc, #148]	; (80052e0 <xbee_send_at_command+0xe8>)
 800524c:	4413      	add	r3, r2
 800524e:	2202      	movs	r2, #2
 8005250:	4924      	ldr	r1, [pc, #144]	; (80052e4 <xbee_send_at_command+0xec>)
 8005252:	4618      	mov	r0, r3
 8005254:	f003 f89e 	bl	8008394 <memcpy>
	_size += 2;
 8005258:	4b20      	ldr	r3, [pc, #128]	; (80052dc <xbee_send_at_command+0xe4>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	3302      	adds	r3, #2
 800525e:	4a1f      	ldr	r2, [pc, #124]	; (80052dc <xbee_send_at_command+0xe4>)
 8005260:	6013      	str	r3, [r2, #0]
	memcpy(&_frame[_size], command, 2);
 8005262:	4b1e      	ldr	r3, [pc, #120]	; (80052dc <xbee_send_at_command+0xe4>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a1e      	ldr	r2, [pc, #120]	; (80052e0 <xbee_send_at_command+0xe8>)
 8005268:	4413      	add	r3, r2
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	8812      	ldrh	r2, [r2, #0]
 800526e:	b292      	uxth	r2, r2
 8005270:	801a      	strh	r2, [r3, #0]
	_size += 2;
 8005272:	4b1a      	ldr	r3, [pc, #104]	; (80052dc <xbee_send_at_command+0xe4>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	3302      	adds	r3, #2
 8005278:	4a18      	ldr	r2, [pc, #96]	; (80052dc <xbee_send_at_command+0xe4>)
 800527a:	6013      	str	r3, [r2, #0]

	uint8_t i = 0;
 800527c:	2300      	movs	r3, #0
 800527e:	73fb      	strb	r3, [r7, #15]
	uint8_t currByte = param[i];
 8005280:	7bfb      	ldrb	r3, [r7, #15]
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	4413      	add	r3, r2
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	73bb      	strb	r3, [r7, #14]
	while(currByte != '\0')
 800528a:	e017      	b.n	80052bc <xbee_send_at_command+0xc4>
	{
		if(_allocateFrame(1))
 800528c:	2001      	movs	r0, #1
 800528e:	f000 f969 	bl	8005564 <_allocateFrame>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d001      	beq.n	800529c <xbee_send_at_command+0xa4>
			return 1;
 8005298:	2301      	movs	r3, #1
 800529a:	e018      	b.n	80052ce <xbee_send_at_command+0xd6>

		_frame[_size++] = currByte;
 800529c:	4b0f      	ldr	r3, [pc, #60]	; (80052dc <xbee_send_at_command+0xe4>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	1c5a      	adds	r2, r3, #1
 80052a2:	490e      	ldr	r1, [pc, #56]	; (80052dc <xbee_send_at_command+0xe4>)
 80052a4:	600a      	str	r2, [r1, #0]
 80052a6:	490e      	ldr	r1, [pc, #56]	; (80052e0 <xbee_send_at_command+0xe8>)
 80052a8:	7bba      	ldrb	r2, [r7, #14]
 80052aa:	54ca      	strb	r2, [r1, r3]
		currByte =  param[++i];
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
 80052ae:	3301      	adds	r3, #1
 80052b0:	73fb      	strb	r3, [r7, #15]
 80052b2:	7bfb      	ldrb	r3, [r7, #15]
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	4413      	add	r3, r2
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	73bb      	strb	r3, [r7, #14]
	while(currByte != '\0')
 80052bc:	7bbb      	ldrb	r3, [r7, #14]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1e4      	bne.n	800528c <xbee_send_at_command+0x94>
	}

	PRINT("Command issued : AT %s %s\n", command, param); //Log
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	6879      	ldr	r1, [r7, #4]
 80052c6:	4808      	ldr	r0, [pc, #32]	; (80052e8 <xbee_send_at_command+0xf0>)
 80052c8:	f7ff fdc6 	bl	8004e58 <PRINT>

	return 0;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	200027c8 	.word	0x200027c8
 80052dc:	20002830 	.word	0x20002830
 80052e0:	200027cc 	.word	0x200027cc
 80052e4:	0800b1bc 	.word	0x0800b1bc
 80052e8:	0800b1c0 	.word	0x0800b1c0

080052ec <xbee_wait_for_AT_response>:
// Wait for 'OK\r' response
// Return   0 if ok
//		    1 if timeout
//		    2 if response incorrect
uint8_t xbee_wait_for_AT_response(void)
{
 80052ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80052f0:	b087      	sub	sp, #28
 80052f2:	af00      	add	r7, sp, #0
	uint32_t startTime, currTime;

	if(!isCmdMode)
 80052f4:	4b44      	ldr	r3, [pc, #272]	; (8005408 <xbee_wait_for_AT_response+0x11c>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d101      	bne.n	8005300 <xbee_wait_for_AT_response+0x14>
		return 0;
 80052fc:	2300      	movs	r3, #0
 80052fe:	e07e      	b.n	80053fe <xbee_wait_for_AT_response+0x112>

	//If in command mode
	if(!enteringCmdMode)
 8005300:	4b42      	ldr	r3, [pc, #264]	; (800540c <xbee_wait_for_AT_response+0x120>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d11f      	bne.n	8005348 <xbee_wait_for_AT_response+0x5c>
	{
		if(_allocateFrame(1))
 8005308:	2001      	movs	r0, #1
 800530a:	f000 f92b 	bl	8005564 <_allocateFrame>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <xbee_wait_for_AT_response+0x2c>
			return 1;
 8005314:	2301      	movs	r3, #1
 8005316:	e072      	b.n	80053fe <xbee_wait_for_AT_response+0x112>

		PRINT("Sending frame  : %.*s\n", _size, _frame); //log _frame. '\r' is not printed
 8005318:	4b3d      	ldr	r3, [pc, #244]	; (8005410 <xbee_wait_for_AT_response+0x124>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a3d      	ldr	r2, [pc, #244]	; (8005414 <xbee_wait_for_AT_response+0x128>)
 800531e:	4619      	mov	r1, r3
 8005320:	483d      	ldr	r0, [pc, #244]	; (8005418 <xbee_wait_for_AT_response+0x12c>)
 8005322:	f7ff fd99 	bl	8004e58 <PRINT>
		PRINT("...");
 8005326:	483d      	ldr	r0, [pc, #244]	; (800541c <xbee_wait_for_AT_response+0x130>)
 8005328:	f7ff fd96 	bl	8004e58 <PRINT>
		_frame[_size++] = '\r';  //wrap up _frame
 800532c:	4b38      	ldr	r3, [pc, #224]	; (8005410 <xbee_wait_for_AT_response+0x124>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	4937      	ldr	r1, [pc, #220]	; (8005410 <xbee_wait_for_AT_response+0x124>)
 8005334:	600a      	str	r2, [r1, #0]
 8005336:	4a37      	ldr	r2, [pc, #220]	; (8005414 <xbee_wait_for_AT_response+0x128>)
 8005338:	210d      	movs	r1, #13
 800533a:	54d1      	strb	r1, [r2, r3]

		xbeeSerial_Transmit(_frame, _size);  //Send _frame
 800533c:	4b34      	ldr	r3, [pc, #208]	; (8005410 <xbee_wait_for_AT_response+0x124>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4619      	mov	r1, r3
 8005342:	4834      	ldr	r0, [pc, #208]	; (8005414 <xbee_wait_for_AT_response+0x128>)
 8005344:	f000 f9d2 	bl	80056ec <xbeeSerial_Transmit>
	}

	//Check timeout
	startTime = HAL_GetTick();
 8005348:	f7fc fa22 	bl	8001790 <HAL_GetTick>
 800534c:	6178      	str	r0, [r7, #20]
	while(!xbeeSerial_isMessageReceived())
 800534e:	e00c      	b.n	800536a <xbee_wait_for_AT_response+0x7e>
	{
		currTime = HAL_GetTick();
 8005350:	f7fc fa1e 	bl	8001790 <HAL_GetTick>
 8005354:	6078      	str	r0, [r7, #4]
		//wait time over 1 second
		if((currTime - startTime) > 2000)
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005360:	d903      	bls.n	800536a <xbee_wait_for_AT_response+0x7e>
		{
			//Timeout, module failed to respond
			_resetFrame();
 8005362:	f000 f8ef 	bl	8005544 <_resetFrame>
			return 1;
 8005366:	2301      	movs	r3, #1
 8005368:	e049      	b.n	80053fe <xbee_wait_for_AT_response+0x112>
	while(!xbeeSerial_isMessageReceived())
 800536a:	f000 f9d3 	bl	8005714 <xbeeSerial_isMessageReceived>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d0ed      	beq.n	8005350 <xbee_wait_for_AT_response+0x64>
		}
	}

	//Get response
	uint8_t correctBuffer[3] = "OK\r";
 8005374:	4a2a      	ldr	r2, [pc, #168]	; (8005420 <xbee_wait_for_AT_response+0x134>)
 8005376:	463b      	mov	r3, r7
 8005378:	6812      	ldr	r2, [r2, #0]
 800537a:	4611      	mov	r1, r2
 800537c:	8019      	strh	r1, [r3, #0]
 800537e:	3302      	adds	r3, #2
 8005380:	0c12      	lsrs	r2, r2, #16
 8005382:	701a      	strb	r2, [r3, #0]
	uint32_t rxBufferSize = xbeeSerial_getBufferSize();
 8005384:	f000 f990 	bl	80056a8 <xbeeSerial_getBufferSize>
 8005388:	6138      	str	r0, [r7, #16]
	uint8_t rxBuffer[rxBufferSize];
 800538a:	6939      	ldr	r1, [r7, #16]
 800538c:	466b      	mov	r3, sp
 800538e:	461e      	mov	r6, r3
 8005390:	460b      	mov	r3, r1
 8005392:	3b01      	subs	r3, #1
 8005394:	60fb      	str	r3, [r7, #12]
 8005396:	2300      	movs	r3, #0
 8005398:	4688      	mov	r8, r1
 800539a:	4699      	mov	r9, r3
 800539c:	f04f 0200 	mov.w	r2, #0
 80053a0:	f04f 0300 	mov.w	r3, #0
 80053a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053b0:	2300      	movs	r3, #0
 80053b2:	460c      	mov	r4, r1
 80053b4:	461d      	mov	r5, r3
 80053b6:	f04f 0200 	mov.w	r2, #0
 80053ba:	f04f 0300 	mov.w	r3, #0
 80053be:	00eb      	lsls	r3, r5, #3
 80053c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053c4:	00e2      	lsls	r2, r4, #3
 80053c6:	1dcb      	adds	r3, r1, #7
 80053c8:	08db      	lsrs	r3, r3, #3
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	ebad 0d03 	sub.w	sp, sp, r3
 80053d0:	466b      	mov	r3, sp
 80053d2:	3300      	adds	r3, #0
 80053d4:	60bb      	str	r3, [r7, #8]

	xbeeSerial_getBuffer(rxBuffer);
 80053d6:	68b8      	ldr	r0, [r7, #8]
 80053d8:	f000 f91e 	bl	8005618 <xbeeSerial_getBuffer>
	if(memcmp(rxBuffer, correctBuffer, 3) != 0)
 80053dc:	463b      	mov	r3, r7
 80053de:	2203      	movs	r2, #3
 80053e0:	4619      	mov	r1, r3
 80053e2:	68b8      	ldr	r0, [r7, #8]
 80053e4:	f002 ffc6 	bl	8008374 <memcmp>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <xbee_wait_for_AT_response+0x10a>
	{
		//Response is incorrect
		_resetFrame();
 80053ee:	f000 f8a9 	bl	8005544 <_resetFrame>
		return 2;
 80053f2:	2302      	movs	r3, #2
 80053f4:	e002      	b.n	80053fc <xbee_wait_for_AT_response+0x110>
	}

	_resetFrame();
 80053f6:	f000 f8a5 	bl	8005544 <_resetFrame>
	return 0;
 80053fa:	2300      	movs	r3, #0
 80053fc:	46b5      	mov	sp, r6
}
 80053fe:	4618      	mov	r0, r3
 8005400:	371c      	adds	r7, #28
 8005402:	46bd      	mov	sp, r7
 8005404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005408:	200027c8 	.word	0x200027c8
 800540c:	200027c9 	.word	0x200027c9
 8005410:	20002830 	.word	0x20002830
 8005414:	200027cc 	.word	0x200027cc
 8005418:	0800b1dc 	.word	0x0800b1dc
 800541c:	0800b1f4 	.word	0x0800b1f4
 8005420:	0800b1f8 	.word	0x0800b1f8

08005424 <xbee_byteRcvCallback>:

//Byte receive callback in transparent mode
//User should implement this
__weak void xbee_byteRcvCallback(const uint8_t byte)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	4603      	mov	r3, r0
 800542c:	71fb      	strb	r3, [r7, #7]
	PRINT("%c", byte);
 800542e:	79fb      	ldrb	r3, [r7, #7]
 8005430:	4619      	mov	r1, r3
 8005432:	4806      	ldr	r0, [pc, #24]	; (800544c <xbee_byteRcvCallback+0x28>)
 8005434:	f7ff fd10 	bl	8004e58 <PRINT>
	if(byte == '\r')
 8005438:	79fb      	ldrb	r3, [r7, #7]
 800543a:	2b0d      	cmp	r3, #13
 800543c:	d102      	bne.n	8005444 <xbee_byteRcvCallback+0x20>
		PRINT("\n");
 800543e:	4804      	ldr	r0, [pc, #16]	; (8005450 <xbee_byteRcvCallback+0x2c>)
 8005440:	f7ff fd0a 	bl	8004e58 <PRINT>
}
 8005444:	bf00      	nop
 8005446:	3708      	adds	r7, #8
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	0800b1fc 	.word	0x0800b1fc
 8005450:	0800b200 	.word	0x0800b200

08005454 <xbee_sendFrame>:

void xbee_sendFrame(const genericFrame_t frame)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	463b      	mov	r3, r7
 800545c:	e883 0003 	stmia.w	r3, {r0, r1}
	FifoPush(&frameFifo, &frame);
 8005460:	463b      	mov	r3, r7
 8005462:	4619      	mov	r1, r3
 8005464:	4803      	ldr	r0, [pc, #12]	; (8005474 <xbee_sendFrame+0x20>)
 8005466:	f7ff fd65 	bl	8004f34 <FifoPush>
}
 800546a:	bf00      	nop
 800546c:	3708      	adds	r7, #8
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	20002834 	.word	0x20002834

08005478 <_EnterCmdMode>:


//Enter command mode function.
//Return 0 if OK, 1 else
uint8_t _EnterCmdMode(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
	uint8_t ret = 1;
 800547e:	2301      	movs	r3, #1
 8005480:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[3] = "+++";
 8005482:	4a16      	ldr	r2, [pc, #88]	; (80054dc <_EnterCmdMode+0x64>)
 8005484:	1d3b      	adds	r3, r7, #4
 8005486:	6812      	ldr	r2, [r2, #0]
 8005488:	4611      	mov	r1, r2
 800548a:	8019      	strh	r1, [r3, #0]
 800548c:	3302      	adds	r3, #2
 800548e:	0c12      	lsrs	r2, r2, #16
 8005490:	701a      	strb	r2, [r3, #0]

	//We need to set CmdMode in order for callback to work
	//Variable is reset later if fail
	isCmdMode = 1;
 8005492:	4b13      	ldr	r3, [pc, #76]	; (80054e0 <_EnterCmdMode+0x68>)
 8005494:	2201      	movs	r2, #1
 8005496:	701a      	strb	r2, [r3, #0]
	enteringCmdMode = 1;
 8005498:	4b12      	ldr	r3, [pc, #72]	; (80054e4 <_EnterCmdMode+0x6c>)
 800549a:	2201      	movs	r2, #1
 800549c:	701a      	strb	r2, [r3, #0]

	xbeeSerial_Transmit(cmd, 3);
 800549e:	1d3b      	adds	r3, r7, #4
 80054a0:	2103      	movs	r1, #3
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 f922 	bl	80056ec <xbeeSerial_Transmit>
	ret = xbee_wait_for_AT_response();
 80054a8:	f7ff ff20 	bl	80052ec <xbee_wait_for_AT_response>
 80054ac:	4603      	mov	r3, r0
 80054ae:	71fb      	strb	r3, [r7, #7]
	_processStatus(ret);
 80054b0:	79fb      	ldrb	r3, [r7, #7]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 f86e 	bl	8005594 <_processStatus>
	if(ret != 0)
 80054b8:	79fb      	ldrb	r3, [r7, #7]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d003      	beq.n	80054c6 <_EnterCmdMode+0x4e>
		isCmdMode = 0;
 80054be:	4b08      	ldr	r3, [pc, #32]	; (80054e0 <_EnterCmdMode+0x68>)
 80054c0:	2200      	movs	r2, #0
 80054c2:	701a      	strb	r2, [r3, #0]
 80054c4:	e002      	b.n	80054cc <_EnterCmdMode+0x54>
	else
		PRINT("  - CMD MODE\n");
 80054c6:	4808      	ldr	r0, [pc, #32]	; (80054e8 <_EnterCmdMode+0x70>)
 80054c8:	f7ff fcc6 	bl	8004e58 <PRINT>

	enteringCmdMode = 0;
 80054cc:	4b05      	ldr	r3, [pc, #20]	; (80054e4 <_EnterCmdMode+0x6c>)
 80054ce:	2200      	movs	r2, #0
 80054d0:	701a      	strb	r2, [r3, #0]

	return ret;
 80054d2:	79fb      	ldrb	r3, [r7, #7]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3708      	adds	r7, #8
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	0800b214 	.word	0x0800b214
 80054e0:	200027c8 	.word	0x200027c8
 80054e4:	200027c9 	.word	0x200027c9
 80054e8:	0800b204 	.word	0x0800b204

080054ec <_ExitCmdMode>:

uint8_t _ExitCmdMode(void)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
	uint8_t ret = 1;
 80054f2:	2301      	movs	r3, #1
 80054f4:	71fb      	strb	r3, [r7, #7]
	
	isCmdMode = 1;
 80054f6:	4b0f      	ldr	r3, [pc, #60]	; (8005534 <_ExitCmdMode+0x48>)
 80054f8:	2201      	movs	r2, #1
 80054fa:	701a      	strb	r2, [r3, #0]

	xbee_send_at_command("CN", "");
 80054fc:	490e      	ldr	r1, [pc, #56]	; (8005538 <_ExitCmdMode+0x4c>)
 80054fe:	480f      	ldr	r0, [pc, #60]	; (800553c <_ExitCmdMode+0x50>)
 8005500:	f7ff fe7a 	bl	80051f8 <xbee_send_at_command>
	ret = xbee_wait_for_AT_response();
 8005504:	f7ff fef2 	bl	80052ec <xbee_wait_for_AT_response>
 8005508:	4603      	mov	r3, r0
 800550a:	71fb      	strb	r3, [r7, #7]
	_processStatus(ret);
 800550c:	79fb      	ldrb	r3, [r7, #7]
 800550e:	4618      	mov	r0, r3
 8005510:	f000 f840 	bl	8005594 <_processStatus>
	if(ret == 0)
 8005514:	79fb      	ldrb	r3, [r7, #7]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d107      	bne.n	800552a <_ExitCmdMode+0x3e>
	{
		ret = 0;
 800551a:	2300      	movs	r3, #0
 800551c:	71fb      	strb	r3, [r7, #7]
		isCmdMode = 0;
 800551e:	4b05      	ldr	r3, [pc, #20]	; (8005534 <_ExitCmdMode+0x48>)
 8005520:	2200      	movs	r2, #0
 8005522:	701a      	strb	r2, [r3, #0]
		PRINT("  - TRANSPARENT MODE\n");
 8005524:	4806      	ldr	r0, [pc, #24]	; (8005540 <_ExitCmdMode+0x54>)
 8005526:	f7ff fc97 	bl	8004e58 <PRINT>
	}

	return ret;
 800552a:	79fb      	ldrb	r3, [r7, #7]
}
 800552c:	4618      	mov	r0, r3
 800552e:	3708      	adds	r7, #8
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	200027c8 	.word	0x200027c8
 8005538:	0800b218 	.word	0x0800b218
 800553c:	0800b21c 	.word	0x0800b21c
 8005540:	0800b220 	.word	0x0800b220

08005544 <_resetFrame>:

void _resetFrame(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0
	memset(_frame, 0, TX_FRAME_SIZE);
 8005548:	2264      	movs	r2, #100	; 0x64
 800554a:	2100      	movs	r1, #0
 800554c:	4803      	ldr	r0, [pc, #12]	; (800555c <_resetFrame+0x18>)
 800554e:	f002 ff2f 	bl	80083b0 <memset>
	_size = 0;
 8005552:	4b03      	ldr	r3, [pc, #12]	; (8005560 <_resetFrame+0x1c>)
 8005554:	2200      	movs	r2, #0
 8005556:	601a      	str	r2, [r3, #0]
}
 8005558:	bf00      	nop
 800555a:	bd80      	pop	{r7, pc}
 800555c:	200027cc 	.word	0x200027cc
 8005560:	20002830 	.word	0x20002830

08005564 <_allocateFrame>:
//Comme on rempli le buffer de données variable,
//permet de checker que le buffer n'overflow pas.
//Return 1 if _frame overflow
//		 0 else
uint8_t _allocateFrame(uint32_t nbBytes)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 800556c:	2300      	movs	r3, #0
 800556e:	73fb      	strb	r3, [r7, #15]
	if((_size+nbBytes) > TX_FRAME_SIZE) //check size
 8005570:	4b07      	ldr	r3, [pc, #28]	; (8005590 <_allocateFrame+0x2c>)
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4413      	add	r3, r2
 8005578:	2b64      	cmp	r3, #100	; 0x64
 800557a:	d903      	bls.n	8005584 <_allocateFrame+0x20>
	{
		//buffer overflow, erase _frame and return
		_resetFrame();
 800557c:	f7ff ffe2 	bl	8005544 <_resetFrame>
		ret = 1;
 8005580:	2301      	movs	r3, #1
 8005582:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8005584:	7bfb      	ldrb	r3, [r7, #15]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	20002830 	.word	0x20002830

08005594 <_processStatus>:

void _processStatus(uint8_t status)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	4603      	mov	r3, r0
 800559c:	71fb      	strb	r3, [r7, #7]
	switch(status)
 800559e:	79fb      	ldrb	r3, [r7, #7]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d002      	beq.n	80055aa <_processStatus+0x16>
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d008      	beq.n	80055ba <_processStatus+0x26>
 80055a8:	e003      	b.n	80055b2 <_processStatus+0x1e>
	{
	case 0:
		PRINT("done\n\n");
 80055aa:	4808      	ldr	r0, [pc, #32]	; (80055cc <_processStatus+0x38>)
 80055ac:	f7ff fc54 	bl	8004e58 <PRINT>
		break;
 80055b0:	e007      	b.n	80055c2 <_processStatus+0x2e>

	default:
	case 1:
		PRINT("/!\\ Timeout, communication failed!\n");
 80055b2:	4807      	ldr	r0, [pc, #28]	; (80055d0 <_processStatus+0x3c>)
 80055b4:	f7ff fc50 	bl	8004e58 <PRINT>
		break;
 80055b8:	e003      	b.n	80055c2 <_processStatus+0x2e>

	case 2:
		PRINT("/!\\ Bad response, communication failed!\n");
 80055ba:	4806      	ldr	r0, [pc, #24]	; (80055d4 <_processStatus+0x40>)
 80055bc:	f7ff fc4c 	bl	8004e58 <PRINT>
		break;
 80055c0:	bf00      	nop
	}
}
 80055c2:	bf00      	nop
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	0800b238 	.word	0x0800b238
 80055d0:	0800b240 	.word	0x0800b240
 80055d4:	0800b264 	.word	0x0800b264

080055d8 <xbeeSerial_Init>:

extern uint8_t isCmdMode;	//Boolean, is command mode active. Global variable
extern uint8_t enteringCmdMode;

void xbeeSerial_Init(UART_HandleTypeDef* huart)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
	uart = huart;
 80055e0:	4a09      	ldr	r2, [pc, #36]	; (8005608 <xbeeSerial_Init+0x30>)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6013      	str	r3, [r2, #0]
	head = tail = rxByte = 0;
 80055e6:	4b09      	ldr	r3, [pc, #36]	; (800560c <xbeeSerial_Init+0x34>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	701a      	strb	r2, [r3, #0]
 80055ec:	4b08      	ldr	r3, [pc, #32]	; (8005610 <xbeeSerial_Init+0x38>)
 80055ee:	2200      	movs	r2, #0
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	4b07      	ldr	r3, [pc, #28]	; (8005610 <xbeeSerial_Init+0x38>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a07      	ldr	r2, [pc, #28]	; (8005614 <xbeeSerial_Init+0x3c>)
 80055f8:	6013      	str	r3, [r2, #0]

	_ReceiveStart();
 80055fa:	f000 f897 	bl	800572c <_ReceiveStart>
}
 80055fe:	bf00      	nop
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	20002844 	.word	0x20002844
 800560c:	20002848 	.word	0x20002848
 8005610:	200028b4 	.word	0x200028b4
 8005614:	200028b0 	.word	0x200028b0

08005618 <xbeeSerial_getBuffer>:

/*
 * Copy received buffer to destination
 */
void xbeeSerial_getBuffer(uint8_t* destination)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
	int32_t msgSize;
	if(head < tail)
 8005620:	4b1e      	ldr	r3, [pc, #120]	; (800569c <xbeeSerial_getBuffer+0x84>)
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	4b1e      	ldr	r3, [pc, #120]	; (80056a0 <xbeeSerial_getBuffer+0x88>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	429a      	cmp	r2, r3
 800562a:	d21f      	bcs.n	800566c <xbeeSerial_getBuffer+0x54>
	{
		//message is splitted in buffer, copy in two time
		msgSize = RING_BUFFER_SIZE - tail + head;
 800562c:	4b1b      	ldr	r3, [pc, #108]	; (800569c <xbeeSerial_getBuffer+0x84>)
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	4b1b      	ldr	r3, [pc, #108]	; (80056a0 <xbeeSerial_getBuffer+0x88>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	3364      	adds	r3, #100	; 0x64
 8005638:	60fb      	str	r3, [r7, #12]
		uint8_t halfSize = RING_BUFFER_SIZE - tail;
 800563a:	4b19      	ldr	r3, [pc, #100]	; (80056a0 <xbeeSerial_getBuffer+0x88>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	b2db      	uxtb	r3, r3
 8005640:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8005644:	72fb      	strb	r3, [r7, #11]
		memcpy(destination, &ringBuffer[tail], halfSize);
 8005646:	4b16      	ldr	r3, [pc, #88]	; (80056a0 <xbeeSerial_getBuffer+0x88>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a16      	ldr	r2, [pc, #88]	; (80056a4 <xbeeSerial_getBuffer+0x8c>)
 800564c:	4413      	add	r3, r2
 800564e:	7afa      	ldrb	r2, [r7, #11]
 8005650:	4619      	mov	r1, r3
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f002 fe9e 	bl	8008394 <memcpy>
		memcpy(&destination[halfSize], ringBuffer, head);
 8005658:	7afb      	ldrb	r3, [r7, #11]
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	4413      	add	r3, r2
 800565e:	4a0f      	ldr	r2, [pc, #60]	; (800569c <xbeeSerial_getBuffer+0x84>)
 8005660:	6812      	ldr	r2, [r2, #0]
 8005662:	4910      	ldr	r1, [pc, #64]	; (80056a4 <xbeeSerial_getBuffer+0x8c>)
 8005664:	4618      	mov	r0, r3
 8005666:	f002 fe95 	bl	8008394 <memcpy>
 800566a:	e00e      	b.n	800568a <xbeeSerial_getBuffer+0x72>
	}
	else
	{
		//Message is not splitted, regular copy
		msgSize = head - tail;
 800566c:	4b0b      	ldr	r3, [pc, #44]	; (800569c <xbeeSerial_getBuffer+0x84>)
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	4b0b      	ldr	r3, [pc, #44]	; (80056a0 <xbeeSerial_getBuffer+0x88>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	60fb      	str	r3, [r7, #12]
		memcpy(destination, &ringBuffer[tail], msgSize);
 8005678:	4b09      	ldr	r3, [pc, #36]	; (80056a0 <xbeeSerial_getBuffer+0x88>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a09      	ldr	r2, [pc, #36]	; (80056a4 <xbeeSerial_getBuffer+0x8c>)
 800567e:	4413      	add	r3, r2
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	4619      	mov	r1, r3
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f002 fe85 	bl	8008394 <memcpy>
	}

	//Update index
	tail = head;
 800568a:	4b04      	ldr	r3, [pc, #16]	; (800569c <xbeeSerial_getBuffer+0x84>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a04      	ldr	r2, [pc, #16]	; (80056a0 <xbeeSerial_getBuffer+0x88>)
 8005690:	6013      	str	r3, [r2, #0]
}
 8005692:	bf00      	nop
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	200028b0 	.word	0x200028b0
 80056a0:	200028b4 	.word	0x200028b4
 80056a4:	2000284c 	.word	0x2000284c

080056a8 <xbeeSerial_getBufferSize>:

/*
 * get amount of received bytes
 */
uint32_t xbeeSerial_getBufferSize(void)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
	uint32_t size;
	if(head < tail)
 80056ae:	4b0d      	ldr	r3, [pc, #52]	; (80056e4 <xbeeSerial_getBufferSize+0x3c>)
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	4b0d      	ldr	r3, [pc, #52]	; (80056e8 <xbeeSerial_getBufferSize+0x40>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d207      	bcs.n	80056ca <xbeeSerial_getBufferSize+0x22>
		size = RING_BUFFER_SIZE - tail + head;
 80056ba:	4b0a      	ldr	r3, [pc, #40]	; (80056e4 <xbeeSerial_getBufferSize+0x3c>)
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	4b0a      	ldr	r3, [pc, #40]	; (80056e8 <xbeeSerial_getBufferSize+0x40>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	3364      	adds	r3, #100	; 0x64
 80056c6:	607b      	str	r3, [r7, #4]
 80056c8:	e005      	b.n	80056d6 <xbeeSerial_getBufferSize+0x2e>
	else
		size = head - tail;
 80056ca:	4b06      	ldr	r3, [pc, #24]	; (80056e4 <xbeeSerial_getBufferSize+0x3c>)
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	4b06      	ldr	r3, [pc, #24]	; (80056e8 <xbeeSerial_getBufferSize+0x40>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	607b      	str	r3, [r7, #4]
	return size;
 80056d6:	687b      	ldr	r3, [r7, #4]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	200028b0 	.word	0x200028b0
 80056e8:	200028b4 	.word	0x200028b4

080056ec <xbeeSerial_Transmit>:

/*
 * UART transmit blocking mode
 */
void xbeeSerial_Transmit(const uint8_t* txBuffer, const uint32_t size)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(uart, txBuffer, size, 1000);
 80056f6:	4b06      	ldr	r3, [pc, #24]	; (8005710 <xbeeSerial_Transmit+0x24>)
 80056f8:	6818      	ldr	r0, [r3, #0]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005702:	6879      	ldr	r1, [r7, #4]
 8005704:	f7fd fff2 	bl	80036ec <HAL_UART_Transmit>
}
 8005708:	bf00      	nop
 800570a:	3708      	adds	r7, #8
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	20002844 	.word	0x20002844

08005714 <xbeeSerial_isMessageReceived>:

uint8_t xbeeSerial_isMessageReceived(void)
{
 8005714:	b480      	push	{r7}
 8005716:	af00      	add	r7, sp, #0
	return msgReceived;
 8005718:	4b03      	ldr	r3, [pc, #12]	; (8005728 <xbeeSerial_isMessageReceived+0x14>)
 800571a:	781b      	ldrb	r3, [r3, #0]
}
 800571c:	4618      	mov	r0, r3
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	200028b8 	.word	0x200028b8

0800572c <_ReceiveStart>:

/*** Private functions ***/
void _ReceiveStart(void)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	af00      	add	r7, sp, #0
	head = 0;
 8005730:	4b0b      	ldr	r3, [pc, #44]	; (8005760 <_ReceiveStart+0x34>)
 8005732:	2200      	movs	r2, #0
 8005734:	601a      	str	r2, [r3, #0]
	tail = 0;
 8005736:	4b0b      	ldr	r3, [pc, #44]	; (8005764 <_ReceiveStart+0x38>)
 8005738:	2200      	movs	r2, #0
 800573a:	601a      	str	r2, [r3, #0]
	msgReceived = 0;
 800573c:	4b0a      	ldr	r3, [pc, #40]	; (8005768 <_ReceiveStart+0x3c>)
 800573e:	2200      	movs	r2, #0
 8005740:	701a      	strb	r2, [r3, #0]

	memset(ringBuffer, 0, RING_BUFFER_SIZE);
 8005742:	2264      	movs	r2, #100	; 0x64
 8005744:	2100      	movs	r1, #0
 8005746:	4809      	ldr	r0, [pc, #36]	; (800576c <_ReceiveStart+0x40>)
 8005748:	f002 fe32 	bl	80083b0 <memset>

	HAL_UART_Receive_IT(uart, &rxByte, 1);
 800574c:	4b08      	ldr	r3, [pc, #32]	; (8005770 <_ReceiveStart+0x44>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2201      	movs	r2, #1
 8005752:	4908      	ldr	r1, [pc, #32]	; (8005774 <_ReceiveStart+0x48>)
 8005754:	4618      	mov	r0, r3
 8005756:	f7fe f85d 	bl	8003814 <HAL_UART_Receive_IT>
}
 800575a:	bf00      	nop
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	200028b0 	.word	0x200028b0
 8005764:	200028b4 	.word	0x200028b4
 8005768:	200028b8 	.word	0x200028b8
 800576c:	2000284c 	.word	0x2000284c
 8005770:	20002844 	.word	0x20002844
 8005774:	20002848 	.word	0x20002848

08005778 <xbeeSerial_rxCallback>:


/*** Interrupt routines ***/

void xbeeSerial_rxCallback(void)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	af00      	add	r7, sp, #0
	if(isCmdMode | enteringCmdMode)
 800577c:	4b18      	ldr	r3, [pc, #96]	; (80057e0 <xbeeSerial_rxCallback+0x68>)
 800577e:	781a      	ldrb	r2, [r3, #0]
 8005780:	4b18      	ldr	r3, [pc, #96]	; (80057e4 <xbeeSerial_rxCallback+0x6c>)
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	4313      	orrs	r3, r2
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b00      	cmp	r3, #0
 800578a:	d01a      	beq.n	80057c2 <xbeeSerial_rxCallback+0x4a>
	{
		if(rxByte == 0xD) // rxByte == '\r'
 800578c:	4b16      	ldr	r3, [pc, #88]	; (80057e8 <xbeeSerial_rxCallback+0x70>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	2b0d      	cmp	r3, #13
 8005792:	d102      	bne.n	800579a <xbeeSerial_rxCallback+0x22>
			msgReceived = 1;
 8005794:	4b15      	ldr	r3, [pc, #84]	; (80057ec <xbeeSerial_rxCallback+0x74>)
 8005796:	2201      	movs	r2, #1
 8005798:	701a      	strb	r2, [r3, #0]

		ringBuffer[head] = rxByte;
 800579a:	4b15      	ldr	r3, [pc, #84]	; (80057f0 <xbeeSerial_rxCallback+0x78>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a12      	ldr	r2, [pc, #72]	; (80057e8 <xbeeSerial_rxCallback+0x70>)
 80057a0:	7811      	ldrb	r1, [r2, #0]
 80057a2:	4a14      	ldr	r2, [pc, #80]	; (80057f4 <xbeeSerial_rxCallback+0x7c>)
 80057a4:	54d1      	strb	r1, [r2, r3]
		head = (head+1) % RING_BUFFER_SIZE; //update index
 80057a6:	4b12      	ldr	r3, [pc, #72]	; (80057f0 <xbeeSerial_rxCallback+0x78>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	1c5a      	adds	r2, r3, #1
 80057ac:	4b12      	ldr	r3, [pc, #72]	; (80057f8 <xbeeSerial_rxCallback+0x80>)
 80057ae:	fba3 1302 	umull	r1, r3, r3, r2
 80057b2:	095b      	lsrs	r3, r3, #5
 80057b4:	2164      	movs	r1, #100	; 0x64
 80057b6:	fb01 f303 	mul.w	r3, r1, r3
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	4a0c      	ldr	r2, [pc, #48]	; (80057f0 <xbeeSerial_rxCallback+0x78>)
 80057be:	6013      	str	r3, [r2, #0]
 80057c0:	e004      	b.n	80057cc <xbeeSerial_rxCallback+0x54>
	}
	else
		xbee_byteRcvCallback(rxByte);
 80057c2:	4b09      	ldr	r3, [pc, #36]	; (80057e8 <xbeeSerial_rxCallback+0x70>)
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7ff fe2c 	bl	8005424 <xbee_byteRcvCallback>

	HAL_UART_Receive_IT(uart, &rxByte, 1);
 80057cc:	4b0b      	ldr	r3, [pc, #44]	; (80057fc <xbeeSerial_rxCallback+0x84>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2201      	movs	r2, #1
 80057d2:	4905      	ldr	r1, [pc, #20]	; (80057e8 <xbeeSerial_rxCallback+0x70>)
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7fe f81d 	bl	8003814 <HAL_UART_Receive_IT>
}
 80057da:	bf00      	nop
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	200027c8 	.word	0x200027c8
 80057e4:	200027c9 	.word	0x200027c9
 80057e8:	20002848 	.word	0x20002848
 80057ec:	200028b8 	.word	0x200028b8
 80057f0:	200028b0 	.word	0x200028b0
 80057f4:	2000284c 	.word	0x2000284c
 80057f8:	51eb851f 	.word	0x51eb851f
 80057fc:	20002844 	.word	0x20002844

08005800 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	4603      	mov	r3, r0
 8005808:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800580a:	2300      	movs	r3, #0
 800580c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800580e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005812:	2b84      	cmp	r3, #132	; 0x84
 8005814:	d005      	beq.n	8005822 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005816:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	4413      	add	r3, r2
 800581e:	3303      	adds	r3, #3
 8005820:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005822:	68fb      	ldr	r3, [r7, #12]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005836:	f3ef 8305 	mrs	r3, IPSR
 800583a:	607b      	str	r3, [r7, #4]
  return(result);
 800583c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800583e:	2b00      	cmp	r3, #0
 8005840:	bf14      	ite	ne
 8005842:	2301      	movne	r3, #1
 8005844:	2300      	moveq	r3, #0
 8005846:	b2db      	uxtb	r3, r3
}
 8005848:	4618      	mov	r0, r3
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005858:	f001 f9e8 	bl	8006c2c <vTaskStartScheduler>
  
  return osOK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	bd80      	pop	{r7, pc}

08005862 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005862:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005864:	b089      	sub	sp, #36	; 0x24
 8005866:	af04      	add	r7, sp, #16
 8005868:	6078      	str	r0, [r7, #4]
 800586a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	695b      	ldr	r3, [r3, #20]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d020      	beq.n	80058b6 <osThreadCreate+0x54>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d01c      	beq.n	80058b6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685c      	ldr	r4, [r3, #4]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681d      	ldr	r5, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	691e      	ldr	r6, [r3, #16]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800588e:	4618      	mov	r0, r3
 8005890:	f7ff ffb6 	bl	8005800 <makeFreeRtosPriority>
 8005894:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800589e:	9202      	str	r2, [sp, #8]
 80058a0:	9301      	str	r3, [sp, #4]
 80058a2:	9100      	str	r1, [sp, #0]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	4632      	mov	r2, r6
 80058a8:	4629      	mov	r1, r5
 80058aa:	4620      	mov	r0, r4
 80058ac:	f000 ff50 	bl	8006750 <xTaskCreateStatic>
 80058b0:	4603      	mov	r3, r0
 80058b2:	60fb      	str	r3, [r7, #12]
 80058b4:	e01c      	b.n	80058f0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685c      	ldr	r4, [r3, #4]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058c2:	b29e      	uxth	r6, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7ff ff98 	bl	8005800 <makeFreeRtosPriority>
 80058d0:	4602      	mov	r2, r0
 80058d2:	f107 030c 	add.w	r3, r7, #12
 80058d6:	9301      	str	r3, [sp, #4]
 80058d8:	9200      	str	r2, [sp, #0]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	4632      	mov	r2, r6
 80058de:	4629      	mov	r1, r5
 80058e0:	4620      	mov	r0, r4
 80058e2:	f000 ff92 	bl	800680a <xTaskCreate>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d001      	beq.n	80058f0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80058ec:	2300      	movs	r3, #0
 80058ee:	e000      	b.n	80058f2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80058f0:	68fb      	ldr	r3, [r7, #12]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3714      	adds	r7, #20
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080058fa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b084      	sub	sp, #16
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <osDelay+0x16>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	e000      	b.n	8005912 <osDelay+0x18>
 8005910:	2301      	movs	r3, #1
 8005912:	4618      	mov	r0, r3
 8005914:	f001 f956 	bl	8006bc4 <vTaskDelay>
  
  return osOK;
 8005918:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800591a:	4618      	mov	r0, r3
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b082      	sub	sp, #8
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d007      	beq.n	8005942 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	4619      	mov	r1, r3
 8005938:	2001      	movs	r0, #1
 800593a:	f000 faae 	bl	8005e9a <xQueueCreateMutexStatic>
 800593e:	4603      	mov	r3, r0
 8005940:	e003      	b.n	800594a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005942:	2001      	movs	r0, #1
 8005944:	f000 fa91 	bl	8005e6a <xQueueCreateMutex>
 8005948:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800594a:	4618      	mov	r0, r3
 800594c:	3708      	adds	r7, #8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800595e:	2300      	movs	r3, #0
 8005960:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d101      	bne.n	800596c <osMutexWait+0x18>
    return osErrorParameter;
 8005968:	2380      	movs	r3, #128	; 0x80
 800596a:	e03a      	b.n	80059e2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800596c:	2300      	movs	r3, #0
 800596e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005976:	d103      	bne.n	8005980 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005978:	f04f 33ff 	mov.w	r3, #4294967295
 800597c:	60fb      	str	r3, [r7, #12]
 800597e:	e009      	b.n	8005994 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d006      	beq.n	8005994 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d101      	bne.n	8005994 <osMutexWait+0x40>
      ticks = 1;
 8005990:	2301      	movs	r3, #1
 8005992:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005994:	f7ff ff4c 	bl	8005830 <inHandlerMode>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d017      	beq.n	80059ce <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800599e:	f107 0308 	add.w	r3, r7, #8
 80059a2:	461a      	mov	r2, r3
 80059a4:	2100      	movs	r1, #0
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 fd2a 	bl	8006400 <xQueueReceiveFromISR>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d001      	beq.n	80059b6 <osMutexWait+0x62>
      return osErrorOS;
 80059b2:	23ff      	movs	r3, #255	; 0xff
 80059b4:	e015      	b.n	80059e2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d011      	beq.n	80059e0 <osMutexWait+0x8c>
 80059bc:	4b0b      	ldr	r3, [pc, #44]	; (80059ec <osMutexWait+0x98>)
 80059be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	f3bf 8f6f 	isb	sy
 80059cc:	e008      	b.n	80059e0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80059ce:	68f9      	ldr	r1, [r7, #12]
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 fc09 	bl	80061e8 <xQueueSemaphoreTake>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d001      	beq.n	80059e0 <osMutexWait+0x8c>
    return osErrorOS;
 80059dc:	23ff      	movs	r3, #255	; 0xff
 80059de:	e000      	b.n	80059e2 <osMutexWait+0x8e>
  }
  
  return osOK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	e000ed04 	.word	0xe000ed04

080059f0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80059f8:	2300      	movs	r3, #0
 80059fa:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80059fc:	2300      	movs	r3, #0
 80059fe:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005a00:	f7ff ff16 	bl	8005830 <inHandlerMode>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d016      	beq.n	8005a38 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005a0a:	f107 0308 	add.w	r3, r7, #8
 8005a0e:	4619      	mov	r1, r3
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 fb5b 	bl	80060cc <xQueueGiveFromISR>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d001      	beq.n	8005a20 <osMutexRelease+0x30>
      return osErrorOS;
 8005a1c:	23ff      	movs	r3, #255	; 0xff
 8005a1e:	e017      	b.n	8005a50 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d013      	beq.n	8005a4e <osMutexRelease+0x5e>
 8005a26:	4b0c      	ldr	r3, [pc, #48]	; (8005a58 <osMutexRelease+0x68>)
 8005a28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a2c:	601a      	str	r2, [r3, #0]
 8005a2e:	f3bf 8f4f 	dsb	sy
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	e00a      	b.n	8005a4e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005a38:	2300      	movs	r3, #0
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 fa46 	bl	8005ed0 <xQueueGenericSend>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d001      	beq.n	8005a4e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005a4a:	23ff      	movs	r3, #255	; 0xff
 8005a4c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3710      	adds	r7, #16
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	e000ed04 	.word	0xe000ed04

08005a5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f103 0208 	add.w	r2, r3, #8
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f04f 32ff 	mov.w	r2, #4294967295
 8005a74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f103 0208 	add.w	r2, r3, #8
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f103 0208 	add.w	r2, r3, #8
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005aaa:	bf00      	nop
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b085      	sub	sp, #20
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
 8005abe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	689a      	ldr	r2, [r3, #8]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	1c5a      	adds	r2, r3, #1
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	601a      	str	r2, [r3, #0]
}
 8005af2:	bf00      	nop
 8005af4:	3714      	adds	r7, #20
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005afe:	b480      	push	{r7}
 8005b00:	b085      	sub	sp, #20
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
 8005b06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b14:	d103      	bne.n	8005b1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	e00c      	b.n	8005b38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	3308      	adds	r3, #8
 8005b22:	60fb      	str	r3, [r7, #12]
 8005b24:	e002      	b.n	8005b2c <vListInsert+0x2e>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	60fb      	str	r3, [r7, #12]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d2f6      	bcs.n	8005b26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	683a      	ldr	r2, [r7, #0]
 8005b46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	1c5a      	adds	r2, r3, #1
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	601a      	str	r2, [r3, #0]
}
 8005b64:	bf00      	nop
 8005b66:	3714      	adds	r7, #20
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	6892      	ldr	r2, [r2, #8]
 8005b86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	6852      	ldr	r2, [r2, #4]
 8005b90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d103      	bne.n	8005ba4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689a      	ldr	r2, [r3, #8]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	1e5a      	subs	r2, r3, #1
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3714      	adds	r7, #20
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10a      	bne.n	8005bee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bdc:	f383 8811 	msr	BASEPRI, r3
 8005be0:	f3bf 8f6f 	isb	sy
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005bea:	bf00      	nop
 8005bec:	e7fe      	b.n	8005bec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005bee:	f001 ff81 	bl	8007af4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bfa:	68f9      	ldr	r1, [r7, #12]
 8005bfc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005bfe:	fb01 f303 	mul.w	r3, r1, r3
 8005c02:	441a      	add	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	68f9      	ldr	r1, [r7, #12]
 8005c22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c24:	fb01 f303 	mul.w	r3, r1, r3
 8005c28:	441a      	add	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	22ff      	movs	r2, #255	; 0xff
 8005c32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	22ff      	movs	r2, #255	; 0xff
 8005c3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d114      	bne.n	8005c6e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d01a      	beq.n	8005c82 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	3310      	adds	r3, #16
 8005c50:	4618      	mov	r0, r3
 8005c52:	f001 fa3d 	bl	80070d0 <xTaskRemoveFromEventList>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d012      	beq.n	8005c82 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005c5c:	4b0c      	ldr	r3, [pc, #48]	; (8005c90 <xQueueGenericReset+0xcc>)
 8005c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	f3bf 8f4f 	dsb	sy
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	e009      	b.n	8005c82 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	3310      	adds	r3, #16
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7ff fef2 	bl	8005a5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	3324      	adds	r3, #36	; 0x24
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7ff feed 	bl	8005a5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005c82:	f001 ff67 	bl	8007b54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005c86:	2301      	movs	r3, #1
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	e000ed04 	.word	0xe000ed04

08005c94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b08e      	sub	sp, #56	; 0x38
 8005c98:	af02      	add	r7, sp, #8
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10a      	bne.n	8005cbe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cac:	f383 8811 	msr	BASEPRI, r3
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005cba:	bf00      	nop
 8005cbc:	e7fe      	b.n	8005cbc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10a      	bne.n	8005cda <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc8:	f383 8811 	msr	BASEPRI, r3
 8005ccc:	f3bf 8f6f 	isb	sy
 8005cd0:	f3bf 8f4f 	dsb	sy
 8005cd4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005cd6:	bf00      	nop
 8005cd8:	e7fe      	b.n	8005cd8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d002      	beq.n	8005ce6 <xQueueGenericCreateStatic+0x52>
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <xQueueGenericCreateStatic+0x56>
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e000      	b.n	8005cec <xQueueGenericCreateStatic+0x58>
 8005cea:	2300      	movs	r3, #0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10a      	bne.n	8005d06 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf4:	f383 8811 	msr	BASEPRI, r3
 8005cf8:	f3bf 8f6f 	isb	sy
 8005cfc:	f3bf 8f4f 	dsb	sy
 8005d00:	623b      	str	r3, [r7, #32]
}
 8005d02:	bf00      	nop
 8005d04:	e7fe      	b.n	8005d04 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d102      	bne.n	8005d12 <xQueueGenericCreateStatic+0x7e>
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <xQueueGenericCreateStatic+0x82>
 8005d12:	2301      	movs	r3, #1
 8005d14:	e000      	b.n	8005d18 <xQueueGenericCreateStatic+0x84>
 8005d16:	2300      	movs	r3, #0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d10a      	bne.n	8005d32 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d20:	f383 8811 	msr	BASEPRI, r3
 8005d24:	f3bf 8f6f 	isb	sy
 8005d28:	f3bf 8f4f 	dsb	sy
 8005d2c:	61fb      	str	r3, [r7, #28]
}
 8005d2e:	bf00      	nop
 8005d30:	e7fe      	b.n	8005d30 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005d32:	2348      	movs	r3, #72	; 0x48
 8005d34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	2b48      	cmp	r3, #72	; 0x48
 8005d3a:	d00a      	beq.n	8005d52 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d40:	f383 8811 	msr	BASEPRI, r3
 8005d44:	f3bf 8f6f 	isb	sy
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	61bb      	str	r3, [r7, #24]
}
 8005d4e:	bf00      	nop
 8005d50:	e7fe      	b.n	8005d50 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005d52:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00d      	beq.n	8005d7a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d66:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	68b9      	ldr	r1, [r7, #8]
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f000 f83f 	bl	8005df8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3730      	adds	r7, #48	; 0x30
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b08a      	sub	sp, #40	; 0x28
 8005d88:	af02      	add	r7, sp, #8
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10a      	bne.n	8005dae <xQueueGenericCreate+0x2a>
	__asm volatile
 8005d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9c:	f383 8811 	msr	BASEPRI, r3
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	f3bf 8f4f 	dsb	sy
 8005da8:	613b      	str	r3, [r7, #16]
}
 8005daa:	bf00      	nop
 8005dac:	e7fe      	b.n	8005dac <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	fb02 f303 	mul.w	r3, r2, r3
 8005db6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	3348      	adds	r3, #72	; 0x48
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f001 ffbb 	bl	8007d38 <pvPortMalloc>
 8005dc2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d011      	beq.n	8005dee <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	3348      	adds	r3, #72	; 0x48
 8005dd2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ddc:	79fa      	ldrb	r2, [r7, #7]
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	4613      	mov	r3, r2
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	68b9      	ldr	r1, [r7, #8]
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f000 f805 	bl	8005df8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005dee:	69bb      	ldr	r3, [r7, #24]
	}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3720      	adds	r7, #32
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
 8005e04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d103      	bne.n	8005e14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	601a      	str	r2, [r3, #0]
 8005e12:	e002      	b.n	8005e1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e26:	2101      	movs	r1, #1
 8005e28:	69b8      	ldr	r0, [r7, #24]
 8005e2a:	f7ff fecb 	bl	8005bc4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005e2e:	bf00      	nop
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b082      	sub	sp, #8
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00e      	beq.n	8005e62 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005e56:	2300      	movs	r3, #0
 8005e58:	2200      	movs	r2, #0
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 f837 	bl	8005ed0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005e62:	bf00      	nop
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b086      	sub	sp, #24
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	4603      	mov	r3, r0
 8005e72:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005e74:	2301      	movs	r3, #1
 8005e76:	617b      	str	r3, [r7, #20]
 8005e78:	2300      	movs	r3, #0
 8005e7a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005e7c:	79fb      	ldrb	r3, [r7, #7]
 8005e7e:	461a      	mov	r2, r3
 8005e80:	6939      	ldr	r1, [r7, #16]
 8005e82:	6978      	ldr	r0, [r7, #20]
 8005e84:	f7ff ff7e 	bl	8005d84 <xQueueGenericCreate>
 8005e88:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f7ff ffd3 	bl	8005e36 <prvInitialiseMutex>

		return xNewQueue;
 8005e90:	68fb      	ldr	r3, [r7, #12]
	}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3718      	adds	r7, #24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b088      	sub	sp, #32
 8005e9e:	af02      	add	r7, sp, #8
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	6039      	str	r1, [r7, #0]
 8005ea4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	617b      	str	r3, [r7, #20]
 8005eaa:	2300      	movs	r3, #0
 8005eac:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005eae:	79fb      	ldrb	r3, [r7, #7]
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	6939      	ldr	r1, [r7, #16]
 8005eb8:	6978      	ldr	r0, [r7, #20]
 8005eba:	f7ff feeb 	bl	8005c94 <xQueueGenericCreateStatic>
 8005ebe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f7ff ffb8 	bl	8005e36 <prvInitialiseMutex>

		return xNewQueue;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
	}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3718      	adds	r7, #24
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b08e      	sub	sp, #56	; 0x38
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
 8005edc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10a      	bne.n	8005f02 <xQueueGenericSend+0x32>
	__asm volatile
 8005eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef0:	f383 8811 	msr	BASEPRI, r3
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005efe:	bf00      	nop
 8005f00:	e7fe      	b.n	8005f00 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d103      	bne.n	8005f10 <xQueueGenericSend+0x40>
 8005f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d101      	bne.n	8005f14 <xQueueGenericSend+0x44>
 8005f10:	2301      	movs	r3, #1
 8005f12:	e000      	b.n	8005f16 <xQueueGenericSend+0x46>
 8005f14:	2300      	movs	r3, #0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10a      	bne.n	8005f30 <xQueueGenericSend+0x60>
	__asm volatile
 8005f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1e:	f383 8811 	msr	BASEPRI, r3
 8005f22:	f3bf 8f6f 	isb	sy
 8005f26:	f3bf 8f4f 	dsb	sy
 8005f2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f2c:	bf00      	nop
 8005f2e:	e7fe      	b.n	8005f2e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d103      	bne.n	8005f3e <xQueueGenericSend+0x6e>
 8005f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d101      	bne.n	8005f42 <xQueueGenericSend+0x72>
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e000      	b.n	8005f44 <xQueueGenericSend+0x74>
 8005f42:	2300      	movs	r3, #0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10a      	bne.n	8005f5e <xQueueGenericSend+0x8e>
	__asm volatile
 8005f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4c:	f383 8811 	msr	BASEPRI, r3
 8005f50:	f3bf 8f6f 	isb	sy
 8005f54:	f3bf 8f4f 	dsb	sy
 8005f58:	623b      	str	r3, [r7, #32]
}
 8005f5a:	bf00      	nop
 8005f5c:	e7fe      	b.n	8005f5c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f5e:	f001 fa77 	bl	8007450 <xTaskGetSchedulerState>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d102      	bne.n	8005f6e <xQueueGenericSend+0x9e>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <xQueueGenericSend+0xa2>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e000      	b.n	8005f74 <xQueueGenericSend+0xa4>
 8005f72:	2300      	movs	r3, #0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10a      	bne.n	8005f8e <xQueueGenericSend+0xbe>
	__asm volatile
 8005f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7c:	f383 8811 	msr	BASEPRI, r3
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	61fb      	str	r3, [r7, #28]
}
 8005f8a:	bf00      	nop
 8005f8c:	e7fe      	b.n	8005f8c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f8e:	f001 fdb1 	bl	8007af4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d302      	bcc.n	8005fa4 <xQueueGenericSend+0xd4>
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d129      	bne.n	8005ff8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	68b9      	ldr	r1, [r7, #8]
 8005fa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005faa:	f000 fac1 	bl	8006530 <prvCopyDataToQueue>
 8005fae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d010      	beq.n	8005fda <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fba:	3324      	adds	r3, #36	; 0x24
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f001 f887 	bl	80070d0 <xTaskRemoveFromEventList>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d013      	beq.n	8005ff0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005fc8:	4b3f      	ldr	r3, [pc, #252]	; (80060c8 <xQueueGenericSend+0x1f8>)
 8005fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fce:	601a      	str	r2, [r3, #0]
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	f3bf 8f6f 	isb	sy
 8005fd8:	e00a      	b.n	8005ff0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d007      	beq.n	8005ff0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005fe0:	4b39      	ldr	r3, [pc, #228]	; (80060c8 <xQueueGenericSend+0x1f8>)
 8005fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fe6:	601a      	str	r2, [r3, #0]
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005ff0:	f001 fdb0 	bl	8007b54 <vPortExitCritical>
				return pdPASS;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e063      	b.n	80060c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d103      	bne.n	8006006 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ffe:	f001 fda9 	bl	8007b54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006002:	2300      	movs	r3, #0
 8006004:	e05c      	b.n	80060c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006008:	2b00      	cmp	r3, #0
 800600a:	d106      	bne.n	800601a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800600c:	f107 0314 	add.w	r3, r7, #20
 8006010:	4618      	mov	r0, r3
 8006012:	f001 f8bf 	bl	8007194 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006016:	2301      	movs	r3, #1
 8006018:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800601a:	f001 fd9b 	bl	8007b54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800601e:	f000 fe6f 	bl	8006d00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006022:	f001 fd67 	bl	8007af4 <vPortEnterCritical>
 8006026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006028:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800602c:	b25b      	sxtb	r3, r3
 800602e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006032:	d103      	bne.n	800603c <xQueueGenericSend+0x16c>
 8006034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006036:	2200      	movs	r2, #0
 8006038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800603c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006042:	b25b      	sxtb	r3, r3
 8006044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006048:	d103      	bne.n	8006052 <xQueueGenericSend+0x182>
 800604a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006052:	f001 fd7f 	bl	8007b54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006056:	1d3a      	adds	r2, r7, #4
 8006058:	f107 0314 	add.w	r3, r7, #20
 800605c:	4611      	mov	r1, r2
 800605e:	4618      	mov	r0, r3
 8006060:	f001 f8ae 	bl	80071c0 <xTaskCheckForTimeOut>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d124      	bne.n	80060b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800606a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800606c:	f000 fb58 	bl	8006720 <prvIsQueueFull>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d018      	beq.n	80060a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006078:	3310      	adds	r3, #16
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	4611      	mov	r1, r2
 800607e:	4618      	mov	r0, r3
 8006080:	f001 f802 	bl	8007088 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006084:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006086:	f000 fae3 	bl	8006650 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800608a:	f000 fe47 	bl	8006d1c <xTaskResumeAll>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	f47f af7c 	bne.w	8005f8e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006096:	4b0c      	ldr	r3, [pc, #48]	; (80060c8 <xQueueGenericSend+0x1f8>)
 8006098:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800609c:	601a      	str	r2, [r3, #0]
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	e772      	b.n	8005f8e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80060a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060aa:	f000 fad1 	bl	8006650 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060ae:	f000 fe35 	bl	8006d1c <xTaskResumeAll>
 80060b2:	e76c      	b.n	8005f8e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80060b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060b6:	f000 facb 	bl	8006650 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060ba:	f000 fe2f 	bl	8006d1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80060be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3738      	adds	r7, #56	; 0x38
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	e000ed04 	.word	0xe000ed04

080060cc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b08e      	sub	sp, #56	; 0x38
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80060da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10a      	bne.n	80060f6 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	623b      	str	r3, [r7, #32]
}
 80060f2:	bf00      	nop
 80060f4:	e7fe      	b.n	80060f4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80060f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00a      	beq.n	8006114 <xQueueGiveFromISR+0x48>
	__asm volatile
 80060fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006102:	f383 8811 	msr	BASEPRI, r3
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	61fb      	str	r3, [r7, #28]
}
 8006110:	bf00      	nop
 8006112:	e7fe      	b.n	8006112 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d103      	bne.n	8006124 <xQueueGiveFromISR+0x58>
 800611c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d101      	bne.n	8006128 <xQueueGiveFromISR+0x5c>
 8006124:	2301      	movs	r3, #1
 8006126:	e000      	b.n	800612a <xQueueGiveFromISR+0x5e>
 8006128:	2300      	movs	r3, #0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10a      	bne.n	8006144 <xQueueGiveFromISR+0x78>
	__asm volatile
 800612e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006132:	f383 8811 	msr	BASEPRI, r3
 8006136:	f3bf 8f6f 	isb	sy
 800613a:	f3bf 8f4f 	dsb	sy
 800613e:	61bb      	str	r3, [r7, #24]
}
 8006140:	bf00      	nop
 8006142:	e7fe      	b.n	8006142 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006144:	f001 fdb8 	bl	8007cb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006148:	f3ef 8211 	mrs	r2, BASEPRI
 800614c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	617a      	str	r2, [r7, #20]
 800615e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006160:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006162:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006168:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800616a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800616e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006170:	429a      	cmp	r2, r3
 8006172:	d22b      	bcs.n	80061cc <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006176:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800617a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800617e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006180:	1c5a      	adds	r2, r3, #1
 8006182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006184:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006186:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800618a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800618e:	d112      	bne.n	80061b6 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006194:	2b00      	cmp	r3, #0
 8006196:	d016      	beq.n	80061c6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619a:	3324      	adds	r3, #36	; 0x24
 800619c:	4618      	mov	r0, r3
 800619e:	f000 ff97 	bl	80070d0 <xTaskRemoveFromEventList>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00e      	beq.n	80061c6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00b      	beq.n	80061c6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	2201      	movs	r2, #1
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	e007      	b.n	80061c6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80061b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061ba:	3301      	adds	r3, #1
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	b25a      	sxtb	r2, r3
 80061c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80061c6:	2301      	movs	r3, #1
 80061c8:	637b      	str	r3, [r7, #52]	; 0x34
 80061ca:	e001      	b.n	80061d0 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80061cc:	2300      	movs	r3, #0
 80061ce:	637b      	str	r3, [r7, #52]	; 0x34
 80061d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80061da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80061dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3738      	adds	r7, #56	; 0x38
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
	...

080061e8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b08e      	sub	sp, #56	; 0x38
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80061f2:	2300      	movs	r3, #0
 80061f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80061fa:	2300      	movs	r3, #0
 80061fc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80061fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10a      	bne.n	800621a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006208:	f383 8811 	msr	BASEPRI, r3
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	623b      	str	r3, [r7, #32]
}
 8006216:	bf00      	nop
 8006218:	e7fe      	b.n	8006218 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800621a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00a      	beq.n	8006238 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	61fb      	str	r3, [r7, #28]
}
 8006234:	bf00      	nop
 8006236:	e7fe      	b.n	8006236 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006238:	f001 f90a 	bl	8007450 <xTaskGetSchedulerState>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d102      	bne.n	8006248 <xQueueSemaphoreTake+0x60>
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <xQueueSemaphoreTake+0x64>
 8006248:	2301      	movs	r3, #1
 800624a:	e000      	b.n	800624e <xQueueSemaphoreTake+0x66>
 800624c:	2300      	movs	r3, #0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10a      	bne.n	8006268 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006256:	f383 8811 	msr	BASEPRI, r3
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	61bb      	str	r3, [r7, #24]
}
 8006264:	bf00      	nop
 8006266:	e7fe      	b.n	8006266 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006268:	f001 fc44 	bl	8007af4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800626c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006270:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006274:	2b00      	cmp	r3, #0
 8006276:	d024      	beq.n	80062c2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627a:	1e5a      	subs	r2, r3, #1
 800627c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d104      	bne.n	8006292 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006288:	f001 fa8a 	bl	80077a0 <pvTaskIncrementMutexHeldCount>
 800628c:	4602      	mov	r2, r0
 800628e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006290:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00f      	beq.n	80062ba <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800629a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629c:	3310      	adds	r3, #16
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 ff16 	bl	80070d0 <xTaskRemoveFromEventList>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d007      	beq.n	80062ba <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80062aa:	4b54      	ldr	r3, [pc, #336]	; (80063fc <xQueueSemaphoreTake+0x214>)
 80062ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062b0:	601a      	str	r2, [r3, #0]
 80062b2:	f3bf 8f4f 	dsb	sy
 80062b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80062ba:	f001 fc4b 	bl	8007b54 <vPortExitCritical>
				return pdPASS;
 80062be:	2301      	movs	r3, #1
 80062c0:	e097      	b.n	80063f2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d111      	bne.n	80062ec <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80062c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00a      	beq.n	80062e4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80062ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	617b      	str	r3, [r7, #20]
}
 80062e0:	bf00      	nop
 80062e2:	e7fe      	b.n	80062e2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80062e4:	f001 fc36 	bl	8007b54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80062e8:	2300      	movs	r3, #0
 80062ea:	e082      	b.n	80063f2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d106      	bne.n	8006300 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062f2:	f107 030c 	add.w	r3, r7, #12
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 ff4c 	bl	8007194 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062fc:	2301      	movs	r3, #1
 80062fe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006300:	f001 fc28 	bl	8007b54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006304:	f000 fcfc 	bl	8006d00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006308:	f001 fbf4 	bl	8007af4 <vPortEnterCritical>
 800630c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006312:	b25b      	sxtb	r3, r3
 8006314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006318:	d103      	bne.n	8006322 <xQueueSemaphoreTake+0x13a>
 800631a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631c:	2200      	movs	r2, #0
 800631e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006324:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006328:	b25b      	sxtb	r3, r3
 800632a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632e:	d103      	bne.n	8006338 <xQueueSemaphoreTake+0x150>
 8006330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006332:	2200      	movs	r2, #0
 8006334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006338:	f001 fc0c 	bl	8007b54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800633c:	463a      	mov	r2, r7
 800633e:	f107 030c 	add.w	r3, r7, #12
 8006342:	4611      	mov	r1, r2
 8006344:	4618      	mov	r0, r3
 8006346:	f000 ff3b 	bl	80071c0 <xTaskCheckForTimeOut>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d132      	bne.n	80063b6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006350:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006352:	f000 f9cf 	bl	80066f4 <prvIsQueueEmpty>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d026      	beq.n	80063aa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800635c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d109      	bne.n	8006378 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006364:	f001 fbc6 	bl	8007af4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	4618      	mov	r0, r3
 800636e:	f001 f88d 	bl	800748c <xTaskPriorityInherit>
 8006372:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006374:	f001 fbee 	bl	8007b54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637a:	3324      	adds	r3, #36	; 0x24
 800637c:	683a      	ldr	r2, [r7, #0]
 800637e:	4611      	mov	r1, r2
 8006380:	4618      	mov	r0, r3
 8006382:	f000 fe81 	bl	8007088 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006386:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006388:	f000 f962 	bl	8006650 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800638c:	f000 fcc6 	bl	8006d1c <xTaskResumeAll>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	f47f af68 	bne.w	8006268 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006398:	4b18      	ldr	r3, [pc, #96]	; (80063fc <xQueueSemaphoreTake+0x214>)
 800639a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800639e:	601a      	str	r2, [r3, #0]
 80063a0:	f3bf 8f4f 	dsb	sy
 80063a4:	f3bf 8f6f 	isb	sy
 80063a8:	e75e      	b.n	8006268 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80063aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063ac:	f000 f950 	bl	8006650 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063b0:	f000 fcb4 	bl	8006d1c <xTaskResumeAll>
 80063b4:	e758      	b.n	8006268 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80063b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063b8:	f000 f94a 	bl	8006650 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063bc:	f000 fcae 	bl	8006d1c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063c2:	f000 f997 	bl	80066f4 <prvIsQueueEmpty>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f43f af4d 	beq.w	8006268 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80063ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00d      	beq.n	80063f0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80063d4:	f001 fb8e 	bl	8007af4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80063d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063da:	f000 f891 	bl	8006500 <prvGetDisinheritPriorityAfterTimeout>
 80063de:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80063e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063e6:	4618      	mov	r0, r3
 80063e8:	f001 f94c 	bl	8007684 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80063ec:	f001 fbb2 	bl	8007b54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80063f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3738      	adds	r7, #56	; 0x38
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	e000ed04 	.word	0xe000ed04

08006400 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b08e      	sub	sp, #56	; 0x38
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10a      	bne.n	800642c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641a:	f383 8811 	msr	BASEPRI, r3
 800641e:	f3bf 8f6f 	isb	sy
 8006422:	f3bf 8f4f 	dsb	sy
 8006426:	623b      	str	r3, [r7, #32]
}
 8006428:	bf00      	nop
 800642a:	e7fe      	b.n	800642a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d103      	bne.n	800643a <xQueueReceiveFromISR+0x3a>
 8006432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <xQueueReceiveFromISR+0x3e>
 800643a:	2301      	movs	r3, #1
 800643c:	e000      	b.n	8006440 <xQueueReceiveFromISR+0x40>
 800643e:	2300      	movs	r3, #0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10a      	bne.n	800645a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006448:	f383 8811 	msr	BASEPRI, r3
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	f3bf 8f4f 	dsb	sy
 8006454:	61fb      	str	r3, [r7, #28]
}
 8006456:	bf00      	nop
 8006458:	e7fe      	b.n	8006458 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800645a:	f001 fc2d 	bl	8007cb8 <vPortValidateInterruptPriority>
	__asm volatile
 800645e:	f3ef 8211 	mrs	r2, BASEPRI
 8006462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006466:	f383 8811 	msr	BASEPRI, r3
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	61ba      	str	r2, [r7, #24]
 8006474:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006476:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006478:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800647a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006482:	2b00      	cmp	r3, #0
 8006484:	d02f      	beq.n	80064e6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006488:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800648c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006490:	68b9      	ldr	r1, [r7, #8]
 8006492:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006494:	f000 f8b6 	bl	8006604 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649a:	1e5a      	subs	r2, r3, #1
 800649c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80064a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80064a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a8:	d112      	bne.n	80064d0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d016      	beq.n	80064e0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b4:	3310      	adds	r3, #16
 80064b6:	4618      	mov	r0, r3
 80064b8:	f000 fe0a 	bl	80070d0 <xTaskRemoveFromEventList>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00e      	beq.n	80064e0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00b      	beq.n	80064e0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	e007      	b.n	80064e0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80064d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064d4:	3301      	adds	r3, #1
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	b25a      	sxtb	r2, r3
 80064da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80064e0:	2301      	movs	r3, #1
 80064e2:	637b      	str	r3, [r7, #52]	; 0x34
 80064e4:	e001      	b.n	80064ea <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80064e6:	2300      	movs	r3, #0
 80064e8:	637b      	str	r3, [r7, #52]	; 0x34
 80064ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	f383 8811 	msr	BASEPRI, r3
}
 80064f4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80064f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3738      	adds	r7, #56	; 0x38
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650c:	2b00      	cmp	r3, #0
 800650e:	d006      	beq.n	800651e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f1c3 0307 	rsb	r3, r3, #7
 800651a:	60fb      	str	r3, [r7, #12]
 800651c:	e001      	b.n	8006522 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800651e:	2300      	movs	r3, #0
 8006520:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006522:	68fb      	ldr	r3, [r7, #12]
	}
 8006524:	4618      	mov	r0, r3
 8006526:	3714      	adds	r7, #20
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800653c:	2300      	movs	r3, #0
 800653e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006544:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10d      	bne.n	800656a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d14d      	bne.n	80065f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	4618      	mov	r0, r3
 800655c:	f001 f80c 	bl	8007578 <xTaskPriorityDisinherit>
 8006560:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	609a      	str	r2, [r3, #8]
 8006568:	e043      	b.n	80065f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d119      	bne.n	80065a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6858      	ldr	r0, [r3, #4]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006578:	461a      	mov	r2, r3
 800657a:	68b9      	ldr	r1, [r7, #8]
 800657c:	f001 ff0a 	bl	8008394 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006588:	441a      	add	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	685a      	ldr	r2, [r3, #4]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	429a      	cmp	r2, r3
 8006598:	d32b      	bcc.n	80065f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	605a      	str	r2, [r3, #4]
 80065a2:	e026      	b.n	80065f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	68d8      	ldr	r0, [r3, #12]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ac:	461a      	mov	r2, r3
 80065ae:	68b9      	ldr	r1, [r7, #8]
 80065b0:	f001 fef0 	bl	8008394 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	68da      	ldr	r2, [r3, #12]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065bc:	425b      	negs	r3, r3
 80065be:	441a      	add	r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	68da      	ldr	r2, [r3, #12]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d207      	bcs.n	80065e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	689a      	ldr	r2, [r3, #8]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d8:	425b      	negs	r3, r3
 80065da:	441a      	add	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d105      	bne.n	80065f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d002      	beq.n	80065f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	3b01      	subs	r3, #1
 80065f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	1c5a      	adds	r2, r3, #1
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80065fa:	697b      	ldr	r3, [r7, #20]
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3718      	adds	r7, #24
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006612:	2b00      	cmp	r3, #0
 8006614:	d018      	beq.n	8006648 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68da      	ldr	r2, [r3, #12]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661e:	441a      	add	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	68da      	ldr	r2, [r3, #12]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	429a      	cmp	r2, r3
 800662e:	d303      	bcc.n	8006638 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	68d9      	ldr	r1, [r3, #12]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006640:	461a      	mov	r2, r3
 8006642:	6838      	ldr	r0, [r7, #0]
 8006644:	f001 fea6 	bl	8008394 <memcpy>
	}
}
 8006648:	bf00      	nop
 800664a:	3708      	adds	r7, #8
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006658:	f001 fa4c 	bl	8007af4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006662:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006664:	e011      	b.n	800668a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666a:	2b00      	cmp	r3, #0
 800666c:	d012      	beq.n	8006694 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	3324      	adds	r3, #36	; 0x24
 8006672:	4618      	mov	r0, r3
 8006674:	f000 fd2c 	bl	80070d0 <xTaskRemoveFromEventList>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800667e:	f000 fe01 	bl	8007284 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006682:	7bfb      	ldrb	r3, [r7, #15]
 8006684:	3b01      	subs	r3, #1
 8006686:	b2db      	uxtb	r3, r3
 8006688:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800668a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800668e:	2b00      	cmp	r3, #0
 8006690:	dce9      	bgt.n	8006666 <prvUnlockQueue+0x16>
 8006692:	e000      	b.n	8006696 <prvUnlockQueue+0x46>
					break;
 8006694:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	22ff      	movs	r2, #255	; 0xff
 800669a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800669e:	f001 fa59 	bl	8007b54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80066a2:	f001 fa27 	bl	8007af4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80066ae:	e011      	b.n	80066d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d012      	beq.n	80066de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	3310      	adds	r3, #16
 80066bc:	4618      	mov	r0, r3
 80066be:	f000 fd07 	bl	80070d0 <xTaskRemoveFromEventList>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d001      	beq.n	80066cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80066c8:	f000 fddc 	bl	8007284 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80066cc:	7bbb      	ldrb	r3, [r7, #14]
 80066ce:	3b01      	subs	r3, #1
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80066d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	dce9      	bgt.n	80066b0 <prvUnlockQueue+0x60>
 80066dc:	e000      	b.n	80066e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80066de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	22ff      	movs	r2, #255	; 0xff
 80066e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80066e8:	f001 fa34 	bl	8007b54 <vPortExitCritical>
}
 80066ec:	bf00      	nop
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80066fc:	f001 f9fa 	bl	8007af4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006704:	2b00      	cmp	r3, #0
 8006706:	d102      	bne.n	800670e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006708:	2301      	movs	r3, #1
 800670a:	60fb      	str	r3, [r7, #12]
 800670c:	e001      	b.n	8006712 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800670e:	2300      	movs	r3, #0
 8006710:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006712:	f001 fa1f 	bl	8007b54 <vPortExitCritical>

	return xReturn;
 8006716:	68fb      	ldr	r3, [r7, #12]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006728:	f001 f9e4 	bl	8007af4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006734:	429a      	cmp	r2, r3
 8006736:	d102      	bne.n	800673e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006738:	2301      	movs	r3, #1
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	e001      	b.n	8006742 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800673e:	2300      	movs	r3, #0
 8006740:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006742:	f001 fa07 	bl	8007b54 <vPortExitCritical>

	return xReturn;
 8006746:	68fb      	ldr	r3, [r7, #12]
}
 8006748:	4618      	mov	r0, r3
 800674a:	3710      	adds	r7, #16
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006750:	b580      	push	{r7, lr}
 8006752:	b08e      	sub	sp, #56	; 0x38
 8006754:	af04      	add	r7, sp, #16
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	607a      	str	r2, [r7, #4]
 800675c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800675e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10a      	bne.n	800677a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006768:	f383 8811 	msr	BASEPRI, r3
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	f3bf 8f4f 	dsb	sy
 8006774:	623b      	str	r3, [r7, #32]
}
 8006776:	bf00      	nop
 8006778:	e7fe      	b.n	8006778 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800677a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10a      	bne.n	8006796 <xTaskCreateStatic+0x46>
	__asm volatile
 8006780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	61fb      	str	r3, [r7, #28]
}
 8006792:	bf00      	nop
 8006794:	e7fe      	b.n	8006794 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006796:	23b4      	movs	r3, #180	; 0xb4
 8006798:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	2bb4      	cmp	r3, #180	; 0xb4
 800679e:	d00a      	beq.n	80067b6 <xTaskCreateStatic+0x66>
	__asm volatile
 80067a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a4:	f383 8811 	msr	BASEPRI, r3
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	f3bf 8f4f 	dsb	sy
 80067b0:	61bb      	str	r3, [r7, #24]
}
 80067b2:	bf00      	nop
 80067b4:	e7fe      	b.n	80067b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80067b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80067b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d01e      	beq.n	80067fc <xTaskCreateStatic+0xac>
 80067be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d01b      	beq.n	80067fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80067c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80067c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d0:	2202      	movs	r2, #2
 80067d2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80067d6:	2300      	movs	r3, #0
 80067d8:	9303      	str	r3, [sp, #12]
 80067da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067dc:	9302      	str	r3, [sp, #8]
 80067de:	f107 0314 	add.w	r3, r7, #20
 80067e2:	9301      	str	r3, [sp, #4]
 80067e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e6:	9300      	str	r3, [sp, #0]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	68b9      	ldr	r1, [r7, #8]
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f000 f850 	bl	8006894 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067f6:	f000 f8eb 	bl	80069d0 <prvAddNewTaskToReadyList>
 80067fa:	e001      	b.n	8006800 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80067fc:	2300      	movs	r3, #0
 80067fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006800:	697b      	ldr	r3, [r7, #20]
	}
 8006802:	4618      	mov	r0, r3
 8006804:	3728      	adds	r7, #40	; 0x28
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800680a:	b580      	push	{r7, lr}
 800680c:	b08c      	sub	sp, #48	; 0x30
 800680e:	af04      	add	r7, sp, #16
 8006810:	60f8      	str	r0, [r7, #12]
 8006812:	60b9      	str	r1, [r7, #8]
 8006814:	603b      	str	r3, [r7, #0]
 8006816:	4613      	mov	r3, r2
 8006818:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800681a:	88fb      	ldrh	r3, [r7, #6]
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4618      	mov	r0, r3
 8006820:	f001 fa8a 	bl	8007d38 <pvPortMalloc>
 8006824:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00e      	beq.n	800684a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800682c:	20b4      	movs	r0, #180	; 0xb4
 800682e:	f001 fa83 	bl	8007d38 <pvPortMalloc>
 8006832:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d003      	beq.n	8006842 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	631a      	str	r2, [r3, #48]	; 0x30
 8006840:	e005      	b.n	800684e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006842:	6978      	ldr	r0, [r7, #20]
 8006844:	f001 fb44 	bl	8007ed0 <vPortFree>
 8006848:	e001      	b.n	800684e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800684a:	2300      	movs	r3, #0
 800684c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d017      	beq.n	8006884 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800685c:	88fa      	ldrh	r2, [r7, #6]
 800685e:	2300      	movs	r3, #0
 8006860:	9303      	str	r3, [sp, #12]
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	9302      	str	r3, [sp, #8]
 8006866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006868:	9301      	str	r3, [sp, #4]
 800686a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	68b9      	ldr	r1, [r7, #8]
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f000 f80e 	bl	8006894 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006878:	69f8      	ldr	r0, [r7, #28]
 800687a:	f000 f8a9 	bl	80069d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800687e:	2301      	movs	r3, #1
 8006880:	61bb      	str	r3, [r7, #24]
 8006882:	e002      	b.n	800688a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006884:	f04f 33ff 	mov.w	r3, #4294967295
 8006888:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800688a:	69bb      	ldr	r3, [r7, #24]
	}
 800688c:	4618      	mov	r0, r3
 800688e:	3720      	adds	r7, #32
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b088      	sub	sp, #32
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
 80068a0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80068a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80068ac:	3b01      	subs	r3, #1
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	4413      	add	r3, r2
 80068b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	f023 0307 	bic.w	r3, r3, #7
 80068ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	f003 0307 	and.w	r3, r3, #7
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00a      	beq.n	80068dc <prvInitialiseNewTask+0x48>
	__asm volatile
 80068c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ca:	f383 8811 	msr	BASEPRI, r3
 80068ce:	f3bf 8f6f 	isb	sy
 80068d2:	f3bf 8f4f 	dsb	sy
 80068d6:	617b      	str	r3, [r7, #20]
}
 80068d8:	bf00      	nop
 80068da:	e7fe      	b.n	80068da <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d01f      	beq.n	8006922 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068e2:	2300      	movs	r3, #0
 80068e4:	61fb      	str	r3, [r7, #28]
 80068e6:	e012      	b.n	800690e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	4413      	add	r3, r2
 80068ee:	7819      	ldrb	r1, [r3, #0]
 80068f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	4413      	add	r3, r2
 80068f6:	3334      	adds	r3, #52	; 0x34
 80068f8:	460a      	mov	r2, r1
 80068fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	4413      	add	r3, r2
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d006      	beq.n	8006916 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	3301      	adds	r3, #1
 800690c:	61fb      	str	r3, [r7, #28]
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	2b0f      	cmp	r3, #15
 8006912:	d9e9      	bls.n	80068e8 <prvInitialiseNewTask+0x54>
 8006914:	e000      	b.n	8006918 <prvInitialiseNewTask+0x84>
			{
				break;
 8006916:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691a:	2200      	movs	r2, #0
 800691c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006920:	e003      	b.n	800692a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006924:	2200      	movs	r2, #0
 8006926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800692a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692c:	2b06      	cmp	r3, #6
 800692e:	d901      	bls.n	8006934 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006930:	2306      	movs	r3, #6
 8006932:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006936:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006938:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800693a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800693e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006942:	2200      	movs	r2, #0
 8006944:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006948:	3304      	adds	r3, #4
 800694a:	4618      	mov	r0, r3
 800694c:	f7ff f8a6 	bl	8005a9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006952:	3318      	adds	r3, #24
 8006954:	4618      	mov	r0, r3
 8006956:	f7ff f8a1 	bl	8005a9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800695a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800695e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006962:	f1c3 0207 	rsb	r2, r3, #7
 8006966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006968:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800696a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800696e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006972:	2200      	movs	r2, #0
 8006974:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697a:	2200      	movs	r2, #0
 800697c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006982:	334c      	adds	r3, #76	; 0x4c
 8006984:	2260      	movs	r2, #96	; 0x60
 8006986:	2100      	movs	r1, #0
 8006988:	4618      	mov	r0, r3
 800698a:	f001 fd11 	bl	80083b0 <memset>
 800698e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006990:	4a0c      	ldr	r2, [pc, #48]	; (80069c4 <prvInitialiseNewTask+0x130>)
 8006992:	651a      	str	r2, [r3, #80]	; 0x50
 8006994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006996:	4a0c      	ldr	r2, [pc, #48]	; (80069c8 <prvInitialiseNewTask+0x134>)
 8006998:	655a      	str	r2, [r3, #84]	; 0x54
 800699a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699c:	4a0b      	ldr	r2, [pc, #44]	; (80069cc <prvInitialiseNewTask+0x138>)
 800699e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80069a0:	683a      	ldr	r2, [r7, #0]
 80069a2:	68f9      	ldr	r1, [r7, #12]
 80069a4:	69b8      	ldr	r0, [r7, #24]
 80069a6:	f000 ff75 	bl	8007894 <pxPortInitialiseStack>
 80069aa:	4602      	mov	r2, r0
 80069ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80069b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d002      	beq.n	80069bc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80069b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069bc:	bf00      	nop
 80069be:	3720      	adds	r7, #32
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	0800b300 	.word	0x0800b300
 80069c8:	0800b320 	.word	0x0800b320
 80069cc:	0800b2e0 	.word	0x0800b2e0

080069d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80069d8:	f001 f88c 	bl	8007af4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80069dc:	4b2a      	ldr	r3, [pc, #168]	; (8006a88 <prvAddNewTaskToReadyList+0xb8>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	3301      	adds	r3, #1
 80069e2:	4a29      	ldr	r2, [pc, #164]	; (8006a88 <prvAddNewTaskToReadyList+0xb8>)
 80069e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80069e6:	4b29      	ldr	r3, [pc, #164]	; (8006a8c <prvAddNewTaskToReadyList+0xbc>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d109      	bne.n	8006a02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80069ee:	4a27      	ldr	r2, [pc, #156]	; (8006a8c <prvAddNewTaskToReadyList+0xbc>)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80069f4:	4b24      	ldr	r3, [pc, #144]	; (8006a88 <prvAddNewTaskToReadyList+0xb8>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d110      	bne.n	8006a1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80069fc:	f000 fc66 	bl	80072cc <prvInitialiseTaskLists>
 8006a00:	e00d      	b.n	8006a1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a02:	4b23      	ldr	r3, [pc, #140]	; (8006a90 <prvAddNewTaskToReadyList+0xc0>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d109      	bne.n	8006a1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a0a:	4b20      	ldr	r3, [pc, #128]	; (8006a8c <prvAddNewTaskToReadyList+0xbc>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d802      	bhi.n	8006a1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006a18:	4a1c      	ldr	r2, [pc, #112]	; (8006a8c <prvAddNewTaskToReadyList+0xbc>)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006a1e:	4b1d      	ldr	r3, [pc, #116]	; (8006a94 <prvAddNewTaskToReadyList+0xc4>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	3301      	adds	r3, #1
 8006a24:	4a1b      	ldr	r2, [pc, #108]	; (8006a94 <prvAddNewTaskToReadyList+0xc4>)
 8006a26:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	409a      	lsls	r2, r3
 8006a30:	4b19      	ldr	r3, [pc, #100]	; (8006a98 <prvAddNewTaskToReadyList+0xc8>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	4a18      	ldr	r2, [pc, #96]	; (8006a98 <prvAddNewTaskToReadyList+0xc8>)
 8006a38:	6013      	str	r3, [r2, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a3e:	4613      	mov	r3, r2
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	4413      	add	r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	4a15      	ldr	r2, [pc, #84]	; (8006a9c <prvAddNewTaskToReadyList+0xcc>)
 8006a48:	441a      	add	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	3304      	adds	r3, #4
 8006a4e:	4619      	mov	r1, r3
 8006a50:	4610      	mov	r0, r2
 8006a52:	f7ff f830 	bl	8005ab6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006a56:	f001 f87d 	bl	8007b54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006a5a:	4b0d      	ldr	r3, [pc, #52]	; (8006a90 <prvAddNewTaskToReadyList+0xc0>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00e      	beq.n	8006a80 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a62:	4b0a      	ldr	r3, [pc, #40]	; (8006a8c <prvAddNewTaskToReadyList+0xbc>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d207      	bcs.n	8006a80 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006a70:	4b0b      	ldr	r3, [pc, #44]	; (8006aa0 <prvAddNewTaskToReadyList+0xd0>)
 8006a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a76:	601a      	str	r2, [r3, #0]
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a80:	bf00      	nop
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	200029bc 	.word	0x200029bc
 8006a8c:	200028bc 	.word	0x200028bc
 8006a90:	200029c8 	.word	0x200029c8
 8006a94:	200029d8 	.word	0x200029d8
 8006a98:	200029c4 	.word	0x200029c4
 8006a9c:	200028c0 	.word	0x200028c0
 8006aa0:	e000ed04 	.word	0xe000ed04

08006aa4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006aac:	f001 f822 	bl	8007af4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d102      	bne.n	8006abc <vTaskDelete+0x18>
 8006ab6:	4b39      	ldr	r3, [pc, #228]	; (8006b9c <vTaskDelete+0xf8>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	e000      	b.n	8006abe <vTaskDelete+0x1a>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	3304      	adds	r3, #4
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7ff f853 	bl	8005b70 <uxListRemove>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d115      	bne.n	8006afc <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad4:	4932      	ldr	r1, [pc, #200]	; (8006ba0 <vTaskDelete+0xfc>)
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	4413      	add	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	440b      	add	r3, r1
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10a      	bne.n	8006afc <vTaskDelete+0x58>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aea:	2201      	movs	r2, #1
 8006aec:	fa02 f303 	lsl.w	r3, r2, r3
 8006af0:	43da      	mvns	r2, r3
 8006af2:	4b2c      	ldr	r3, [pc, #176]	; (8006ba4 <vTaskDelete+0x100>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4013      	ands	r3, r2
 8006af8:	4a2a      	ldr	r2, [pc, #168]	; (8006ba4 <vTaskDelete+0x100>)
 8006afa:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d004      	beq.n	8006b0e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	3318      	adds	r3, #24
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f7ff f831 	bl	8005b70 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8006b0e:	4b26      	ldr	r3, [pc, #152]	; (8006ba8 <vTaskDelete+0x104>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	3301      	adds	r3, #1
 8006b14:	4a24      	ldr	r2, [pc, #144]	; (8006ba8 <vTaskDelete+0x104>)
 8006b16:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8006b18:	4b20      	ldr	r3, [pc, #128]	; (8006b9c <vTaskDelete+0xf8>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d10b      	bne.n	8006b3a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	3304      	adds	r3, #4
 8006b26:	4619      	mov	r1, r3
 8006b28:	4820      	ldr	r0, [pc, #128]	; (8006bac <vTaskDelete+0x108>)
 8006b2a:	f7fe ffc4 	bl	8005ab6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8006b2e:	4b20      	ldr	r3, [pc, #128]	; (8006bb0 <vTaskDelete+0x10c>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	3301      	adds	r3, #1
 8006b34:	4a1e      	ldr	r2, [pc, #120]	; (8006bb0 <vTaskDelete+0x10c>)
 8006b36:	6013      	str	r3, [r2, #0]
 8006b38:	e009      	b.n	8006b4e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8006b3a:	4b1e      	ldr	r3, [pc, #120]	; (8006bb4 <vTaskDelete+0x110>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	4a1c      	ldr	r2, [pc, #112]	; (8006bb4 <vTaskDelete+0x110>)
 8006b42:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f000 fc2f 	bl	80073a8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8006b4a:	f000 fc61 	bl	8007410 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8006b4e:	f001 f801 	bl	8007b54 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8006b52:	4b19      	ldr	r3, [pc, #100]	; (8006bb8 <vTaskDelete+0x114>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d01b      	beq.n	8006b92 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8006b5a:	4b10      	ldr	r3, [pc, #64]	; (8006b9c <vTaskDelete+0xf8>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d116      	bne.n	8006b92 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8006b64:	4b15      	ldr	r3, [pc, #84]	; (8006bbc <vTaskDelete+0x118>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00a      	beq.n	8006b82 <vTaskDelete+0xde>
	__asm volatile
 8006b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b70:	f383 8811 	msr	BASEPRI, r3
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	60bb      	str	r3, [r7, #8]
}
 8006b7e:	bf00      	nop
 8006b80:	e7fe      	b.n	8006b80 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8006b82:	4b0f      	ldr	r3, [pc, #60]	; (8006bc0 <vTaskDelete+0x11c>)
 8006b84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b88:	601a      	str	r2, [r3, #0]
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006b92:	bf00      	nop
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	200028bc 	.word	0x200028bc
 8006ba0:	200028c0 	.word	0x200028c0
 8006ba4:	200029c4 	.word	0x200029c4
 8006ba8:	200029d8 	.word	0x200029d8
 8006bac:	20002990 	.word	0x20002990
 8006bb0:	200029a4 	.word	0x200029a4
 8006bb4:	200029bc 	.word	0x200029bc
 8006bb8:	200029c8 	.word	0x200029c8
 8006bbc:	200029e4 	.word	0x200029e4
 8006bc0:	e000ed04 	.word	0xe000ed04

08006bc4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d017      	beq.n	8006c06 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006bd6:	4b13      	ldr	r3, [pc, #76]	; (8006c24 <vTaskDelay+0x60>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00a      	beq.n	8006bf4 <vTaskDelay+0x30>
	__asm volatile
 8006bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be2:	f383 8811 	msr	BASEPRI, r3
 8006be6:	f3bf 8f6f 	isb	sy
 8006bea:	f3bf 8f4f 	dsb	sy
 8006bee:	60bb      	str	r3, [r7, #8]
}
 8006bf0:	bf00      	nop
 8006bf2:	e7fe      	b.n	8006bf2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006bf4:	f000 f884 	bl	8006d00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 fde4 	bl	80077c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006c00:	f000 f88c 	bl	8006d1c <xTaskResumeAll>
 8006c04:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d107      	bne.n	8006c1c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006c0c:	4b06      	ldr	r3, [pc, #24]	; (8006c28 <vTaskDelay+0x64>)
 8006c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c12:	601a      	str	r2, [r3, #0]
 8006c14:	f3bf 8f4f 	dsb	sy
 8006c18:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c1c:	bf00      	nop
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	200029e4 	.word	0x200029e4
 8006c28:	e000ed04 	.word	0xe000ed04

08006c2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b08a      	sub	sp, #40	; 0x28
 8006c30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006c32:	2300      	movs	r3, #0
 8006c34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006c36:	2300      	movs	r3, #0
 8006c38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006c3a:	463a      	mov	r2, r7
 8006c3c:	1d39      	adds	r1, r7, #4
 8006c3e:	f107 0308 	add.w	r3, r7, #8
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7fa f932 	bl	8000eac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006c48:	6839      	ldr	r1, [r7, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	9202      	str	r2, [sp, #8]
 8006c50:	9301      	str	r3, [sp, #4]
 8006c52:	2300      	movs	r3, #0
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	2300      	movs	r3, #0
 8006c58:	460a      	mov	r2, r1
 8006c5a:	4921      	ldr	r1, [pc, #132]	; (8006ce0 <vTaskStartScheduler+0xb4>)
 8006c5c:	4821      	ldr	r0, [pc, #132]	; (8006ce4 <vTaskStartScheduler+0xb8>)
 8006c5e:	f7ff fd77 	bl	8006750 <xTaskCreateStatic>
 8006c62:	4603      	mov	r3, r0
 8006c64:	4a20      	ldr	r2, [pc, #128]	; (8006ce8 <vTaskStartScheduler+0xbc>)
 8006c66:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006c68:	4b1f      	ldr	r3, [pc, #124]	; (8006ce8 <vTaskStartScheduler+0xbc>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d002      	beq.n	8006c76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006c70:	2301      	movs	r3, #1
 8006c72:	617b      	str	r3, [r7, #20]
 8006c74:	e001      	b.n	8006c7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006c76:	2300      	movs	r3, #0
 8006c78:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d11b      	bne.n	8006cb8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c84:	f383 8811 	msr	BASEPRI, r3
 8006c88:	f3bf 8f6f 	isb	sy
 8006c8c:	f3bf 8f4f 	dsb	sy
 8006c90:	613b      	str	r3, [r7, #16]
}
 8006c92:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c94:	4b15      	ldr	r3, [pc, #84]	; (8006cec <vTaskStartScheduler+0xc0>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	334c      	adds	r3, #76	; 0x4c
 8006c9a:	4a15      	ldr	r2, [pc, #84]	; (8006cf0 <vTaskStartScheduler+0xc4>)
 8006c9c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c9e:	4b15      	ldr	r3, [pc, #84]	; (8006cf4 <vTaskStartScheduler+0xc8>)
 8006ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ca4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ca6:	4b14      	ldr	r3, [pc, #80]	; (8006cf8 <vTaskStartScheduler+0xcc>)
 8006ca8:	2201      	movs	r2, #1
 8006caa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006cac:	4b13      	ldr	r3, [pc, #76]	; (8006cfc <vTaskStartScheduler+0xd0>)
 8006cae:	2200      	movs	r2, #0
 8006cb0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006cb2:	f000 fe7d 	bl	80079b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006cb6:	e00e      	b.n	8006cd6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cbe:	d10a      	bne.n	8006cd6 <vTaskStartScheduler+0xaa>
	__asm volatile
 8006cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc4:	f383 8811 	msr	BASEPRI, r3
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	60fb      	str	r3, [r7, #12]
}
 8006cd2:	bf00      	nop
 8006cd4:	e7fe      	b.n	8006cd4 <vTaskStartScheduler+0xa8>
}
 8006cd6:	bf00      	nop
 8006cd8:	3718      	adds	r7, #24
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	0800b290 	.word	0x0800b290
 8006ce4:	0800729d 	.word	0x0800729d
 8006ce8:	200029e0 	.word	0x200029e0
 8006cec:	200028bc 	.word	0x200028bc
 8006cf0:	20000010 	.word	0x20000010
 8006cf4:	200029dc 	.word	0x200029dc
 8006cf8:	200029c8 	.word	0x200029c8
 8006cfc:	200029c0 	.word	0x200029c0

08006d00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006d00:	b480      	push	{r7}
 8006d02:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006d04:	4b04      	ldr	r3, [pc, #16]	; (8006d18 <vTaskSuspendAll+0x18>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	4a03      	ldr	r2, [pc, #12]	; (8006d18 <vTaskSuspendAll+0x18>)
 8006d0c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006d0e:	bf00      	nop
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr
 8006d18:	200029e4 	.word	0x200029e4

08006d1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006d22:	2300      	movs	r3, #0
 8006d24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006d26:	2300      	movs	r3, #0
 8006d28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006d2a:	4b41      	ldr	r3, [pc, #260]	; (8006e30 <xTaskResumeAll+0x114>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10a      	bne.n	8006d48 <xTaskResumeAll+0x2c>
	__asm volatile
 8006d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d36:	f383 8811 	msr	BASEPRI, r3
 8006d3a:	f3bf 8f6f 	isb	sy
 8006d3e:	f3bf 8f4f 	dsb	sy
 8006d42:	603b      	str	r3, [r7, #0]
}
 8006d44:	bf00      	nop
 8006d46:	e7fe      	b.n	8006d46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006d48:	f000 fed4 	bl	8007af4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006d4c:	4b38      	ldr	r3, [pc, #224]	; (8006e30 <xTaskResumeAll+0x114>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	3b01      	subs	r3, #1
 8006d52:	4a37      	ldr	r2, [pc, #220]	; (8006e30 <xTaskResumeAll+0x114>)
 8006d54:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d56:	4b36      	ldr	r3, [pc, #216]	; (8006e30 <xTaskResumeAll+0x114>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d161      	bne.n	8006e22 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d5e:	4b35      	ldr	r3, [pc, #212]	; (8006e34 <xTaskResumeAll+0x118>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d05d      	beq.n	8006e22 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d66:	e02e      	b.n	8006dc6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d68:	4b33      	ldr	r3, [pc, #204]	; (8006e38 <xTaskResumeAll+0x11c>)
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	3318      	adds	r3, #24
 8006d74:	4618      	mov	r0, r3
 8006d76:	f7fe fefb 	bl	8005b70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	3304      	adds	r3, #4
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fe fef6 	bl	8005b70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d88:	2201      	movs	r2, #1
 8006d8a:	409a      	lsls	r2, r3
 8006d8c:	4b2b      	ldr	r3, [pc, #172]	; (8006e3c <xTaskResumeAll+0x120>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	4a2a      	ldr	r2, [pc, #168]	; (8006e3c <xTaskResumeAll+0x120>)
 8006d94:	6013      	str	r3, [r2, #0]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4413      	add	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4a27      	ldr	r2, [pc, #156]	; (8006e40 <xTaskResumeAll+0x124>)
 8006da4:	441a      	add	r2, r3
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	3304      	adds	r3, #4
 8006daa:	4619      	mov	r1, r3
 8006dac:	4610      	mov	r0, r2
 8006dae:	f7fe fe82 	bl	8005ab6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006db6:	4b23      	ldr	r3, [pc, #140]	; (8006e44 <xTaskResumeAll+0x128>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d302      	bcc.n	8006dc6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006dc0:	4b21      	ldr	r3, [pc, #132]	; (8006e48 <xTaskResumeAll+0x12c>)
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006dc6:	4b1c      	ldr	r3, [pc, #112]	; (8006e38 <xTaskResumeAll+0x11c>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1cc      	bne.n	8006d68 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d001      	beq.n	8006dd8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006dd4:	f000 fb1c 	bl	8007410 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006dd8:	4b1c      	ldr	r3, [pc, #112]	; (8006e4c <xTaskResumeAll+0x130>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d010      	beq.n	8006e06 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006de4:	f000 f836 	bl	8006e54 <xTaskIncrementTick>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d002      	beq.n	8006df4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006dee:	4b16      	ldr	r3, [pc, #88]	; (8006e48 <xTaskResumeAll+0x12c>)
 8006df0:	2201      	movs	r2, #1
 8006df2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	3b01      	subs	r3, #1
 8006df8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1f1      	bne.n	8006de4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006e00:	4b12      	ldr	r3, [pc, #72]	; (8006e4c <xTaskResumeAll+0x130>)
 8006e02:	2200      	movs	r2, #0
 8006e04:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006e06:	4b10      	ldr	r3, [pc, #64]	; (8006e48 <xTaskResumeAll+0x12c>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d009      	beq.n	8006e22 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006e12:	4b0f      	ldr	r3, [pc, #60]	; (8006e50 <xTaskResumeAll+0x134>)
 8006e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e18:	601a      	str	r2, [r3, #0]
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e22:	f000 fe97 	bl	8007b54 <vPortExitCritical>

	return xAlreadyYielded;
 8006e26:	68bb      	ldr	r3, [r7, #8]
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3710      	adds	r7, #16
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	200029e4 	.word	0x200029e4
 8006e34:	200029bc 	.word	0x200029bc
 8006e38:	2000297c 	.word	0x2000297c
 8006e3c:	200029c4 	.word	0x200029c4
 8006e40:	200028c0 	.word	0x200028c0
 8006e44:	200028bc 	.word	0x200028bc
 8006e48:	200029d0 	.word	0x200029d0
 8006e4c:	200029cc 	.word	0x200029cc
 8006e50:	e000ed04 	.word	0xe000ed04

08006e54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b086      	sub	sp, #24
 8006e58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e5e:	4b4e      	ldr	r3, [pc, #312]	; (8006f98 <xTaskIncrementTick+0x144>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f040 808e 	bne.w	8006f84 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e68:	4b4c      	ldr	r3, [pc, #304]	; (8006f9c <xTaskIncrementTick+0x148>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e70:	4a4a      	ldr	r2, [pc, #296]	; (8006f9c <xTaskIncrementTick+0x148>)
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d120      	bne.n	8006ebe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e7c:	4b48      	ldr	r3, [pc, #288]	; (8006fa0 <xTaskIncrementTick+0x14c>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00a      	beq.n	8006e9c <xTaskIncrementTick+0x48>
	__asm volatile
 8006e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	603b      	str	r3, [r7, #0]
}
 8006e98:	bf00      	nop
 8006e9a:	e7fe      	b.n	8006e9a <xTaskIncrementTick+0x46>
 8006e9c:	4b40      	ldr	r3, [pc, #256]	; (8006fa0 <xTaskIncrementTick+0x14c>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	60fb      	str	r3, [r7, #12]
 8006ea2:	4b40      	ldr	r3, [pc, #256]	; (8006fa4 <xTaskIncrementTick+0x150>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a3e      	ldr	r2, [pc, #248]	; (8006fa0 <xTaskIncrementTick+0x14c>)
 8006ea8:	6013      	str	r3, [r2, #0]
 8006eaa:	4a3e      	ldr	r2, [pc, #248]	; (8006fa4 <xTaskIncrementTick+0x150>)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6013      	str	r3, [r2, #0]
 8006eb0:	4b3d      	ldr	r3, [pc, #244]	; (8006fa8 <xTaskIncrementTick+0x154>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	4a3c      	ldr	r2, [pc, #240]	; (8006fa8 <xTaskIncrementTick+0x154>)
 8006eb8:	6013      	str	r3, [r2, #0]
 8006eba:	f000 faa9 	bl	8007410 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ebe:	4b3b      	ldr	r3, [pc, #236]	; (8006fac <xTaskIncrementTick+0x158>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	693a      	ldr	r2, [r7, #16]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d348      	bcc.n	8006f5a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ec8:	4b35      	ldr	r3, [pc, #212]	; (8006fa0 <xTaskIncrementTick+0x14c>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d104      	bne.n	8006edc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ed2:	4b36      	ldr	r3, [pc, #216]	; (8006fac <xTaskIncrementTick+0x158>)
 8006ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed8:	601a      	str	r2, [r3, #0]
					break;
 8006eda:	e03e      	b.n	8006f5a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006edc:	4b30      	ldr	r3, [pc, #192]	; (8006fa0 <xTaskIncrementTick+0x14c>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d203      	bcs.n	8006efc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ef4:	4a2d      	ldr	r2, [pc, #180]	; (8006fac <xTaskIncrementTick+0x158>)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006efa:	e02e      	b.n	8006f5a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	3304      	adds	r3, #4
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7fe fe35 	bl	8005b70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d004      	beq.n	8006f18 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	3318      	adds	r3, #24
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7fe fe2c 	bl	8005b70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	409a      	lsls	r2, r3
 8006f20:	4b23      	ldr	r3, [pc, #140]	; (8006fb0 <xTaskIncrementTick+0x15c>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	4a22      	ldr	r2, [pc, #136]	; (8006fb0 <xTaskIncrementTick+0x15c>)
 8006f28:	6013      	str	r3, [r2, #0]
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f2e:	4613      	mov	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	4413      	add	r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4a1f      	ldr	r2, [pc, #124]	; (8006fb4 <xTaskIncrementTick+0x160>)
 8006f38:	441a      	add	r2, r3
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	3304      	adds	r3, #4
 8006f3e:	4619      	mov	r1, r3
 8006f40:	4610      	mov	r0, r2
 8006f42:	f7fe fdb8 	bl	8005ab6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f4a:	4b1b      	ldr	r3, [pc, #108]	; (8006fb8 <xTaskIncrementTick+0x164>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d3b9      	bcc.n	8006ec8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006f54:	2301      	movs	r3, #1
 8006f56:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f58:	e7b6      	b.n	8006ec8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f5a:	4b17      	ldr	r3, [pc, #92]	; (8006fb8 <xTaskIncrementTick+0x164>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f60:	4914      	ldr	r1, [pc, #80]	; (8006fb4 <xTaskIncrementTick+0x160>)
 8006f62:	4613      	mov	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	4413      	add	r3, r2
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	440b      	add	r3, r1
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d901      	bls.n	8006f76 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006f72:	2301      	movs	r3, #1
 8006f74:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006f76:	4b11      	ldr	r3, [pc, #68]	; (8006fbc <xTaskIncrementTick+0x168>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d007      	beq.n	8006f8e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	617b      	str	r3, [r7, #20]
 8006f82:	e004      	b.n	8006f8e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006f84:	4b0e      	ldr	r3, [pc, #56]	; (8006fc0 <xTaskIncrementTick+0x16c>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	4a0d      	ldr	r2, [pc, #52]	; (8006fc0 <xTaskIncrementTick+0x16c>)
 8006f8c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006f8e:	697b      	ldr	r3, [r7, #20]
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3718      	adds	r7, #24
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	200029e4 	.word	0x200029e4
 8006f9c:	200029c0 	.word	0x200029c0
 8006fa0:	20002974 	.word	0x20002974
 8006fa4:	20002978 	.word	0x20002978
 8006fa8:	200029d4 	.word	0x200029d4
 8006fac:	200029dc 	.word	0x200029dc
 8006fb0:	200029c4 	.word	0x200029c4
 8006fb4:	200028c0 	.word	0x200028c0
 8006fb8:	200028bc 	.word	0x200028bc
 8006fbc:	200029d0 	.word	0x200029d0
 8006fc0:	200029cc 	.word	0x200029cc

08006fc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b087      	sub	sp, #28
 8006fc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006fca:	4b29      	ldr	r3, [pc, #164]	; (8007070 <vTaskSwitchContext+0xac>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d003      	beq.n	8006fda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006fd2:	4b28      	ldr	r3, [pc, #160]	; (8007074 <vTaskSwitchContext+0xb0>)
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006fd8:	e044      	b.n	8007064 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006fda:	4b26      	ldr	r3, [pc, #152]	; (8007074 <vTaskSwitchContext+0xb0>)
 8006fdc:	2200      	movs	r2, #0
 8006fde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fe0:	4b25      	ldr	r3, [pc, #148]	; (8007078 <vTaskSwitchContext+0xb4>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	fab3 f383 	clz	r3, r3
 8006fec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006fee:	7afb      	ldrb	r3, [r7, #11]
 8006ff0:	f1c3 031f 	rsb	r3, r3, #31
 8006ff4:	617b      	str	r3, [r7, #20]
 8006ff6:	4921      	ldr	r1, [pc, #132]	; (800707c <vTaskSwitchContext+0xb8>)
 8006ff8:	697a      	ldr	r2, [r7, #20]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4413      	add	r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	440b      	add	r3, r1
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10a      	bne.n	8007020 <vTaskSwitchContext+0x5c>
	__asm volatile
 800700a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700e:	f383 8811 	msr	BASEPRI, r3
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	607b      	str	r3, [r7, #4]
}
 800701c:	bf00      	nop
 800701e:	e7fe      	b.n	800701e <vTaskSwitchContext+0x5a>
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	4613      	mov	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	4a14      	ldr	r2, [pc, #80]	; (800707c <vTaskSwitchContext+0xb8>)
 800702c:	4413      	add	r3, r2
 800702e:	613b      	str	r3, [r7, #16]
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	685a      	ldr	r2, [r3, #4]
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	605a      	str	r2, [r3, #4]
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	685a      	ldr	r2, [r3, #4]
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	3308      	adds	r3, #8
 8007042:	429a      	cmp	r2, r3
 8007044:	d104      	bne.n	8007050 <vTaskSwitchContext+0x8c>
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	605a      	str	r2, [r3, #4]
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	4a0a      	ldr	r2, [pc, #40]	; (8007080 <vTaskSwitchContext+0xbc>)
 8007058:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800705a:	4b09      	ldr	r3, [pc, #36]	; (8007080 <vTaskSwitchContext+0xbc>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	334c      	adds	r3, #76	; 0x4c
 8007060:	4a08      	ldr	r2, [pc, #32]	; (8007084 <vTaskSwitchContext+0xc0>)
 8007062:	6013      	str	r3, [r2, #0]
}
 8007064:	bf00      	nop
 8007066:	371c      	adds	r7, #28
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr
 8007070:	200029e4 	.word	0x200029e4
 8007074:	200029d0 	.word	0x200029d0
 8007078:	200029c4 	.word	0x200029c4
 800707c:	200028c0 	.word	0x200028c0
 8007080:	200028bc 	.word	0x200028bc
 8007084:	20000010 	.word	0x20000010

08007088 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10a      	bne.n	80070ae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800709c:	f383 8811 	msr	BASEPRI, r3
 80070a0:	f3bf 8f6f 	isb	sy
 80070a4:	f3bf 8f4f 	dsb	sy
 80070a8:	60fb      	str	r3, [r7, #12]
}
 80070aa:	bf00      	nop
 80070ac:	e7fe      	b.n	80070ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80070ae:	4b07      	ldr	r3, [pc, #28]	; (80070cc <vTaskPlaceOnEventList+0x44>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	3318      	adds	r3, #24
 80070b4:	4619      	mov	r1, r3
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f7fe fd21 	bl	8005afe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80070bc:	2101      	movs	r1, #1
 80070be:	6838      	ldr	r0, [r7, #0]
 80070c0:	f000 fb82 	bl	80077c8 <prvAddCurrentTaskToDelayedList>
}
 80070c4:	bf00      	nop
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	200028bc 	.word	0x200028bc

080070d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b086      	sub	sp, #24
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10a      	bne.n	80070fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80070e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ea:	f383 8811 	msr	BASEPRI, r3
 80070ee:	f3bf 8f6f 	isb	sy
 80070f2:	f3bf 8f4f 	dsb	sy
 80070f6:	60fb      	str	r3, [r7, #12]
}
 80070f8:	bf00      	nop
 80070fa:	e7fe      	b.n	80070fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	3318      	adds	r3, #24
 8007100:	4618      	mov	r0, r3
 8007102:	f7fe fd35 	bl	8005b70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007106:	4b1d      	ldr	r3, [pc, #116]	; (800717c <xTaskRemoveFromEventList+0xac>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d11c      	bne.n	8007148 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	3304      	adds	r3, #4
 8007112:	4618      	mov	r0, r3
 8007114:	f7fe fd2c 	bl	8005b70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711c:	2201      	movs	r2, #1
 800711e:	409a      	lsls	r2, r3
 8007120:	4b17      	ldr	r3, [pc, #92]	; (8007180 <xTaskRemoveFromEventList+0xb0>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4313      	orrs	r3, r2
 8007126:	4a16      	ldr	r2, [pc, #88]	; (8007180 <xTaskRemoveFromEventList+0xb0>)
 8007128:	6013      	str	r3, [r2, #0]
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800712e:	4613      	mov	r3, r2
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4413      	add	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4a13      	ldr	r2, [pc, #76]	; (8007184 <xTaskRemoveFromEventList+0xb4>)
 8007138:	441a      	add	r2, r3
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	3304      	adds	r3, #4
 800713e:	4619      	mov	r1, r3
 8007140:	4610      	mov	r0, r2
 8007142:	f7fe fcb8 	bl	8005ab6 <vListInsertEnd>
 8007146:	e005      	b.n	8007154 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	3318      	adds	r3, #24
 800714c:	4619      	mov	r1, r3
 800714e:	480e      	ldr	r0, [pc, #56]	; (8007188 <xTaskRemoveFromEventList+0xb8>)
 8007150:	f7fe fcb1 	bl	8005ab6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007158:	4b0c      	ldr	r3, [pc, #48]	; (800718c <xTaskRemoveFromEventList+0xbc>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715e:	429a      	cmp	r2, r3
 8007160:	d905      	bls.n	800716e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007162:	2301      	movs	r3, #1
 8007164:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007166:	4b0a      	ldr	r3, [pc, #40]	; (8007190 <xTaskRemoveFromEventList+0xc0>)
 8007168:	2201      	movs	r2, #1
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	e001      	b.n	8007172 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800716e:	2300      	movs	r3, #0
 8007170:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007172:	697b      	ldr	r3, [r7, #20]
}
 8007174:	4618      	mov	r0, r3
 8007176:	3718      	adds	r7, #24
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	200029e4 	.word	0x200029e4
 8007180:	200029c4 	.word	0x200029c4
 8007184:	200028c0 	.word	0x200028c0
 8007188:	2000297c 	.word	0x2000297c
 800718c:	200028bc 	.word	0x200028bc
 8007190:	200029d0 	.word	0x200029d0

08007194 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800719c:	4b06      	ldr	r3, [pc, #24]	; (80071b8 <vTaskInternalSetTimeOutState+0x24>)
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80071a4:	4b05      	ldr	r3, [pc, #20]	; (80071bc <vTaskInternalSetTimeOutState+0x28>)
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	605a      	str	r2, [r3, #4]
}
 80071ac:	bf00      	nop
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr
 80071b8:	200029d4 	.word	0x200029d4
 80071bc:	200029c0 	.word	0x200029c0

080071c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b088      	sub	sp, #32
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10a      	bne.n	80071e6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80071d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d4:	f383 8811 	msr	BASEPRI, r3
 80071d8:	f3bf 8f6f 	isb	sy
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	613b      	str	r3, [r7, #16]
}
 80071e2:	bf00      	nop
 80071e4:	e7fe      	b.n	80071e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10a      	bne.n	8007202 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80071ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f0:	f383 8811 	msr	BASEPRI, r3
 80071f4:	f3bf 8f6f 	isb	sy
 80071f8:	f3bf 8f4f 	dsb	sy
 80071fc:	60fb      	str	r3, [r7, #12]
}
 80071fe:	bf00      	nop
 8007200:	e7fe      	b.n	8007200 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007202:	f000 fc77 	bl	8007af4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007206:	4b1d      	ldr	r3, [pc, #116]	; (800727c <xTaskCheckForTimeOut+0xbc>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	69ba      	ldr	r2, [r7, #24]
 8007212:	1ad3      	subs	r3, r2, r3
 8007214:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800721e:	d102      	bne.n	8007226 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007220:	2300      	movs	r3, #0
 8007222:	61fb      	str	r3, [r7, #28]
 8007224:	e023      	b.n	800726e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	4b15      	ldr	r3, [pc, #84]	; (8007280 <xTaskCheckForTimeOut+0xc0>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	429a      	cmp	r2, r3
 8007230:	d007      	beq.n	8007242 <xTaskCheckForTimeOut+0x82>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	69ba      	ldr	r2, [r7, #24]
 8007238:	429a      	cmp	r2, r3
 800723a:	d302      	bcc.n	8007242 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800723c:	2301      	movs	r3, #1
 800723e:	61fb      	str	r3, [r7, #28]
 8007240:	e015      	b.n	800726e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	429a      	cmp	r2, r3
 800724a:	d20b      	bcs.n	8007264 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	1ad2      	subs	r2, r2, r3
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7ff ff9b 	bl	8007194 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800725e:	2300      	movs	r3, #0
 8007260:	61fb      	str	r3, [r7, #28]
 8007262:	e004      	b.n	800726e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	2200      	movs	r2, #0
 8007268:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800726a:	2301      	movs	r3, #1
 800726c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800726e:	f000 fc71 	bl	8007b54 <vPortExitCritical>

	return xReturn;
 8007272:	69fb      	ldr	r3, [r7, #28]
}
 8007274:	4618      	mov	r0, r3
 8007276:	3720      	adds	r7, #32
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	200029c0 	.word	0x200029c0
 8007280:	200029d4 	.word	0x200029d4

08007284 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007284:	b480      	push	{r7}
 8007286:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007288:	4b03      	ldr	r3, [pc, #12]	; (8007298 <vTaskMissedYield+0x14>)
 800728a:	2201      	movs	r2, #1
 800728c:	601a      	str	r2, [r3, #0]
}
 800728e:	bf00      	nop
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr
 8007298:	200029d0 	.word	0x200029d0

0800729c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80072a4:	f000 f852 	bl	800734c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80072a8:	4b06      	ldr	r3, [pc, #24]	; (80072c4 <prvIdleTask+0x28>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d9f9      	bls.n	80072a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80072b0:	4b05      	ldr	r3, [pc, #20]	; (80072c8 <prvIdleTask+0x2c>)
 80072b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072b6:	601a      	str	r2, [r3, #0]
 80072b8:	f3bf 8f4f 	dsb	sy
 80072bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80072c0:	e7f0      	b.n	80072a4 <prvIdleTask+0x8>
 80072c2:	bf00      	nop
 80072c4:	200028c0 	.word	0x200028c0
 80072c8:	e000ed04 	.word	0xe000ed04

080072cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072d2:	2300      	movs	r3, #0
 80072d4:	607b      	str	r3, [r7, #4]
 80072d6:	e00c      	b.n	80072f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	4613      	mov	r3, r2
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	4413      	add	r3, r2
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4a12      	ldr	r2, [pc, #72]	; (800732c <prvInitialiseTaskLists+0x60>)
 80072e4:	4413      	add	r3, r2
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7fe fbb8 	bl	8005a5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	3301      	adds	r3, #1
 80072f0:	607b      	str	r3, [r7, #4]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2b06      	cmp	r3, #6
 80072f6:	d9ef      	bls.n	80072d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80072f8:	480d      	ldr	r0, [pc, #52]	; (8007330 <prvInitialiseTaskLists+0x64>)
 80072fa:	f7fe fbaf 	bl	8005a5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80072fe:	480d      	ldr	r0, [pc, #52]	; (8007334 <prvInitialiseTaskLists+0x68>)
 8007300:	f7fe fbac 	bl	8005a5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007304:	480c      	ldr	r0, [pc, #48]	; (8007338 <prvInitialiseTaskLists+0x6c>)
 8007306:	f7fe fba9 	bl	8005a5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800730a:	480c      	ldr	r0, [pc, #48]	; (800733c <prvInitialiseTaskLists+0x70>)
 800730c:	f7fe fba6 	bl	8005a5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007310:	480b      	ldr	r0, [pc, #44]	; (8007340 <prvInitialiseTaskLists+0x74>)
 8007312:	f7fe fba3 	bl	8005a5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007316:	4b0b      	ldr	r3, [pc, #44]	; (8007344 <prvInitialiseTaskLists+0x78>)
 8007318:	4a05      	ldr	r2, [pc, #20]	; (8007330 <prvInitialiseTaskLists+0x64>)
 800731a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800731c:	4b0a      	ldr	r3, [pc, #40]	; (8007348 <prvInitialiseTaskLists+0x7c>)
 800731e:	4a05      	ldr	r2, [pc, #20]	; (8007334 <prvInitialiseTaskLists+0x68>)
 8007320:	601a      	str	r2, [r3, #0]
}
 8007322:	bf00      	nop
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	200028c0 	.word	0x200028c0
 8007330:	2000294c 	.word	0x2000294c
 8007334:	20002960 	.word	0x20002960
 8007338:	2000297c 	.word	0x2000297c
 800733c:	20002990 	.word	0x20002990
 8007340:	200029a8 	.word	0x200029a8
 8007344:	20002974 	.word	0x20002974
 8007348:	20002978 	.word	0x20002978

0800734c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007352:	e019      	b.n	8007388 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007354:	f000 fbce 	bl	8007af4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007358:	4b10      	ldr	r3, [pc, #64]	; (800739c <prvCheckTasksWaitingTermination+0x50>)
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	3304      	adds	r3, #4
 8007364:	4618      	mov	r0, r3
 8007366:	f7fe fc03 	bl	8005b70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800736a:	4b0d      	ldr	r3, [pc, #52]	; (80073a0 <prvCheckTasksWaitingTermination+0x54>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	3b01      	subs	r3, #1
 8007370:	4a0b      	ldr	r2, [pc, #44]	; (80073a0 <prvCheckTasksWaitingTermination+0x54>)
 8007372:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007374:	4b0b      	ldr	r3, [pc, #44]	; (80073a4 <prvCheckTasksWaitingTermination+0x58>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	3b01      	subs	r3, #1
 800737a:	4a0a      	ldr	r2, [pc, #40]	; (80073a4 <prvCheckTasksWaitingTermination+0x58>)
 800737c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800737e:	f000 fbe9 	bl	8007b54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f810 	bl	80073a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007388:	4b06      	ldr	r3, [pc, #24]	; (80073a4 <prvCheckTasksWaitingTermination+0x58>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d1e1      	bne.n	8007354 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007390:	bf00      	nop
 8007392:	bf00      	nop
 8007394:	3708      	adds	r7, #8
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	20002990 	.word	0x20002990
 80073a0:	200029bc 	.word	0x200029bc
 80073a4:	200029a4 	.word	0x200029a4

080073a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	334c      	adds	r3, #76	; 0x4c
 80073b4:	4618      	mov	r0, r3
 80073b6:	f001 fd5b 	bl	8008e70 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d108      	bne.n	80073d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c8:	4618      	mov	r0, r3
 80073ca:	f000 fd81 	bl	8007ed0 <vPortFree>
				vPortFree( pxTCB );
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fd7e 	bl	8007ed0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80073d4:	e018      	b.n	8007408 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d103      	bne.n	80073e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 fd75 	bl	8007ed0 <vPortFree>
	}
 80073e6:	e00f      	b.n	8007408 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	d00a      	beq.n	8007408 <prvDeleteTCB+0x60>
	__asm volatile
 80073f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f6:	f383 8811 	msr	BASEPRI, r3
 80073fa:	f3bf 8f6f 	isb	sy
 80073fe:	f3bf 8f4f 	dsb	sy
 8007402:	60fb      	str	r3, [r7, #12]
}
 8007404:	bf00      	nop
 8007406:	e7fe      	b.n	8007406 <prvDeleteTCB+0x5e>
	}
 8007408:	bf00      	nop
 800740a:	3710      	adds	r7, #16
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007416:	4b0c      	ldr	r3, [pc, #48]	; (8007448 <prvResetNextTaskUnblockTime+0x38>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d104      	bne.n	800742a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007420:	4b0a      	ldr	r3, [pc, #40]	; (800744c <prvResetNextTaskUnblockTime+0x3c>)
 8007422:	f04f 32ff 	mov.w	r2, #4294967295
 8007426:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007428:	e008      	b.n	800743c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800742a:	4b07      	ldr	r3, [pc, #28]	; (8007448 <prvResetNextTaskUnblockTime+0x38>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	4a04      	ldr	r2, [pc, #16]	; (800744c <prvResetNextTaskUnblockTime+0x3c>)
 800743a:	6013      	str	r3, [r2, #0]
}
 800743c:	bf00      	nop
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr
 8007448:	20002974 	.word	0x20002974
 800744c:	200029dc 	.word	0x200029dc

08007450 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007456:	4b0b      	ldr	r3, [pc, #44]	; (8007484 <xTaskGetSchedulerState+0x34>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d102      	bne.n	8007464 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800745e:	2301      	movs	r3, #1
 8007460:	607b      	str	r3, [r7, #4]
 8007462:	e008      	b.n	8007476 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007464:	4b08      	ldr	r3, [pc, #32]	; (8007488 <xTaskGetSchedulerState+0x38>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d102      	bne.n	8007472 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800746c:	2302      	movs	r3, #2
 800746e:	607b      	str	r3, [r7, #4]
 8007470:	e001      	b.n	8007476 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007472:	2300      	movs	r3, #0
 8007474:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007476:	687b      	ldr	r3, [r7, #4]
	}
 8007478:	4618      	mov	r0, r3
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr
 8007484:	200029c8 	.word	0x200029c8
 8007488:	200029e4 	.word	0x200029e4

0800748c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007498:	2300      	movs	r3, #0
 800749a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d05e      	beq.n	8007560 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074a6:	4b31      	ldr	r3, [pc, #196]	; (800756c <xTaskPriorityInherit+0xe0>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d24e      	bcs.n	800754e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	699b      	ldr	r3, [r3, #24]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	db06      	blt.n	80074c6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074b8:	4b2c      	ldr	r3, [pc, #176]	; (800756c <xTaskPriorityInherit+0xe0>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074be:	f1c3 0207 	rsb	r2, r3, #7
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	6959      	ldr	r1, [r3, #20]
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ce:	4613      	mov	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4413      	add	r3, r2
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	4a26      	ldr	r2, [pc, #152]	; (8007570 <xTaskPriorityInherit+0xe4>)
 80074d8:	4413      	add	r3, r2
 80074da:	4299      	cmp	r1, r3
 80074dc:	d12f      	bne.n	800753e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	3304      	adds	r3, #4
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7fe fb44 	bl	8005b70 <uxListRemove>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d10a      	bne.n	8007504 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f2:	2201      	movs	r2, #1
 80074f4:	fa02 f303 	lsl.w	r3, r2, r3
 80074f8:	43da      	mvns	r2, r3
 80074fa:	4b1e      	ldr	r3, [pc, #120]	; (8007574 <xTaskPriorityInherit+0xe8>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4013      	ands	r3, r2
 8007500:	4a1c      	ldr	r2, [pc, #112]	; (8007574 <xTaskPriorityInherit+0xe8>)
 8007502:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007504:	4b19      	ldr	r3, [pc, #100]	; (800756c <xTaskPriorityInherit+0xe0>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007512:	2201      	movs	r2, #1
 8007514:	409a      	lsls	r2, r3
 8007516:	4b17      	ldr	r3, [pc, #92]	; (8007574 <xTaskPriorityInherit+0xe8>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4313      	orrs	r3, r2
 800751c:	4a15      	ldr	r2, [pc, #84]	; (8007574 <xTaskPriorityInherit+0xe8>)
 800751e:	6013      	str	r3, [r2, #0]
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007524:	4613      	mov	r3, r2
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	4413      	add	r3, r2
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	4a10      	ldr	r2, [pc, #64]	; (8007570 <xTaskPriorityInherit+0xe4>)
 800752e:	441a      	add	r2, r3
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	3304      	adds	r3, #4
 8007534:	4619      	mov	r1, r3
 8007536:	4610      	mov	r0, r2
 8007538:	f7fe fabd 	bl	8005ab6 <vListInsertEnd>
 800753c:	e004      	b.n	8007548 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800753e:	4b0b      	ldr	r3, [pc, #44]	; (800756c <xTaskPriorityInherit+0xe0>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007548:	2301      	movs	r3, #1
 800754a:	60fb      	str	r3, [r7, #12]
 800754c:	e008      	b.n	8007560 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007552:	4b06      	ldr	r3, [pc, #24]	; (800756c <xTaskPriorityInherit+0xe0>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007558:	429a      	cmp	r2, r3
 800755a:	d201      	bcs.n	8007560 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800755c:	2301      	movs	r3, #1
 800755e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007560:	68fb      	ldr	r3, [r7, #12]
	}
 8007562:	4618      	mov	r0, r3
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	200028bc 	.word	0x200028bc
 8007570:	200028c0 	.word	0x200028c0
 8007574:	200029c4 	.word	0x200029c4

08007578 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007578:	b580      	push	{r7, lr}
 800757a:	b086      	sub	sp, #24
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007584:	2300      	movs	r3, #0
 8007586:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d06e      	beq.n	800766c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800758e:	4b3a      	ldr	r3, [pc, #232]	; (8007678 <xTaskPriorityDisinherit+0x100>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	693a      	ldr	r2, [r7, #16]
 8007594:	429a      	cmp	r2, r3
 8007596:	d00a      	beq.n	80075ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759c:	f383 8811 	msr	BASEPRI, r3
 80075a0:	f3bf 8f6f 	isb	sy
 80075a4:	f3bf 8f4f 	dsb	sy
 80075a8:	60fb      	str	r3, [r7, #12]
}
 80075aa:	bf00      	nop
 80075ac:	e7fe      	b.n	80075ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d10a      	bne.n	80075cc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80075b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ba:	f383 8811 	msr	BASEPRI, r3
 80075be:	f3bf 8f6f 	isb	sy
 80075c2:	f3bf 8f4f 	dsb	sy
 80075c6:	60bb      	str	r3, [r7, #8]
}
 80075c8:	bf00      	nop
 80075ca:	e7fe      	b.n	80075ca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075d0:	1e5a      	subs	r2, r3, #1
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075de:	429a      	cmp	r2, r3
 80075e0:	d044      	beq.n	800766c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d140      	bne.n	800766c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	3304      	adds	r3, #4
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7fe fabe 	bl	8005b70 <uxListRemove>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d115      	bne.n	8007626 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075fe:	491f      	ldr	r1, [pc, #124]	; (800767c <xTaskPriorityDisinherit+0x104>)
 8007600:	4613      	mov	r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	4413      	add	r3, r2
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	440b      	add	r3, r1
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10a      	bne.n	8007626 <xTaskPriorityDisinherit+0xae>
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007614:	2201      	movs	r2, #1
 8007616:	fa02 f303 	lsl.w	r3, r2, r3
 800761a:	43da      	mvns	r2, r3
 800761c:	4b18      	ldr	r3, [pc, #96]	; (8007680 <xTaskPriorityDisinherit+0x108>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4013      	ands	r3, r2
 8007622:	4a17      	ldr	r2, [pc, #92]	; (8007680 <xTaskPriorityDisinherit+0x108>)
 8007624:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007632:	f1c3 0207 	rsb	r2, r3, #7
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763e:	2201      	movs	r2, #1
 8007640:	409a      	lsls	r2, r3
 8007642:	4b0f      	ldr	r3, [pc, #60]	; (8007680 <xTaskPriorityDisinherit+0x108>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4313      	orrs	r3, r2
 8007648:	4a0d      	ldr	r2, [pc, #52]	; (8007680 <xTaskPriorityDisinherit+0x108>)
 800764a:	6013      	str	r3, [r2, #0]
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007650:	4613      	mov	r3, r2
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	4413      	add	r3, r2
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	4a08      	ldr	r2, [pc, #32]	; (800767c <xTaskPriorityDisinherit+0x104>)
 800765a:	441a      	add	r2, r3
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	3304      	adds	r3, #4
 8007660:	4619      	mov	r1, r3
 8007662:	4610      	mov	r0, r2
 8007664:	f7fe fa27 	bl	8005ab6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007668:	2301      	movs	r3, #1
 800766a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800766c:	697b      	ldr	r3, [r7, #20]
	}
 800766e:	4618      	mov	r0, r3
 8007670:	3718      	adds	r7, #24
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	200028bc 	.word	0x200028bc
 800767c:	200028c0 	.word	0x200028c0
 8007680:	200029c4 	.word	0x200029c4

08007684 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007684:	b580      	push	{r7, lr}
 8007686:	b088      	sub	sp, #32
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007692:	2301      	movs	r3, #1
 8007694:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d077      	beq.n	800778c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d10a      	bne.n	80076ba <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80076a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a8:	f383 8811 	msr	BASEPRI, r3
 80076ac:	f3bf 8f6f 	isb	sy
 80076b0:	f3bf 8f4f 	dsb	sy
 80076b4:	60fb      	str	r3, [r7, #12]
}
 80076b6:	bf00      	nop
 80076b8:	e7fe      	b.n	80076b8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076be:	683a      	ldr	r2, [r7, #0]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d902      	bls.n	80076ca <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	61fb      	str	r3, [r7, #28]
 80076c8:	e002      	b.n	80076d0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ce:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d4:	69fa      	ldr	r2, [r7, #28]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d058      	beq.n	800778c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076de:	697a      	ldr	r2, [r7, #20]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d153      	bne.n	800778c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80076e4:	4b2b      	ldr	r3, [pc, #172]	; (8007794 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	69ba      	ldr	r2, [r7, #24]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d10a      	bne.n	8007704 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80076ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f2:	f383 8811 	msr	BASEPRI, r3
 80076f6:	f3bf 8f6f 	isb	sy
 80076fa:	f3bf 8f4f 	dsb	sy
 80076fe:	60bb      	str	r3, [r7, #8]
}
 8007700:	bf00      	nop
 8007702:	e7fe      	b.n	8007702 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007708:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	69fa      	ldr	r2, [r7, #28]
 800770e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	699b      	ldr	r3, [r3, #24]
 8007714:	2b00      	cmp	r3, #0
 8007716:	db04      	blt.n	8007722 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	f1c3 0207 	rsb	r2, r3, #7
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	6959      	ldr	r1, [r3, #20]
 8007726:	693a      	ldr	r2, [r7, #16]
 8007728:	4613      	mov	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	4413      	add	r3, r2
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	4a19      	ldr	r2, [pc, #100]	; (8007798 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007732:	4413      	add	r3, r2
 8007734:	4299      	cmp	r1, r3
 8007736:	d129      	bne.n	800778c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	3304      	adds	r3, #4
 800773c:	4618      	mov	r0, r3
 800773e:	f7fe fa17 	bl	8005b70 <uxListRemove>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d10a      	bne.n	800775e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774c:	2201      	movs	r2, #1
 800774e:	fa02 f303 	lsl.w	r3, r2, r3
 8007752:	43da      	mvns	r2, r3
 8007754:	4b11      	ldr	r3, [pc, #68]	; (800779c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4013      	ands	r3, r2
 800775a:	4a10      	ldr	r2, [pc, #64]	; (800779c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800775c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007762:	2201      	movs	r2, #1
 8007764:	409a      	lsls	r2, r3
 8007766:	4b0d      	ldr	r3, [pc, #52]	; (800779c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4313      	orrs	r3, r2
 800776c:	4a0b      	ldr	r2, [pc, #44]	; (800779c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800776e:	6013      	str	r3, [r2, #0]
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007774:	4613      	mov	r3, r2
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	4413      	add	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4a06      	ldr	r2, [pc, #24]	; (8007798 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800777e:	441a      	add	r2, r3
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	3304      	adds	r3, #4
 8007784:	4619      	mov	r1, r3
 8007786:	4610      	mov	r0, r2
 8007788:	f7fe f995 	bl	8005ab6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800778c:	bf00      	nop
 800778e:	3720      	adds	r7, #32
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	200028bc 	.word	0x200028bc
 8007798:	200028c0 	.word	0x200028c0
 800779c:	200029c4 	.word	0x200029c4

080077a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80077a0:	b480      	push	{r7}
 80077a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80077a4:	4b07      	ldr	r3, [pc, #28]	; (80077c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d004      	beq.n	80077b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80077ac:	4b05      	ldr	r3, [pc, #20]	; (80077c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077b2:	3201      	adds	r2, #1
 80077b4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80077b6:	4b03      	ldr	r3, [pc, #12]	; (80077c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80077b8:	681b      	ldr	r3, [r3, #0]
	}
 80077ba:	4618      	mov	r0, r3
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr
 80077c4:	200028bc 	.word	0x200028bc

080077c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80077d2:	4b29      	ldr	r3, [pc, #164]	; (8007878 <prvAddCurrentTaskToDelayedList+0xb0>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077d8:	4b28      	ldr	r3, [pc, #160]	; (800787c <prvAddCurrentTaskToDelayedList+0xb4>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	3304      	adds	r3, #4
 80077de:	4618      	mov	r0, r3
 80077e0:	f7fe f9c6 	bl	8005b70 <uxListRemove>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d10b      	bne.n	8007802 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80077ea:	4b24      	ldr	r3, [pc, #144]	; (800787c <prvAddCurrentTaskToDelayedList+0xb4>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f0:	2201      	movs	r2, #1
 80077f2:	fa02 f303 	lsl.w	r3, r2, r3
 80077f6:	43da      	mvns	r2, r3
 80077f8:	4b21      	ldr	r3, [pc, #132]	; (8007880 <prvAddCurrentTaskToDelayedList+0xb8>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4013      	ands	r3, r2
 80077fe:	4a20      	ldr	r2, [pc, #128]	; (8007880 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007800:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007808:	d10a      	bne.n	8007820 <prvAddCurrentTaskToDelayedList+0x58>
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d007      	beq.n	8007820 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007810:	4b1a      	ldr	r3, [pc, #104]	; (800787c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	3304      	adds	r3, #4
 8007816:	4619      	mov	r1, r3
 8007818:	481a      	ldr	r0, [pc, #104]	; (8007884 <prvAddCurrentTaskToDelayedList+0xbc>)
 800781a:	f7fe f94c 	bl	8005ab6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800781e:	e026      	b.n	800786e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4413      	add	r3, r2
 8007826:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007828:	4b14      	ldr	r3, [pc, #80]	; (800787c <prvAddCurrentTaskToDelayedList+0xb4>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68ba      	ldr	r2, [r7, #8]
 800782e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007830:	68ba      	ldr	r2, [r7, #8]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	429a      	cmp	r2, r3
 8007836:	d209      	bcs.n	800784c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007838:	4b13      	ldr	r3, [pc, #76]	; (8007888 <prvAddCurrentTaskToDelayedList+0xc0>)
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	4b0f      	ldr	r3, [pc, #60]	; (800787c <prvAddCurrentTaskToDelayedList+0xb4>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	3304      	adds	r3, #4
 8007842:	4619      	mov	r1, r3
 8007844:	4610      	mov	r0, r2
 8007846:	f7fe f95a 	bl	8005afe <vListInsert>
}
 800784a:	e010      	b.n	800786e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800784c:	4b0f      	ldr	r3, [pc, #60]	; (800788c <prvAddCurrentTaskToDelayedList+0xc4>)
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	4b0a      	ldr	r3, [pc, #40]	; (800787c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	3304      	adds	r3, #4
 8007856:	4619      	mov	r1, r3
 8007858:	4610      	mov	r0, r2
 800785a:	f7fe f950 	bl	8005afe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800785e:	4b0c      	ldr	r3, [pc, #48]	; (8007890 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68ba      	ldr	r2, [r7, #8]
 8007864:	429a      	cmp	r2, r3
 8007866:	d202      	bcs.n	800786e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007868:	4a09      	ldr	r2, [pc, #36]	; (8007890 <prvAddCurrentTaskToDelayedList+0xc8>)
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	6013      	str	r3, [r2, #0]
}
 800786e:	bf00      	nop
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	200029c0 	.word	0x200029c0
 800787c:	200028bc 	.word	0x200028bc
 8007880:	200029c4 	.word	0x200029c4
 8007884:	200029a8 	.word	0x200029a8
 8007888:	20002978 	.word	0x20002978
 800788c:	20002974 	.word	0x20002974
 8007890:	200029dc 	.word	0x200029dc

08007894 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	3b04      	subs	r3, #4
 80078a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80078ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	3b04      	subs	r3, #4
 80078b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	f023 0201 	bic.w	r2, r3, #1
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	3b04      	subs	r3, #4
 80078c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80078c4:	4a0c      	ldr	r2, [pc, #48]	; (80078f8 <pxPortInitialiseStack+0x64>)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	3b14      	subs	r3, #20
 80078ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	3b04      	subs	r3, #4
 80078da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f06f 0202 	mvn.w	r2, #2
 80078e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	3b20      	subs	r3, #32
 80078e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80078ea:	68fb      	ldr	r3, [r7, #12]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3714      	adds	r7, #20
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr
 80078f8:	080078fd 	.word	0x080078fd

080078fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80078fc:	b480      	push	{r7}
 80078fe:	b085      	sub	sp, #20
 8007900:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007902:	2300      	movs	r3, #0
 8007904:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007906:	4b12      	ldr	r3, [pc, #72]	; (8007950 <prvTaskExitError+0x54>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800790e:	d00a      	beq.n	8007926 <prvTaskExitError+0x2a>
	__asm volatile
 8007910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007914:	f383 8811 	msr	BASEPRI, r3
 8007918:	f3bf 8f6f 	isb	sy
 800791c:	f3bf 8f4f 	dsb	sy
 8007920:	60fb      	str	r3, [r7, #12]
}
 8007922:	bf00      	nop
 8007924:	e7fe      	b.n	8007924 <prvTaskExitError+0x28>
	__asm volatile
 8007926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792a:	f383 8811 	msr	BASEPRI, r3
 800792e:	f3bf 8f6f 	isb	sy
 8007932:	f3bf 8f4f 	dsb	sy
 8007936:	60bb      	str	r3, [r7, #8]
}
 8007938:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800793a:	bf00      	nop
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d0fc      	beq.n	800793c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007942:	bf00      	nop
 8007944:	bf00      	nop
 8007946:	3714      	adds	r7, #20
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr
 8007950:	2000000c 	.word	0x2000000c
	...

08007960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007960:	4b07      	ldr	r3, [pc, #28]	; (8007980 <pxCurrentTCBConst2>)
 8007962:	6819      	ldr	r1, [r3, #0]
 8007964:	6808      	ldr	r0, [r1, #0]
 8007966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800796a:	f380 8809 	msr	PSP, r0
 800796e:	f3bf 8f6f 	isb	sy
 8007972:	f04f 0000 	mov.w	r0, #0
 8007976:	f380 8811 	msr	BASEPRI, r0
 800797a:	4770      	bx	lr
 800797c:	f3af 8000 	nop.w

08007980 <pxCurrentTCBConst2>:
 8007980:	200028bc 	.word	0x200028bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007984:	bf00      	nop
 8007986:	bf00      	nop

08007988 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007988:	4808      	ldr	r0, [pc, #32]	; (80079ac <prvPortStartFirstTask+0x24>)
 800798a:	6800      	ldr	r0, [r0, #0]
 800798c:	6800      	ldr	r0, [r0, #0]
 800798e:	f380 8808 	msr	MSP, r0
 8007992:	f04f 0000 	mov.w	r0, #0
 8007996:	f380 8814 	msr	CONTROL, r0
 800799a:	b662      	cpsie	i
 800799c:	b661      	cpsie	f
 800799e:	f3bf 8f4f 	dsb	sy
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	df00      	svc	0
 80079a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80079aa:	bf00      	nop
 80079ac:	e000ed08 	.word	0xe000ed08

080079b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b086      	sub	sp, #24
 80079b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80079b6:	4b46      	ldr	r3, [pc, #280]	; (8007ad0 <xPortStartScheduler+0x120>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a46      	ldr	r2, [pc, #280]	; (8007ad4 <xPortStartScheduler+0x124>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d10a      	bne.n	80079d6 <xPortStartScheduler+0x26>
	__asm volatile
 80079c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c4:	f383 8811 	msr	BASEPRI, r3
 80079c8:	f3bf 8f6f 	isb	sy
 80079cc:	f3bf 8f4f 	dsb	sy
 80079d0:	613b      	str	r3, [r7, #16]
}
 80079d2:	bf00      	nop
 80079d4:	e7fe      	b.n	80079d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80079d6:	4b3e      	ldr	r3, [pc, #248]	; (8007ad0 <xPortStartScheduler+0x120>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a3f      	ldr	r2, [pc, #252]	; (8007ad8 <xPortStartScheduler+0x128>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d10a      	bne.n	80079f6 <xPortStartScheduler+0x46>
	__asm volatile
 80079e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e4:	f383 8811 	msr	BASEPRI, r3
 80079e8:	f3bf 8f6f 	isb	sy
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	60fb      	str	r3, [r7, #12]
}
 80079f2:	bf00      	nop
 80079f4:	e7fe      	b.n	80079f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80079f6:	4b39      	ldr	r3, [pc, #228]	; (8007adc <xPortStartScheduler+0x12c>)
 80079f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	22ff      	movs	r2, #255	; 0xff
 8007a06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a10:	78fb      	ldrb	r3, [r7, #3]
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007a18:	b2da      	uxtb	r2, r3
 8007a1a:	4b31      	ldr	r3, [pc, #196]	; (8007ae0 <xPortStartScheduler+0x130>)
 8007a1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a1e:	4b31      	ldr	r3, [pc, #196]	; (8007ae4 <xPortStartScheduler+0x134>)
 8007a20:	2207      	movs	r2, #7
 8007a22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a24:	e009      	b.n	8007a3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007a26:	4b2f      	ldr	r3, [pc, #188]	; (8007ae4 <xPortStartScheduler+0x134>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	4a2d      	ldr	r2, [pc, #180]	; (8007ae4 <xPortStartScheduler+0x134>)
 8007a2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a30:	78fb      	ldrb	r3, [r7, #3]
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	005b      	lsls	r3, r3, #1
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a3a:	78fb      	ldrb	r3, [r7, #3]
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a42:	2b80      	cmp	r3, #128	; 0x80
 8007a44:	d0ef      	beq.n	8007a26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a46:	4b27      	ldr	r3, [pc, #156]	; (8007ae4 <xPortStartScheduler+0x134>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f1c3 0307 	rsb	r3, r3, #7
 8007a4e:	2b04      	cmp	r3, #4
 8007a50:	d00a      	beq.n	8007a68 <xPortStartScheduler+0xb8>
	__asm volatile
 8007a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a56:	f383 8811 	msr	BASEPRI, r3
 8007a5a:	f3bf 8f6f 	isb	sy
 8007a5e:	f3bf 8f4f 	dsb	sy
 8007a62:	60bb      	str	r3, [r7, #8]
}
 8007a64:	bf00      	nop
 8007a66:	e7fe      	b.n	8007a66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a68:	4b1e      	ldr	r3, [pc, #120]	; (8007ae4 <xPortStartScheduler+0x134>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	021b      	lsls	r3, r3, #8
 8007a6e:	4a1d      	ldr	r2, [pc, #116]	; (8007ae4 <xPortStartScheduler+0x134>)
 8007a70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a72:	4b1c      	ldr	r3, [pc, #112]	; (8007ae4 <xPortStartScheduler+0x134>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a7a:	4a1a      	ldr	r2, [pc, #104]	; (8007ae4 <xPortStartScheduler+0x134>)
 8007a7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	b2da      	uxtb	r2, r3
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a86:	4b18      	ldr	r3, [pc, #96]	; (8007ae8 <xPortStartScheduler+0x138>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a17      	ldr	r2, [pc, #92]	; (8007ae8 <xPortStartScheduler+0x138>)
 8007a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a92:	4b15      	ldr	r3, [pc, #84]	; (8007ae8 <xPortStartScheduler+0x138>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a14      	ldr	r2, [pc, #80]	; (8007ae8 <xPortStartScheduler+0x138>)
 8007a98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007a9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a9e:	f000 f8dd 	bl	8007c5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007aa2:	4b12      	ldr	r3, [pc, #72]	; (8007aec <xPortStartScheduler+0x13c>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007aa8:	f000 f8fc 	bl	8007ca4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007aac:	4b10      	ldr	r3, [pc, #64]	; (8007af0 <xPortStartScheduler+0x140>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a0f      	ldr	r2, [pc, #60]	; (8007af0 <xPortStartScheduler+0x140>)
 8007ab2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007ab6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ab8:	f7ff ff66 	bl	8007988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007abc:	f7ff fa82 	bl	8006fc4 <vTaskSwitchContext>
	prvTaskExitError();
 8007ac0:	f7ff ff1c 	bl	80078fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3718      	adds	r7, #24
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	e000ed00 	.word	0xe000ed00
 8007ad4:	410fc271 	.word	0x410fc271
 8007ad8:	410fc270 	.word	0x410fc270
 8007adc:	e000e400 	.word	0xe000e400
 8007ae0:	200029e8 	.word	0x200029e8
 8007ae4:	200029ec 	.word	0x200029ec
 8007ae8:	e000ed20 	.word	0xe000ed20
 8007aec:	2000000c 	.word	0x2000000c
 8007af0:	e000ef34 	.word	0xe000ef34

08007af4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
	__asm volatile
 8007afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007afe:	f383 8811 	msr	BASEPRI, r3
 8007b02:	f3bf 8f6f 	isb	sy
 8007b06:	f3bf 8f4f 	dsb	sy
 8007b0a:	607b      	str	r3, [r7, #4]
}
 8007b0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b0e:	4b0f      	ldr	r3, [pc, #60]	; (8007b4c <vPortEnterCritical+0x58>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	3301      	adds	r3, #1
 8007b14:	4a0d      	ldr	r2, [pc, #52]	; (8007b4c <vPortEnterCritical+0x58>)
 8007b16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b18:	4b0c      	ldr	r3, [pc, #48]	; (8007b4c <vPortEnterCritical+0x58>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d10f      	bne.n	8007b40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b20:	4b0b      	ldr	r3, [pc, #44]	; (8007b50 <vPortEnterCritical+0x5c>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00a      	beq.n	8007b40 <vPortEnterCritical+0x4c>
	__asm volatile
 8007b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2e:	f383 8811 	msr	BASEPRI, r3
 8007b32:	f3bf 8f6f 	isb	sy
 8007b36:	f3bf 8f4f 	dsb	sy
 8007b3a:	603b      	str	r3, [r7, #0]
}
 8007b3c:	bf00      	nop
 8007b3e:	e7fe      	b.n	8007b3e <vPortEnterCritical+0x4a>
	}
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	2000000c 	.word	0x2000000c
 8007b50:	e000ed04 	.word	0xe000ed04

08007b54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b5a:	4b12      	ldr	r3, [pc, #72]	; (8007ba4 <vPortExitCritical+0x50>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10a      	bne.n	8007b78 <vPortExitCritical+0x24>
	__asm volatile
 8007b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b66:	f383 8811 	msr	BASEPRI, r3
 8007b6a:	f3bf 8f6f 	isb	sy
 8007b6e:	f3bf 8f4f 	dsb	sy
 8007b72:	607b      	str	r3, [r7, #4]
}
 8007b74:	bf00      	nop
 8007b76:	e7fe      	b.n	8007b76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007b78:	4b0a      	ldr	r3, [pc, #40]	; (8007ba4 <vPortExitCritical+0x50>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	4a09      	ldr	r2, [pc, #36]	; (8007ba4 <vPortExitCritical+0x50>)
 8007b80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b82:	4b08      	ldr	r3, [pc, #32]	; (8007ba4 <vPortExitCritical+0x50>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d105      	bne.n	8007b96 <vPortExitCritical+0x42>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	f383 8811 	msr	BASEPRI, r3
}
 8007b94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b96:	bf00      	nop
 8007b98:	370c      	adds	r7, #12
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	2000000c 	.word	0x2000000c
	...

08007bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007bb0:	f3ef 8009 	mrs	r0, PSP
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	4b15      	ldr	r3, [pc, #84]	; (8007c10 <pxCurrentTCBConst>)
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	f01e 0f10 	tst.w	lr, #16
 8007bc0:	bf08      	it	eq
 8007bc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007bc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bca:	6010      	str	r0, [r2, #0]
 8007bcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007bd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007bd4:	f380 8811 	msr	BASEPRI, r0
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	f3bf 8f6f 	isb	sy
 8007be0:	f7ff f9f0 	bl	8006fc4 <vTaskSwitchContext>
 8007be4:	f04f 0000 	mov.w	r0, #0
 8007be8:	f380 8811 	msr	BASEPRI, r0
 8007bec:	bc09      	pop	{r0, r3}
 8007bee:	6819      	ldr	r1, [r3, #0]
 8007bf0:	6808      	ldr	r0, [r1, #0]
 8007bf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf6:	f01e 0f10 	tst.w	lr, #16
 8007bfa:	bf08      	it	eq
 8007bfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c00:	f380 8809 	msr	PSP, r0
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	f3af 8000 	nop.w

08007c10 <pxCurrentTCBConst>:
 8007c10:	200028bc 	.word	0x200028bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c14:	bf00      	nop
 8007c16:	bf00      	nop

08007c18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	607b      	str	r3, [r7, #4]
}
 8007c30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c32:	f7ff f90f 	bl	8006e54 <xTaskIncrementTick>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d003      	beq.n	8007c44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c3c:	4b06      	ldr	r3, [pc, #24]	; (8007c58 <SysTick_Handler+0x40>)
 8007c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c42:	601a      	str	r2, [r3, #0]
 8007c44:	2300      	movs	r3, #0
 8007c46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	f383 8811 	msr	BASEPRI, r3
}
 8007c4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c50:	bf00      	nop
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	e000ed04 	.word	0xe000ed04

08007c5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c60:	4b0b      	ldr	r3, [pc, #44]	; (8007c90 <vPortSetupTimerInterrupt+0x34>)
 8007c62:	2200      	movs	r2, #0
 8007c64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c66:	4b0b      	ldr	r3, [pc, #44]	; (8007c94 <vPortSetupTimerInterrupt+0x38>)
 8007c68:	2200      	movs	r2, #0
 8007c6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c6c:	4b0a      	ldr	r3, [pc, #40]	; (8007c98 <vPortSetupTimerInterrupt+0x3c>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a0a      	ldr	r2, [pc, #40]	; (8007c9c <vPortSetupTimerInterrupt+0x40>)
 8007c72:	fba2 2303 	umull	r2, r3, r2, r3
 8007c76:	099b      	lsrs	r3, r3, #6
 8007c78:	4a09      	ldr	r2, [pc, #36]	; (8007ca0 <vPortSetupTimerInterrupt+0x44>)
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c7e:	4b04      	ldr	r3, [pc, #16]	; (8007c90 <vPortSetupTimerInterrupt+0x34>)
 8007c80:	2207      	movs	r2, #7
 8007c82:	601a      	str	r2, [r3, #0]
}
 8007c84:	bf00      	nop
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop
 8007c90:	e000e010 	.word	0xe000e010
 8007c94:	e000e018 	.word	0xe000e018
 8007c98:	20000000 	.word	0x20000000
 8007c9c:	10624dd3 	.word	0x10624dd3
 8007ca0:	e000e014 	.word	0xe000e014

08007ca4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ca4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007cb4 <vPortEnableVFP+0x10>
 8007ca8:	6801      	ldr	r1, [r0, #0]
 8007caa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007cae:	6001      	str	r1, [r0, #0]
 8007cb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007cb2:	bf00      	nop
 8007cb4:	e000ed88 	.word	0xe000ed88

08007cb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007cbe:	f3ef 8305 	mrs	r3, IPSR
 8007cc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2b0f      	cmp	r3, #15
 8007cc8:	d914      	bls.n	8007cf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007cca:	4a17      	ldr	r2, [pc, #92]	; (8007d28 <vPortValidateInterruptPriority+0x70>)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	4413      	add	r3, r2
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007cd4:	4b15      	ldr	r3, [pc, #84]	; (8007d2c <vPortValidateInterruptPriority+0x74>)
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	7afa      	ldrb	r2, [r7, #11]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d20a      	bcs.n	8007cf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce2:	f383 8811 	msr	BASEPRI, r3
 8007ce6:	f3bf 8f6f 	isb	sy
 8007cea:	f3bf 8f4f 	dsb	sy
 8007cee:	607b      	str	r3, [r7, #4]
}
 8007cf0:	bf00      	nop
 8007cf2:	e7fe      	b.n	8007cf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007cf4:	4b0e      	ldr	r3, [pc, #56]	; (8007d30 <vPortValidateInterruptPriority+0x78>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007cfc:	4b0d      	ldr	r3, [pc, #52]	; (8007d34 <vPortValidateInterruptPriority+0x7c>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d90a      	bls.n	8007d1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d08:	f383 8811 	msr	BASEPRI, r3
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	603b      	str	r3, [r7, #0]
}
 8007d16:	bf00      	nop
 8007d18:	e7fe      	b.n	8007d18 <vPortValidateInterruptPriority+0x60>
	}
 8007d1a:	bf00      	nop
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	e000e3f0 	.word	0xe000e3f0
 8007d2c:	200029e8 	.word	0x200029e8
 8007d30:	e000ed0c 	.word	0xe000ed0c
 8007d34:	200029ec 	.word	0x200029ec

08007d38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b08a      	sub	sp, #40	; 0x28
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007d40:	2300      	movs	r3, #0
 8007d42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007d44:	f7fe ffdc 	bl	8006d00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007d48:	4b5b      	ldr	r3, [pc, #364]	; (8007eb8 <pvPortMalloc+0x180>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d101      	bne.n	8007d54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007d50:	f000 f920 	bl	8007f94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007d54:	4b59      	ldr	r3, [pc, #356]	; (8007ebc <pvPortMalloc+0x184>)
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f040 8093 	bne.w	8007e88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d01d      	beq.n	8007da4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007d68:	2208      	movs	r2, #8
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f003 0307 	and.w	r3, r3, #7
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d014      	beq.n	8007da4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f023 0307 	bic.w	r3, r3, #7
 8007d80:	3308      	adds	r3, #8
 8007d82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f003 0307 	and.w	r3, r3, #7
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00a      	beq.n	8007da4 <pvPortMalloc+0x6c>
	__asm volatile
 8007d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d92:	f383 8811 	msr	BASEPRI, r3
 8007d96:	f3bf 8f6f 	isb	sy
 8007d9a:	f3bf 8f4f 	dsb	sy
 8007d9e:	617b      	str	r3, [r7, #20]
}
 8007da0:	bf00      	nop
 8007da2:	e7fe      	b.n	8007da2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d06e      	beq.n	8007e88 <pvPortMalloc+0x150>
 8007daa:	4b45      	ldr	r3, [pc, #276]	; (8007ec0 <pvPortMalloc+0x188>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d869      	bhi.n	8007e88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007db4:	4b43      	ldr	r3, [pc, #268]	; (8007ec4 <pvPortMalloc+0x18c>)
 8007db6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007db8:	4b42      	ldr	r3, [pc, #264]	; (8007ec4 <pvPortMalloc+0x18c>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007dbe:	e004      	b.n	8007dca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d903      	bls.n	8007ddc <pvPortMalloc+0xa4>
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1f1      	bne.n	8007dc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007ddc:	4b36      	ldr	r3, [pc, #216]	; (8007eb8 <pvPortMalloc+0x180>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d050      	beq.n	8007e88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007de6:	6a3b      	ldr	r3, [r7, #32]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2208      	movs	r2, #8
 8007dec:	4413      	add	r3, r2
 8007dee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	6a3b      	ldr	r3, [r7, #32]
 8007df6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfa:	685a      	ldr	r2, [r3, #4]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	1ad2      	subs	r2, r2, r3
 8007e00:	2308      	movs	r3, #8
 8007e02:	005b      	lsls	r3, r3, #1
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d91f      	bls.n	8007e48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	f003 0307 	and.w	r3, r3, #7
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00a      	beq.n	8007e30 <pvPortMalloc+0xf8>
	__asm volatile
 8007e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1e:	f383 8811 	msr	BASEPRI, r3
 8007e22:	f3bf 8f6f 	isb	sy
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	613b      	str	r3, [r7, #16]
}
 8007e2c:	bf00      	nop
 8007e2e:	e7fe      	b.n	8007e2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e32:	685a      	ldr	r2, [r3, #4]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	1ad2      	subs	r2, r2, r3
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007e42:	69b8      	ldr	r0, [r7, #24]
 8007e44:	f000 f908 	bl	8008058 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007e48:	4b1d      	ldr	r3, [pc, #116]	; (8007ec0 <pvPortMalloc+0x188>)
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	1ad3      	subs	r3, r2, r3
 8007e52:	4a1b      	ldr	r2, [pc, #108]	; (8007ec0 <pvPortMalloc+0x188>)
 8007e54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e56:	4b1a      	ldr	r3, [pc, #104]	; (8007ec0 <pvPortMalloc+0x188>)
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	4b1b      	ldr	r3, [pc, #108]	; (8007ec8 <pvPortMalloc+0x190>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d203      	bcs.n	8007e6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e62:	4b17      	ldr	r3, [pc, #92]	; (8007ec0 <pvPortMalloc+0x188>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a18      	ldr	r2, [pc, #96]	; (8007ec8 <pvPortMalloc+0x190>)
 8007e68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6c:	685a      	ldr	r2, [r3, #4]
 8007e6e:	4b13      	ldr	r3, [pc, #76]	; (8007ebc <pvPortMalloc+0x184>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	431a      	orrs	r2, r3
 8007e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007e7e:	4b13      	ldr	r3, [pc, #76]	; (8007ecc <pvPortMalloc+0x194>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	3301      	adds	r3, #1
 8007e84:	4a11      	ldr	r2, [pc, #68]	; (8007ecc <pvPortMalloc+0x194>)
 8007e86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e88:	f7fe ff48 	bl	8006d1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	f003 0307 	and.w	r3, r3, #7
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00a      	beq.n	8007eac <pvPortMalloc+0x174>
	__asm volatile
 8007e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9a:	f383 8811 	msr	BASEPRI, r3
 8007e9e:	f3bf 8f6f 	isb	sy
 8007ea2:	f3bf 8f4f 	dsb	sy
 8007ea6:	60fb      	str	r3, [r7, #12]
}
 8007ea8:	bf00      	nop
 8007eaa:	e7fe      	b.n	8007eaa <pvPortMalloc+0x172>
	return pvReturn;
 8007eac:	69fb      	ldr	r3, [r7, #28]
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3728      	adds	r7, #40	; 0x28
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	200035b0 	.word	0x200035b0
 8007ebc:	200035c4 	.word	0x200035c4
 8007ec0:	200035b4 	.word	0x200035b4
 8007ec4:	200035a8 	.word	0x200035a8
 8007ec8:	200035b8 	.word	0x200035b8
 8007ecc:	200035bc 	.word	0x200035bc

08007ed0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d04d      	beq.n	8007f7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ee2:	2308      	movs	r3, #8
 8007ee4:	425b      	negs	r3, r3
 8007ee6:	697a      	ldr	r2, [r7, #20]
 8007ee8:	4413      	add	r3, r2
 8007eea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	685a      	ldr	r2, [r3, #4]
 8007ef4:	4b24      	ldr	r3, [pc, #144]	; (8007f88 <vPortFree+0xb8>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4013      	ands	r3, r2
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d10a      	bne.n	8007f14 <vPortFree+0x44>
	__asm volatile
 8007efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f02:	f383 8811 	msr	BASEPRI, r3
 8007f06:	f3bf 8f6f 	isb	sy
 8007f0a:	f3bf 8f4f 	dsb	sy
 8007f0e:	60fb      	str	r3, [r7, #12]
}
 8007f10:	bf00      	nop
 8007f12:	e7fe      	b.n	8007f12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d00a      	beq.n	8007f32 <vPortFree+0x62>
	__asm volatile
 8007f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f20:	f383 8811 	msr	BASEPRI, r3
 8007f24:	f3bf 8f6f 	isb	sy
 8007f28:	f3bf 8f4f 	dsb	sy
 8007f2c:	60bb      	str	r3, [r7, #8]
}
 8007f2e:	bf00      	nop
 8007f30:	e7fe      	b.n	8007f30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	685a      	ldr	r2, [r3, #4]
 8007f36:	4b14      	ldr	r3, [pc, #80]	; (8007f88 <vPortFree+0xb8>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d01e      	beq.n	8007f7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d11a      	bne.n	8007f7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	685a      	ldr	r2, [r3, #4]
 8007f4c:	4b0e      	ldr	r3, [pc, #56]	; (8007f88 <vPortFree+0xb8>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	43db      	mvns	r3, r3
 8007f52:	401a      	ands	r2, r3
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007f58:	f7fe fed2 	bl	8006d00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	685a      	ldr	r2, [r3, #4]
 8007f60:	4b0a      	ldr	r3, [pc, #40]	; (8007f8c <vPortFree+0xbc>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4413      	add	r3, r2
 8007f66:	4a09      	ldr	r2, [pc, #36]	; (8007f8c <vPortFree+0xbc>)
 8007f68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f6a:	6938      	ldr	r0, [r7, #16]
 8007f6c:	f000 f874 	bl	8008058 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007f70:	4b07      	ldr	r3, [pc, #28]	; (8007f90 <vPortFree+0xc0>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	3301      	adds	r3, #1
 8007f76:	4a06      	ldr	r2, [pc, #24]	; (8007f90 <vPortFree+0xc0>)
 8007f78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007f7a:	f7fe fecf 	bl	8006d1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007f7e:	bf00      	nop
 8007f80:	3718      	adds	r7, #24
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	200035c4 	.word	0x200035c4
 8007f8c:	200035b4 	.word	0x200035b4
 8007f90:	200035c0 	.word	0x200035c0

08007f94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f9a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007f9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007fa0:	4b27      	ldr	r3, [pc, #156]	; (8008040 <prvHeapInit+0xac>)
 8007fa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f003 0307 	and.w	r3, r3, #7
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00c      	beq.n	8007fc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	3307      	adds	r3, #7
 8007fb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f023 0307 	bic.w	r3, r3, #7
 8007fba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007fbc:	68ba      	ldr	r2, [r7, #8]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	4a1f      	ldr	r2, [pc, #124]	; (8008040 <prvHeapInit+0xac>)
 8007fc4:	4413      	add	r3, r2
 8007fc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007fcc:	4a1d      	ldr	r2, [pc, #116]	; (8008044 <prvHeapInit+0xb0>)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007fd2:	4b1c      	ldr	r3, [pc, #112]	; (8008044 <prvHeapInit+0xb0>)
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	68ba      	ldr	r2, [r7, #8]
 8007fdc:	4413      	add	r3, r2
 8007fde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007fe0:	2208      	movs	r2, #8
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	1a9b      	subs	r3, r3, r2
 8007fe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f023 0307 	bic.w	r3, r3, #7
 8007fee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	4a15      	ldr	r2, [pc, #84]	; (8008048 <prvHeapInit+0xb4>)
 8007ff4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ff6:	4b14      	ldr	r3, [pc, #80]	; (8008048 <prvHeapInit+0xb4>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007ffe:	4b12      	ldr	r3, [pc, #72]	; (8008048 <prvHeapInit+0xb4>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2200      	movs	r2, #0
 8008004:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	1ad2      	subs	r2, r2, r3
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008014:	4b0c      	ldr	r3, [pc, #48]	; (8008048 <prvHeapInit+0xb4>)
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	4a0a      	ldr	r2, [pc, #40]	; (800804c <prvHeapInit+0xb8>)
 8008022:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	4a09      	ldr	r2, [pc, #36]	; (8008050 <prvHeapInit+0xbc>)
 800802a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800802c:	4b09      	ldr	r3, [pc, #36]	; (8008054 <prvHeapInit+0xc0>)
 800802e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008032:	601a      	str	r2, [r3, #0]
}
 8008034:	bf00      	nop
 8008036:	3714      	adds	r7, #20
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr
 8008040:	200029f0 	.word	0x200029f0
 8008044:	200035a8 	.word	0x200035a8
 8008048:	200035b0 	.word	0x200035b0
 800804c:	200035b8 	.word	0x200035b8
 8008050:	200035b4 	.word	0x200035b4
 8008054:	200035c4 	.word	0x200035c4

08008058 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008058:	b480      	push	{r7}
 800805a:	b085      	sub	sp, #20
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008060:	4b28      	ldr	r3, [pc, #160]	; (8008104 <prvInsertBlockIntoFreeList+0xac>)
 8008062:	60fb      	str	r3, [r7, #12]
 8008064:	e002      	b.n	800806c <prvInsertBlockIntoFreeList+0x14>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	60fb      	str	r3, [r7, #12]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	429a      	cmp	r2, r3
 8008074:	d8f7      	bhi.n	8008066 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	68ba      	ldr	r2, [r7, #8]
 8008080:	4413      	add	r3, r2
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	429a      	cmp	r2, r3
 8008086:	d108      	bne.n	800809a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	685a      	ldr	r2, [r3, #4]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	441a      	add	r2, r3
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	68ba      	ldr	r2, [r7, #8]
 80080a4:	441a      	add	r2, r3
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d118      	bne.n	80080e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	4b15      	ldr	r3, [pc, #84]	; (8008108 <prvInsertBlockIntoFreeList+0xb0>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d00d      	beq.n	80080d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	685a      	ldr	r2, [r3, #4]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	441a      	add	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	601a      	str	r2, [r3, #0]
 80080d4:	e008      	b.n	80080e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80080d6:	4b0c      	ldr	r3, [pc, #48]	; (8008108 <prvInsertBlockIntoFreeList+0xb0>)
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	601a      	str	r2, [r3, #0]
 80080de:	e003      	b.n	80080e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d002      	beq.n	80080f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080f6:	bf00      	nop
 80080f8:	3714      	adds	r7, #20
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	200035a8 	.word	0x200035a8
 8008108:	200035b0 	.word	0x200035b0

0800810c <__errno>:
 800810c:	4b01      	ldr	r3, [pc, #4]	; (8008114 <__errno+0x8>)
 800810e:	6818      	ldr	r0, [r3, #0]
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	20000010 	.word	0x20000010

08008118 <std>:
 8008118:	2300      	movs	r3, #0
 800811a:	b510      	push	{r4, lr}
 800811c:	4604      	mov	r4, r0
 800811e:	e9c0 3300 	strd	r3, r3, [r0]
 8008122:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008126:	6083      	str	r3, [r0, #8]
 8008128:	8181      	strh	r1, [r0, #12]
 800812a:	6643      	str	r3, [r0, #100]	; 0x64
 800812c:	81c2      	strh	r2, [r0, #14]
 800812e:	6183      	str	r3, [r0, #24]
 8008130:	4619      	mov	r1, r3
 8008132:	2208      	movs	r2, #8
 8008134:	305c      	adds	r0, #92	; 0x5c
 8008136:	f000 f93b 	bl	80083b0 <memset>
 800813a:	4b05      	ldr	r3, [pc, #20]	; (8008150 <std+0x38>)
 800813c:	6263      	str	r3, [r4, #36]	; 0x24
 800813e:	4b05      	ldr	r3, [pc, #20]	; (8008154 <std+0x3c>)
 8008140:	62a3      	str	r3, [r4, #40]	; 0x28
 8008142:	4b05      	ldr	r3, [pc, #20]	; (8008158 <std+0x40>)
 8008144:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008146:	4b05      	ldr	r3, [pc, #20]	; (800815c <std+0x44>)
 8008148:	6224      	str	r4, [r4, #32]
 800814a:	6323      	str	r3, [r4, #48]	; 0x30
 800814c:	bd10      	pop	{r4, pc}
 800814e:	bf00      	nop
 8008150:	08008f49 	.word	0x08008f49
 8008154:	08008f6b 	.word	0x08008f6b
 8008158:	08008fa3 	.word	0x08008fa3
 800815c:	08008fc7 	.word	0x08008fc7

08008160 <_cleanup_r>:
 8008160:	4901      	ldr	r1, [pc, #4]	; (8008168 <_cleanup_r+0x8>)
 8008162:	f000 b8af 	b.w	80082c4 <_fwalk_reent>
 8008166:	bf00      	nop
 8008168:	08009e59 	.word	0x08009e59

0800816c <__sfmoreglue>:
 800816c:	b570      	push	{r4, r5, r6, lr}
 800816e:	2268      	movs	r2, #104	; 0x68
 8008170:	1e4d      	subs	r5, r1, #1
 8008172:	4355      	muls	r5, r2
 8008174:	460e      	mov	r6, r1
 8008176:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800817a:	f000 f98d 	bl	8008498 <_malloc_r>
 800817e:	4604      	mov	r4, r0
 8008180:	b140      	cbz	r0, 8008194 <__sfmoreglue+0x28>
 8008182:	2100      	movs	r1, #0
 8008184:	e9c0 1600 	strd	r1, r6, [r0]
 8008188:	300c      	adds	r0, #12
 800818a:	60a0      	str	r0, [r4, #8]
 800818c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008190:	f000 f90e 	bl	80083b0 <memset>
 8008194:	4620      	mov	r0, r4
 8008196:	bd70      	pop	{r4, r5, r6, pc}

08008198 <__sfp_lock_acquire>:
 8008198:	4801      	ldr	r0, [pc, #4]	; (80081a0 <__sfp_lock_acquire+0x8>)
 800819a:	f000 b8d8 	b.w	800834e <__retarget_lock_acquire_recursive>
 800819e:	bf00      	nop
 80081a0:	200035c9 	.word	0x200035c9

080081a4 <__sfp_lock_release>:
 80081a4:	4801      	ldr	r0, [pc, #4]	; (80081ac <__sfp_lock_release+0x8>)
 80081a6:	f000 b8d3 	b.w	8008350 <__retarget_lock_release_recursive>
 80081aa:	bf00      	nop
 80081ac:	200035c9 	.word	0x200035c9

080081b0 <__sinit_lock_acquire>:
 80081b0:	4801      	ldr	r0, [pc, #4]	; (80081b8 <__sinit_lock_acquire+0x8>)
 80081b2:	f000 b8cc 	b.w	800834e <__retarget_lock_acquire_recursive>
 80081b6:	bf00      	nop
 80081b8:	200035ca 	.word	0x200035ca

080081bc <__sinit_lock_release>:
 80081bc:	4801      	ldr	r0, [pc, #4]	; (80081c4 <__sinit_lock_release+0x8>)
 80081be:	f000 b8c7 	b.w	8008350 <__retarget_lock_release_recursive>
 80081c2:	bf00      	nop
 80081c4:	200035ca 	.word	0x200035ca

080081c8 <__sinit>:
 80081c8:	b510      	push	{r4, lr}
 80081ca:	4604      	mov	r4, r0
 80081cc:	f7ff fff0 	bl	80081b0 <__sinit_lock_acquire>
 80081d0:	69a3      	ldr	r3, [r4, #24]
 80081d2:	b11b      	cbz	r3, 80081dc <__sinit+0x14>
 80081d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081d8:	f7ff bff0 	b.w	80081bc <__sinit_lock_release>
 80081dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80081e0:	6523      	str	r3, [r4, #80]	; 0x50
 80081e2:	4b13      	ldr	r3, [pc, #76]	; (8008230 <__sinit+0x68>)
 80081e4:	4a13      	ldr	r2, [pc, #76]	; (8008234 <__sinit+0x6c>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80081ea:	42a3      	cmp	r3, r4
 80081ec:	bf04      	itt	eq
 80081ee:	2301      	moveq	r3, #1
 80081f0:	61a3      	streq	r3, [r4, #24]
 80081f2:	4620      	mov	r0, r4
 80081f4:	f000 f820 	bl	8008238 <__sfp>
 80081f8:	6060      	str	r0, [r4, #4]
 80081fa:	4620      	mov	r0, r4
 80081fc:	f000 f81c 	bl	8008238 <__sfp>
 8008200:	60a0      	str	r0, [r4, #8]
 8008202:	4620      	mov	r0, r4
 8008204:	f000 f818 	bl	8008238 <__sfp>
 8008208:	2200      	movs	r2, #0
 800820a:	60e0      	str	r0, [r4, #12]
 800820c:	2104      	movs	r1, #4
 800820e:	6860      	ldr	r0, [r4, #4]
 8008210:	f7ff ff82 	bl	8008118 <std>
 8008214:	68a0      	ldr	r0, [r4, #8]
 8008216:	2201      	movs	r2, #1
 8008218:	2109      	movs	r1, #9
 800821a:	f7ff ff7d 	bl	8008118 <std>
 800821e:	68e0      	ldr	r0, [r4, #12]
 8008220:	2202      	movs	r2, #2
 8008222:	2112      	movs	r1, #18
 8008224:	f7ff ff78 	bl	8008118 <std>
 8008228:	2301      	movs	r3, #1
 800822a:	61a3      	str	r3, [r4, #24]
 800822c:	e7d2      	b.n	80081d4 <__sinit+0xc>
 800822e:	bf00      	nop
 8008230:	0800b340 	.word	0x0800b340
 8008234:	08008161 	.word	0x08008161

08008238 <__sfp>:
 8008238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800823a:	4607      	mov	r7, r0
 800823c:	f7ff ffac 	bl	8008198 <__sfp_lock_acquire>
 8008240:	4b1e      	ldr	r3, [pc, #120]	; (80082bc <__sfp+0x84>)
 8008242:	681e      	ldr	r6, [r3, #0]
 8008244:	69b3      	ldr	r3, [r6, #24]
 8008246:	b913      	cbnz	r3, 800824e <__sfp+0x16>
 8008248:	4630      	mov	r0, r6
 800824a:	f7ff ffbd 	bl	80081c8 <__sinit>
 800824e:	3648      	adds	r6, #72	; 0x48
 8008250:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008254:	3b01      	subs	r3, #1
 8008256:	d503      	bpl.n	8008260 <__sfp+0x28>
 8008258:	6833      	ldr	r3, [r6, #0]
 800825a:	b30b      	cbz	r3, 80082a0 <__sfp+0x68>
 800825c:	6836      	ldr	r6, [r6, #0]
 800825e:	e7f7      	b.n	8008250 <__sfp+0x18>
 8008260:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008264:	b9d5      	cbnz	r5, 800829c <__sfp+0x64>
 8008266:	4b16      	ldr	r3, [pc, #88]	; (80082c0 <__sfp+0x88>)
 8008268:	60e3      	str	r3, [r4, #12]
 800826a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800826e:	6665      	str	r5, [r4, #100]	; 0x64
 8008270:	f000 f86c 	bl	800834c <__retarget_lock_init_recursive>
 8008274:	f7ff ff96 	bl	80081a4 <__sfp_lock_release>
 8008278:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800827c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008280:	6025      	str	r5, [r4, #0]
 8008282:	61a5      	str	r5, [r4, #24]
 8008284:	2208      	movs	r2, #8
 8008286:	4629      	mov	r1, r5
 8008288:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800828c:	f000 f890 	bl	80083b0 <memset>
 8008290:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008294:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008298:	4620      	mov	r0, r4
 800829a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800829c:	3468      	adds	r4, #104	; 0x68
 800829e:	e7d9      	b.n	8008254 <__sfp+0x1c>
 80082a0:	2104      	movs	r1, #4
 80082a2:	4638      	mov	r0, r7
 80082a4:	f7ff ff62 	bl	800816c <__sfmoreglue>
 80082a8:	4604      	mov	r4, r0
 80082aa:	6030      	str	r0, [r6, #0]
 80082ac:	2800      	cmp	r0, #0
 80082ae:	d1d5      	bne.n	800825c <__sfp+0x24>
 80082b0:	f7ff ff78 	bl	80081a4 <__sfp_lock_release>
 80082b4:	230c      	movs	r3, #12
 80082b6:	603b      	str	r3, [r7, #0]
 80082b8:	e7ee      	b.n	8008298 <__sfp+0x60>
 80082ba:	bf00      	nop
 80082bc:	0800b340 	.word	0x0800b340
 80082c0:	ffff0001 	.word	0xffff0001

080082c4 <_fwalk_reent>:
 80082c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082c8:	4606      	mov	r6, r0
 80082ca:	4688      	mov	r8, r1
 80082cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80082d0:	2700      	movs	r7, #0
 80082d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082d6:	f1b9 0901 	subs.w	r9, r9, #1
 80082da:	d505      	bpl.n	80082e8 <_fwalk_reent+0x24>
 80082dc:	6824      	ldr	r4, [r4, #0]
 80082de:	2c00      	cmp	r4, #0
 80082e0:	d1f7      	bne.n	80082d2 <_fwalk_reent+0xe>
 80082e2:	4638      	mov	r0, r7
 80082e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082e8:	89ab      	ldrh	r3, [r5, #12]
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d907      	bls.n	80082fe <_fwalk_reent+0x3a>
 80082ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80082f2:	3301      	adds	r3, #1
 80082f4:	d003      	beq.n	80082fe <_fwalk_reent+0x3a>
 80082f6:	4629      	mov	r1, r5
 80082f8:	4630      	mov	r0, r6
 80082fa:	47c0      	blx	r8
 80082fc:	4307      	orrs	r7, r0
 80082fe:	3568      	adds	r5, #104	; 0x68
 8008300:	e7e9      	b.n	80082d6 <_fwalk_reent+0x12>
	...

08008304 <__libc_init_array>:
 8008304:	b570      	push	{r4, r5, r6, lr}
 8008306:	4d0d      	ldr	r5, [pc, #52]	; (800833c <__libc_init_array+0x38>)
 8008308:	4c0d      	ldr	r4, [pc, #52]	; (8008340 <__libc_init_array+0x3c>)
 800830a:	1b64      	subs	r4, r4, r5
 800830c:	10a4      	asrs	r4, r4, #2
 800830e:	2600      	movs	r6, #0
 8008310:	42a6      	cmp	r6, r4
 8008312:	d109      	bne.n	8008328 <__libc_init_array+0x24>
 8008314:	4d0b      	ldr	r5, [pc, #44]	; (8008344 <__libc_init_array+0x40>)
 8008316:	4c0c      	ldr	r4, [pc, #48]	; (8008348 <__libc_init_array+0x44>)
 8008318:	f002 fe90 	bl	800b03c <_init>
 800831c:	1b64      	subs	r4, r4, r5
 800831e:	10a4      	asrs	r4, r4, #2
 8008320:	2600      	movs	r6, #0
 8008322:	42a6      	cmp	r6, r4
 8008324:	d105      	bne.n	8008332 <__libc_init_array+0x2e>
 8008326:	bd70      	pop	{r4, r5, r6, pc}
 8008328:	f855 3b04 	ldr.w	r3, [r5], #4
 800832c:	4798      	blx	r3
 800832e:	3601      	adds	r6, #1
 8008330:	e7ee      	b.n	8008310 <__libc_init_array+0xc>
 8008332:	f855 3b04 	ldr.w	r3, [r5], #4
 8008336:	4798      	blx	r3
 8008338:	3601      	adds	r6, #1
 800833a:	e7f2      	b.n	8008322 <__libc_init_array+0x1e>
 800833c:	0800b6c4 	.word	0x0800b6c4
 8008340:	0800b6c4 	.word	0x0800b6c4
 8008344:	0800b6c4 	.word	0x0800b6c4
 8008348:	0800b6c8 	.word	0x0800b6c8

0800834c <__retarget_lock_init_recursive>:
 800834c:	4770      	bx	lr

0800834e <__retarget_lock_acquire_recursive>:
 800834e:	4770      	bx	lr

08008350 <__retarget_lock_release_recursive>:
 8008350:	4770      	bx	lr
	...

08008354 <malloc>:
 8008354:	4b02      	ldr	r3, [pc, #8]	; (8008360 <malloc+0xc>)
 8008356:	4601      	mov	r1, r0
 8008358:	6818      	ldr	r0, [r3, #0]
 800835a:	f000 b89d 	b.w	8008498 <_malloc_r>
 800835e:	bf00      	nop
 8008360:	20000010 	.word	0x20000010

08008364 <free>:
 8008364:	4b02      	ldr	r3, [pc, #8]	; (8008370 <free+0xc>)
 8008366:	4601      	mov	r1, r0
 8008368:	6818      	ldr	r0, [r3, #0]
 800836a:	f000 b829 	b.w	80083c0 <_free_r>
 800836e:	bf00      	nop
 8008370:	20000010 	.word	0x20000010

08008374 <memcmp>:
 8008374:	b510      	push	{r4, lr}
 8008376:	3901      	subs	r1, #1
 8008378:	4402      	add	r2, r0
 800837a:	4290      	cmp	r0, r2
 800837c:	d101      	bne.n	8008382 <memcmp+0xe>
 800837e:	2000      	movs	r0, #0
 8008380:	e005      	b.n	800838e <memcmp+0x1a>
 8008382:	7803      	ldrb	r3, [r0, #0]
 8008384:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008388:	42a3      	cmp	r3, r4
 800838a:	d001      	beq.n	8008390 <memcmp+0x1c>
 800838c:	1b18      	subs	r0, r3, r4
 800838e:	bd10      	pop	{r4, pc}
 8008390:	3001      	adds	r0, #1
 8008392:	e7f2      	b.n	800837a <memcmp+0x6>

08008394 <memcpy>:
 8008394:	440a      	add	r2, r1
 8008396:	4291      	cmp	r1, r2
 8008398:	f100 33ff 	add.w	r3, r0, #4294967295
 800839c:	d100      	bne.n	80083a0 <memcpy+0xc>
 800839e:	4770      	bx	lr
 80083a0:	b510      	push	{r4, lr}
 80083a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083aa:	4291      	cmp	r1, r2
 80083ac:	d1f9      	bne.n	80083a2 <memcpy+0xe>
 80083ae:	bd10      	pop	{r4, pc}

080083b0 <memset>:
 80083b0:	4402      	add	r2, r0
 80083b2:	4603      	mov	r3, r0
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d100      	bne.n	80083ba <memset+0xa>
 80083b8:	4770      	bx	lr
 80083ba:	f803 1b01 	strb.w	r1, [r3], #1
 80083be:	e7f9      	b.n	80083b4 <memset+0x4>

080083c0 <_free_r>:
 80083c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083c2:	2900      	cmp	r1, #0
 80083c4:	d044      	beq.n	8008450 <_free_r+0x90>
 80083c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083ca:	9001      	str	r0, [sp, #4]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f1a1 0404 	sub.w	r4, r1, #4
 80083d2:	bfb8      	it	lt
 80083d4:	18e4      	addlt	r4, r4, r3
 80083d6:	f001 fd91 	bl	8009efc <__malloc_lock>
 80083da:	4a1e      	ldr	r2, [pc, #120]	; (8008454 <_free_r+0x94>)
 80083dc:	9801      	ldr	r0, [sp, #4]
 80083de:	6813      	ldr	r3, [r2, #0]
 80083e0:	b933      	cbnz	r3, 80083f0 <_free_r+0x30>
 80083e2:	6063      	str	r3, [r4, #4]
 80083e4:	6014      	str	r4, [r2, #0]
 80083e6:	b003      	add	sp, #12
 80083e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083ec:	f001 bd8c 	b.w	8009f08 <__malloc_unlock>
 80083f0:	42a3      	cmp	r3, r4
 80083f2:	d908      	bls.n	8008406 <_free_r+0x46>
 80083f4:	6825      	ldr	r5, [r4, #0]
 80083f6:	1961      	adds	r1, r4, r5
 80083f8:	428b      	cmp	r3, r1
 80083fa:	bf01      	itttt	eq
 80083fc:	6819      	ldreq	r1, [r3, #0]
 80083fe:	685b      	ldreq	r3, [r3, #4]
 8008400:	1949      	addeq	r1, r1, r5
 8008402:	6021      	streq	r1, [r4, #0]
 8008404:	e7ed      	b.n	80083e2 <_free_r+0x22>
 8008406:	461a      	mov	r2, r3
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	b10b      	cbz	r3, 8008410 <_free_r+0x50>
 800840c:	42a3      	cmp	r3, r4
 800840e:	d9fa      	bls.n	8008406 <_free_r+0x46>
 8008410:	6811      	ldr	r1, [r2, #0]
 8008412:	1855      	adds	r5, r2, r1
 8008414:	42a5      	cmp	r5, r4
 8008416:	d10b      	bne.n	8008430 <_free_r+0x70>
 8008418:	6824      	ldr	r4, [r4, #0]
 800841a:	4421      	add	r1, r4
 800841c:	1854      	adds	r4, r2, r1
 800841e:	42a3      	cmp	r3, r4
 8008420:	6011      	str	r1, [r2, #0]
 8008422:	d1e0      	bne.n	80083e6 <_free_r+0x26>
 8008424:	681c      	ldr	r4, [r3, #0]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	6053      	str	r3, [r2, #4]
 800842a:	4421      	add	r1, r4
 800842c:	6011      	str	r1, [r2, #0]
 800842e:	e7da      	b.n	80083e6 <_free_r+0x26>
 8008430:	d902      	bls.n	8008438 <_free_r+0x78>
 8008432:	230c      	movs	r3, #12
 8008434:	6003      	str	r3, [r0, #0]
 8008436:	e7d6      	b.n	80083e6 <_free_r+0x26>
 8008438:	6825      	ldr	r5, [r4, #0]
 800843a:	1961      	adds	r1, r4, r5
 800843c:	428b      	cmp	r3, r1
 800843e:	bf04      	itt	eq
 8008440:	6819      	ldreq	r1, [r3, #0]
 8008442:	685b      	ldreq	r3, [r3, #4]
 8008444:	6063      	str	r3, [r4, #4]
 8008446:	bf04      	itt	eq
 8008448:	1949      	addeq	r1, r1, r5
 800844a:	6021      	streq	r1, [r4, #0]
 800844c:	6054      	str	r4, [r2, #4]
 800844e:	e7ca      	b.n	80083e6 <_free_r+0x26>
 8008450:	b003      	add	sp, #12
 8008452:	bd30      	pop	{r4, r5, pc}
 8008454:	200035cc 	.word	0x200035cc

08008458 <sbrk_aligned>:
 8008458:	b570      	push	{r4, r5, r6, lr}
 800845a:	4e0e      	ldr	r6, [pc, #56]	; (8008494 <sbrk_aligned+0x3c>)
 800845c:	460c      	mov	r4, r1
 800845e:	6831      	ldr	r1, [r6, #0]
 8008460:	4605      	mov	r5, r0
 8008462:	b911      	cbnz	r1, 800846a <sbrk_aligned+0x12>
 8008464:	f000 fd60 	bl	8008f28 <_sbrk_r>
 8008468:	6030      	str	r0, [r6, #0]
 800846a:	4621      	mov	r1, r4
 800846c:	4628      	mov	r0, r5
 800846e:	f000 fd5b 	bl	8008f28 <_sbrk_r>
 8008472:	1c43      	adds	r3, r0, #1
 8008474:	d00a      	beq.n	800848c <sbrk_aligned+0x34>
 8008476:	1cc4      	adds	r4, r0, #3
 8008478:	f024 0403 	bic.w	r4, r4, #3
 800847c:	42a0      	cmp	r0, r4
 800847e:	d007      	beq.n	8008490 <sbrk_aligned+0x38>
 8008480:	1a21      	subs	r1, r4, r0
 8008482:	4628      	mov	r0, r5
 8008484:	f000 fd50 	bl	8008f28 <_sbrk_r>
 8008488:	3001      	adds	r0, #1
 800848a:	d101      	bne.n	8008490 <sbrk_aligned+0x38>
 800848c:	f04f 34ff 	mov.w	r4, #4294967295
 8008490:	4620      	mov	r0, r4
 8008492:	bd70      	pop	{r4, r5, r6, pc}
 8008494:	200035d0 	.word	0x200035d0

08008498 <_malloc_r>:
 8008498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800849c:	1ccd      	adds	r5, r1, #3
 800849e:	f025 0503 	bic.w	r5, r5, #3
 80084a2:	3508      	adds	r5, #8
 80084a4:	2d0c      	cmp	r5, #12
 80084a6:	bf38      	it	cc
 80084a8:	250c      	movcc	r5, #12
 80084aa:	2d00      	cmp	r5, #0
 80084ac:	4607      	mov	r7, r0
 80084ae:	db01      	blt.n	80084b4 <_malloc_r+0x1c>
 80084b0:	42a9      	cmp	r1, r5
 80084b2:	d905      	bls.n	80084c0 <_malloc_r+0x28>
 80084b4:	230c      	movs	r3, #12
 80084b6:	603b      	str	r3, [r7, #0]
 80084b8:	2600      	movs	r6, #0
 80084ba:	4630      	mov	r0, r6
 80084bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084c0:	4e2e      	ldr	r6, [pc, #184]	; (800857c <_malloc_r+0xe4>)
 80084c2:	f001 fd1b 	bl	8009efc <__malloc_lock>
 80084c6:	6833      	ldr	r3, [r6, #0]
 80084c8:	461c      	mov	r4, r3
 80084ca:	bb34      	cbnz	r4, 800851a <_malloc_r+0x82>
 80084cc:	4629      	mov	r1, r5
 80084ce:	4638      	mov	r0, r7
 80084d0:	f7ff ffc2 	bl	8008458 <sbrk_aligned>
 80084d4:	1c43      	adds	r3, r0, #1
 80084d6:	4604      	mov	r4, r0
 80084d8:	d14d      	bne.n	8008576 <_malloc_r+0xde>
 80084da:	6834      	ldr	r4, [r6, #0]
 80084dc:	4626      	mov	r6, r4
 80084de:	2e00      	cmp	r6, #0
 80084e0:	d140      	bne.n	8008564 <_malloc_r+0xcc>
 80084e2:	6823      	ldr	r3, [r4, #0]
 80084e4:	4631      	mov	r1, r6
 80084e6:	4638      	mov	r0, r7
 80084e8:	eb04 0803 	add.w	r8, r4, r3
 80084ec:	f000 fd1c 	bl	8008f28 <_sbrk_r>
 80084f0:	4580      	cmp	r8, r0
 80084f2:	d13a      	bne.n	800856a <_malloc_r+0xd2>
 80084f4:	6821      	ldr	r1, [r4, #0]
 80084f6:	3503      	adds	r5, #3
 80084f8:	1a6d      	subs	r5, r5, r1
 80084fa:	f025 0503 	bic.w	r5, r5, #3
 80084fe:	3508      	adds	r5, #8
 8008500:	2d0c      	cmp	r5, #12
 8008502:	bf38      	it	cc
 8008504:	250c      	movcc	r5, #12
 8008506:	4629      	mov	r1, r5
 8008508:	4638      	mov	r0, r7
 800850a:	f7ff ffa5 	bl	8008458 <sbrk_aligned>
 800850e:	3001      	adds	r0, #1
 8008510:	d02b      	beq.n	800856a <_malloc_r+0xd2>
 8008512:	6823      	ldr	r3, [r4, #0]
 8008514:	442b      	add	r3, r5
 8008516:	6023      	str	r3, [r4, #0]
 8008518:	e00e      	b.n	8008538 <_malloc_r+0xa0>
 800851a:	6822      	ldr	r2, [r4, #0]
 800851c:	1b52      	subs	r2, r2, r5
 800851e:	d41e      	bmi.n	800855e <_malloc_r+0xc6>
 8008520:	2a0b      	cmp	r2, #11
 8008522:	d916      	bls.n	8008552 <_malloc_r+0xba>
 8008524:	1961      	adds	r1, r4, r5
 8008526:	42a3      	cmp	r3, r4
 8008528:	6025      	str	r5, [r4, #0]
 800852a:	bf18      	it	ne
 800852c:	6059      	strne	r1, [r3, #4]
 800852e:	6863      	ldr	r3, [r4, #4]
 8008530:	bf08      	it	eq
 8008532:	6031      	streq	r1, [r6, #0]
 8008534:	5162      	str	r2, [r4, r5]
 8008536:	604b      	str	r3, [r1, #4]
 8008538:	4638      	mov	r0, r7
 800853a:	f104 060b 	add.w	r6, r4, #11
 800853e:	f001 fce3 	bl	8009f08 <__malloc_unlock>
 8008542:	f026 0607 	bic.w	r6, r6, #7
 8008546:	1d23      	adds	r3, r4, #4
 8008548:	1af2      	subs	r2, r6, r3
 800854a:	d0b6      	beq.n	80084ba <_malloc_r+0x22>
 800854c:	1b9b      	subs	r3, r3, r6
 800854e:	50a3      	str	r3, [r4, r2]
 8008550:	e7b3      	b.n	80084ba <_malloc_r+0x22>
 8008552:	6862      	ldr	r2, [r4, #4]
 8008554:	42a3      	cmp	r3, r4
 8008556:	bf0c      	ite	eq
 8008558:	6032      	streq	r2, [r6, #0]
 800855a:	605a      	strne	r2, [r3, #4]
 800855c:	e7ec      	b.n	8008538 <_malloc_r+0xa0>
 800855e:	4623      	mov	r3, r4
 8008560:	6864      	ldr	r4, [r4, #4]
 8008562:	e7b2      	b.n	80084ca <_malloc_r+0x32>
 8008564:	4634      	mov	r4, r6
 8008566:	6876      	ldr	r6, [r6, #4]
 8008568:	e7b9      	b.n	80084de <_malloc_r+0x46>
 800856a:	230c      	movs	r3, #12
 800856c:	603b      	str	r3, [r7, #0]
 800856e:	4638      	mov	r0, r7
 8008570:	f001 fcca 	bl	8009f08 <__malloc_unlock>
 8008574:	e7a1      	b.n	80084ba <_malloc_r+0x22>
 8008576:	6025      	str	r5, [r4, #0]
 8008578:	e7de      	b.n	8008538 <_malloc_r+0xa0>
 800857a:	bf00      	nop
 800857c:	200035cc 	.word	0x200035cc

08008580 <__cvt>:
 8008580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008584:	ec55 4b10 	vmov	r4, r5, d0
 8008588:	2d00      	cmp	r5, #0
 800858a:	460e      	mov	r6, r1
 800858c:	4619      	mov	r1, r3
 800858e:	462b      	mov	r3, r5
 8008590:	bfbb      	ittet	lt
 8008592:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008596:	461d      	movlt	r5, r3
 8008598:	2300      	movge	r3, #0
 800859a:	232d      	movlt	r3, #45	; 0x2d
 800859c:	700b      	strb	r3, [r1, #0]
 800859e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80085a4:	4691      	mov	r9, r2
 80085a6:	f023 0820 	bic.w	r8, r3, #32
 80085aa:	bfbc      	itt	lt
 80085ac:	4622      	movlt	r2, r4
 80085ae:	4614      	movlt	r4, r2
 80085b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80085b4:	d005      	beq.n	80085c2 <__cvt+0x42>
 80085b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80085ba:	d100      	bne.n	80085be <__cvt+0x3e>
 80085bc:	3601      	adds	r6, #1
 80085be:	2102      	movs	r1, #2
 80085c0:	e000      	b.n	80085c4 <__cvt+0x44>
 80085c2:	2103      	movs	r1, #3
 80085c4:	ab03      	add	r3, sp, #12
 80085c6:	9301      	str	r3, [sp, #4]
 80085c8:	ab02      	add	r3, sp, #8
 80085ca:	9300      	str	r3, [sp, #0]
 80085cc:	ec45 4b10 	vmov	d0, r4, r5
 80085d0:	4653      	mov	r3, sl
 80085d2:	4632      	mov	r2, r6
 80085d4:	f000 fdcc 	bl	8009170 <_dtoa_r>
 80085d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80085dc:	4607      	mov	r7, r0
 80085de:	d102      	bne.n	80085e6 <__cvt+0x66>
 80085e0:	f019 0f01 	tst.w	r9, #1
 80085e4:	d022      	beq.n	800862c <__cvt+0xac>
 80085e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80085ea:	eb07 0906 	add.w	r9, r7, r6
 80085ee:	d110      	bne.n	8008612 <__cvt+0x92>
 80085f0:	783b      	ldrb	r3, [r7, #0]
 80085f2:	2b30      	cmp	r3, #48	; 0x30
 80085f4:	d10a      	bne.n	800860c <__cvt+0x8c>
 80085f6:	2200      	movs	r2, #0
 80085f8:	2300      	movs	r3, #0
 80085fa:	4620      	mov	r0, r4
 80085fc:	4629      	mov	r1, r5
 80085fe:	f7f8 fa63 	bl	8000ac8 <__aeabi_dcmpeq>
 8008602:	b918      	cbnz	r0, 800860c <__cvt+0x8c>
 8008604:	f1c6 0601 	rsb	r6, r6, #1
 8008608:	f8ca 6000 	str.w	r6, [sl]
 800860c:	f8da 3000 	ldr.w	r3, [sl]
 8008610:	4499      	add	r9, r3
 8008612:	2200      	movs	r2, #0
 8008614:	2300      	movs	r3, #0
 8008616:	4620      	mov	r0, r4
 8008618:	4629      	mov	r1, r5
 800861a:	f7f8 fa55 	bl	8000ac8 <__aeabi_dcmpeq>
 800861e:	b108      	cbz	r0, 8008624 <__cvt+0xa4>
 8008620:	f8cd 900c 	str.w	r9, [sp, #12]
 8008624:	2230      	movs	r2, #48	; 0x30
 8008626:	9b03      	ldr	r3, [sp, #12]
 8008628:	454b      	cmp	r3, r9
 800862a:	d307      	bcc.n	800863c <__cvt+0xbc>
 800862c:	9b03      	ldr	r3, [sp, #12]
 800862e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008630:	1bdb      	subs	r3, r3, r7
 8008632:	4638      	mov	r0, r7
 8008634:	6013      	str	r3, [r2, #0]
 8008636:	b004      	add	sp, #16
 8008638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800863c:	1c59      	adds	r1, r3, #1
 800863e:	9103      	str	r1, [sp, #12]
 8008640:	701a      	strb	r2, [r3, #0]
 8008642:	e7f0      	b.n	8008626 <__cvt+0xa6>

08008644 <__exponent>:
 8008644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008646:	4603      	mov	r3, r0
 8008648:	2900      	cmp	r1, #0
 800864a:	bfb8      	it	lt
 800864c:	4249      	neglt	r1, r1
 800864e:	f803 2b02 	strb.w	r2, [r3], #2
 8008652:	bfb4      	ite	lt
 8008654:	222d      	movlt	r2, #45	; 0x2d
 8008656:	222b      	movge	r2, #43	; 0x2b
 8008658:	2909      	cmp	r1, #9
 800865a:	7042      	strb	r2, [r0, #1]
 800865c:	dd2a      	ble.n	80086b4 <__exponent+0x70>
 800865e:	f10d 0407 	add.w	r4, sp, #7
 8008662:	46a4      	mov	ip, r4
 8008664:	270a      	movs	r7, #10
 8008666:	46a6      	mov	lr, r4
 8008668:	460a      	mov	r2, r1
 800866a:	fb91 f6f7 	sdiv	r6, r1, r7
 800866e:	fb07 1516 	mls	r5, r7, r6, r1
 8008672:	3530      	adds	r5, #48	; 0x30
 8008674:	2a63      	cmp	r2, #99	; 0x63
 8008676:	f104 34ff 	add.w	r4, r4, #4294967295
 800867a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800867e:	4631      	mov	r1, r6
 8008680:	dcf1      	bgt.n	8008666 <__exponent+0x22>
 8008682:	3130      	adds	r1, #48	; 0x30
 8008684:	f1ae 0502 	sub.w	r5, lr, #2
 8008688:	f804 1c01 	strb.w	r1, [r4, #-1]
 800868c:	1c44      	adds	r4, r0, #1
 800868e:	4629      	mov	r1, r5
 8008690:	4561      	cmp	r1, ip
 8008692:	d30a      	bcc.n	80086aa <__exponent+0x66>
 8008694:	f10d 0209 	add.w	r2, sp, #9
 8008698:	eba2 020e 	sub.w	r2, r2, lr
 800869c:	4565      	cmp	r5, ip
 800869e:	bf88      	it	hi
 80086a0:	2200      	movhi	r2, #0
 80086a2:	4413      	add	r3, r2
 80086a4:	1a18      	subs	r0, r3, r0
 80086a6:	b003      	add	sp, #12
 80086a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 80086b2:	e7ed      	b.n	8008690 <__exponent+0x4c>
 80086b4:	2330      	movs	r3, #48	; 0x30
 80086b6:	3130      	adds	r1, #48	; 0x30
 80086b8:	7083      	strb	r3, [r0, #2]
 80086ba:	70c1      	strb	r1, [r0, #3]
 80086bc:	1d03      	adds	r3, r0, #4
 80086be:	e7f1      	b.n	80086a4 <__exponent+0x60>

080086c0 <_printf_float>:
 80086c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c4:	ed2d 8b02 	vpush	{d8}
 80086c8:	b08d      	sub	sp, #52	; 0x34
 80086ca:	460c      	mov	r4, r1
 80086cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80086d0:	4616      	mov	r6, r2
 80086d2:	461f      	mov	r7, r3
 80086d4:	4605      	mov	r5, r0
 80086d6:	f001 fbfb 	bl	8009ed0 <_localeconv_r>
 80086da:	f8d0 a000 	ldr.w	sl, [r0]
 80086de:	4650      	mov	r0, sl
 80086e0:	f7f7 fd76 	bl	80001d0 <strlen>
 80086e4:	2300      	movs	r3, #0
 80086e6:	930a      	str	r3, [sp, #40]	; 0x28
 80086e8:	6823      	ldr	r3, [r4, #0]
 80086ea:	9305      	str	r3, [sp, #20]
 80086ec:	f8d8 3000 	ldr.w	r3, [r8]
 80086f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80086f4:	3307      	adds	r3, #7
 80086f6:	f023 0307 	bic.w	r3, r3, #7
 80086fa:	f103 0208 	add.w	r2, r3, #8
 80086fe:	f8c8 2000 	str.w	r2, [r8]
 8008702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008706:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800870a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800870e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008712:	9307      	str	r3, [sp, #28]
 8008714:	f8cd 8018 	str.w	r8, [sp, #24]
 8008718:	ee08 0a10 	vmov	s16, r0
 800871c:	4b9f      	ldr	r3, [pc, #636]	; (800899c <_printf_float+0x2dc>)
 800871e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008722:	f04f 32ff 	mov.w	r2, #4294967295
 8008726:	f7f8 fa01 	bl	8000b2c <__aeabi_dcmpun>
 800872a:	bb88      	cbnz	r0, 8008790 <_printf_float+0xd0>
 800872c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008730:	4b9a      	ldr	r3, [pc, #616]	; (800899c <_printf_float+0x2dc>)
 8008732:	f04f 32ff 	mov.w	r2, #4294967295
 8008736:	f7f8 f9db 	bl	8000af0 <__aeabi_dcmple>
 800873a:	bb48      	cbnz	r0, 8008790 <_printf_float+0xd0>
 800873c:	2200      	movs	r2, #0
 800873e:	2300      	movs	r3, #0
 8008740:	4640      	mov	r0, r8
 8008742:	4649      	mov	r1, r9
 8008744:	f7f8 f9ca 	bl	8000adc <__aeabi_dcmplt>
 8008748:	b110      	cbz	r0, 8008750 <_printf_float+0x90>
 800874a:	232d      	movs	r3, #45	; 0x2d
 800874c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008750:	4b93      	ldr	r3, [pc, #588]	; (80089a0 <_printf_float+0x2e0>)
 8008752:	4894      	ldr	r0, [pc, #592]	; (80089a4 <_printf_float+0x2e4>)
 8008754:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008758:	bf94      	ite	ls
 800875a:	4698      	movls	r8, r3
 800875c:	4680      	movhi	r8, r0
 800875e:	2303      	movs	r3, #3
 8008760:	6123      	str	r3, [r4, #16]
 8008762:	9b05      	ldr	r3, [sp, #20]
 8008764:	f023 0204 	bic.w	r2, r3, #4
 8008768:	6022      	str	r2, [r4, #0]
 800876a:	f04f 0900 	mov.w	r9, #0
 800876e:	9700      	str	r7, [sp, #0]
 8008770:	4633      	mov	r3, r6
 8008772:	aa0b      	add	r2, sp, #44	; 0x2c
 8008774:	4621      	mov	r1, r4
 8008776:	4628      	mov	r0, r5
 8008778:	f000 f9d8 	bl	8008b2c <_printf_common>
 800877c:	3001      	adds	r0, #1
 800877e:	f040 8090 	bne.w	80088a2 <_printf_float+0x1e2>
 8008782:	f04f 30ff 	mov.w	r0, #4294967295
 8008786:	b00d      	add	sp, #52	; 0x34
 8008788:	ecbd 8b02 	vpop	{d8}
 800878c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008790:	4642      	mov	r2, r8
 8008792:	464b      	mov	r3, r9
 8008794:	4640      	mov	r0, r8
 8008796:	4649      	mov	r1, r9
 8008798:	f7f8 f9c8 	bl	8000b2c <__aeabi_dcmpun>
 800879c:	b140      	cbz	r0, 80087b0 <_printf_float+0xf0>
 800879e:	464b      	mov	r3, r9
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	bfbc      	itt	lt
 80087a4:	232d      	movlt	r3, #45	; 0x2d
 80087a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80087aa:	487f      	ldr	r0, [pc, #508]	; (80089a8 <_printf_float+0x2e8>)
 80087ac:	4b7f      	ldr	r3, [pc, #508]	; (80089ac <_printf_float+0x2ec>)
 80087ae:	e7d1      	b.n	8008754 <_printf_float+0x94>
 80087b0:	6863      	ldr	r3, [r4, #4]
 80087b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80087b6:	9206      	str	r2, [sp, #24]
 80087b8:	1c5a      	adds	r2, r3, #1
 80087ba:	d13f      	bne.n	800883c <_printf_float+0x17c>
 80087bc:	2306      	movs	r3, #6
 80087be:	6063      	str	r3, [r4, #4]
 80087c0:	9b05      	ldr	r3, [sp, #20]
 80087c2:	6861      	ldr	r1, [r4, #4]
 80087c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80087c8:	2300      	movs	r3, #0
 80087ca:	9303      	str	r3, [sp, #12]
 80087cc:	ab0a      	add	r3, sp, #40	; 0x28
 80087ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 80087d2:	ab09      	add	r3, sp, #36	; 0x24
 80087d4:	ec49 8b10 	vmov	d0, r8, r9
 80087d8:	9300      	str	r3, [sp, #0]
 80087da:	6022      	str	r2, [r4, #0]
 80087dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80087e0:	4628      	mov	r0, r5
 80087e2:	f7ff fecd 	bl	8008580 <__cvt>
 80087e6:	9b06      	ldr	r3, [sp, #24]
 80087e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087ea:	2b47      	cmp	r3, #71	; 0x47
 80087ec:	4680      	mov	r8, r0
 80087ee:	d108      	bne.n	8008802 <_printf_float+0x142>
 80087f0:	1cc8      	adds	r0, r1, #3
 80087f2:	db02      	blt.n	80087fa <_printf_float+0x13a>
 80087f4:	6863      	ldr	r3, [r4, #4]
 80087f6:	4299      	cmp	r1, r3
 80087f8:	dd41      	ble.n	800887e <_printf_float+0x1be>
 80087fa:	f1ab 0b02 	sub.w	fp, fp, #2
 80087fe:	fa5f fb8b 	uxtb.w	fp, fp
 8008802:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008806:	d820      	bhi.n	800884a <_printf_float+0x18a>
 8008808:	3901      	subs	r1, #1
 800880a:	465a      	mov	r2, fp
 800880c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008810:	9109      	str	r1, [sp, #36]	; 0x24
 8008812:	f7ff ff17 	bl	8008644 <__exponent>
 8008816:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008818:	1813      	adds	r3, r2, r0
 800881a:	2a01      	cmp	r2, #1
 800881c:	4681      	mov	r9, r0
 800881e:	6123      	str	r3, [r4, #16]
 8008820:	dc02      	bgt.n	8008828 <_printf_float+0x168>
 8008822:	6822      	ldr	r2, [r4, #0]
 8008824:	07d2      	lsls	r2, r2, #31
 8008826:	d501      	bpl.n	800882c <_printf_float+0x16c>
 8008828:	3301      	adds	r3, #1
 800882a:	6123      	str	r3, [r4, #16]
 800882c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008830:	2b00      	cmp	r3, #0
 8008832:	d09c      	beq.n	800876e <_printf_float+0xae>
 8008834:	232d      	movs	r3, #45	; 0x2d
 8008836:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800883a:	e798      	b.n	800876e <_printf_float+0xae>
 800883c:	9a06      	ldr	r2, [sp, #24]
 800883e:	2a47      	cmp	r2, #71	; 0x47
 8008840:	d1be      	bne.n	80087c0 <_printf_float+0x100>
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1bc      	bne.n	80087c0 <_printf_float+0x100>
 8008846:	2301      	movs	r3, #1
 8008848:	e7b9      	b.n	80087be <_printf_float+0xfe>
 800884a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800884e:	d118      	bne.n	8008882 <_printf_float+0x1c2>
 8008850:	2900      	cmp	r1, #0
 8008852:	6863      	ldr	r3, [r4, #4]
 8008854:	dd0b      	ble.n	800886e <_printf_float+0x1ae>
 8008856:	6121      	str	r1, [r4, #16]
 8008858:	b913      	cbnz	r3, 8008860 <_printf_float+0x1a0>
 800885a:	6822      	ldr	r2, [r4, #0]
 800885c:	07d0      	lsls	r0, r2, #31
 800885e:	d502      	bpl.n	8008866 <_printf_float+0x1a6>
 8008860:	3301      	adds	r3, #1
 8008862:	440b      	add	r3, r1
 8008864:	6123      	str	r3, [r4, #16]
 8008866:	65a1      	str	r1, [r4, #88]	; 0x58
 8008868:	f04f 0900 	mov.w	r9, #0
 800886c:	e7de      	b.n	800882c <_printf_float+0x16c>
 800886e:	b913      	cbnz	r3, 8008876 <_printf_float+0x1b6>
 8008870:	6822      	ldr	r2, [r4, #0]
 8008872:	07d2      	lsls	r2, r2, #31
 8008874:	d501      	bpl.n	800887a <_printf_float+0x1ba>
 8008876:	3302      	adds	r3, #2
 8008878:	e7f4      	b.n	8008864 <_printf_float+0x1a4>
 800887a:	2301      	movs	r3, #1
 800887c:	e7f2      	b.n	8008864 <_printf_float+0x1a4>
 800887e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008884:	4299      	cmp	r1, r3
 8008886:	db05      	blt.n	8008894 <_printf_float+0x1d4>
 8008888:	6823      	ldr	r3, [r4, #0]
 800888a:	6121      	str	r1, [r4, #16]
 800888c:	07d8      	lsls	r0, r3, #31
 800888e:	d5ea      	bpl.n	8008866 <_printf_float+0x1a6>
 8008890:	1c4b      	adds	r3, r1, #1
 8008892:	e7e7      	b.n	8008864 <_printf_float+0x1a4>
 8008894:	2900      	cmp	r1, #0
 8008896:	bfd4      	ite	le
 8008898:	f1c1 0202 	rsble	r2, r1, #2
 800889c:	2201      	movgt	r2, #1
 800889e:	4413      	add	r3, r2
 80088a0:	e7e0      	b.n	8008864 <_printf_float+0x1a4>
 80088a2:	6823      	ldr	r3, [r4, #0]
 80088a4:	055a      	lsls	r2, r3, #21
 80088a6:	d407      	bmi.n	80088b8 <_printf_float+0x1f8>
 80088a8:	6923      	ldr	r3, [r4, #16]
 80088aa:	4642      	mov	r2, r8
 80088ac:	4631      	mov	r1, r6
 80088ae:	4628      	mov	r0, r5
 80088b0:	47b8      	blx	r7
 80088b2:	3001      	adds	r0, #1
 80088b4:	d12c      	bne.n	8008910 <_printf_float+0x250>
 80088b6:	e764      	b.n	8008782 <_printf_float+0xc2>
 80088b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80088bc:	f240 80e0 	bls.w	8008a80 <_printf_float+0x3c0>
 80088c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088c4:	2200      	movs	r2, #0
 80088c6:	2300      	movs	r3, #0
 80088c8:	f7f8 f8fe 	bl	8000ac8 <__aeabi_dcmpeq>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	d034      	beq.n	800893a <_printf_float+0x27a>
 80088d0:	4a37      	ldr	r2, [pc, #220]	; (80089b0 <_printf_float+0x2f0>)
 80088d2:	2301      	movs	r3, #1
 80088d4:	4631      	mov	r1, r6
 80088d6:	4628      	mov	r0, r5
 80088d8:	47b8      	blx	r7
 80088da:	3001      	adds	r0, #1
 80088dc:	f43f af51 	beq.w	8008782 <_printf_float+0xc2>
 80088e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088e4:	429a      	cmp	r2, r3
 80088e6:	db02      	blt.n	80088ee <_printf_float+0x22e>
 80088e8:	6823      	ldr	r3, [r4, #0]
 80088ea:	07d8      	lsls	r0, r3, #31
 80088ec:	d510      	bpl.n	8008910 <_printf_float+0x250>
 80088ee:	ee18 3a10 	vmov	r3, s16
 80088f2:	4652      	mov	r2, sl
 80088f4:	4631      	mov	r1, r6
 80088f6:	4628      	mov	r0, r5
 80088f8:	47b8      	blx	r7
 80088fa:	3001      	adds	r0, #1
 80088fc:	f43f af41 	beq.w	8008782 <_printf_float+0xc2>
 8008900:	f04f 0800 	mov.w	r8, #0
 8008904:	f104 091a 	add.w	r9, r4, #26
 8008908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800890a:	3b01      	subs	r3, #1
 800890c:	4543      	cmp	r3, r8
 800890e:	dc09      	bgt.n	8008924 <_printf_float+0x264>
 8008910:	6823      	ldr	r3, [r4, #0]
 8008912:	079b      	lsls	r3, r3, #30
 8008914:	f100 8105 	bmi.w	8008b22 <_printf_float+0x462>
 8008918:	68e0      	ldr	r0, [r4, #12]
 800891a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800891c:	4298      	cmp	r0, r3
 800891e:	bfb8      	it	lt
 8008920:	4618      	movlt	r0, r3
 8008922:	e730      	b.n	8008786 <_printf_float+0xc6>
 8008924:	2301      	movs	r3, #1
 8008926:	464a      	mov	r2, r9
 8008928:	4631      	mov	r1, r6
 800892a:	4628      	mov	r0, r5
 800892c:	47b8      	blx	r7
 800892e:	3001      	adds	r0, #1
 8008930:	f43f af27 	beq.w	8008782 <_printf_float+0xc2>
 8008934:	f108 0801 	add.w	r8, r8, #1
 8008938:	e7e6      	b.n	8008908 <_printf_float+0x248>
 800893a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800893c:	2b00      	cmp	r3, #0
 800893e:	dc39      	bgt.n	80089b4 <_printf_float+0x2f4>
 8008940:	4a1b      	ldr	r2, [pc, #108]	; (80089b0 <_printf_float+0x2f0>)
 8008942:	2301      	movs	r3, #1
 8008944:	4631      	mov	r1, r6
 8008946:	4628      	mov	r0, r5
 8008948:	47b8      	blx	r7
 800894a:	3001      	adds	r0, #1
 800894c:	f43f af19 	beq.w	8008782 <_printf_float+0xc2>
 8008950:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008954:	4313      	orrs	r3, r2
 8008956:	d102      	bne.n	800895e <_printf_float+0x29e>
 8008958:	6823      	ldr	r3, [r4, #0]
 800895a:	07d9      	lsls	r1, r3, #31
 800895c:	d5d8      	bpl.n	8008910 <_printf_float+0x250>
 800895e:	ee18 3a10 	vmov	r3, s16
 8008962:	4652      	mov	r2, sl
 8008964:	4631      	mov	r1, r6
 8008966:	4628      	mov	r0, r5
 8008968:	47b8      	blx	r7
 800896a:	3001      	adds	r0, #1
 800896c:	f43f af09 	beq.w	8008782 <_printf_float+0xc2>
 8008970:	f04f 0900 	mov.w	r9, #0
 8008974:	f104 0a1a 	add.w	sl, r4, #26
 8008978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800897a:	425b      	negs	r3, r3
 800897c:	454b      	cmp	r3, r9
 800897e:	dc01      	bgt.n	8008984 <_printf_float+0x2c4>
 8008980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008982:	e792      	b.n	80088aa <_printf_float+0x1ea>
 8008984:	2301      	movs	r3, #1
 8008986:	4652      	mov	r2, sl
 8008988:	4631      	mov	r1, r6
 800898a:	4628      	mov	r0, r5
 800898c:	47b8      	blx	r7
 800898e:	3001      	adds	r0, #1
 8008990:	f43f aef7 	beq.w	8008782 <_printf_float+0xc2>
 8008994:	f109 0901 	add.w	r9, r9, #1
 8008998:	e7ee      	b.n	8008978 <_printf_float+0x2b8>
 800899a:	bf00      	nop
 800899c:	7fefffff 	.word	0x7fefffff
 80089a0:	0800b344 	.word	0x0800b344
 80089a4:	0800b348 	.word	0x0800b348
 80089a8:	0800b350 	.word	0x0800b350
 80089ac:	0800b34c 	.word	0x0800b34c
 80089b0:	0800b354 	.word	0x0800b354
 80089b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089b8:	429a      	cmp	r2, r3
 80089ba:	bfa8      	it	ge
 80089bc:	461a      	movge	r2, r3
 80089be:	2a00      	cmp	r2, #0
 80089c0:	4691      	mov	r9, r2
 80089c2:	dc37      	bgt.n	8008a34 <_printf_float+0x374>
 80089c4:	f04f 0b00 	mov.w	fp, #0
 80089c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089cc:	f104 021a 	add.w	r2, r4, #26
 80089d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089d2:	9305      	str	r3, [sp, #20]
 80089d4:	eba3 0309 	sub.w	r3, r3, r9
 80089d8:	455b      	cmp	r3, fp
 80089da:	dc33      	bgt.n	8008a44 <_printf_float+0x384>
 80089dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089e0:	429a      	cmp	r2, r3
 80089e2:	db3b      	blt.n	8008a5c <_printf_float+0x39c>
 80089e4:	6823      	ldr	r3, [r4, #0]
 80089e6:	07da      	lsls	r2, r3, #31
 80089e8:	d438      	bmi.n	8008a5c <_printf_float+0x39c>
 80089ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089ec:	9a05      	ldr	r2, [sp, #20]
 80089ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089f0:	1a9a      	subs	r2, r3, r2
 80089f2:	eba3 0901 	sub.w	r9, r3, r1
 80089f6:	4591      	cmp	r9, r2
 80089f8:	bfa8      	it	ge
 80089fa:	4691      	movge	r9, r2
 80089fc:	f1b9 0f00 	cmp.w	r9, #0
 8008a00:	dc35      	bgt.n	8008a6e <_printf_float+0x3ae>
 8008a02:	f04f 0800 	mov.w	r8, #0
 8008a06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a0a:	f104 0a1a 	add.w	sl, r4, #26
 8008a0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a12:	1a9b      	subs	r3, r3, r2
 8008a14:	eba3 0309 	sub.w	r3, r3, r9
 8008a18:	4543      	cmp	r3, r8
 8008a1a:	f77f af79 	ble.w	8008910 <_printf_float+0x250>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	4652      	mov	r2, sl
 8008a22:	4631      	mov	r1, r6
 8008a24:	4628      	mov	r0, r5
 8008a26:	47b8      	blx	r7
 8008a28:	3001      	adds	r0, #1
 8008a2a:	f43f aeaa 	beq.w	8008782 <_printf_float+0xc2>
 8008a2e:	f108 0801 	add.w	r8, r8, #1
 8008a32:	e7ec      	b.n	8008a0e <_printf_float+0x34e>
 8008a34:	4613      	mov	r3, r2
 8008a36:	4631      	mov	r1, r6
 8008a38:	4642      	mov	r2, r8
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	47b8      	blx	r7
 8008a3e:	3001      	adds	r0, #1
 8008a40:	d1c0      	bne.n	80089c4 <_printf_float+0x304>
 8008a42:	e69e      	b.n	8008782 <_printf_float+0xc2>
 8008a44:	2301      	movs	r3, #1
 8008a46:	4631      	mov	r1, r6
 8008a48:	4628      	mov	r0, r5
 8008a4a:	9205      	str	r2, [sp, #20]
 8008a4c:	47b8      	blx	r7
 8008a4e:	3001      	adds	r0, #1
 8008a50:	f43f ae97 	beq.w	8008782 <_printf_float+0xc2>
 8008a54:	9a05      	ldr	r2, [sp, #20]
 8008a56:	f10b 0b01 	add.w	fp, fp, #1
 8008a5a:	e7b9      	b.n	80089d0 <_printf_float+0x310>
 8008a5c:	ee18 3a10 	vmov	r3, s16
 8008a60:	4652      	mov	r2, sl
 8008a62:	4631      	mov	r1, r6
 8008a64:	4628      	mov	r0, r5
 8008a66:	47b8      	blx	r7
 8008a68:	3001      	adds	r0, #1
 8008a6a:	d1be      	bne.n	80089ea <_printf_float+0x32a>
 8008a6c:	e689      	b.n	8008782 <_printf_float+0xc2>
 8008a6e:	9a05      	ldr	r2, [sp, #20]
 8008a70:	464b      	mov	r3, r9
 8008a72:	4442      	add	r2, r8
 8008a74:	4631      	mov	r1, r6
 8008a76:	4628      	mov	r0, r5
 8008a78:	47b8      	blx	r7
 8008a7a:	3001      	adds	r0, #1
 8008a7c:	d1c1      	bne.n	8008a02 <_printf_float+0x342>
 8008a7e:	e680      	b.n	8008782 <_printf_float+0xc2>
 8008a80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a82:	2a01      	cmp	r2, #1
 8008a84:	dc01      	bgt.n	8008a8a <_printf_float+0x3ca>
 8008a86:	07db      	lsls	r3, r3, #31
 8008a88:	d538      	bpl.n	8008afc <_printf_float+0x43c>
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	4642      	mov	r2, r8
 8008a8e:	4631      	mov	r1, r6
 8008a90:	4628      	mov	r0, r5
 8008a92:	47b8      	blx	r7
 8008a94:	3001      	adds	r0, #1
 8008a96:	f43f ae74 	beq.w	8008782 <_printf_float+0xc2>
 8008a9a:	ee18 3a10 	vmov	r3, s16
 8008a9e:	4652      	mov	r2, sl
 8008aa0:	4631      	mov	r1, r6
 8008aa2:	4628      	mov	r0, r5
 8008aa4:	47b8      	blx	r7
 8008aa6:	3001      	adds	r0, #1
 8008aa8:	f43f ae6b 	beq.w	8008782 <_printf_float+0xc2>
 8008aac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	f7f8 f808 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ab8:	b9d8      	cbnz	r0, 8008af2 <_printf_float+0x432>
 8008aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008abc:	f108 0201 	add.w	r2, r8, #1
 8008ac0:	3b01      	subs	r3, #1
 8008ac2:	4631      	mov	r1, r6
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	47b8      	blx	r7
 8008ac8:	3001      	adds	r0, #1
 8008aca:	d10e      	bne.n	8008aea <_printf_float+0x42a>
 8008acc:	e659      	b.n	8008782 <_printf_float+0xc2>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	4652      	mov	r2, sl
 8008ad2:	4631      	mov	r1, r6
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	47b8      	blx	r7
 8008ad8:	3001      	adds	r0, #1
 8008ada:	f43f ae52 	beq.w	8008782 <_printf_float+0xc2>
 8008ade:	f108 0801 	add.w	r8, r8, #1
 8008ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ae4:	3b01      	subs	r3, #1
 8008ae6:	4543      	cmp	r3, r8
 8008ae8:	dcf1      	bgt.n	8008ace <_printf_float+0x40e>
 8008aea:	464b      	mov	r3, r9
 8008aec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008af0:	e6dc      	b.n	80088ac <_printf_float+0x1ec>
 8008af2:	f04f 0800 	mov.w	r8, #0
 8008af6:	f104 0a1a 	add.w	sl, r4, #26
 8008afa:	e7f2      	b.n	8008ae2 <_printf_float+0x422>
 8008afc:	2301      	movs	r3, #1
 8008afe:	4642      	mov	r2, r8
 8008b00:	e7df      	b.n	8008ac2 <_printf_float+0x402>
 8008b02:	2301      	movs	r3, #1
 8008b04:	464a      	mov	r2, r9
 8008b06:	4631      	mov	r1, r6
 8008b08:	4628      	mov	r0, r5
 8008b0a:	47b8      	blx	r7
 8008b0c:	3001      	adds	r0, #1
 8008b0e:	f43f ae38 	beq.w	8008782 <_printf_float+0xc2>
 8008b12:	f108 0801 	add.w	r8, r8, #1
 8008b16:	68e3      	ldr	r3, [r4, #12]
 8008b18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b1a:	1a5b      	subs	r3, r3, r1
 8008b1c:	4543      	cmp	r3, r8
 8008b1e:	dcf0      	bgt.n	8008b02 <_printf_float+0x442>
 8008b20:	e6fa      	b.n	8008918 <_printf_float+0x258>
 8008b22:	f04f 0800 	mov.w	r8, #0
 8008b26:	f104 0919 	add.w	r9, r4, #25
 8008b2a:	e7f4      	b.n	8008b16 <_printf_float+0x456>

08008b2c <_printf_common>:
 8008b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b30:	4616      	mov	r6, r2
 8008b32:	4699      	mov	r9, r3
 8008b34:	688a      	ldr	r2, [r1, #8]
 8008b36:	690b      	ldr	r3, [r1, #16]
 8008b38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	bfb8      	it	lt
 8008b40:	4613      	movlt	r3, r2
 8008b42:	6033      	str	r3, [r6, #0]
 8008b44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b48:	4607      	mov	r7, r0
 8008b4a:	460c      	mov	r4, r1
 8008b4c:	b10a      	cbz	r2, 8008b52 <_printf_common+0x26>
 8008b4e:	3301      	adds	r3, #1
 8008b50:	6033      	str	r3, [r6, #0]
 8008b52:	6823      	ldr	r3, [r4, #0]
 8008b54:	0699      	lsls	r1, r3, #26
 8008b56:	bf42      	ittt	mi
 8008b58:	6833      	ldrmi	r3, [r6, #0]
 8008b5a:	3302      	addmi	r3, #2
 8008b5c:	6033      	strmi	r3, [r6, #0]
 8008b5e:	6825      	ldr	r5, [r4, #0]
 8008b60:	f015 0506 	ands.w	r5, r5, #6
 8008b64:	d106      	bne.n	8008b74 <_printf_common+0x48>
 8008b66:	f104 0a19 	add.w	sl, r4, #25
 8008b6a:	68e3      	ldr	r3, [r4, #12]
 8008b6c:	6832      	ldr	r2, [r6, #0]
 8008b6e:	1a9b      	subs	r3, r3, r2
 8008b70:	42ab      	cmp	r3, r5
 8008b72:	dc26      	bgt.n	8008bc2 <_printf_common+0x96>
 8008b74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b78:	1e13      	subs	r3, r2, #0
 8008b7a:	6822      	ldr	r2, [r4, #0]
 8008b7c:	bf18      	it	ne
 8008b7e:	2301      	movne	r3, #1
 8008b80:	0692      	lsls	r2, r2, #26
 8008b82:	d42b      	bmi.n	8008bdc <_printf_common+0xb0>
 8008b84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b88:	4649      	mov	r1, r9
 8008b8a:	4638      	mov	r0, r7
 8008b8c:	47c0      	blx	r8
 8008b8e:	3001      	adds	r0, #1
 8008b90:	d01e      	beq.n	8008bd0 <_printf_common+0xa4>
 8008b92:	6823      	ldr	r3, [r4, #0]
 8008b94:	68e5      	ldr	r5, [r4, #12]
 8008b96:	6832      	ldr	r2, [r6, #0]
 8008b98:	f003 0306 	and.w	r3, r3, #6
 8008b9c:	2b04      	cmp	r3, #4
 8008b9e:	bf08      	it	eq
 8008ba0:	1aad      	subeq	r5, r5, r2
 8008ba2:	68a3      	ldr	r3, [r4, #8]
 8008ba4:	6922      	ldr	r2, [r4, #16]
 8008ba6:	bf0c      	ite	eq
 8008ba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bac:	2500      	movne	r5, #0
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	bfc4      	itt	gt
 8008bb2:	1a9b      	subgt	r3, r3, r2
 8008bb4:	18ed      	addgt	r5, r5, r3
 8008bb6:	2600      	movs	r6, #0
 8008bb8:	341a      	adds	r4, #26
 8008bba:	42b5      	cmp	r5, r6
 8008bbc:	d11a      	bne.n	8008bf4 <_printf_common+0xc8>
 8008bbe:	2000      	movs	r0, #0
 8008bc0:	e008      	b.n	8008bd4 <_printf_common+0xa8>
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	4652      	mov	r2, sl
 8008bc6:	4649      	mov	r1, r9
 8008bc8:	4638      	mov	r0, r7
 8008bca:	47c0      	blx	r8
 8008bcc:	3001      	adds	r0, #1
 8008bce:	d103      	bne.n	8008bd8 <_printf_common+0xac>
 8008bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bd8:	3501      	adds	r5, #1
 8008bda:	e7c6      	b.n	8008b6a <_printf_common+0x3e>
 8008bdc:	18e1      	adds	r1, r4, r3
 8008bde:	1c5a      	adds	r2, r3, #1
 8008be0:	2030      	movs	r0, #48	; 0x30
 8008be2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008be6:	4422      	add	r2, r4
 8008be8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bf0:	3302      	adds	r3, #2
 8008bf2:	e7c7      	b.n	8008b84 <_printf_common+0x58>
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	4622      	mov	r2, r4
 8008bf8:	4649      	mov	r1, r9
 8008bfa:	4638      	mov	r0, r7
 8008bfc:	47c0      	blx	r8
 8008bfe:	3001      	adds	r0, #1
 8008c00:	d0e6      	beq.n	8008bd0 <_printf_common+0xa4>
 8008c02:	3601      	adds	r6, #1
 8008c04:	e7d9      	b.n	8008bba <_printf_common+0x8e>
	...

08008c08 <_printf_i>:
 8008c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c0c:	7e0f      	ldrb	r7, [r1, #24]
 8008c0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c10:	2f78      	cmp	r7, #120	; 0x78
 8008c12:	4691      	mov	r9, r2
 8008c14:	4680      	mov	r8, r0
 8008c16:	460c      	mov	r4, r1
 8008c18:	469a      	mov	sl, r3
 8008c1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c1e:	d807      	bhi.n	8008c30 <_printf_i+0x28>
 8008c20:	2f62      	cmp	r7, #98	; 0x62
 8008c22:	d80a      	bhi.n	8008c3a <_printf_i+0x32>
 8008c24:	2f00      	cmp	r7, #0
 8008c26:	f000 80d8 	beq.w	8008dda <_printf_i+0x1d2>
 8008c2a:	2f58      	cmp	r7, #88	; 0x58
 8008c2c:	f000 80a3 	beq.w	8008d76 <_printf_i+0x16e>
 8008c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c38:	e03a      	b.n	8008cb0 <_printf_i+0xa8>
 8008c3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c3e:	2b15      	cmp	r3, #21
 8008c40:	d8f6      	bhi.n	8008c30 <_printf_i+0x28>
 8008c42:	a101      	add	r1, pc, #4	; (adr r1, 8008c48 <_printf_i+0x40>)
 8008c44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c48:	08008ca1 	.word	0x08008ca1
 8008c4c:	08008cb5 	.word	0x08008cb5
 8008c50:	08008c31 	.word	0x08008c31
 8008c54:	08008c31 	.word	0x08008c31
 8008c58:	08008c31 	.word	0x08008c31
 8008c5c:	08008c31 	.word	0x08008c31
 8008c60:	08008cb5 	.word	0x08008cb5
 8008c64:	08008c31 	.word	0x08008c31
 8008c68:	08008c31 	.word	0x08008c31
 8008c6c:	08008c31 	.word	0x08008c31
 8008c70:	08008c31 	.word	0x08008c31
 8008c74:	08008dc1 	.word	0x08008dc1
 8008c78:	08008ce5 	.word	0x08008ce5
 8008c7c:	08008da3 	.word	0x08008da3
 8008c80:	08008c31 	.word	0x08008c31
 8008c84:	08008c31 	.word	0x08008c31
 8008c88:	08008de3 	.word	0x08008de3
 8008c8c:	08008c31 	.word	0x08008c31
 8008c90:	08008ce5 	.word	0x08008ce5
 8008c94:	08008c31 	.word	0x08008c31
 8008c98:	08008c31 	.word	0x08008c31
 8008c9c:	08008dab 	.word	0x08008dab
 8008ca0:	682b      	ldr	r3, [r5, #0]
 8008ca2:	1d1a      	adds	r2, r3, #4
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	602a      	str	r2, [r5, #0]
 8008ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e0a3      	b.n	8008dfc <_printf_i+0x1f4>
 8008cb4:	6820      	ldr	r0, [r4, #0]
 8008cb6:	6829      	ldr	r1, [r5, #0]
 8008cb8:	0606      	lsls	r6, r0, #24
 8008cba:	f101 0304 	add.w	r3, r1, #4
 8008cbe:	d50a      	bpl.n	8008cd6 <_printf_i+0xce>
 8008cc0:	680e      	ldr	r6, [r1, #0]
 8008cc2:	602b      	str	r3, [r5, #0]
 8008cc4:	2e00      	cmp	r6, #0
 8008cc6:	da03      	bge.n	8008cd0 <_printf_i+0xc8>
 8008cc8:	232d      	movs	r3, #45	; 0x2d
 8008cca:	4276      	negs	r6, r6
 8008ccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cd0:	485e      	ldr	r0, [pc, #376]	; (8008e4c <_printf_i+0x244>)
 8008cd2:	230a      	movs	r3, #10
 8008cd4:	e019      	b.n	8008d0a <_printf_i+0x102>
 8008cd6:	680e      	ldr	r6, [r1, #0]
 8008cd8:	602b      	str	r3, [r5, #0]
 8008cda:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008cde:	bf18      	it	ne
 8008ce0:	b236      	sxthne	r6, r6
 8008ce2:	e7ef      	b.n	8008cc4 <_printf_i+0xbc>
 8008ce4:	682b      	ldr	r3, [r5, #0]
 8008ce6:	6820      	ldr	r0, [r4, #0]
 8008ce8:	1d19      	adds	r1, r3, #4
 8008cea:	6029      	str	r1, [r5, #0]
 8008cec:	0601      	lsls	r1, r0, #24
 8008cee:	d501      	bpl.n	8008cf4 <_printf_i+0xec>
 8008cf0:	681e      	ldr	r6, [r3, #0]
 8008cf2:	e002      	b.n	8008cfa <_printf_i+0xf2>
 8008cf4:	0646      	lsls	r6, r0, #25
 8008cf6:	d5fb      	bpl.n	8008cf0 <_printf_i+0xe8>
 8008cf8:	881e      	ldrh	r6, [r3, #0]
 8008cfa:	4854      	ldr	r0, [pc, #336]	; (8008e4c <_printf_i+0x244>)
 8008cfc:	2f6f      	cmp	r7, #111	; 0x6f
 8008cfe:	bf0c      	ite	eq
 8008d00:	2308      	moveq	r3, #8
 8008d02:	230a      	movne	r3, #10
 8008d04:	2100      	movs	r1, #0
 8008d06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d0a:	6865      	ldr	r5, [r4, #4]
 8008d0c:	60a5      	str	r5, [r4, #8]
 8008d0e:	2d00      	cmp	r5, #0
 8008d10:	bfa2      	ittt	ge
 8008d12:	6821      	ldrge	r1, [r4, #0]
 8008d14:	f021 0104 	bicge.w	r1, r1, #4
 8008d18:	6021      	strge	r1, [r4, #0]
 8008d1a:	b90e      	cbnz	r6, 8008d20 <_printf_i+0x118>
 8008d1c:	2d00      	cmp	r5, #0
 8008d1e:	d04d      	beq.n	8008dbc <_printf_i+0x1b4>
 8008d20:	4615      	mov	r5, r2
 8008d22:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d26:	fb03 6711 	mls	r7, r3, r1, r6
 8008d2a:	5dc7      	ldrb	r7, [r0, r7]
 8008d2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d30:	4637      	mov	r7, r6
 8008d32:	42bb      	cmp	r3, r7
 8008d34:	460e      	mov	r6, r1
 8008d36:	d9f4      	bls.n	8008d22 <_printf_i+0x11a>
 8008d38:	2b08      	cmp	r3, #8
 8008d3a:	d10b      	bne.n	8008d54 <_printf_i+0x14c>
 8008d3c:	6823      	ldr	r3, [r4, #0]
 8008d3e:	07de      	lsls	r6, r3, #31
 8008d40:	d508      	bpl.n	8008d54 <_printf_i+0x14c>
 8008d42:	6923      	ldr	r3, [r4, #16]
 8008d44:	6861      	ldr	r1, [r4, #4]
 8008d46:	4299      	cmp	r1, r3
 8008d48:	bfde      	ittt	le
 8008d4a:	2330      	movle	r3, #48	; 0x30
 8008d4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d50:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d54:	1b52      	subs	r2, r2, r5
 8008d56:	6122      	str	r2, [r4, #16]
 8008d58:	f8cd a000 	str.w	sl, [sp]
 8008d5c:	464b      	mov	r3, r9
 8008d5e:	aa03      	add	r2, sp, #12
 8008d60:	4621      	mov	r1, r4
 8008d62:	4640      	mov	r0, r8
 8008d64:	f7ff fee2 	bl	8008b2c <_printf_common>
 8008d68:	3001      	adds	r0, #1
 8008d6a:	d14c      	bne.n	8008e06 <_printf_i+0x1fe>
 8008d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d70:	b004      	add	sp, #16
 8008d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d76:	4835      	ldr	r0, [pc, #212]	; (8008e4c <_printf_i+0x244>)
 8008d78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d7c:	6829      	ldr	r1, [r5, #0]
 8008d7e:	6823      	ldr	r3, [r4, #0]
 8008d80:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d84:	6029      	str	r1, [r5, #0]
 8008d86:	061d      	lsls	r5, r3, #24
 8008d88:	d514      	bpl.n	8008db4 <_printf_i+0x1ac>
 8008d8a:	07df      	lsls	r7, r3, #31
 8008d8c:	bf44      	itt	mi
 8008d8e:	f043 0320 	orrmi.w	r3, r3, #32
 8008d92:	6023      	strmi	r3, [r4, #0]
 8008d94:	b91e      	cbnz	r6, 8008d9e <_printf_i+0x196>
 8008d96:	6823      	ldr	r3, [r4, #0]
 8008d98:	f023 0320 	bic.w	r3, r3, #32
 8008d9c:	6023      	str	r3, [r4, #0]
 8008d9e:	2310      	movs	r3, #16
 8008da0:	e7b0      	b.n	8008d04 <_printf_i+0xfc>
 8008da2:	6823      	ldr	r3, [r4, #0]
 8008da4:	f043 0320 	orr.w	r3, r3, #32
 8008da8:	6023      	str	r3, [r4, #0]
 8008daa:	2378      	movs	r3, #120	; 0x78
 8008dac:	4828      	ldr	r0, [pc, #160]	; (8008e50 <_printf_i+0x248>)
 8008dae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008db2:	e7e3      	b.n	8008d7c <_printf_i+0x174>
 8008db4:	0659      	lsls	r1, r3, #25
 8008db6:	bf48      	it	mi
 8008db8:	b2b6      	uxthmi	r6, r6
 8008dba:	e7e6      	b.n	8008d8a <_printf_i+0x182>
 8008dbc:	4615      	mov	r5, r2
 8008dbe:	e7bb      	b.n	8008d38 <_printf_i+0x130>
 8008dc0:	682b      	ldr	r3, [r5, #0]
 8008dc2:	6826      	ldr	r6, [r4, #0]
 8008dc4:	6961      	ldr	r1, [r4, #20]
 8008dc6:	1d18      	adds	r0, r3, #4
 8008dc8:	6028      	str	r0, [r5, #0]
 8008dca:	0635      	lsls	r5, r6, #24
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	d501      	bpl.n	8008dd4 <_printf_i+0x1cc>
 8008dd0:	6019      	str	r1, [r3, #0]
 8008dd2:	e002      	b.n	8008dda <_printf_i+0x1d2>
 8008dd4:	0670      	lsls	r0, r6, #25
 8008dd6:	d5fb      	bpl.n	8008dd0 <_printf_i+0x1c8>
 8008dd8:	8019      	strh	r1, [r3, #0]
 8008dda:	2300      	movs	r3, #0
 8008ddc:	6123      	str	r3, [r4, #16]
 8008dde:	4615      	mov	r5, r2
 8008de0:	e7ba      	b.n	8008d58 <_printf_i+0x150>
 8008de2:	682b      	ldr	r3, [r5, #0]
 8008de4:	1d1a      	adds	r2, r3, #4
 8008de6:	602a      	str	r2, [r5, #0]
 8008de8:	681d      	ldr	r5, [r3, #0]
 8008dea:	6862      	ldr	r2, [r4, #4]
 8008dec:	2100      	movs	r1, #0
 8008dee:	4628      	mov	r0, r5
 8008df0:	f7f7 f9f6 	bl	80001e0 <memchr>
 8008df4:	b108      	cbz	r0, 8008dfa <_printf_i+0x1f2>
 8008df6:	1b40      	subs	r0, r0, r5
 8008df8:	6060      	str	r0, [r4, #4]
 8008dfa:	6863      	ldr	r3, [r4, #4]
 8008dfc:	6123      	str	r3, [r4, #16]
 8008dfe:	2300      	movs	r3, #0
 8008e00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e04:	e7a8      	b.n	8008d58 <_printf_i+0x150>
 8008e06:	6923      	ldr	r3, [r4, #16]
 8008e08:	462a      	mov	r2, r5
 8008e0a:	4649      	mov	r1, r9
 8008e0c:	4640      	mov	r0, r8
 8008e0e:	47d0      	blx	sl
 8008e10:	3001      	adds	r0, #1
 8008e12:	d0ab      	beq.n	8008d6c <_printf_i+0x164>
 8008e14:	6823      	ldr	r3, [r4, #0]
 8008e16:	079b      	lsls	r3, r3, #30
 8008e18:	d413      	bmi.n	8008e42 <_printf_i+0x23a>
 8008e1a:	68e0      	ldr	r0, [r4, #12]
 8008e1c:	9b03      	ldr	r3, [sp, #12]
 8008e1e:	4298      	cmp	r0, r3
 8008e20:	bfb8      	it	lt
 8008e22:	4618      	movlt	r0, r3
 8008e24:	e7a4      	b.n	8008d70 <_printf_i+0x168>
 8008e26:	2301      	movs	r3, #1
 8008e28:	4632      	mov	r2, r6
 8008e2a:	4649      	mov	r1, r9
 8008e2c:	4640      	mov	r0, r8
 8008e2e:	47d0      	blx	sl
 8008e30:	3001      	adds	r0, #1
 8008e32:	d09b      	beq.n	8008d6c <_printf_i+0x164>
 8008e34:	3501      	adds	r5, #1
 8008e36:	68e3      	ldr	r3, [r4, #12]
 8008e38:	9903      	ldr	r1, [sp, #12]
 8008e3a:	1a5b      	subs	r3, r3, r1
 8008e3c:	42ab      	cmp	r3, r5
 8008e3e:	dcf2      	bgt.n	8008e26 <_printf_i+0x21e>
 8008e40:	e7eb      	b.n	8008e1a <_printf_i+0x212>
 8008e42:	2500      	movs	r5, #0
 8008e44:	f104 0619 	add.w	r6, r4, #25
 8008e48:	e7f5      	b.n	8008e36 <_printf_i+0x22e>
 8008e4a:	bf00      	nop
 8008e4c:	0800b356 	.word	0x0800b356
 8008e50:	0800b367 	.word	0x0800b367

08008e54 <cleanup_glue>:
 8008e54:	b538      	push	{r3, r4, r5, lr}
 8008e56:	460c      	mov	r4, r1
 8008e58:	6809      	ldr	r1, [r1, #0]
 8008e5a:	4605      	mov	r5, r0
 8008e5c:	b109      	cbz	r1, 8008e62 <cleanup_glue+0xe>
 8008e5e:	f7ff fff9 	bl	8008e54 <cleanup_glue>
 8008e62:	4621      	mov	r1, r4
 8008e64:	4628      	mov	r0, r5
 8008e66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e6a:	f7ff baa9 	b.w	80083c0 <_free_r>
	...

08008e70 <_reclaim_reent>:
 8008e70:	4b2c      	ldr	r3, [pc, #176]	; (8008f24 <_reclaim_reent+0xb4>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4283      	cmp	r3, r0
 8008e76:	b570      	push	{r4, r5, r6, lr}
 8008e78:	4604      	mov	r4, r0
 8008e7a:	d051      	beq.n	8008f20 <_reclaim_reent+0xb0>
 8008e7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008e7e:	b143      	cbz	r3, 8008e92 <_reclaim_reent+0x22>
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d14a      	bne.n	8008f1c <_reclaim_reent+0xac>
 8008e86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e88:	6819      	ldr	r1, [r3, #0]
 8008e8a:	b111      	cbz	r1, 8008e92 <_reclaim_reent+0x22>
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	f7ff fa97 	bl	80083c0 <_free_r>
 8008e92:	6961      	ldr	r1, [r4, #20]
 8008e94:	b111      	cbz	r1, 8008e9c <_reclaim_reent+0x2c>
 8008e96:	4620      	mov	r0, r4
 8008e98:	f7ff fa92 	bl	80083c0 <_free_r>
 8008e9c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008e9e:	b111      	cbz	r1, 8008ea6 <_reclaim_reent+0x36>
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f7ff fa8d 	bl	80083c0 <_free_r>
 8008ea6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008ea8:	b111      	cbz	r1, 8008eb0 <_reclaim_reent+0x40>
 8008eaa:	4620      	mov	r0, r4
 8008eac:	f7ff fa88 	bl	80083c0 <_free_r>
 8008eb0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008eb2:	b111      	cbz	r1, 8008eba <_reclaim_reent+0x4a>
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	f7ff fa83 	bl	80083c0 <_free_r>
 8008eba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008ebc:	b111      	cbz	r1, 8008ec4 <_reclaim_reent+0x54>
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	f7ff fa7e 	bl	80083c0 <_free_r>
 8008ec4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008ec6:	b111      	cbz	r1, 8008ece <_reclaim_reent+0x5e>
 8008ec8:	4620      	mov	r0, r4
 8008eca:	f7ff fa79 	bl	80083c0 <_free_r>
 8008ece:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008ed0:	b111      	cbz	r1, 8008ed8 <_reclaim_reent+0x68>
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	f7ff fa74 	bl	80083c0 <_free_r>
 8008ed8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008eda:	b111      	cbz	r1, 8008ee2 <_reclaim_reent+0x72>
 8008edc:	4620      	mov	r0, r4
 8008ede:	f7ff fa6f 	bl	80083c0 <_free_r>
 8008ee2:	69a3      	ldr	r3, [r4, #24]
 8008ee4:	b1e3      	cbz	r3, 8008f20 <_reclaim_reent+0xb0>
 8008ee6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008ee8:	4620      	mov	r0, r4
 8008eea:	4798      	blx	r3
 8008eec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008eee:	b1b9      	cbz	r1, 8008f20 <_reclaim_reent+0xb0>
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008ef6:	f7ff bfad 	b.w	8008e54 <cleanup_glue>
 8008efa:	5949      	ldr	r1, [r1, r5]
 8008efc:	b941      	cbnz	r1, 8008f10 <_reclaim_reent+0xa0>
 8008efe:	3504      	adds	r5, #4
 8008f00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f02:	2d80      	cmp	r5, #128	; 0x80
 8008f04:	68d9      	ldr	r1, [r3, #12]
 8008f06:	d1f8      	bne.n	8008efa <_reclaim_reent+0x8a>
 8008f08:	4620      	mov	r0, r4
 8008f0a:	f7ff fa59 	bl	80083c0 <_free_r>
 8008f0e:	e7ba      	b.n	8008e86 <_reclaim_reent+0x16>
 8008f10:	680e      	ldr	r6, [r1, #0]
 8008f12:	4620      	mov	r0, r4
 8008f14:	f7ff fa54 	bl	80083c0 <_free_r>
 8008f18:	4631      	mov	r1, r6
 8008f1a:	e7ef      	b.n	8008efc <_reclaim_reent+0x8c>
 8008f1c:	2500      	movs	r5, #0
 8008f1e:	e7ef      	b.n	8008f00 <_reclaim_reent+0x90>
 8008f20:	bd70      	pop	{r4, r5, r6, pc}
 8008f22:	bf00      	nop
 8008f24:	20000010 	.word	0x20000010

08008f28 <_sbrk_r>:
 8008f28:	b538      	push	{r3, r4, r5, lr}
 8008f2a:	4d06      	ldr	r5, [pc, #24]	; (8008f44 <_sbrk_r+0x1c>)
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	4604      	mov	r4, r0
 8008f30:	4608      	mov	r0, r1
 8008f32:	602b      	str	r3, [r5, #0]
 8008f34:	f7f8 fa64 	bl	8001400 <_sbrk>
 8008f38:	1c43      	adds	r3, r0, #1
 8008f3a:	d102      	bne.n	8008f42 <_sbrk_r+0x1a>
 8008f3c:	682b      	ldr	r3, [r5, #0]
 8008f3e:	b103      	cbz	r3, 8008f42 <_sbrk_r+0x1a>
 8008f40:	6023      	str	r3, [r4, #0]
 8008f42:	bd38      	pop	{r3, r4, r5, pc}
 8008f44:	200035d4 	.word	0x200035d4

08008f48 <__sread>:
 8008f48:	b510      	push	{r4, lr}
 8008f4a:	460c      	mov	r4, r1
 8008f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f50:	f001 fcd6 	bl	800a900 <_read_r>
 8008f54:	2800      	cmp	r0, #0
 8008f56:	bfab      	itete	ge
 8008f58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f5a:	89a3      	ldrhlt	r3, [r4, #12]
 8008f5c:	181b      	addge	r3, r3, r0
 8008f5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f62:	bfac      	ite	ge
 8008f64:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f66:	81a3      	strhlt	r3, [r4, #12]
 8008f68:	bd10      	pop	{r4, pc}

08008f6a <__swrite>:
 8008f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f6e:	461f      	mov	r7, r3
 8008f70:	898b      	ldrh	r3, [r1, #12]
 8008f72:	05db      	lsls	r3, r3, #23
 8008f74:	4605      	mov	r5, r0
 8008f76:	460c      	mov	r4, r1
 8008f78:	4616      	mov	r6, r2
 8008f7a:	d505      	bpl.n	8008f88 <__swrite+0x1e>
 8008f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f80:	2302      	movs	r3, #2
 8008f82:	2200      	movs	r2, #0
 8008f84:	f000 ffa8 	bl	8009ed8 <_lseek_r>
 8008f88:	89a3      	ldrh	r3, [r4, #12]
 8008f8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f92:	81a3      	strh	r3, [r4, #12]
 8008f94:	4632      	mov	r2, r6
 8008f96:	463b      	mov	r3, r7
 8008f98:	4628      	mov	r0, r5
 8008f9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f9e:	f000 b837 	b.w	8009010 <_write_r>

08008fa2 <__sseek>:
 8008fa2:	b510      	push	{r4, lr}
 8008fa4:	460c      	mov	r4, r1
 8008fa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008faa:	f000 ff95 	bl	8009ed8 <_lseek_r>
 8008fae:	1c43      	adds	r3, r0, #1
 8008fb0:	89a3      	ldrh	r3, [r4, #12]
 8008fb2:	bf15      	itete	ne
 8008fb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008fb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008fba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008fbe:	81a3      	strheq	r3, [r4, #12]
 8008fc0:	bf18      	it	ne
 8008fc2:	81a3      	strhne	r3, [r4, #12]
 8008fc4:	bd10      	pop	{r4, pc}

08008fc6 <__sclose>:
 8008fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fca:	f000 b833 	b.w	8009034 <_close_r>
	...

08008fd0 <_vsiprintf_r>:
 8008fd0:	b500      	push	{lr}
 8008fd2:	b09b      	sub	sp, #108	; 0x6c
 8008fd4:	9100      	str	r1, [sp, #0]
 8008fd6:	9104      	str	r1, [sp, #16]
 8008fd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008fdc:	9105      	str	r1, [sp, #20]
 8008fde:	9102      	str	r1, [sp, #8]
 8008fe0:	4905      	ldr	r1, [pc, #20]	; (8008ff8 <_vsiprintf_r+0x28>)
 8008fe2:	9103      	str	r1, [sp, #12]
 8008fe4:	4669      	mov	r1, sp
 8008fe6:	f001 fb8b 	bl	800a700 <_svfiprintf_r>
 8008fea:	9b00      	ldr	r3, [sp, #0]
 8008fec:	2200      	movs	r2, #0
 8008fee:	701a      	strb	r2, [r3, #0]
 8008ff0:	b01b      	add	sp, #108	; 0x6c
 8008ff2:	f85d fb04 	ldr.w	pc, [sp], #4
 8008ff6:	bf00      	nop
 8008ff8:	ffff0208 	.word	0xffff0208

08008ffc <vsiprintf>:
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	460a      	mov	r2, r1
 8009000:	4601      	mov	r1, r0
 8009002:	4802      	ldr	r0, [pc, #8]	; (800900c <vsiprintf+0x10>)
 8009004:	6800      	ldr	r0, [r0, #0]
 8009006:	f7ff bfe3 	b.w	8008fd0 <_vsiprintf_r>
 800900a:	bf00      	nop
 800900c:	20000010 	.word	0x20000010

08009010 <_write_r>:
 8009010:	b538      	push	{r3, r4, r5, lr}
 8009012:	4d07      	ldr	r5, [pc, #28]	; (8009030 <_write_r+0x20>)
 8009014:	4604      	mov	r4, r0
 8009016:	4608      	mov	r0, r1
 8009018:	4611      	mov	r1, r2
 800901a:	2200      	movs	r2, #0
 800901c:	602a      	str	r2, [r5, #0]
 800901e:	461a      	mov	r2, r3
 8009020:	f7f8 f99d 	bl	800135e <_write>
 8009024:	1c43      	adds	r3, r0, #1
 8009026:	d102      	bne.n	800902e <_write_r+0x1e>
 8009028:	682b      	ldr	r3, [r5, #0]
 800902a:	b103      	cbz	r3, 800902e <_write_r+0x1e>
 800902c:	6023      	str	r3, [r4, #0]
 800902e:	bd38      	pop	{r3, r4, r5, pc}
 8009030:	200035d4 	.word	0x200035d4

08009034 <_close_r>:
 8009034:	b538      	push	{r3, r4, r5, lr}
 8009036:	4d06      	ldr	r5, [pc, #24]	; (8009050 <_close_r+0x1c>)
 8009038:	2300      	movs	r3, #0
 800903a:	4604      	mov	r4, r0
 800903c:	4608      	mov	r0, r1
 800903e:	602b      	str	r3, [r5, #0]
 8009040:	f7f8 f9a9 	bl	8001396 <_close>
 8009044:	1c43      	adds	r3, r0, #1
 8009046:	d102      	bne.n	800904e <_close_r+0x1a>
 8009048:	682b      	ldr	r3, [r5, #0]
 800904a:	b103      	cbz	r3, 800904e <_close_r+0x1a>
 800904c:	6023      	str	r3, [r4, #0]
 800904e:	bd38      	pop	{r3, r4, r5, pc}
 8009050:	200035d4 	.word	0x200035d4

08009054 <quorem>:
 8009054:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009058:	6903      	ldr	r3, [r0, #16]
 800905a:	690c      	ldr	r4, [r1, #16]
 800905c:	42a3      	cmp	r3, r4
 800905e:	4607      	mov	r7, r0
 8009060:	f2c0 8081 	blt.w	8009166 <quorem+0x112>
 8009064:	3c01      	subs	r4, #1
 8009066:	f101 0814 	add.w	r8, r1, #20
 800906a:	f100 0514 	add.w	r5, r0, #20
 800906e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009072:	9301      	str	r3, [sp, #4]
 8009074:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009078:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800907c:	3301      	adds	r3, #1
 800907e:	429a      	cmp	r2, r3
 8009080:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009084:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009088:	fbb2 f6f3 	udiv	r6, r2, r3
 800908c:	d331      	bcc.n	80090f2 <quorem+0x9e>
 800908e:	f04f 0e00 	mov.w	lr, #0
 8009092:	4640      	mov	r0, r8
 8009094:	46ac      	mov	ip, r5
 8009096:	46f2      	mov	sl, lr
 8009098:	f850 2b04 	ldr.w	r2, [r0], #4
 800909c:	b293      	uxth	r3, r2
 800909e:	fb06 e303 	mla	r3, r6, r3, lr
 80090a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	ebaa 0303 	sub.w	r3, sl, r3
 80090ac:	f8dc a000 	ldr.w	sl, [ip]
 80090b0:	0c12      	lsrs	r2, r2, #16
 80090b2:	fa13 f38a 	uxtah	r3, r3, sl
 80090b6:	fb06 e202 	mla	r2, r6, r2, lr
 80090ba:	9300      	str	r3, [sp, #0]
 80090bc:	9b00      	ldr	r3, [sp, #0]
 80090be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80090c2:	b292      	uxth	r2, r2
 80090c4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80090c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80090cc:	f8bd 3000 	ldrh.w	r3, [sp]
 80090d0:	4581      	cmp	r9, r0
 80090d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090d6:	f84c 3b04 	str.w	r3, [ip], #4
 80090da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80090de:	d2db      	bcs.n	8009098 <quorem+0x44>
 80090e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80090e4:	b92b      	cbnz	r3, 80090f2 <quorem+0x9e>
 80090e6:	9b01      	ldr	r3, [sp, #4]
 80090e8:	3b04      	subs	r3, #4
 80090ea:	429d      	cmp	r5, r3
 80090ec:	461a      	mov	r2, r3
 80090ee:	d32e      	bcc.n	800914e <quorem+0xfa>
 80090f0:	613c      	str	r4, [r7, #16]
 80090f2:	4638      	mov	r0, r7
 80090f4:	f001 f990 	bl	800a418 <__mcmp>
 80090f8:	2800      	cmp	r0, #0
 80090fa:	db24      	blt.n	8009146 <quorem+0xf2>
 80090fc:	3601      	adds	r6, #1
 80090fe:	4628      	mov	r0, r5
 8009100:	f04f 0c00 	mov.w	ip, #0
 8009104:	f858 2b04 	ldr.w	r2, [r8], #4
 8009108:	f8d0 e000 	ldr.w	lr, [r0]
 800910c:	b293      	uxth	r3, r2
 800910e:	ebac 0303 	sub.w	r3, ip, r3
 8009112:	0c12      	lsrs	r2, r2, #16
 8009114:	fa13 f38e 	uxtah	r3, r3, lr
 8009118:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800911c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009120:	b29b      	uxth	r3, r3
 8009122:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009126:	45c1      	cmp	r9, r8
 8009128:	f840 3b04 	str.w	r3, [r0], #4
 800912c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009130:	d2e8      	bcs.n	8009104 <quorem+0xb0>
 8009132:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009136:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800913a:	b922      	cbnz	r2, 8009146 <quorem+0xf2>
 800913c:	3b04      	subs	r3, #4
 800913e:	429d      	cmp	r5, r3
 8009140:	461a      	mov	r2, r3
 8009142:	d30a      	bcc.n	800915a <quorem+0x106>
 8009144:	613c      	str	r4, [r7, #16]
 8009146:	4630      	mov	r0, r6
 8009148:	b003      	add	sp, #12
 800914a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800914e:	6812      	ldr	r2, [r2, #0]
 8009150:	3b04      	subs	r3, #4
 8009152:	2a00      	cmp	r2, #0
 8009154:	d1cc      	bne.n	80090f0 <quorem+0x9c>
 8009156:	3c01      	subs	r4, #1
 8009158:	e7c7      	b.n	80090ea <quorem+0x96>
 800915a:	6812      	ldr	r2, [r2, #0]
 800915c:	3b04      	subs	r3, #4
 800915e:	2a00      	cmp	r2, #0
 8009160:	d1f0      	bne.n	8009144 <quorem+0xf0>
 8009162:	3c01      	subs	r4, #1
 8009164:	e7eb      	b.n	800913e <quorem+0xea>
 8009166:	2000      	movs	r0, #0
 8009168:	e7ee      	b.n	8009148 <quorem+0xf4>
 800916a:	0000      	movs	r0, r0
 800916c:	0000      	movs	r0, r0
	...

08009170 <_dtoa_r>:
 8009170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009174:	ed2d 8b04 	vpush	{d8-d9}
 8009178:	ec57 6b10 	vmov	r6, r7, d0
 800917c:	b093      	sub	sp, #76	; 0x4c
 800917e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009180:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009184:	9106      	str	r1, [sp, #24]
 8009186:	ee10 aa10 	vmov	sl, s0
 800918a:	4604      	mov	r4, r0
 800918c:	9209      	str	r2, [sp, #36]	; 0x24
 800918e:	930c      	str	r3, [sp, #48]	; 0x30
 8009190:	46bb      	mov	fp, r7
 8009192:	b975      	cbnz	r5, 80091b2 <_dtoa_r+0x42>
 8009194:	2010      	movs	r0, #16
 8009196:	f7ff f8dd 	bl	8008354 <malloc>
 800919a:	4602      	mov	r2, r0
 800919c:	6260      	str	r0, [r4, #36]	; 0x24
 800919e:	b920      	cbnz	r0, 80091aa <_dtoa_r+0x3a>
 80091a0:	4ba7      	ldr	r3, [pc, #668]	; (8009440 <_dtoa_r+0x2d0>)
 80091a2:	21ea      	movs	r1, #234	; 0xea
 80091a4:	48a7      	ldr	r0, [pc, #668]	; (8009444 <_dtoa_r+0x2d4>)
 80091a6:	f001 fbbd 	bl	800a924 <__assert_func>
 80091aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80091ae:	6005      	str	r5, [r0, #0]
 80091b0:	60c5      	str	r5, [r0, #12]
 80091b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091b4:	6819      	ldr	r1, [r3, #0]
 80091b6:	b151      	cbz	r1, 80091ce <_dtoa_r+0x5e>
 80091b8:	685a      	ldr	r2, [r3, #4]
 80091ba:	604a      	str	r2, [r1, #4]
 80091bc:	2301      	movs	r3, #1
 80091be:	4093      	lsls	r3, r2
 80091c0:	608b      	str	r3, [r1, #8]
 80091c2:	4620      	mov	r0, r4
 80091c4:	f000 fee6 	bl	8009f94 <_Bfree>
 80091c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091ca:	2200      	movs	r2, #0
 80091cc:	601a      	str	r2, [r3, #0]
 80091ce:	1e3b      	subs	r3, r7, #0
 80091d0:	bfaa      	itet	ge
 80091d2:	2300      	movge	r3, #0
 80091d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80091d8:	f8c8 3000 	strge.w	r3, [r8]
 80091dc:	4b9a      	ldr	r3, [pc, #616]	; (8009448 <_dtoa_r+0x2d8>)
 80091de:	bfbc      	itt	lt
 80091e0:	2201      	movlt	r2, #1
 80091e2:	f8c8 2000 	strlt.w	r2, [r8]
 80091e6:	ea33 030b 	bics.w	r3, r3, fp
 80091ea:	d11b      	bne.n	8009224 <_dtoa_r+0xb4>
 80091ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091ee:	f242 730f 	movw	r3, #9999	; 0x270f
 80091f2:	6013      	str	r3, [r2, #0]
 80091f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80091f8:	4333      	orrs	r3, r6
 80091fa:	f000 8592 	beq.w	8009d22 <_dtoa_r+0xbb2>
 80091fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009200:	b963      	cbnz	r3, 800921c <_dtoa_r+0xac>
 8009202:	4b92      	ldr	r3, [pc, #584]	; (800944c <_dtoa_r+0x2dc>)
 8009204:	e022      	b.n	800924c <_dtoa_r+0xdc>
 8009206:	4b92      	ldr	r3, [pc, #584]	; (8009450 <_dtoa_r+0x2e0>)
 8009208:	9301      	str	r3, [sp, #4]
 800920a:	3308      	adds	r3, #8
 800920c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800920e:	6013      	str	r3, [r2, #0]
 8009210:	9801      	ldr	r0, [sp, #4]
 8009212:	b013      	add	sp, #76	; 0x4c
 8009214:	ecbd 8b04 	vpop	{d8-d9}
 8009218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800921c:	4b8b      	ldr	r3, [pc, #556]	; (800944c <_dtoa_r+0x2dc>)
 800921e:	9301      	str	r3, [sp, #4]
 8009220:	3303      	adds	r3, #3
 8009222:	e7f3      	b.n	800920c <_dtoa_r+0x9c>
 8009224:	2200      	movs	r2, #0
 8009226:	2300      	movs	r3, #0
 8009228:	4650      	mov	r0, sl
 800922a:	4659      	mov	r1, fp
 800922c:	f7f7 fc4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009230:	ec4b ab19 	vmov	d9, sl, fp
 8009234:	4680      	mov	r8, r0
 8009236:	b158      	cbz	r0, 8009250 <_dtoa_r+0xe0>
 8009238:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800923a:	2301      	movs	r3, #1
 800923c:	6013      	str	r3, [r2, #0]
 800923e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009240:	2b00      	cmp	r3, #0
 8009242:	f000 856b 	beq.w	8009d1c <_dtoa_r+0xbac>
 8009246:	4883      	ldr	r0, [pc, #524]	; (8009454 <_dtoa_r+0x2e4>)
 8009248:	6018      	str	r0, [r3, #0]
 800924a:	1e43      	subs	r3, r0, #1
 800924c:	9301      	str	r3, [sp, #4]
 800924e:	e7df      	b.n	8009210 <_dtoa_r+0xa0>
 8009250:	ec4b ab10 	vmov	d0, sl, fp
 8009254:	aa10      	add	r2, sp, #64	; 0x40
 8009256:	a911      	add	r1, sp, #68	; 0x44
 8009258:	4620      	mov	r0, r4
 800925a:	f001 f983 	bl	800a564 <__d2b>
 800925e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009262:	ee08 0a10 	vmov	s16, r0
 8009266:	2d00      	cmp	r5, #0
 8009268:	f000 8084 	beq.w	8009374 <_dtoa_r+0x204>
 800926c:	ee19 3a90 	vmov	r3, s19
 8009270:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009274:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009278:	4656      	mov	r6, sl
 800927a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800927e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009282:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009286:	4b74      	ldr	r3, [pc, #464]	; (8009458 <_dtoa_r+0x2e8>)
 8009288:	2200      	movs	r2, #0
 800928a:	4630      	mov	r0, r6
 800928c:	4639      	mov	r1, r7
 800928e:	f7f6 fffb 	bl	8000288 <__aeabi_dsub>
 8009292:	a365      	add	r3, pc, #404	; (adr r3, 8009428 <_dtoa_r+0x2b8>)
 8009294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009298:	f7f7 f9ae 	bl	80005f8 <__aeabi_dmul>
 800929c:	a364      	add	r3, pc, #400	; (adr r3, 8009430 <_dtoa_r+0x2c0>)
 800929e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a2:	f7f6 fff3 	bl	800028c <__adddf3>
 80092a6:	4606      	mov	r6, r0
 80092a8:	4628      	mov	r0, r5
 80092aa:	460f      	mov	r7, r1
 80092ac:	f7f7 f93a 	bl	8000524 <__aeabi_i2d>
 80092b0:	a361      	add	r3, pc, #388	; (adr r3, 8009438 <_dtoa_r+0x2c8>)
 80092b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b6:	f7f7 f99f 	bl	80005f8 <__aeabi_dmul>
 80092ba:	4602      	mov	r2, r0
 80092bc:	460b      	mov	r3, r1
 80092be:	4630      	mov	r0, r6
 80092c0:	4639      	mov	r1, r7
 80092c2:	f7f6 ffe3 	bl	800028c <__adddf3>
 80092c6:	4606      	mov	r6, r0
 80092c8:	460f      	mov	r7, r1
 80092ca:	f7f7 fc45 	bl	8000b58 <__aeabi_d2iz>
 80092ce:	2200      	movs	r2, #0
 80092d0:	9000      	str	r0, [sp, #0]
 80092d2:	2300      	movs	r3, #0
 80092d4:	4630      	mov	r0, r6
 80092d6:	4639      	mov	r1, r7
 80092d8:	f7f7 fc00 	bl	8000adc <__aeabi_dcmplt>
 80092dc:	b150      	cbz	r0, 80092f4 <_dtoa_r+0x184>
 80092de:	9800      	ldr	r0, [sp, #0]
 80092e0:	f7f7 f920 	bl	8000524 <__aeabi_i2d>
 80092e4:	4632      	mov	r2, r6
 80092e6:	463b      	mov	r3, r7
 80092e8:	f7f7 fbee 	bl	8000ac8 <__aeabi_dcmpeq>
 80092ec:	b910      	cbnz	r0, 80092f4 <_dtoa_r+0x184>
 80092ee:	9b00      	ldr	r3, [sp, #0]
 80092f0:	3b01      	subs	r3, #1
 80092f2:	9300      	str	r3, [sp, #0]
 80092f4:	9b00      	ldr	r3, [sp, #0]
 80092f6:	2b16      	cmp	r3, #22
 80092f8:	d85a      	bhi.n	80093b0 <_dtoa_r+0x240>
 80092fa:	9a00      	ldr	r2, [sp, #0]
 80092fc:	4b57      	ldr	r3, [pc, #348]	; (800945c <_dtoa_r+0x2ec>)
 80092fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009306:	ec51 0b19 	vmov	r0, r1, d9
 800930a:	f7f7 fbe7 	bl	8000adc <__aeabi_dcmplt>
 800930e:	2800      	cmp	r0, #0
 8009310:	d050      	beq.n	80093b4 <_dtoa_r+0x244>
 8009312:	9b00      	ldr	r3, [sp, #0]
 8009314:	3b01      	subs	r3, #1
 8009316:	9300      	str	r3, [sp, #0]
 8009318:	2300      	movs	r3, #0
 800931a:	930b      	str	r3, [sp, #44]	; 0x2c
 800931c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800931e:	1b5d      	subs	r5, r3, r5
 8009320:	1e6b      	subs	r3, r5, #1
 8009322:	9305      	str	r3, [sp, #20]
 8009324:	bf45      	ittet	mi
 8009326:	f1c5 0301 	rsbmi	r3, r5, #1
 800932a:	9304      	strmi	r3, [sp, #16]
 800932c:	2300      	movpl	r3, #0
 800932e:	2300      	movmi	r3, #0
 8009330:	bf4c      	ite	mi
 8009332:	9305      	strmi	r3, [sp, #20]
 8009334:	9304      	strpl	r3, [sp, #16]
 8009336:	9b00      	ldr	r3, [sp, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	db3d      	blt.n	80093b8 <_dtoa_r+0x248>
 800933c:	9b05      	ldr	r3, [sp, #20]
 800933e:	9a00      	ldr	r2, [sp, #0]
 8009340:	920a      	str	r2, [sp, #40]	; 0x28
 8009342:	4413      	add	r3, r2
 8009344:	9305      	str	r3, [sp, #20]
 8009346:	2300      	movs	r3, #0
 8009348:	9307      	str	r3, [sp, #28]
 800934a:	9b06      	ldr	r3, [sp, #24]
 800934c:	2b09      	cmp	r3, #9
 800934e:	f200 8089 	bhi.w	8009464 <_dtoa_r+0x2f4>
 8009352:	2b05      	cmp	r3, #5
 8009354:	bfc4      	itt	gt
 8009356:	3b04      	subgt	r3, #4
 8009358:	9306      	strgt	r3, [sp, #24]
 800935a:	9b06      	ldr	r3, [sp, #24]
 800935c:	f1a3 0302 	sub.w	r3, r3, #2
 8009360:	bfcc      	ite	gt
 8009362:	2500      	movgt	r5, #0
 8009364:	2501      	movle	r5, #1
 8009366:	2b03      	cmp	r3, #3
 8009368:	f200 8087 	bhi.w	800947a <_dtoa_r+0x30a>
 800936c:	e8df f003 	tbb	[pc, r3]
 8009370:	59383a2d 	.word	0x59383a2d
 8009374:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009378:	441d      	add	r5, r3
 800937a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800937e:	2b20      	cmp	r3, #32
 8009380:	bfc1      	itttt	gt
 8009382:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009386:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800938a:	fa0b f303 	lslgt.w	r3, fp, r3
 800938e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009392:	bfda      	itte	le
 8009394:	f1c3 0320 	rsble	r3, r3, #32
 8009398:	fa06 f003 	lslle.w	r0, r6, r3
 800939c:	4318      	orrgt	r0, r3
 800939e:	f7f7 f8b1 	bl	8000504 <__aeabi_ui2d>
 80093a2:	2301      	movs	r3, #1
 80093a4:	4606      	mov	r6, r0
 80093a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80093aa:	3d01      	subs	r5, #1
 80093ac:	930e      	str	r3, [sp, #56]	; 0x38
 80093ae:	e76a      	b.n	8009286 <_dtoa_r+0x116>
 80093b0:	2301      	movs	r3, #1
 80093b2:	e7b2      	b.n	800931a <_dtoa_r+0x1aa>
 80093b4:	900b      	str	r0, [sp, #44]	; 0x2c
 80093b6:	e7b1      	b.n	800931c <_dtoa_r+0x1ac>
 80093b8:	9b04      	ldr	r3, [sp, #16]
 80093ba:	9a00      	ldr	r2, [sp, #0]
 80093bc:	1a9b      	subs	r3, r3, r2
 80093be:	9304      	str	r3, [sp, #16]
 80093c0:	4253      	negs	r3, r2
 80093c2:	9307      	str	r3, [sp, #28]
 80093c4:	2300      	movs	r3, #0
 80093c6:	930a      	str	r3, [sp, #40]	; 0x28
 80093c8:	e7bf      	b.n	800934a <_dtoa_r+0x1da>
 80093ca:	2300      	movs	r3, #0
 80093cc:	9308      	str	r3, [sp, #32]
 80093ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	dc55      	bgt.n	8009480 <_dtoa_r+0x310>
 80093d4:	2301      	movs	r3, #1
 80093d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80093da:	461a      	mov	r2, r3
 80093dc:	9209      	str	r2, [sp, #36]	; 0x24
 80093de:	e00c      	b.n	80093fa <_dtoa_r+0x28a>
 80093e0:	2301      	movs	r3, #1
 80093e2:	e7f3      	b.n	80093cc <_dtoa_r+0x25c>
 80093e4:	2300      	movs	r3, #0
 80093e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093e8:	9308      	str	r3, [sp, #32]
 80093ea:	9b00      	ldr	r3, [sp, #0]
 80093ec:	4413      	add	r3, r2
 80093ee:	9302      	str	r3, [sp, #8]
 80093f0:	3301      	adds	r3, #1
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	9303      	str	r3, [sp, #12]
 80093f6:	bfb8      	it	lt
 80093f8:	2301      	movlt	r3, #1
 80093fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80093fc:	2200      	movs	r2, #0
 80093fe:	6042      	str	r2, [r0, #4]
 8009400:	2204      	movs	r2, #4
 8009402:	f102 0614 	add.w	r6, r2, #20
 8009406:	429e      	cmp	r6, r3
 8009408:	6841      	ldr	r1, [r0, #4]
 800940a:	d93d      	bls.n	8009488 <_dtoa_r+0x318>
 800940c:	4620      	mov	r0, r4
 800940e:	f000 fd81 	bl	8009f14 <_Balloc>
 8009412:	9001      	str	r0, [sp, #4]
 8009414:	2800      	cmp	r0, #0
 8009416:	d13b      	bne.n	8009490 <_dtoa_r+0x320>
 8009418:	4b11      	ldr	r3, [pc, #68]	; (8009460 <_dtoa_r+0x2f0>)
 800941a:	4602      	mov	r2, r0
 800941c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009420:	e6c0      	b.n	80091a4 <_dtoa_r+0x34>
 8009422:	2301      	movs	r3, #1
 8009424:	e7df      	b.n	80093e6 <_dtoa_r+0x276>
 8009426:	bf00      	nop
 8009428:	636f4361 	.word	0x636f4361
 800942c:	3fd287a7 	.word	0x3fd287a7
 8009430:	8b60c8b3 	.word	0x8b60c8b3
 8009434:	3fc68a28 	.word	0x3fc68a28
 8009438:	509f79fb 	.word	0x509f79fb
 800943c:	3fd34413 	.word	0x3fd34413
 8009440:	0800b385 	.word	0x0800b385
 8009444:	0800b39c 	.word	0x0800b39c
 8009448:	7ff00000 	.word	0x7ff00000
 800944c:	0800b381 	.word	0x0800b381
 8009450:	0800b378 	.word	0x0800b378
 8009454:	0800b355 	.word	0x0800b355
 8009458:	3ff80000 	.word	0x3ff80000
 800945c:	0800b490 	.word	0x0800b490
 8009460:	0800b3f7 	.word	0x0800b3f7
 8009464:	2501      	movs	r5, #1
 8009466:	2300      	movs	r3, #0
 8009468:	9306      	str	r3, [sp, #24]
 800946a:	9508      	str	r5, [sp, #32]
 800946c:	f04f 33ff 	mov.w	r3, #4294967295
 8009470:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009474:	2200      	movs	r2, #0
 8009476:	2312      	movs	r3, #18
 8009478:	e7b0      	b.n	80093dc <_dtoa_r+0x26c>
 800947a:	2301      	movs	r3, #1
 800947c:	9308      	str	r3, [sp, #32]
 800947e:	e7f5      	b.n	800946c <_dtoa_r+0x2fc>
 8009480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009482:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009486:	e7b8      	b.n	80093fa <_dtoa_r+0x28a>
 8009488:	3101      	adds	r1, #1
 800948a:	6041      	str	r1, [r0, #4]
 800948c:	0052      	lsls	r2, r2, #1
 800948e:	e7b8      	b.n	8009402 <_dtoa_r+0x292>
 8009490:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009492:	9a01      	ldr	r2, [sp, #4]
 8009494:	601a      	str	r2, [r3, #0]
 8009496:	9b03      	ldr	r3, [sp, #12]
 8009498:	2b0e      	cmp	r3, #14
 800949a:	f200 809d 	bhi.w	80095d8 <_dtoa_r+0x468>
 800949e:	2d00      	cmp	r5, #0
 80094a0:	f000 809a 	beq.w	80095d8 <_dtoa_r+0x468>
 80094a4:	9b00      	ldr	r3, [sp, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	dd32      	ble.n	8009510 <_dtoa_r+0x3a0>
 80094aa:	4ab7      	ldr	r2, [pc, #732]	; (8009788 <_dtoa_r+0x618>)
 80094ac:	f003 030f 	and.w	r3, r3, #15
 80094b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80094b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80094b8:	9b00      	ldr	r3, [sp, #0]
 80094ba:	05d8      	lsls	r0, r3, #23
 80094bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80094c0:	d516      	bpl.n	80094f0 <_dtoa_r+0x380>
 80094c2:	4bb2      	ldr	r3, [pc, #712]	; (800978c <_dtoa_r+0x61c>)
 80094c4:	ec51 0b19 	vmov	r0, r1, d9
 80094c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80094cc:	f7f7 f9be 	bl	800084c <__aeabi_ddiv>
 80094d0:	f007 070f 	and.w	r7, r7, #15
 80094d4:	4682      	mov	sl, r0
 80094d6:	468b      	mov	fp, r1
 80094d8:	2503      	movs	r5, #3
 80094da:	4eac      	ldr	r6, [pc, #688]	; (800978c <_dtoa_r+0x61c>)
 80094dc:	b957      	cbnz	r7, 80094f4 <_dtoa_r+0x384>
 80094de:	4642      	mov	r2, r8
 80094e0:	464b      	mov	r3, r9
 80094e2:	4650      	mov	r0, sl
 80094e4:	4659      	mov	r1, fp
 80094e6:	f7f7 f9b1 	bl	800084c <__aeabi_ddiv>
 80094ea:	4682      	mov	sl, r0
 80094ec:	468b      	mov	fp, r1
 80094ee:	e028      	b.n	8009542 <_dtoa_r+0x3d2>
 80094f0:	2502      	movs	r5, #2
 80094f2:	e7f2      	b.n	80094da <_dtoa_r+0x36a>
 80094f4:	07f9      	lsls	r1, r7, #31
 80094f6:	d508      	bpl.n	800950a <_dtoa_r+0x39a>
 80094f8:	4640      	mov	r0, r8
 80094fa:	4649      	mov	r1, r9
 80094fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009500:	f7f7 f87a 	bl	80005f8 <__aeabi_dmul>
 8009504:	3501      	adds	r5, #1
 8009506:	4680      	mov	r8, r0
 8009508:	4689      	mov	r9, r1
 800950a:	107f      	asrs	r7, r7, #1
 800950c:	3608      	adds	r6, #8
 800950e:	e7e5      	b.n	80094dc <_dtoa_r+0x36c>
 8009510:	f000 809b 	beq.w	800964a <_dtoa_r+0x4da>
 8009514:	9b00      	ldr	r3, [sp, #0]
 8009516:	4f9d      	ldr	r7, [pc, #628]	; (800978c <_dtoa_r+0x61c>)
 8009518:	425e      	negs	r6, r3
 800951a:	4b9b      	ldr	r3, [pc, #620]	; (8009788 <_dtoa_r+0x618>)
 800951c:	f006 020f 	and.w	r2, r6, #15
 8009520:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009528:	ec51 0b19 	vmov	r0, r1, d9
 800952c:	f7f7 f864 	bl	80005f8 <__aeabi_dmul>
 8009530:	1136      	asrs	r6, r6, #4
 8009532:	4682      	mov	sl, r0
 8009534:	468b      	mov	fp, r1
 8009536:	2300      	movs	r3, #0
 8009538:	2502      	movs	r5, #2
 800953a:	2e00      	cmp	r6, #0
 800953c:	d17a      	bne.n	8009634 <_dtoa_r+0x4c4>
 800953e:	2b00      	cmp	r3, #0
 8009540:	d1d3      	bne.n	80094ea <_dtoa_r+0x37a>
 8009542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009544:	2b00      	cmp	r3, #0
 8009546:	f000 8082 	beq.w	800964e <_dtoa_r+0x4de>
 800954a:	4b91      	ldr	r3, [pc, #580]	; (8009790 <_dtoa_r+0x620>)
 800954c:	2200      	movs	r2, #0
 800954e:	4650      	mov	r0, sl
 8009550:	4659      	mov	r1, fp
 8009552:	f7f7 fac3 	bl	8000adc <__aeabi_dcmplt>
 8009556:	2800      	cmp	r0, #0
 8009558:	d079      	beq.n	800964e <_dtoa_r+0x4de>
 800955a:	9b03      	ldr	r3, [sp, #12]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d076      	beq.n	800964e <_dtoa_r+0x4de>
 8009560:	9b02      	ldr	r3, [sp, #8]
 8009562:	2b00      	cmp	r3, #0
 8009564:	dd36      	ble.n	80095d4 <_dtoa_r+0x464>
 8009566:	9b00      	ldr	r3, [sp, #0]
 8009568:	4650      	mov	r0, sl
 800956a:	4659      	mov	r1, fp
 800956c:	1e5f      	subs	r7, r3, #1
 800956e:	2200      	movs	r2, #0
 8009570:	4b88      	ldr	r3, [pc, #544]	; (8009794 <_dtoa_r+0x624>)
 8009572:	f7f7 f841 	bl	80005f8 <__aeabi_dmul>
 8009576:	9e02      	ldr	r6, [sp, #8]
 8009578:	4682      	mov	sl, r0
 800957a:	468b      	mov	fp, r1
 800957c:	3501      	adds	r5, #1
 800957e:	4628      	mov	r0, r5
 8009580:	f7f6 ffd0 	bl	8000524 <__aeabi_i2d>
 8009584:	4652      	mov	r2, sl
 8009586:	465b      	mov	r3, fp
 8009588:	f7f7 f836 	bl	80005f8 <__aeabi_dmul>
 800958c:	4b82      	ldr	r3, [pc, #520]	; (8009798 <_dtoa_r+0x628>)
 800958e:	2200      	movs	r2, #0
 8009590:	f7f6 fe7c 	bl	800028c <__adddf3>
 8009594:	46d0      	mov	r8, sl
 8009596:	46d9      	mov	r9, fp
 8009598:	4682      	mov	sl, r0
 800959a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800959e:	2e00      	cmp	r6, #0
 80095a0:	d158      	bne.n	8009654 <_dtoa_r+0x4e4>
 80095a2:	4b7e      	ldr	r3, [pc, #504]	; (800979c <_dtoa_r+0x62c>)
 80095a4:	2200      	movs	r2, #0
 80095a6:	4640      	mov	r0, r8
 80095a8:	4649      	mov	r1, r9
 80095aa:	f7f6 fe6d 	bl	8000288 <__aeabi_dsub>
 80095ae:	4652      	mov	r2, sl
 80095b0:	465b      	mov	r3, fp
 80095b2:	4680      	mov	r8, r0
 80095b4:	4689      	mov	r9, r1
 80095b6:	f7f7 faaf 	bl	8000b18 <__aeabi_dcmpgt>
 80095ba:	2800      	cmp	r0, #0
 80095bc:	f040 8295 	bne.w	8009aea <_dtoa_r+0x97a>
 80095c0:	4652      	mov	r2, sl
 80095c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80095c6:	4640      	mov	r0, r8
 80095c8:	4649      	mov	r1, r9
 80095ca:	f7f7 fa87 	bl	8000adc <__aeabi_dcmplt>
 80095ce:	2800      	cmp	r0, #0
 80095d0:	f040 8289 	bne.w	8009ae6 <_dtoa_r+0x976>
 80095d4:	ec5b ab19 	vmov	sl, fp, d9
 80095d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095da:	2b00      	cmp	r3, #0
 80095dc:	f2c0 8148 	blt.w	8009870 <_dtoa_r+0x700>
 80095e0:	9a00      	ldr	r2, [sp, #0]
 80095e2:	2a0e      	cmp	r2, #14
 80095e4:	f300 8144 	bgt.w	8009870 <_dtoa_r+0x700>
 80095e8:	4b67      	ldr	r3, [pc, #412]	; (8009788 <_dtoa_r+0x618>)
 80095ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80095f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	f280 80d5 	bge.w	80097a4 <_dtoa_r+0x634>
 80095fa:	9b03      	ldr	r3, [sp, #12]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	f300 80d1 	bgt.w	80097a4 <_dtoa_r+0x634>
 8009602:	f040 826f 	bne.w	8009ae4 <_dtoa_r+0x974>
 8009606:	4b65      	ldr	r3, [pc, #404]	; (800979c <_dtoa_r+0x62c>)
 8009608:	2200      	movs	r2, #0
 800960a:	4640      	mov	r0, r8
 800960c:	4649      	mov	r1, r9
 800960e:	f7f6 fff3 	bl	80005f8 <__aeabi_dmul>
 8009612:	4652      	mov	r2, sl
 8009614:	465b      	mov	r3, fp
 8009616:	f7f7 fa75 	bl	8000b04 <__aeabi_dcmpge>
 800961a:	9e03      	ldr	r6, [sp, #12]
 800961c:	4637      	mov	r7, r6
 800961e:	2800      	cmp	r0, #0
 8009620:	f040 8245 	bne.w	8009aae <_dtoa_r+0x93e>
 8009624:	9d01      	ldr	r5, [sp, #4]
 8009626:	2331      	movs	r3, #49	; 0x31
 8009628:	f805 3b01 	strb.w	r3, [r5], #1
 800962c:	9b00      	ldr	r3, [sp, #0]
 800962e:	3301      	adds	r3, #1
 8009630:	9300      	str	r3, [sp, #0]
 8009632:	e240      	b.n	8009ab6 <_dtoa_r+0x946>
 8009634:	07f2      	lsls	r2, r6, #31
 8009636:	d505      	bpl.n	8009644 <_dtoa_r+0x4d4>
 8009638:	e9d7 2300 	ldrd	r2, r3, [r7]
 800963c:	f7f6 ffdc 	bl	80005f8 <__aeabi_dmul>
 8009640:	3501      	adds	r5, #1
 8009642:	2301      	movs	r3, #1
 8009644:	1076      	asrs	r6, r6, #1
 8009646:	3708      	adds	r7, #8
 8009648:	e777      	b.n	800953a <_dtoa_r+0x3ca>
 800964a:	2502      	movs	r5, #2
 800964c:	e779      	b.n	8009542 <_dtoa_r+0x3d2>
 800964e:	9f00      	ldr	r7, [sp, #0]
 8009650:	9e03      	ldr	r6, [sp, #12]
 8009652:	e794      	b.n	800957e <_dtoa_r+0x40e>
 8009654:	9901      	ldr	r1, [sp, #4]
 8009656:	4b4c      	ldr	r3, [pc, #304]	; (8009788 <_dtoa_r+0x618>)
 8009658:	4431      	add	r1, r6
 800965a:	910d      	str	r1, [sp, #52]	; 0x34
 800965c:	9908      	ldr	r1, [sp, #32]
 800965e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009662:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009666:	2900      	cmp	r1, #0
 8009668:	d043      	beq.n	80096f2 <_dtoa_r+0x582>
 800966a:	494d      	ldr	r1, [pc, #308]	; (80097a0 <_dtoa_r+0x630>)
 800966c:	2000      	movs	r0, #0
 800966e:	f7f7 f8ed 	bl	800084c <__aeabi_ddiv>
 8009672:	4652      	mov	r2, sl
 8009674:	465b      	mov	r3, fp
 8009676:	f7f6 fe07 	bl	8000288 <__aeabi_dsub>
 800967a:	9d01      	ldr	r5, [sp, #4]
 800967c:	4682      	mov	sl, r0
 800967e:	468b      	mov	fp, r1
 8009680:	4649      	mov	r1, r9
 8009682:	4640      	mov	r0, r8
 8009684:	f7f7 fa68 	bl	8000b58 <__aeabi_d2iz>
 8009688:	4606      	mov	r6, r0
 800968a:	f7f6 ff4b 	bl	8000524 <__aeabi_i2d>
 800968e:	4602      	mov	r2, r0
 8009690:	460b      	mov	r3, r1
 8009692:	4640      	mov	r0, r8
 8009694:	4649      	mov	r1, r9
 8009696:	f7f6 fdf7 	bl	8000288 <__aeabi_dsub>
 800969a:	3630      	adds	r6, #48	; 0x30
 800969c:	f805 6b01 	strb.w	r6, [r5], #1
 80096a0:	4652      	mov	r2, sl
 80096a2:	465b      	mov	r3, fp
 80096a4:	4680      	mov	r8, r0
 80096a6:	4689      	mov	r9, r1
 80096a8:	f7f7 fa18 	bl	8000adc <__aeabi_dcmplt>
 80096ac:	2800      	cmp	r0, #0
 80096ae:	d163      	bne.n	8009778 <_dtoa_r+0x608>
 80096b0:	4642      	mov	r2, r8
 80096b2:	464b      	mov	r3, r9
 80096b4:	4936      	ldr	r1, [pc, #216]	; (8009790 <_dtoa_r+0x620>)
 80096b6:	2000      	movs	r0, #0
 80096b8:	f7f6 fde6 	bl	8000288 <__aeabi_dsub>
 80096bc:	4652      	mov	r2, sl
 80096be:	465b      	mov	r3, fp
 80096c0:	f7f7 fa0c 	bl	8000adc <__aeabi_dcmplt>
 80096c4:	2800      	cmp	r0, #0
 80096c6:	f040 80b5 	bne.w	8009834 <_dtoa_r+0x6c4>
 80096ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096cc:	429d      	cmp	r5, r3
 80096ce:	d081      	beq.n	80095d4 <_dtoa_r+0x464>
 80096d0:	4b30      	ldr	r3, [pc, #192]	; (8009794 <_dtoa_r+0x624>)
 80096d2:	2200      	movs	r2, #0
 80096d4:	4650      	mov	r0, sl
 80096d6:	4659      	mov	r1, fp
 80096d8:	f7f6 ff8e 	bl	80005f8 <__aeabi_dmul>
 80096dc:	4b2d      	ldr	r3, [pc, #180]	; (8009794 <_dtoa_r+0x624>)
 80096de:	4682      	mov	sl, r0
 80096e0:	468b      	mov	fp, r1
 80096e2:	4640      	mov	r0, r8
 80096e4:	4649      	mov	r1, r9
 80096e6:	2200      	movs	r2, #0
 80096e8:	f7f6 ff86 	bl	80005f8 <__aeabi_dmul>
 80096ec:	4680      	mov	r8, r0
 80096ee:	4689      	mov	r9, r1
 80096f0:	e7c6      	b.n	8009680 <_dtoa_r+0x510>
 80096f2:	4650      	mov	r0, sl
 80096f4:	4659      	mov	r1, fp
 80096f6:	f7f6 ff7f 	bl	80005f8 <__aeabi_dmul>
 80096fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096fc:	9d01      	ldr	r5, [sp, #4]
 80096fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009700:	4682      	mov	sl, r0
 8009702:	468b      	mov	fp, r1
 8009704:	4649      	mov	r1, r9
 8009706:	4640      	mov	r0, r8
 8009708:	f7f7 fa26 	bl	8000b58 <__aeabi_d2iz>
 800970c:	4606      	mov	r6, r0
 800970e:	f7f6 ff09 	bl	8000524 <__aeabi_i2d>
 8009712:	3630      	adds	r6, #48	; 0x30
 8009714:	4602      	mov	r2, r0
 8009716:	460b      	mov	r3, r1
 8009718:	4640      	mov	r0, r8
 800971a:	4649      	mov	r1, r9
 800971c:	f7f6 fdb4 	bl	8000288 <__aeabi_dsub>
 8009720:	f805 6b01 	strb.w	r6, [r5], #1
 8009724:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009726:	429d      	cmp	r5, r3
 8009728:	4680      	mov	r8, r0
 800972a:	4689      	mov	r9, r1
 800972c:	f04f 0200 	mov.w	r2, #0
 8009730:	d124      	bne.n	800977c <_dtoa_r+0x60c>
 8009732:	4b1b      	ldr	r3, [pc, #108]	; (80097a0 <_dtoa_r+0x630>)
 8009734:	4650      	mov	r0, sl
 8009736:	4659      	mov	r1, fp
 8009738:	f7f6 fda8 	bl	800028c <__adddf3>
 800973c:	4602      	mov	r2, r0
 800973e:	460b      	mov	r3, r1
 8009740:	4640      	mov	r0, r8
 8009742:	4649      	mov	r1, r9
 8009744:	f7f7 f9e8 	bl	8000b18 <__aeabi_dcmpgt>
 8009748:	2800      	cmp	r0, #0
 800974a:	d173      	bne.n	8009834 <_dtoa_r+0x6c4>
 800974c:	4652      	mov	r2, sl
 800974e:	465b      	mov	r3, fp
 8009750:	4913      	ldr	r1, [pc, #76]	; (80097a0 <_dtoa_r+0x630>)
 8009752:	2000      	movs	r0, #0
 8009754:	f7f6 fd98 	bl	8000288 <__aeabi_dsub>
 8009758:	4602      	mov	r2, r0
 800975a:	460b      	mov	r3, r1
 800975c:	4640      	mov	r0, r8
 800975e:	4649      	mov	r1, r9
 8009760:	f7f7 f9bc 	bl	8000adc <__aeabi_dcmplt>
 8009764:	2800      	cmp	r0, #0
 8009766:	f43f af35 	beq.w	80095d4 <_dtoa_r+0x464>
 800976a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800976c:	1e6b      	subs	r3, r5, #1
 800976e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009770:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009774:	2b30      	cmp	r3, #48	; 0x30
 8009776:	d0f8      	beq.n	800976a <_dtoa_r+0x5fa>
 8009778:	9700      	str	r7, [sp, #0]
 800977a:	e049      	b.n	8009810 <_dtoa_r+0x6a0>
 800977c:	4b05      	ldr	r3, [pc, #20]	; (8009794 <_dtoa_r+0x624>)
 800977e:	f7f6 ff3b 	bl	80005f8 <__aeabi_dmul>
 8009782:	4680      	mov	r8, r0
 8009784:	4689      	mov	r9, r1
 8009786:	e7bd      	b.n	8009704 <_dtoa_r+0x594>
 8009788:	0800b490 	.word	0x0800b490
 800978c:	0800b468 	.word	0x0800b468
 8009790:	3ff00000 	.word	0x3ff00000
 8009794:	40240000 	.word	0x40240000
 8009798:	401c0000 	.word	0x401c0000
 800979c:	40140000 	.word	0x40140000
 80097a0:	3fe00000 	.word	0x3fe00000
 80097a4:	9d01      	ldr	r5, [sp, #4]
 80097a6:	4656      	mov	r6, sl
 80097a8:	465f      	mov	r7, fp
 80097aa:	4642      	mov	r2, r8
 80097ac:	464b      	mov	r3, r9
 80097ae:	4630      	mov	r0, r6
 80097b0:	4639      	mov	r1, r7
 80097b2:	f7f7 f84b 	bl	800084c <__aeabi_ddiv>
 80097b6:	f7f7 f9cf 	bl	8000b58 <__aeabi_d2iz>
 80097ba:	4682      	mov	sl, r0
 80097bc:	f7f6 feb2 	bl	8000524 <__aeabi_i2d>
 80097c0:	4642      	mov	r2, r8
 80097c2:	464b      	mov	r3, r9
 80097c4:	f7f6 ff18 	bl	80005f8 <__aeabi_dmul>
 80097c8:	4602      	mov	r2, r0
 80097ca:	460b      	mov	r3, r1
 80097cc:	4630      	mov	r0, r6
 80097ce:	4639      	mov	r1, r7
 80097d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80097d4:	f7f6 fd58 	bl	8000288 <__aeabi_dsub>
 80097d8:	f805 6b01 	strb.w	r6, [r5], #1
 80097dc:	9e01      	ldr	r6, [sp, #4]
 80097de:	9f03      	ldr	r7, [sp, #12]
 80097e0:	1bae      	subs	r6, r5, r6
 80097e2:	42b7      	cmp	r7, r6
 80097e4:	4602      	mov	r2, r0
 80097e6:	460b      	mov	r3, r1
 80097e8:	d135      	bne.n	8009856 <_dtoa_r+0x6e6>
 80097ea:	f7f6 fd4f 	bl	800028c <__adddf3>
 80097ee:	4642      	mov	r2, r8
 80097f0:	464b      	mov	r3, r9
 80097f2:	4606      	mov	r6, r0
 80097f4:	460f      	mov	r7, r1
 80097f6:	f7f7 f98f 	bl	8000b18 <__aeabi_dcmpgt>
 80097fa:	b9d0      	cbnz	r0, 8009832 <_dtoa_r+0x6c2>
 80097fc:	4642      	mov	r2, r8
 80097fe:	464b      	mov	r3, r9
 8009800:	4630      	mov	r0, r6
 8009802:	4639      	mov	r1, r7
 8009804:	f7f7 f960 	bl	8000ac8 <__aeabi_dcmpeq>
 8009808:	b110      	cbz	r0, 8009810 <_dtoa_r+0x6a0>
 800980a:	f01a 0f01 	tst.w	sl, #1
 800980e:	d110      	bne.n	8009832 <_dtoa_r+0x6c2>
 8009810:	4620      	mov	r0, r4
 8009812:	ee18 1a10 	vmov	r1, s16
 8009816:	f000 fbbd 	bl	8009f94 <_Bfree>
 800981a:	2300      	movs	r3, #0
 800981c:	9800      	ldr	r0, [sp, #0]
 800981e:	702b      	strb	r3, [r5, #0]
 8009820:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009822:	3001      	adds	r0, #1
 8009824:	6018      	str	r0, [r3, #0]
 8009826:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009828:	2b00      	cmp	r3, #0
 800982a:	f43f acf1 	beq.w	8009210 <_dtoa_r+0xa0>
 800982e:	601d      	str	r5, [r3, #0]
 8009830:	e4ee      	b.n	8009210 <_dtoa_r+0xa0>
 8009832:	9f00      	ldr	r7, [sp, #0]
 8009834:	462b      	mov	r3, r5
 8009836:	461d      	mov	r5, r3
 8009838:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800983c:	2a39      	cmp	r2, #57	; 0x39
 800983e:	d106      	bne.n	800984e <_dtoa_r+0x6de>
 8009840:	9a01      	ldr	r2, [sp, #4]
 8009842:	429a      	cmp	r2, r3
 8009844:	d1f7      	bne.n	8009836 <_dtoa_r+0x6c6>
 8009846:	9901      	ldr	r1, [sp, #4]
 8009848:	2230      	movs	r2, #48	; 0x30
 800984a:	3701      	adds	r7, #1
 800984c:	700a      	strb	r2, [r1, #0]
 800984e:	781a      	ldrb	r2, [r3, #0]
 8009850:	3201      	adds	r2, #1
 8009852:	701a      	strb	r2, [r3, #0]
 8009854:	e790      	b.n	8009778 <_dtoa_r+0x608>
 8009856:	4ba6      	ldr	r3, [pc, #664]	; (8009af0 <_dtoa_r+0x980>)
 8009858:	2200      	movs	r2, #0
 800985a:	f7f6 fecd 	bl	80005f8 <__aeabi_dmul>
 800985e:	2200      	movs	r2, #0
 8009860:	2300      	movs	r3, #0
 8009862:	4606      	mov	r6, r0
 8009864:	460f      	mov	r7, r1
 8009866:	f7f7 f92f 	bl	8000ac8 <__aeabi_dcmpeq>
 800986a:	2800      	cmp	r0, #0
 800986c:	d09d      	beq.n	80097aa <_dtoa_r+0x63a>
 800986e:	e7cf      	b.n	8009810 <_dtoa_r+0x6a0>
 8009870:	9a08      	ldr	r2, [sp, #32]
 8009872:	2a00      	cmp	r2, #0
 8009874:	f000 80d7 	beq.w	8009a26 <_dtoa_r+0x8b6>
 8009878:	9a06      	ldr	r2, [sp, #24]
 800987a:	2a01      	cmp	r2, #1
 800987c:	f300 80ba 	bgt.w	80099f4 <_dtoa_r+0x884>
 8009880:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009882:	2a00      	cmp	r2, #0
 8009884:	f000 80b2 	beq.w	80099ec <_dtoa_r+0x87c>
 8009888:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800988c:	9e07      	ldr	r6, [sp, #28]
 800988e:	9d04      	ldr	r5, [sp, #16]
 8009890:	9a04      	ldr	r2, [sp, #16]
 8009892:	441a      	add	r2, r3
 8009894:	9204      	str	r2, [sp, #16]
 8009896:	9a05      	ldr	r2, [sp, #20]
 8009898:	2101      	movs	r1, #1
 800989a:	441a      	add	r2, r3
 800989c:	4620      	mov	r0, r4
 800989e:	9205      	str	r2, [sp, #20]
 80098a0:	f000 fc30 	bl	800a104 <__i2b>
 80098a4:	4607      	mov	r7, r0
 80098a6:	2d00      	cmp	r5, #0
 80098a8:	dd0c      	ble.n	80098c4 <_dtoa_r+0x754>
 80098aa:	9b05      	ldr	r3, [sp, #20]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	dd09      	ble.n	80098c4 <_dtoa_r+0x754>
 80098b0:	42ab      	cmp	r3, r5
 80098b2:	9a04      	ldr	r2, [sp, #16]
 80098b4:	bfa8      	it	ge
 80098b6:	462b      	movge	r3, r5
 80098b8:	1ad2      	subs	r2, r2, r3
 80098ba:	9204      	str	r2, [sp, #16]
 80098bc:	9a05      	ldr	r2, [sp, #20]
 80098be:	1aed      	subs	r5, r5, r3
 80098c0:	1ad3      	subs	r3, r2, r3
 80098c2:	9305      	str	r3, [sp, #20]
 80098c4:	9b07      	ldr	r3, [sp, #28]
 80098c6:	b31b      	cbz	r3, 8009910 <_dtoa_r+0x7a0>
 80098c8:	9b08      	ldr	r3, [sp, #32]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	f000 80af 	beq.w	8009a2e <_dtoa_r+0x8be>
 80098d0:	2e00      	cmp	r6, #0
 80098d2:	dd13      	ble.n	80098fc <_dtoa_r+0x78c>
 80098d4:	4639      	mov	r1, r7
 80098d6:	4632      	mov	r2, r6
 80098d8:	4620      	mov	r0, r4
 80098da:	f000 fcd3 	bl	800a284 <__pow5mult>
 80098de:	ee18 2a10 	vmov	r2, s16
 80098e2:	4601      	mov	r1, r0
 80098e4:	4607      	mov	r7, r0
 80098e6:	4620      	mov	r0, r4
 80098e8:	f000 fc22 	bl	800a130 <__multiply>
 80098ec:	ee18 1a10 	vmov	r1, s16
 80098f0:	4680      	mov	r8, r0
 80098f2:	4620      	mov	r0, r4
 80098f4:	f000 fb4e 	bl	8009f94 <_Bfree>
 80098f8:	ee08 8a10 	vmov	s16, r8
 80098fc:	9b07      	ldr	r3, [sp, #28]
 80098fe:	1b9a      	subs	r2, r3, r6
 8009900:	d006      	beq.n	8009910 <_dtoa_r+0x7a0>
 8009902:	ee18 1a10 	vmov	r1, s16
 8009906:	4620      	mov	r0, r4
 8009908:	f000 fcbc 	bl	800a284 <__pow5mult>
 800990c:	ee08 0a10 	vmov	s16, r0
 8009910:	2101      	movs	r1, #1
 8009912:	4620      	mov	r0, r4
 8009914:	f000 fbf6 	bl	800a104 <__i2b>
 8009918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800991a:	2b00      	cmp	r3, #0
 800991c:	4606      	mov	r6, r0
 800991e:	f340 8088 	ble.w	8009a32 <_dtoa_r+0x8c2>
 8009922:	461a      	mov	r2, r3
 8009924:	4601      	mov	r1, r0
 8009926:	4620      	mov	r0, r4
 8009928:	f000 fcac 	bl	800a284 <__pow5mult>
 800992c:	9b06      	ldr	r3, [sp, #24]
 800992e:	2b01      	cmp	r3, #1
 8009930:	4606      	mov	r6, r0
 8009932:	f340 8081 	ble.w	8009a38 <_dtoa_r+0x8c8>
 8009936:	f04f 0800 	mov.w	r8, #0
 800993a:	6933      	ldr	r3, [r6, #16]
 800993c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009940:	6918      	ldr	r0, [r3, #16]
 8009942:	f000 fb8f 	bl	800a064 <__hi0bits>
 8009946:	f1c0 0020 	rsb	r0, r0, #32
 800994a:	9b05      	ldr	r3, [sp, #20]
 800994c:	4418      	add	r0, r3
 800994e:	f010 001f 	ands.w	r0, r0, #31
 8009952:	f000 8092 	beq.w	8009a7a <_dtoa_r+0x90a>
 8009956:	f1c0 0320 	rsb	r3, r0, #32
 800995a:	2b04      	cmp	r3, #4
 800995c:	f340 808a 	ble.w	8009a74 <_dtoa_r+0x904>
 8009960:	f1c0 001c 	rsb	r0, r0, #28
 8009964:	9b04      	ldr	r3, [sp, #16]
 8009966:	4403      	add	r3, r0
 8009968:	9304      	str	r3, [sp, #16]
 800996a:	9b05      	ldr	r3, [sp, #20]
 800996c:	4403      	add	r3, r0
 800996e:	4405      	add	r5, r0
 8009970:	9305      	str	r3, [sp, #20]
 8009972:	9b04      	ldr	r3, [sp, #16]
 8009974:	2b00      	cmp	r3, #0
 8009976:	dd07      	ble.n	8009988 <_dtoa_r+0x818>
 8009978:	ee18 1a10 	vmov	r1, s16
 800997c:	461a      	mov	r2, r3
 800997e:	4620      	mov	r0, r4
 8009980:	f000 fcda 	bl	800a338 <__lshift>
 8009984:	ee08 0a10 	vmov	s16, r0
 8009988:	9b05      	ldr	r3, [sp, #20]
 800998a:	2b00      	cmp	r3, #0
 800998c:	dd05      	ble.n	800999a <_dtoa_r+0x82a>
 800998e:	4631      	mov	r1, r6
 8009990:	461a      	mov	r2, r3
 8009992:	4620      	mov	r0, r4
 8009994:	f000 fcd0 	bl	800a338 <__lshift>
 8009998:	4606      	mov	r6, r0
 800999a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800999c:	2b00      	cmp	r3, #0
 800999e:	d06e      	beq.n	8009a7e <_dtoa_r+0x90e>
 80099a0:	ee18 0a10 	vmov	r0, s16
 80099a4:	4631      	mov	r1, r6
 80099a6:	f000 fd37 	bl	800a418 <__mcmp>
 80099aa:	2800      	cmp	r0, #0
 80099ac:	da67      	bge.n	8009a7e <_dtoa_r+0x90e>
 80099ae:	9b00      	ldr	r3, [sp, #0]
 80099b0:	3b01      	subs	r3, #1
 80099b2:	ee18 1a10 	vmov	r1, s16
 80099b6:	9300      	str	r3, [sp, #0]
 80099b8:	220a      	movs	r2, #10
 80099ba:	2300      	movs	r3, #0
 80099bc:	4620      	mov	r0, r4
 80099be:	f000 fb0b 	bl	8009fd8 <__multadd>
 80099c2:	9b08      	ldr	r3, [sp, #32]
 80099c4:	ee08 0a10 	vmov	s16, r0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	f000 81b1 	beq.w	8009d30 <_dtoa_r+0xbc0>
 80099ce:	2300      	movs	r3, #0
 80099d0:	4639      	mov	r1, r7
 80099d2:	220a      	movs	r2, #10
 80099d4:	4620      	mov	r0, r4
 80099d6:	f000 faff 	bl	8009fd8 <__multadd>
 80099da:	9b02      	ldr	r3, [sp, #8]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	4607      	mov	r7, r0
 80099e0:	f300 808e 	bgt.w	8009b00 <_dtoa_r+0x990>
 80099e4:	9b06      	ldr	r3, [sp, #24]
 80099e6:	2b02      	cmp	r3, #2
 80099e8:	dc51      	bgt.n	8009a8e <_dtoa_r+0x91e>
 80099ea:	e089      	b.n	8009b00 <_dtoa_r+0x990>
 80099ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80099ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80099f2:	e74b      	b.n	800988c <_dtoa_r+0x71c>
 80099f4:	9b03      	ldr	r3, [sp, #12]
 80099f6:	1e5e      	subs	r6, r3, #1
 80099f8:	9b07      	ldr	r3, [sp, #28]
 80099fa:	42b3      	cmp	r3, r6
 80099fc:	bfbf      	itttt	lt
 80099fe:	9b07      	ldrlt	r3, [sp, #28]
 8009a00:	9607      	strlt	r6, [sp, #28]
 8009a02:	1af2      	sublt	r2, r6, r3
 8009a04:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009a06:	bfb6      	itet	lt
 8009a08:	189b      	addlt	r3, r3, r2
 8009a0a:	1b9e      	subge	r6, r3, r6
 8009a0c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009a0e:	9b03      	ldr	r3, [sp, #12]
 8009a10:	bfb8      	it	lt
 8009a12:	2600      	movlt	r6, #0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	bfb7      	itett	lt
 8009a18:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009a1c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009a20:	1a9d      	sublt	r5, r3, r2
 8009a22:	2300      	movlt	r3, #0
 8009a24:	e734      	b.n	8009890 <_dtoa_r+0x720>
 8009a26:	9e07      	ldr	r6, [sp, #28]
 8009a28:	9d04      	ldr	r5, [sp, #16]
 8009a2a:	9f08      	ldr	r7, [sp, #32]
 8009a2c:	e73b      	b.n	80098a6 <_dtoa_r+0x736>
 8009a2e:	9a07      	ldr	r2, [sp, #28]
 8009a30:	e767      	b.n	8009902 <_dtoa_r+0x792>
 8009a32:	9b06      	ldr	r3, [sp, #24]
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	dc18      	bgt.n	8009a6a <_dtoa_r+0x8fa>
 8009a38:	f1ba 0f00 	cmp.w	sl, #0
 8009a3c:	d115      	bne.n	8009a6a <_dtoa_r+0x8fa>
 8009a3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a42:	b993      	cbnz	r3, 8009a6a <_dtoa_r+0x8fa>
 8009a44:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009a48:	0d1b      	lsrs	r3, r3, #20
 8009a4a:	051b      	lsls	r3, r3, #20
 8009a4c:	b183      	cbz	r3, 8009a70 <_dtoa_r+0x900>
 8009a4e:	9b04      	ldr	r3, [sp, #16]
 8009a50:	3301      	adds	r3, #1
 8009a52:	9304      	str	r3, [sp, #16]
 8009a54:	9b05      	ldr	r3, [sp, #20]
 8009a56:	3301      	adds	r3, #1
 8009a58:	9305      	str	r3, [sp, #20]
 8009a5a:	f04f 0801 	mov.w	r8, #1
 8009a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f47f af6a 	bne.w	800993a <_dtoa_r+0x7ca>
 8009a66:	2001      	movs	r0, #1
 8009a68:	e76f      	b.n	800994a <_dtoa_r+0x7da>
 8009a6a:	f04f 0800 	mov.w	r8, #0
 8009a6e:	e7f6      	b.n	8009a5e <_dtoa_r+0x8ee>
 8009a70:	4698      	mov	r8, r3
 8009a72:	e7f4      	b.n	8009a5e <_dtoa_r+0x8ee>
 8009a74:	f43f af7d 	beq.w	8009972 <_dtoa_r+0x802>
 8009a78:	4618      	mov	r0, r3
 8009a7a:	301c      	adds	r0, #28
 8009a7c:	e772      	b.n	8009964 <_dtoa_r+0x7f4>
 8009a7e:	9b03      	ldr	r3, [sp, #12]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	dc37      	bgt.n	8009af4 <_dtoa_r+0x984>
 8009a84:	9b06      	ldr	r3, [sp, #24]
 8009a86:	2b02      	cmp	r3, #2
 8009a88:	dd34      	ble.n	8009af4 <_dtoa_r+0x984>
 8009a8a:	9b03      	ldr	r3, [sp, #12]
 8009a8c:	9302      	str	r3, [sp, #8]
 8009a8e:	9b02      	ldr	r3, [sp, #8]
 8009a90:	b96b      	cbnz	r3, 8009aae <_dtoa_r+0x93e>
 8009a92:	4631      	mov	r1, r6
 8009a94:	2205      	movs	r2, #5
 8009a96:	4620      	mov	r0, r4
 8009a98:	f000 fa9e 	bl	8009fd8 <__multadd>
 8009a9c:	4601      	mov	r1, r0
 8009a9e:	4606      	mov	r6, r0
 8009aa0:	ee18 0a10 	vmov	r0, s16
 8009aa4:	f000 fcb8 	bl	800a418 <__mcmp>
 8009aa8:	2800      	cmp	r0, #0
 8009aaa:	f73f adbb 	bgt.w	8009624 <_dtoa_r+0x4b4>
 8009aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ab0:	9d01      	ldr	r5, [sp, #4]
 8009ab2:	43db      	mvns	r3, r3
 8009ab4:	9300      	str	r3, [sp, #0]
 8009ab6:	f04f 0800 	mov.w	r8, #0
 8009aba:	4631      	mov	r1, r6
 8009abc:	4620      	mov	r0, r4
 8009abe:	f000 fa69 	bl	8009f94 <_Bfree>
 8009ac2:	2f00      	cmp	r7, #0
 8009ac4:	f43f aea4 	beq.w	8009810 <_dtoa_r+0x6a0>
 8009ac8:	f1b8 0f00 	cmp.w	r8, #0
 8009acc:	d005      	beq.n	8009ada <_dtoa_r+0x96a>
 8009ace:	45b8      	cmp	r8, r7
 8009ad0:	d003      	beq.n	8009ada <_dtoa_r+0x96a>
 8009ad2:	4641      	mov	r1, r8
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	f000 fa5d 	bl	8009f94 <_Bfree>
 8009ada:	4639      	mov	r1, r7
 8009adc:	4620      	mov	r0, r4
 8009ade:	f000 fa59 	bl	8009f94 <_Bfree>
 8009ae2:	e695      	b.n	8009810 <_dtoa_r+0x6a0>
 8009ae4:	2600      	movs	r6, #0
 8009ae6:	4637      	mov	r7, r6
 8009ae8:	e7e1      	b.n	8009aae <_dtoa_r+0x93e>
 8009aea:	9700      	str	r7, [sp, #0]
 8009aec:	4637      	mov	r7, r6
 8009aee:	e599      	b.n	8009624 <_dtoa_r+0x4b4>
 8009af0:	40240000 	.word	0x40240000
 8009af4:	9b08      	ldr	r3, [sp, #32]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	f000 80ca 	beq.w	8009c90 <_dtoa_r+0xb20>
 8009afc:	9b03      	ldr	r3, [sp, #12]
 8009afe:	9302      	str	r3, [sp, #8]
 8009b00:	2d00      	cmp	r5, #0
 8009b02:	dd05      	ble.n	8009b10 <_dtoa_r+0x9a0>
 8009b04:	4639      	mov	r1, r7
 8009b06:	462a      	mov	r2, r5
 8009b08:	4620      	mov	r0, r4
 8009b0a:	f000 fc15 	bl	800a338 <__lshift>
 8009b0e:	4607      	mov	r7, r0
 8009b10:	f1b8 0f00 	cmp.w	r8, #0
 8009b14:	d05b      	beq.n	8009bce <_dtoa_r+0xa5e>
 8009b16:	6879      	ldr	r1, [r7, #4]
 8009b18:	4620      	mov	r0, r4
 8009b1a:	f000 f9fb 	bl	8009f14 <_Balloc>
 8009b1e:	4605      	mov	r5, r0
 8009b20:	b928      	cbnz	r0, 8009b2e <_dtoa_r+0x9be>
 8009b22:	4b87      	ldr	r3, [pc, #540]	; (8009d40 <_dtoa_r+0xbd0>)
 8009b24:	4602      	mov	r2, r0
 8009b26:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009b2a:	f7ff bb3b 	b.w	80091a4 <_dtoa_r+0x34>
 8009b2e:	693a      	ldr	r2, [r7, #16]
 8009b30:	3202      	adds	r2, #2
 8009b32:	0092      	lsls	r2, r2, #2
 8009b34:	f107 010c 	add.w	r1, r7, #12
 8009b38:	300c      	adds	r0, #12
 8009b3a:	f7fe fc2b 	bl	8008394 <memcpy>
 8009b3e:	2201      	movs	r2, #1
 8009b40:	4629      	mov	r1, r5
 8009b42:	4620      	mov	r0, r4
 8009b44:	f000 fbf8 	bl	800a338 <__lshift>
 8009b48:	9b01      	ldr	r3, [sp, #4]
 8009b4a:	f103 0901 	add.w	r9, r3, #1
 8009b4e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009b52:	4413      	add	r3, r2
 8009b54:	9305      	str	r3, [sp, #20]
 8009b56:	f00a 0301 	and.w	r3, sl, #1
 8009b5a:	46b8      	mov	r8, r7
 8009b5c:	9304      	str	r3, [sp, #16]
 8009b5e:	4607      	mov	r7, r0
 8009b60:	4631      	mov	r1, r6
 8009b62:	ee18 0a10 	vmov	r0, s16
 8009b66:	f7ff fa75 	bl	8009054 <quorem>
 8009b6a:	4641      	mov	r1, r8
 8009b6c:	9002      	str	r0, [sp, #8]
 8009b6e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009b72:	ee18 0a10 	vmov	r0, s16
 8009b76:	f000 fc4f 	bl	800a418 <__mcmp>
 8009b7a:	463a      	mov	r2, r7
 8009b7c:	9003      	str	r0, [sp, #12]
 8009b7e:	4631      	mov	r1, r6
 8009b80:	4620      	mov	r0, r4
 8009b82:	f000 fc65 	bl	800a450 <__mdiff>
 8009b86:	68c2      	ldr	r2, [r0, #12]
 8009b88:	f109 3bff 	add.w	fp, r9, #4294967295
 8009b8c:	4605      	mov	r5, r0
 8009b8e:	bb02      	cbnz	r2, 8009bd2 <_dtoa_r+0xa62>
 8009b90:	4601      	mov	r1, r0
 8009b92:	ee18 0a10 	vmov	r0, s16
 8009b96:	f000 fc3f 	bl	800a418 <__mcmp>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	4629      	mov	r1, r5
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	9207      	str	r2, [sp, #28]
 8009ba2:	f000 f9f7 	bl	8009f94 <_Bfree>
 8009ba6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009baa:	ea43 0102 	orr.w	r1, r3, r2
 8009bae:	9b04      	ldr	r3, [sp, #16]
 8009bb0:	430b      	orrs	r3, r1
 8009bb2:	464d      	mov	r5, r9
 8009bb4:	d10f      	bne.n	8009bd6 <_dtoa_r+0xa66>
 8009bb6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009bba:	d02a      	beq.n	8009c12 <_dtoa_r+0xaa2>
 8009bbc:	9b03      	ldr	r3, [sp, #12]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	dd02      	ble.n	8009bc8 <_dtoa_r+0xa58>
 8009bc2:	9b02      	ldr	r3, [sp, #8]
 8009bc4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009bc8:	f88b a000 	strb.w	sl, [fp]
 8009bcc:	e775      	b.n	8009aba <_dtoa_r+0x94a>
 8009bce:	4638      	mov	r0, r7
 8009bd0:	e7ba      	b.n	8009b48 <_dtoa_r+0x9d8>
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	e7e2      	b.n	8009b9c <_dtoa_r+0xa2c>
 8009bd6:	9b03      	ldr	r3, [sp, #12]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	db04      	blt.n	8009be6 <_dtoa_r+0xa76>
 8009bdc:	9906      	ldr	r1, [sp, #24]
 8009bde:	430b      	orrs	r3, r1
 8009be0:	9904      	ldr	r1, [sp, #16]
 8009be2:	430b      	orrs	r3, r1
 8009be4:	d122      	bne.n	8009c2c <_dtoa_r+0xabc>
 8009be6:	2a00      	cmp	r2, #0
 8009be8:	ddee      	ble.n	8009bc8 <_dtoa_r+0xa58>
 8009bea:	ee18 1a10 	vmov	r1, s16
 8009bee:	2201      	movs	r2, #1
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	f000 fba1 	bl	800a338 <__lshift>
 8009bf6:	4631      	mov	r1, r6
 8009bf8:	ee08 0a10 	vmov	s16, r0
 8009bfc:	f000 fc0c 	bl	800a418 <__mcmp>
 8009c00:	2800      	cmp	r0, #0
 8009c02:	dc03      	bgt.n	8009c0c <_dtoa_r+0xa9c>
 8009c04:	d1e0      	bne.n	8009bc8 <_dtoa_r+0xa58>
 8009c06:	f01a 0f01 	tst.w	sl, #1
 8009c0a:	d0dd      	beq.n	8009bc8 <_dtoa_r+0xa58>
 8009c0c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009c10:	d1d7      	bne.n	8009bc2 <_dtoa_r+0xa52>
 8009c12:	2339      	movs	r3, #57	; 0x39
 8009c14:	f88b 3000 	strb.w	r3, [fp]
 8009c18:	462b      	mov	r3, r5
 8009c1a:	461d      	mov	r5, r3
 8009c1c:	3b01      	subs	r3, #1
 8009c1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009c22:	2a39      	cmp	r2, #57	; 0x39
 8009c24:	d071      	beq.n	8009d0a <_dtoa_r+0xb9a>
 8009c26:	3201      	adds	r2, #1
 8009c28:	701a      	strb	r2, [r3, #0]
 8009c2a:	e746      	b.n	8009aba <_dtoa_r+0x94a>
 8009c2c:	2a00      	cmp	r2, #0
 8009c2e:	dd07      	ble.n	8009c40 <_dtoa_r+0xad0>
 8009c30:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009c34:	d0ed      	beq.n	8009c12 <_dtoa_r+0xaa2>
 8009c36:	f10a 0301 	add.w	r3, sl, #1
 8009c3a:	f88b 3000 	strb.w	r3, [fp]
 8009c3e:	e73c      	b.n	8009aba <_dtoa_r+0x94a>
 8009c40:	9b05      	ldr	r3, [sp, #20]
 8009c42:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009c46:	4599      	cmp	r9, r3
 8009c48:	d047      	beq.n	8009cda <_dtoa_r+0xb6a>
 8009c4a:	ee18 1a10 	vmov	r1, s16
 8009c4e:	2300      	movs	r3, #0
 8009c50:	220a      	movs	r2, #10
 8009c52:	4620      	mov	r0, r4
 8009c54:	f000 f9c0 	bl	8009fd8 <__multadd>
 8009c58:	45b8      	cmp	r8, r7
 8009c5a:	ee08 0a10 	vmov	s16, r0
 8009c5e:	f04f 0300 	mov.w	r3, #0
 8009c62:	f04f 020a 	mov.w	r2, #10
 8009c66:	4641      	mov	r1, r8
 8009c68:	4620      	mov	r0, r4
 8009c6a:	d106      	bne.n	8009c7a <_dtoa_r+0xb0a>
 8009c6c:	f000 f9b4 	bl	8009fd8 <__multadd>
 8009c70:	4680      	mov	r8, r0
 8009c72:	4607      	mov	r7, r0
 8009c74:	f109 0901 	add.w	r9, r9, #1
 8009c78:	e772      	b.n	8009b60 <_dtoa_r+0x9f0>
 8009c7a:	f000 f9ad 	bl	8009fd8 <__multadd>
 8009c7e:	4639      	mov	r1, r7
 8009c80:	4680      	mov	r8, r0
 8009c82:	2300      	movs	r3, #0
 8009c84:	220a      	movs	r2, #10
 8009c86:	4620      	mov	r0, r4
 8009c88:	f000 f9a6 	bl	8009fd8 <__multadd>
 8009c8c:	4607      	mov	r7, r0
 8009c8e:	e7f1      	b.n	8009c74 <_dtoa_r+0xb04>
 8009c90:	9b03      	ldr	r3, [sp, #12]
 8009c92:	9302      	str	r3, [sp, #8]
 8009c94:	9d01      	ldr	r5, [sp, #4]
 8009c96:	ee18 0a10 	vmov	r0, s16
 8009c9a:	4631      	mov	r1, r6
 8009c9c:	f7ff f9da 	bl	8009054 <quorem>
 8009ca0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009ca4:	9b01      	ldr	r3, [sp, #4]
 8009ca6:	f805 ab01 	strb.w	sl, [r5], #1
 8009caa:	1aea      	subs	r2, r5, r3
 8009cac:	9b02      	ldr	r3, [sp, #8]
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	dd09      	ble.n	8009cc6 <_dtoa_r+0xb56>
 8009cb2:	ee18 1a10 	vmov	r1, s16
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	220a      	movs	r2, #10
 8009cba:	4620      	mov	r0, r4
 8009cbc:	f000 f98c 	bl	8009fd8 <__multadd>
 8009cc0:	ee08 0a10 	vmov	s16, r0
 8009cc4:	e7e7      	b.n	8009c96 <_dtoa_r+0xb26>
 8009cc6:	9b02      	ldr	r3, [sp, #8]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	bfc8      	it	gt
 8009ccc:	461d      	movgt	r5, r3
 8009cce:	9b01      	ldr	r3, [sp, #4]
 8009cd0:	bfd8      	it	le
 8009cd2:	2501      	movle	r5, #1
 8009cd4:	441d      	add	r5, r3
 8009cd6:	f04f 0800 	mov.w	r8, #0
 8009cda:	ee18 1a10 	vmov	r1, s16
 8009cde:	2201      	movs	r2, #1
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	f000 fb29 	bl	800a338 <__lshift>
 8009ce6:	4631      	mov	r1, r6
 8009ce8:	ee08 0a10 	vmov	s16, r0
 8009cec:	f000 fb94 	bl	800a418 <__mcmp>
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	dc91      	bgt.n	8009c18 <_dtoa_r+0xaa8>
 8009cf4:	d102      	bne.n	8009cfc <_dtoa_r+0xb8c>
 8009cf6:	f01a 0f01 	tst.w	sl, #1
 8009cfa:	d18d      	bne.n	8009c18 <_dtoa_r+0xaa8>
 8009cfc:	462b      	mov	r3, r5
 8009cfe:	461d      	mov	r5, r3
 8009d00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d04:	2a30      	cmp	r2, #48	; 0x30
 8009d06:	d0fa      	beq.n	8009cfe <_dtoa_r+0xb8e>
 8009d08:	e6d7      	b.n	8009aba <_dtoa_r+0x94a>
 8009d0a:	9a01      	ldr	r2, [sp, #4]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d184      	bne.n	8009c1a <_dtoa_r+0xaaa>
 8009d10:	9b00      	ldr	r3, [sp, #0]
 8009d12:	3301      	adds	r3, #1
 8009d14:	9300      	str	r3, [sp, #0]
 8009d16:	2331      	movs	r3, #49	; 0x31
 8009d18:	7013      	strb	r3, [r2, #0]
 8009d1a:	e6ce      	b.n	8009aba <_dtoa_r+0x94a>
 8009d1c:	4b09      	ldr	r3, [pc, #36]	; (8009d44 <_dtoa_r+0xbd4>)
 8009d1e:	f7ff ba95 	b.w	800924c <_dtoa_r+0xdc>
 8009d22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	f47f aa6e 	bne.w	8009206 <_dtoa_r+0x96>
 8009d2a:	4b07      	ldr	r3, [pc, #28]	; (8009d48 <_dtoa_r+0xbd8>)
 8009d2c:	f7ff ba8e 	b.w	800924c <_dtoa_r+0xdc>
 8009d30:	9b02      	ldr	r3, [sp, #8]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	dcae      	bgt.n	8009c94 <_dtoa_r+0xb24>
 8009d36:	9b06      	ldr	r3, [sp, #24]
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	f73f aea8 	bgt.w	8009a8e <_dtoa_r+0x91e>
 8009d3e:	e7a9      	b.n	8009c94 <_dtoa_r+0xb24>
 8009d40:	0800b3f7 	.word	0x0800b3f7
 8009d44:	0800b354 	.word	0x0800b354
 8009d48:	0800b378 	.word	0x0800b378

08009d4c <__sflush_r>:
 8009d4c:	898a      	ldrh	r2, [r1, #12]
 8009d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d52:	4605      	mov	r5, r0
 8009d54:	0710      	lsls	r0, r2, #28
 8009d56:	460c      	mov	r4, r1
 8009d58:	d458      	bmi.n	8009e0c <__sflush_r+0xc0>
 8009d5a:	684b      	ldr	r3, [r1, #4]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	dc05      	bgt.n	8009d6c <__sflush_r+0x20>
 8009d60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	dc02      	bgt.n	8009d6c <__sflush_r+0x20>
 8009d66:	2000      	movs	r0, #0
 8009d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d6e:	2e00      	cmp	r6, #0
 8009d70:	d0f9      	beq.n	8009d66 <__sflush_r+0x1a>
 8009d72:	2300      	movs	r3, #0
 8009d74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d78:	682f      	ldr	r7, [r5, #0]
 8009d7a:	602b      	str	r3, [r5, #0]
 8009d7c:	d032      	beq.n	8009de4 <__sflush_r+0x98>
 8009d7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d80:	89a3      	ldrh	r3, [r4, #12]
 8009d82:	075a      	lsls	r2, r3, #29
 8009d84:	d505      	bpl.n	8009d92 <__sflush_r+0x46>
 8009d86:	6863      	ldr	r3, [r4, #4]
 8009d88:	1ac0      	subs	r0, r0, r3
 8009d8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d8c:	b10b      	cbz	r3, 8009d92 <__sflush_r+0x46>
 8009d8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d90:	1ac0      	subs	r0, r0, r3
 8009d92:	2300      	movs	r3, #0
 8009d94:	4602      	mov	r2, r0
 8009d96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d98:	6a21      	ldr	r1, [r4, #32]
 8009d9a:	4628      	mov	r0, r5
 8009d9c:	47b0      	blx	r6
 8009d9e:	1c43      	adds	r3, r0, #1
 8009da0:	89a3      	ldrh	r3, [r4, #12]
 8009da2:	d106      	bne.n	8009db2 <__sflush_r+0x66>
 8009da4:	6829      	ldr	r1, [r5, #0]
 8009da6:	291d      	cmp	r1, #29
 8009da8:	d82c      	bhi.n	8009e04 <__sflush_r+0xb8>
 8009daa:	4a2a      	ldr	r2, [pc, #168]	; (8009e54 <__sflush_r+0x108>)
 8009dac:	40ca      	lsrs	r2, r1
 8009dae:	07d6      	lsls	r6, r2, #31
 8009db0:	d528      	bpl.n	8009e04 <__sflush_r+0xb8>
 8009db2:	2200      	movs	r2, #0
 8009db4:	6062      	str	r2, [r4, #4]
 8009db6:	04d9      	lsls	r1, r3, #19
 8009db8:	6922      	ldr	r2, [r4, #16]
 8009dba:	6022      	str	r2, [r4, #0]
 8009dbc:	d504      	bpl.n	8009dc8 <__sflush_r+0x7c>
 8009dbe:	1c42      	adds	r2, r0, #1
 8009dc0:	d101      	bne.n	8009dc6 <__sflush_r+0x7a>
 8009dc2:	682b      	ldr	r3, [r5, #0]
 8009dc4:	b903      	cbnz	r3, 8009dc8 <__sflush_r+0x7c>
 8009dc6:	6560      	str	r0, [r4, #84]	; 0x54
 8009dc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dca:	602f      	str	r7, [r5, #0]
 8009dcc:	2900      	cmp	r1, #0
 8009dce:	d0ca      	beq.n	8009d66 <__sflush_r+0x1a>
 8009dd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dd4:	4299      	cmp	r1, r3
 8009dd6:	d002      	beq.n	8009dde <__sflush_r+0x92>
 8009dd8:	4628      	mov	r0, r5
 8009dda:	f7fe faf1 	bl	80083c0 <_free_r>
 8009dde:	2000      	movs	r0, #0
 8009de0:	6360      	str	r0, [r4, #52]	; 0x34
 8009de2:	e7c1      	b.n	8009d68 <__sflush_r+0x1c>
 8009de4:	6a21      	ldr	r1, [r4, #32]
 8009de6:	2301      	movs	r3, #1
 8009de8:	4628      	mov	r0, r5
 8009dea:	47b0      	blx	r6
 8009dec:	1c41      	adds	r1, r0, #1
 8009dee:	d1c7      	bne.n	8009d80 <__sflush_r+0x34>
 8009df0:	682b      	ldr	r3, [r5, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d0c4      	beq.n	8009d80 <__sflush_r+0x34>
 8009df6:	2b1d      	cmp	r3, #29
 8009df8:	d001      	beq.n	8009dfe <__sflush_r+0xb2>
 8009dfa:	2b16      	cmp	r3, #22
 8009dfc:	d101      	bne.n	8009e02 <__sflush_r+0xb6>
 8009dfe:	602f      	str	r7, [r5, #0]
 8009e00:	e7b1      	b.n	8009d66 <__sflush_r+0x1a>
 8009e02:	89a3      	ldrh	r3, [r4, #12]
 8009e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e08:	81a3      	strh	r3, [r4, #12]
 8009e0a:	e7ad      	b.n	8009d68 <__sflush_r+0x1c>
 8009e0c:	690f      	ldr	r7, [r1, #16]
 8009e0e:	2f00      	cmp	r7, #0
 8009e10:	d0a9      	beq.n	8009d66 <__sflush_r+0x1a>
 8009e12:	0793      	lsls	r3, r2, #30
 8009e14:	680e      	ldr	r6, [r1, #0]
 8009e16:	bf08      	it	eq
 8009e18:	694b      	ldreq	r3, [r1, #20]
 8009e1a:	600f      	str	r7, [r1, #0]
 8009e1c:	bf18      	it	ne
 8009e1e:	2300      	movne	r3, #0
 8009e20:	eba6 0807 	sub.w	r8, r6, r7
 8009e24:	608b      	str	r3, [r1, #8]
 8009e26:	f1b8 0f00 	cmp.w	r8, #0
 8009e2a:	dd9c      	ble.n	8009d66 <__sflush_r+0x1a>
 8009e2c:	6a21      	ldr	r1, [r4, #32]
 8009e2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e30:	4643      	mov	r3, r8
 8009e32:	463a      	mov	r2, r7
 8009e34:	4628      	mov	r0, r5
 8009e36:	47b0      	blx	r6
 8009e38:	2800      	cmp	r0, #0
 8009e3a:	dc06      	bgt.n	8009e4a <__sflush_r+0xfe>
 8009e3c:	89a3      	ldrh	r3, [r4, #12]
 8009e3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e42:	81a3      	strh	r3, [r4, #12]
 8009e44:	f04f 30ff 	mov.w	r0, #4294967295
 8009e48:	e78e      	b.n	8009d68 <__sflush_r+0x1c>
 8009e4a:	4407      	add	r7, r0
 8009e4c:	eba8 0800 	sub.w	r8, r8, r0
 8009e50:	e7e9      	b.n	8009e26 <__sflush_r+0xda>
 8009e52:	bf00      	nop
 8009e54:	20400001 	.word	0x20400001

08009e58 <_fflush_r>:
 8009e58:	b538      	push	{r3, r4, r5, lr}
 8009e5a:	690b      	ldr	r3, [r1, #16]
 8009e5c:	4605      	mov	r5, r0
 8009e5e:	460c      	mov	r4, r1
 8009e60:	b913      	cbnz	r3, 8009e68 <_fflush_r+0x10>
 8009e62:	2500      	movs	r5, #0
 8009e64:	4628      	mov	r0, r5
 8009e66:	bd38      	pop	{r3, r4, r5, pc}
 8009e68:	b118      	cbz	r0, 8009e72 <_fflush_r+0x1a>
 8009e6a:	6983      	ldr	r3, [r0, #24]
 8009e6c:	b90b      	cbnz	r3, 8009e72 <_fflush_r+0x1a>
 8009e6e:	f7fe f9ab 	bl	80081c8 <__sinit>
 8009e72:	4b14      	ldr	r3, [pc, #80]	; (8009ec4 <_fflush_r+0x6c>)
 8009e74:	429c      	cmp	r4, r3
 8009e76:	d11b      	bne.n	8009eb0 <_fflush_r+0x58>
 8009e78:	686c      	ldr	r4, [r5, #4]
 8009e7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d0ef      	beq.n	8009e62 <_fflush_r+0xa>
 8009e82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e84:	07d0      	lsls	r0, r2, #31
 8009e86:	d404      	bmi.n	8009e92 <_fflush_r+0x3a>
 8009e88:	0599      	lsls	r1, r3, #22
 8009e8a:	d402      	bmi.n	8009e92 <_fflush_r+0x3a>
 8009e8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e8e:	f7fe fa5e 	bl	800834e <__retarget_lock_acquire_recursive>
 8009e92:	4628      	mov	r0, r5
 8009e94:	4621      	mov	r1, r4
 8009e96:	f7ff ff59 	bl	8009d4c <__sflush_r>
 8009e9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e9c:	07da      	lsls	r2, r3, #31
 8009e9e:	4605      	mov	r5, r0
 8009ea0:	d4e0      	bmi.n	8009e64 <_fflush_r+0xc>
 8009ea2:	89a3      	ldrh	r3, [r4, #12]
 8009ea4:	059b      	lsls	r3, r3, #22
 8009ea6:	d4dd      	bmi.n	8009e64 <_fflush_r+0xc>
 8009ea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009eaa:	f7fe fa51 	bl	8008350 <__retarget_lock_release_recursive>
 8009eae:	e7d9      	b.n	8009e64 <_fflush_r+0xc>
 8009eb0:	4b05      	ldr	r3, [pc, #20]	; (8009ec8 <_fflush_r+0x70>)
 8009eb2:	429c      	cmp	r4, r3
 8009eb4:	d101      	bne.n	8009eba <_fflush_r+0x62>
 8009eb6:	68ac      	ldr	r4, [r5, #8]
 8009eb8:	e7df      	b.n	8009e7a <_fflush_r+0x22>
 8009eba:	4b04      	ldr	r3, [pc, #16]	; (8009ecc <_fflush_r+0x74>)
 8009ebc:	429c      	cmp	r4, r3
 8009ebe:	bf08      	it	eq
 8009ec0:	68ec      	ldreq	r4, [r5, #12]
 8009ec2:	e7da      	b.n	8009e7a <_fflush_r+0x22>
 8009ec4:	0800b300 	.word	0x0800b300
 8009ec8:	0800b320 	.word	0x0800b320
 8009ecc:	0800b2e0 	.word	0x0800b2e0

08009ed0 <_localeconv_r>:
 8009ed0:	4800      	ldr	r0, [pc, #0]	; (8009ed4 <_localeconv_r+0x4>)
 8009ed2:	4770      	bx	lr
 8009ed4:	20000164 	.word	0x20000164

08009ed8 <_lseek_r>:
 8009ed8:	b538      	push	{r3, r4, r5, lr}
 8009eda:	4d07      	ldr	r5, [pc, #28]	; (8009ef8 <_lseek_r+0x20>)
 8009edc:	4604      	mov	r4, r0
 8009ede:	4608      	mov	r0, r1
 8009ee0:	4611      	mov	r1, r2
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	602a      	str	r2, [r5, #0]
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	f7f7 fa7c 	bl	80013e4 <_lseek>
 8009eec:	1c43      	adds	r3, r0, #1
 8009eee:	d102      	bne.n	8009ef6 <_lseek_r+0x1e>
 8009ef0:	682b      	ldr	r3, [r5, #0]
 8009ef2:	b103      	cbz	r3, 8009ef6 <_lseek_r+0x1e>
 8009ef4:	6023      	str	r3, [r4, #0]
 8009ef6:	bd38      	pop	{r3, r4, r5, pc}
 8009ef8:	200035d4 	.word	0x200035d4

08009efc <__malloc_lock>:
 8009efc:	4801      	ldr	r0, [pc, #4]	; (8009f04 <__malloc_lock+0x8>)
 8009efe:	f7fe ba26 	b.w	800834e <__retarget_lock_acquire_recursive>
 8009f02:	bf00      	nop
 8009f04:	200035c8 	.word	0x200035c8

08009f08 <__malloc_unlock>:
 8009f08:	4801      	ldr	r0, [pc, #4]	; (8009f10 <__malloc_unlock+0x8>)
 8009f0a:	f7fe ba21 	b.w	8008350 <__retarget_lock_release_recursive>
 8009f0e:	bf00      	nop
 8009f10:	200035c8 	.word	0x200035c8

08009f14 <_Balloc>:
 8009f14:	b570      	push	{r4, r5, r6, lr}
 8009f16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009f18:	4604      	mov	r4, r0
 8009f1a:	460d      	mov	r5, r1
 8009f1c:	b976      	cbnz	r6, 8009f3c <_Balloc+0x28>
 8009f1e:	2010      	movs	r0, #16
 8009f20:	f7fe fa18 	bl	8008354 <malloc>
 8009f24:	4602      	mov	r2, r0
 8009f26:	6260      	str	r0, [r4, #36]	; 0x24
 8009f28:	b920      	cbnz	r0, 8009f34 <_Balloc+0x20>
 8009f2a:	4b18      	ldr	r3, [pc, #96]	; (8009f8c <_Balloc+0x78>)
 8009f2c:	4818      	ldr	r0, [pc, #96]	; (8009f90 <_Balloc+0x7c>)
 8009f2e:	2166      	movs	r1, #102	; 0x66
 8009f30:	f000 fcf8 	bl	800a924 <__assert_func>
 8009f34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f38:	6006      	str	r6, [r0, #0]
 8009f3a:	60c6      	str	r6, [r0, #12]
 8009f3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009f3e:	68f3      	ldr	r3, [r6, #12]
 8009f40:	b183      	cbz	r3, 8009f64 <_Balloc+0x50>
 8009f42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f44:	68db      	ldr	r3, [r3, #12]
 8009f46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009f4a:	b9b8      	cbnz	r0, 8009f7c <_Balloc+0x68>
 8009f4c:	2101      	movs	r1, #1
 8009f4e:	fa01 f605 	lsl.w	r6, r1, r5
 8009f52:	1d72      	adds	r2, r6, #5
 8009f54:	0092      	lsls	r2, r2, #2
 8009f56:	4620      	mov	r0, r4
 8009f58:	f000 fb60 	bl	800a61c <_calloc_r>
 8009f5c:	b160      	cbz	r0, 8009f78 <_Balloc+0x64>
 8009f5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009f62:	e00e      	b.n	8009f82 <_Balloc+0x6e>
 8009f64:	2221      	movs	r2, #33	; 0x21
 8009f66:	2104      	movs	r1, #4
 8009f68:	4620      	mov	r0, r4
 8009f6a:	f000 fb57 	bl	800a61c <_calloc_r>
 8009f6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f70:	60f0      	str	r0, [r6, #12]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d1e4      	bne.n	8009f42 <_Balloc+0x2e>
 8009f78:	2000      	movs	r0, #0
 8009f7a:	bd70      	pop	{r4, r5, r6, pc}
 8009f7c:	6802      	ldr	r2, [r0, #0]
 8009f7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009f82:	2300      	movs	r3, #0
 8009f84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f88:	e7f7      	b.n	8009f7a <_Balloc+0x66>
 8009f8a:	bf00      	nop
 8009f8c:	0800b385 	.word	0x0800b385
 8009f90:	0800b408 	.word	0x0800b408

08009f94 <_Bfree>:
 8009f94:	b570      	push	{r4, r5, r6, lr}
 8009f96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009f98:	4605      	mov	r5, r0
 8009f9a:	460c      	mov	r4, r1
 8009f9c:	b976      	cbnz	r6, 8009fbc <_Bfree+0x28>
 8009f9e:	2010      	movs	r0, #16
 8009fa0:	f7fe f9d8 	bl	8008354 <malloc>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	6268      	str	r0, [r5, #36]	; 0x24
 8009fa8:	b920      	cbnz	r0, 8009fb4 <_Bfree+0x20>
 8009faa:	4b09      	ldr	r3, [pc, #36]	; (8009fd0 <_Bfree+0x3c>)
 8009fac:	4809      	ldr	r0, [pc, #36]	; (8009fd4 <_Bfree+0x40>)
 8009fae:	218a      	movs	r1, #138	; 0x8a
 8009fb0:	f000 fcb8 	bl	800a924 <__assert_func>
 8009fb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009fb8:	6006      	str	r6, [r0, #0]
 8009fba:	60c6      	str	r6, [r0, #12]
 8009fbc:	b13c      	cbz	r4, 8009fce <_Bfree+0x3a>
 8009fbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009fc0:	6862      	ldr	r2, [r4, #4]
 8009fc2:	68db      	ldr	r3, [r3, #12]
 8009fc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009fc8:	6021      	str	r1, [r4, #0]
 8009fca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009fce:	bd70      	pop	{r4, r5, r6, pc}
 8009fd0:	0800b385 	.word	0x0800b385
 8009fd4:	0800b408 	.word	0x0800b408

08009fd8 <__multadd>:
 8009fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fdc:	690d      	ldr	r5, [r1, #16]
 8009fde:	4607      	mov	r7, r0
 8009fe0:	460c      	mov	r4, r1
 8009fe2:	461e      	mov	r6, r3
 8009fe4:	f101 0c14 	add.w	ip, r1, #20
 8009fe8:	2000      	movs	r0, #0
 8009fea:	f8dc 3000 	ldr.w	r3, [ip]
 8009fee:	b299      	uxth	r1, r3
 8009ff0:	fb02 6101 	mla	r1, r2, r1, r6
 8009ff4:	0c1e      	lsrs	r6, r3, #16
 8009ff6:	0c0b      	lsrs	r3, r1, #16
 8009ff8:	fb02 3306 	mla	r3, r2, r6, r3
 8009ffc:	b289      	uxth	r1, r1
 8009ffe:	3001      	adds	r0, #1
 800a000:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a004:	4285      	cmp	r5, r0
 800a006:	f84c 1b04 	str.w	r1, [ip], #4
 800a00a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a00e:	dcec      	bgt.n	8009fea <__multadd+0x12>
 800a010:	b30e      	cbz	r6, 800a056 <__multadd+0x7e>
 800a012:	68a3      	ldr	r3, [r4, #8]
 800a014:	42ab      	cmp	r3, r5
 800a016:	dc19      	bgt.n	800a04c <__multadd+0x74>
 800a018:	6861      	ldr	r1, [r4, #4]
 800a01a:	4638      	mov	r0, r7
 800a01c:	3101      	adds	r1, #1
 800a01e:	f7ff ff79 	bl	8009f14 <_Balloc>
 800a022:	4680      	mov	r8, r0
 800a024:	b928      	cbnz	r0, 800a032 <__multadd+0x5a>
 800a026:	4602      	mov	r2, r0
 800a028:	4b0c      	ldr	r3, [pc, #48]	; (800a05c <__multadd+0x84>)
 800a02a:	480d      	ldr	r0, [pc, #52]	; (800a060 <__multadd+0x88>)
 800a02c:	21b5      	movs	r1, #181	; 0xb5
 800a02e:	f000 fc79 	bl	800a924 <__assert_func>
 800a032:	6922      	ldr	r2, [r4, #16]
 800a034:	3202      	adds	r2, #2
 800a036:	f104 010c 	add.w	r1, r4, #12
 800a03a:	0092      	lsls	r2, r2, #2
 800a03c:	300c      	adds	r0, #12
 800a03e:	f7fe f9a9 	bl	8008394 <memcpy>
 800a042:	4621      	mov	r1, r4
 800a044:	4638      	mov	r0, r7
 800a046:	f7ff ffa5 	bl	8009f94 <_Bfree>
 800a04a:	4644      	mov	r4, r8
 800a04c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a050:	3501      	adds	r5, #1
 800a052:	615e      	str	r6, [r3, #20]
 800a054:	6125      	str	r5, [r4, #16]
 800a056:	4620      	mov	r0, r4
 800a058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a05c:	0800b3f7 	.word	0x0800b3f7
 800a060:	0800b408 	.word	0x0800b408

0800a064 <__hi0bits>:
 800a064:	0c03      	lsrs	r3, r0, #16
 800a066:	041b      	lsls	r3, r3, #16
 800a068:	b9d3      	cbnz	r3, 800a0a0 <__hi0bits+0x3c>
 800a06a:	0400      	lsls	r0, r0, #16
 800a06c:	2310      	movs	r3, #16
 800a06e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a072:	bf04      	itt	eq
 800a074:	0200      	lsleq	r0, r0, #8
 800a076:	3308      	addeq	r3, #8
 800a078:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a07c:	bf04      	itt	eq
 800a07e:	0100      	lsleq	r0, r0, #4
 800a080:	3304      	addeq	r3, #4
 800a082:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a086:	bf04      	itt	eq
 800a088:	0080      	lsleq	r0, r0, #2
 800a08a:	3302      	addeq	r3, #2
 800a08c:	2800      	cmp	r0, #0
 800a08e:	db05      	blt.n	800a09c <__hi0bits+0x38>
 800a090:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a094:	f103 0301 	add.w	r3, r3, #1
 800a098:	bf08      	it	eq
 800a09a:	2320      	moveq	r3, #32
 800a09c:	4618      	mov	r0, r3
 800a09e:	4770      	bx	lr
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	e7e4      	b.n	800a06e <__hi0bits+0xa>

0800a0a4 <__lo0bits>:
 800a0a4:	6803      	ldr	r3, [r0, #0]
 800a0a6:	f013 0207 	ands.w	r2, r3, #7
 800a0aa:	4601      	mov	r1, r0
 800a0ac:	d00b      	beq.n	800a0c6 <__lo0bits+0x22>
 800a0ae:	07da      	lsls	r2, r3, #31
 800a0b0:	d423      	bmi.n	800a0fa <__lo0bits+0x56>
 800a0b2:	0798      	lsls	r0, r3, #30
 800a0b4:	bf49      	itett	mi
 800a0b6:	085b      	lsrmi	r3, r3, #1
 800a0b8:	089b      	lsrpl	r3, r3, #2
 800a0ba:	2001      	movmi	r0, #1
 800a0bc:	600b      	strmi	r3, [r1, #0]
 800a0be:	bf5c      	itt	pl
 800a0c0:	600b      	strpl	r3, [r1, #0]
 800a0c2:	2002      	movpl	r0, #2
 800a0c4:	4770      	bx	lr
 800a0c6:	b298      	uxth	r0, r3
 800a0c8:	b9a8      	cbnz	r0, 800a0f6 <__lo0bits+0x52>
 800a0ca:	0c1b      	lsrs	r3, r3, #16
 800a0cc:	2010      	movs	r0, #16
 800a0ce:	b2da      	uxtb	r2, r3
 800a0d0:	b90a      	cbnz	r2, 800a0d6 <__lo0bits+0x32>
 800a0d2:	3008      	adds	r0, #8
 800a0d4:	0a1b      	lsrs	r3, r3, #8
 800a0d6:	071a      	lsls	r2, r3, #28
 800a0d8:	bf04      	itt	eq
 800a0da:	091b      	lsreq	r3, r3, #4
 800a0dc:	3004      	addeq	r0, #4
 800a0de:	079a      	lsls	r2, r3, #30
 800a0e0:	bf04      	itt	eq
 800a0e2:	089b      	lsreq	r3, r3, #2
 800a0e4:	3002      	addeq	r0, #2
 800a0e6:	07da      	lsls	r2, r3, #31
 800a0e8:	d403      	bmi.n	800a0f2 <__lo0bits+0x4e>
 800a0ea:	085b      	lsrs	r3, r3, #1
 800a0ec:	f100 0001 	add.w	r0, r0, #1
 800a0f0:	d005      	beq.n	800a0fe <__lo0bits+0x5a>
 800a0f2:	600b      	str	r3, [r1, #0]
 800a0f4:	4770      	bx	lr
 800a0f6:	4610      	mov	r0, r2
 800a0f8:	e7e9      	b.n	800a0ce <__lo0bits+0x2a>
 800a0fa:	2000      	movs	r0, #0
 800a0fc:	4770      	bx	lr
 800a0fe:	2020      	movs	r0, #32
 800a100:	4770      	bx	lr
	...

0800a104 <__i2b>:
 800a104:	b510      	push	{r4, lr}
 800a106:	460c      	mov	r4, r1
 800a108:	2101      	movs	r1, #1
 800a10a:	f7ff ff03 	bl	8009f14 <_Balloc>
 800a10e:	4602      	mov	r2, r0
 800a110:	b928      	cbnz	r0, 800a11e <__i2b+0x1a>
 800a112:	4b05      	ldr	r3, [pc, #20]	; (800a128 <__i2b+0x24>)
 800a114:	4805      	ldr	r0, [pc, #20]	; (800a12c <__i2b+0x28>)
 800a116:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a11a:	f000 fc03 	bl	800a924 <__assert_func>
 800a11e:	2301      	movs	r3, #1
 800a120:	6144      	str	r4, [r0, #20]
 800a122:	6103      	str	r3, [r0, #16]
 800a124:	bd10      	pop	{r4, pc}
 800a126:	bf00      	nop
 800a128:	0800b3f7 	.word	0x0800b3f7
 800a12c:	0800b408 	.word	0x0800b408

0800a130 <__multiply>:
 800a130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a134:	4691      	mov	r9, r2
 800a136:	690a      	ldr	r2, [r1, #16]
 800a138:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	bfb8      	it	lt
 800a140:	460b      	movlt	r3, r1
 800a142:	460c      	mov	r4, r1
 800a144:	bfbc      	itt	lt
 800a146:	464c      	movlt	r4, r9
 800a148:	4699      	movlt	r9, r3
 800a14a:	6927      	ldr	r7, [r4, #16]
 800a14c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a150:	68a3      	ldr	r3, [r4, #8]
 800a152:	6861      	ldr	r1, [r4, #4]
 800a154:	eb07 060a 	add.w	r6, r7, sl
 800a158:	42b3      	cmp	r3, r6
 800a15a:	b085      	sub	sp, #20
 800a15c:	bfb8      	it	lt
 800a15e:	3101      	addlt	r1, #1
 800a160:	f7ff fed8 	bl	8009f14 <_Balloc>
 800a164:	b930      	cbnz	r0, 800a174 <__multiply+0x44>
 800a166:	4602      	mov	r2, r0
 800a168:	4b44      	ldr	r3, [pc, #272]	; (800a27c <__multiply+0x14c>)
 800a16a:	4845      	ldr	r0, [pc, #276]	; (800a280 <__multiply+0x150>)
 800a16c:	f240 115d 	movw	r1, #349	; 0x15d
 800a170:	f000 fbd8 	bl	800a924 <__assert_func>
 800a174:	f100 0514 	add.w	r5, r0, #20
 800a178:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a17c:	462b      	mov	r3, r5
 800a17e:	2200      	movs	r2, #0
 800a180:	4543      	cmp	r3, r8
 800a182:	d321      	bcc.n	800a1c8 <__multiply+0x98>
 800a184:	f104 0314 	add.w	r3, r4, #20
 800a188:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a18c:	f109 0314 	add.w	r3, r9, #20
 800a190:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a194:	9202      	str	r2, [sp, #8]
 800a196:	1b3a      	subs	r2, r7, r4
 800a198:	3a15      	subs	r2, #21
 800a19a:	f022 0203 	bic.w	r2, r2, #3
 800a19e:	3204      	adds	r2, #4
 800a1a0:	f104 0115 	add.w	r1, r4, #21
 800a1a4:	428f      	cmp	r7, r1
 800a1a6:	bf38      	it	cc
 800a1a8:	2204      	movcc	r2, #4
 800a1aa:	9201      	str	r2, [sp, #4]
 800a1ac:	9a02      	ldr	r2, [sp, #8]
 800a1ae:	9303      	str	r3, [sp, #12]
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d80c      	bhi.n	800a1ce <__multiply+0x9e>
 800a1b4:	2e00      	cmp	r6, #0
 800a1b6:	dd03      	ble.n	800a1c0 <__multiply+0x90>
 800a1b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d05a      	beq.n	800a276 <__multiply+0x146>
 800a1c0:	6106      	str	r6, [r0, #16]
 800a1c2:	b005      	add	sp, #20
 800a1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1c8:	f843 2b04 	str.w	r2, [r3], #4
 800a1cc:	e7d8      	b.n	800a180 <__multiply+0x50>
 800a1ce:	f8b3 a000 	ldrh.w	sl, [r3]
 800a1d2:	f1ba 0f00 	cmp.w	sl, #0
 800a1d6:	d024      	beq.n	800a222 <__multiply+0xf2>
 800a1d8:	f104 0e14 	add.w	lr, r4, #20
 800a1dc:	46a9      	mov	r9, r5
 800a1de:	f04f 0c00 	mov.w	ip, #0
 800a1e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a1e6:	f8d9 1000 	ldr.w	r1, [r9]
 800a1ea:	fa1f fb82 	uxth.w	fp, r2
 800a1ee:	b289      	uxth	r1, r1
 800a1f0:	fb0a 110b 	mla	r1, sl, fp, r1
 800a1f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a1f8:	f8d9 2000 	ldr.w	r2, [r9]
 800a1fc:	4461      	add	r1, ip
 800a1fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a202:	fb0a c20b 	mla	r2, sl, fp, ip
 800a206:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a20a:	b289      	uxth	r1, r1
 800a20c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a210:	4577      	cmp	r7, lr
 800a212:	f849 1b04 	str.w	r1, [r9], #4
 800a216:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a21a:	d8e2      	bhi.n	800a1e2 <__multiply+0xb2>
 800a21c:	9a01      	ldr	r2, [sp, #4]
 800a21e:	f845 c002 	str.w	ip, [r5, r2]
 800a222:	9a03      	ldr	r2, [sp, #12]
 800a224:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a228:	3304      	adds	r3, #4
 800a22a:	f1b9 0f00 	cmp.w	r9, #0
 800a22e:	d020      	beq.n	800a272 <__multiply+0x142>
 800a230:	6829      	ldr	r1, [r5, #0]
 800a232:	f104 0c14 	add.w	ip, r4, #20
 800a236:	46ae      	mov	lr, r5
 800a238:	f04f 0a00 	mov.w	sl, #0
 800a23c:	f8bc b000 	ldrh.w	fp, [ip]
 800a240:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a244:	fb09 220b 	mla	r2, r9, fp, r2
 800a248:	4492      	add	sl, r2
 800a24a:	b289      	uxth	r1, r1
 800a24c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a250:	f84e 1b04 	str.w	r1, [lr], #4
 800a254:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a258:	f8be 1000 	ldrh.w	r1, [lr]
 800a25c:	0c12      	lsrs	r2, r2, #16
 800a25e:	fb09 1102 	mla	r1, r9, r2, r1
 800a262:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a266:	4567      	cmp	r7, ip
 800a268:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a26c:	d8e6      	bhi.n	800a23c <__multiply+0x10c>
 800a26e:	9a01      	ldr	r2, [sp, #4]
 800a270:	50a9      	str	r1, [r5, r2]
 800a272:	3504      	adds	r5, #4
 800a274:	e79a      	b.n	800a1ac <__multiply+0x7c>
 800a276:	3e01      	subs	r6, #1
 800a278:	e79c      	b.n	800a1b4 <__multiply+0x84>
 800a27a:	bf00      	nop
 800a27c:	0800b3f7 	.word	0x0800b3f7
 800a280:	0800b408 	.word	0x0800b408

0800a284 <__pow5mult>:
 800a284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a288:	4615      	mov	r5, r2
 800a28a:	f012 0203 	ands.w	r2, r2, #3
 800a28e:	4606      	mov	r6, r0
 800a290:	460f      	mov	r7, r1
 800a292:	d007      	beq.n	800a2a4 <__pow5mult+0x20>
 800a294:	4c25      	ldr	r4, [pc, #148]	; (800a32c <__pow5mult+0xa8>)
 800a296:	3a01      	subs	r2, #1
 800a298:	2300      	movs	r3, #0
 800a29a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a29e:	f7ff fe9b 	bl	8009fd8 <__multadd>
 800a2a2:	4607      	mov	r7, r0
 800a2a4:	10ad      	asrs	r5, r5, #2
 800a2a6:	d03d      	beq.n	800a324 <__pow5mult+0xa0>
 800a2a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a2aa:	b97c      	cbnz	r4, 800a2cc <__pow5mult+0x48>
 800a2ac:	2010      	movs	r0, #16
 800a2ae:	f7fe f851 	bl	8008354 <malloc>
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	6270      	str	r0, [r6, #36]	; 0x24
 800a2b6:	b928      	cbnz	r0, 800a2c4 <__pow5mult+0x40>
 800a2b8:	4b1d      	ldr	r3, [pc, #116]	; (800a330 <__pow5mult+0xac>)
 800a2ba:	481e      	ldr	r0, [pc, #120]	; (800a334 <__pow5mult+0xb0>)
 800a2bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a2c0:	f000 fb30 	bl	800a924 <__assert_func>
 800a2c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a2c8:	6004      	str	r4, [r0, #0]
 800a2ca:	60c4      	str	r4, [r0, #12]
 800a2cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a2d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a2d4:	b94c      	cbnz	r4, 800a2ea <__pow5mult+0x66>
 800a2d6:	f240 2171 	movw	r1, #625	; 0x271
 800a2da:	4630      	mov	r0, r6
 800a2dc:	f7ff ff12 	bl	800a104 <__i2b>
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a2e6:	4604      	mov	r4, r0
 800a2e8:	6003      	str	r3, [r0, #0]
 800a2ea:	f04f 0900 	mov.w	r9, #0
 800a2ee:	07eb      	lsls	r3, r5, #31
 800a2f0:	d50a      	bpl.n	800a308 <__pow5mult+0x84>
 800a2f2:	4639      	mov	r1, r7
 800a2f4:	4622      	mov	r2, r4
 800a2f6:	4630      	mov	r0, r6
 800a2f8:	f7ff ff1a 	bl	800a130 <__multiply>
 800a2fc:	4639      	mov	r1, r7
 800a2fe:	4680      	mov	r8, r0
 800a300:	4630      	mov	r0, r6
 800a302:	f7ff fe47 	bl	8009f94 <_Bfree>
 800a306:	4647      	mov	r7, r8
 800a308:	106d      	asrs	r5, r5, #1
 800a30a:	d00b      	beq.n	800a324 <__pow5mult+0xa0>
 800a30c:	6820      	ldr	r0, [r4, #0]
 800a30e:	b938      	cbnz	r0, 800a320 <__pow5mult+0x9c>
 800a310:	4622      	mov	r2, r4
 800a312:	4621      	mov	r1, r4
 800a314:	4630      	mov	r0, r6
 800a316:	f7ff ff0b 	bl	800a130 <__multiply>
 800a31a:	6020      	str	r0, [r4, #0]
 800a31c:	f8c0 9000 	str.w	r9, [r0]
 800a320:	4604      	mov	r4, r0
 800a322:	e7e4      	b.n	800a2ee <__pow5mult+0x6a>
 800a324:	4638      	mov	r0, r7
 800a326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a32a:	bf00      	nop
 800a32c:	0800b558 	.word	0x0800b558
 800a330:	0800b385 	.word	0x0800b385
 800a334:	0800b408 	.word	0x0800b408

0800a338 <__lshift>:
 800a338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a33c:	460c      	mov	r4, r1
 800a33e:	6849      	ldr	r1, [r1, #4]
 800a340:	6923      	ldr	r3, [r4, #16]
 800a342:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a346:	68a3      	ldr	r3, [r4, #8]
 800a348:	4607      	mov	r7, r0
 800a34a:	4691      	mov	r9, r2
 800a34c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a350:	f108 0601 	add.w	r6, r8, #1
 800a354:	42b3      	cmp	r3, r6
 800a356:	db0b      	blt.n	800a370 <__lshift+0x38>
 800a358:	4638      	mov	r0, r7
 800a35a:	f7ff fddb 	bl	8009f14 <_Balloc>
 800a35e:	4605      	mov	r5, r0
 800a360:	b948      	cbnz	r0, 800a376 <__lshift+0x3e>
 800a362:	4602      	mov	r2, r0
 800a364:	4b2a      	ldr	r3, [pc, #168]	; (800a410 <__lshift+0xd8>)
 800a366:	482b      	ldr	r0, [pc, #172]	; (800a414 <__lshift+0xdc>)
 800a368:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a36c:	f000 fada 	bl	800a924 <__assert_func>
 800a370:	3101      	adds	r1, #1
 800a372:	005b      	lsls	r3, r3, #1
 800a374:	e7ee      	b.n	800a354 <__lshift+0x1c>
 800a376:	2300      	movs	r3, #0
 800a378:	f100 0114 	add.w	r1, r0, #20
 800a37c:	f100 0210 	add.w	r2, r0, #16
 800a380:	4618      	mov	r0, r3
 800a382:	4553      	cmp	r3, sl
 800a384:	db37      	blt.n	800a3f6 <__lshift+0xbe>
 800a386:	6920      	ldr	r0, [r4, #16]
 800a388:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a38c:	f104 0314 	add.w	r3, r4, #20
 800a390:	f019 091f 	ands.w	r9, r9, #31
 800a394:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a398:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a39c:	d02f      	beq.n	800a3fe <__lshift+0xc6>
 800a39e:	f1c9 0e20 	rsb	lr, r9, #32
 800a3a2:	468a      	mov	sl, r1
 800a3a4:	f04f 0c00 	mov.w	ip, #0
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	fa02 f209 	lsl.w	r2, r2, r9
 800a3ae:	ea42 020c 	orr.w	r2, r2, ip
 800a3b2:	f84a 2b04 	str.w	r2, [sl], #4
 800a3b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3ba:	4298      	cmp	r0, r3
 800a3bc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a3c0:	d8f2      	bhi.n	800a3a8 <__lshift+0x70>
 800a3c2:	1b03      	subs	r3, r0, r4
 800a3c4:	3b15      	subs	r3, #21
 800a3c6:	f023 0303 	bic.w	r3, r3, #3
 800a3ca:	3304      	adds	r3, #4
 800a3cc:	f104 0215 	add.w	r2, r4, #21
 800a3d0:	4290      	cmp	r0, r2
 800a3d2:	bf38      	it	cc
 800a3d4:	2304      	movcc	r3, #4
 800a3d6:	f841 c003 	str.w	ip, [r1, r3]
 800a3da:	f1bc 0f00 	cmp.w	ip, #0
 800a3de:	d001      	beq.n	800a3e4 <__lshift+0xac>
 800a3e0:	f108 0602 	add.w	r6, r8, #2
 800a3e4:	3e01      	subs	r6, #1
 800a3e6:	4638      	mov	r0, r7
 800a3e8:	612e      	str	r6, [r5, #16]
 800a3ea:	4621      	mov	r1, r4
 800a3ec:	f7ff fdd2 	bl	8009f94 <_Bfree>
 800a3f0:	4628      	mov	r0, r5
 800a3f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3f6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	e7c1      	b.n	800a382 <__lshift+0x4a>
 800a3fe:	3904      	subs	r1, #4
 800a400:	f853 2b04 	ldr.w	r2, [r3], #4
 800a404:	f841 2f04 	str.w	r2, [r1, #4]!
 800a408:	4298      	cmp	r0, r3
 800a40a:	d8f9      	bhi.n	800a400 <__lshift+0xc8>
 800a40c:	e7ea      	b.n	800a3e4 <__lshift+0xac>
 800a40e:	bf00      	nop
 800a410:	0800b3f7 	.word	0x0800b3f7
 800a414:	0800b408 	.word	0x0800b408

0800a418 <__mcmp>:
 800a418:	b530      	push	{r4, r5, lr}
 800a41a:	6902      	ldr	r2, [r0, #16]
 800a41c:	690c      	ldr	r4, [r1, #16]
 800a41e:	1b12      	subs	r2, r2, r4
 800a420:	d10e      	bne.n	800a440 <__mcmp+0x28>
 800a422:	f100 0314 	add.w	r3, r0, #20
 800a426:	3114      	adds	r1, #20
 800a428:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a42c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a430:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a434:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a438:	42a5      	cmp	r5, r4
 800a43a:	d003      	beq.n	800a444 <__mcmp+0x2c>
 800a43c:	d305      	bcc.n	800a44a <__mcmp+0x32>
 800a43e:	2201      	movs	r2, #1
 800a440:	4610      	mov	r0, r2
 800a442:	bd30      	pop	{r4, r5, pc}
 800a444:	4283      	cmp	r3, r0
 800a446:	d3f3      	bcc.n	800a430 <__mcmp+0x18>
 800a448:	e7fa      	b.n	800a440 <__mcmp+0x28>
 800a44a:	f04f 32ff 	mov.w	r2, #4294967295
 800a44e:	e7f7      	b.n	800a440 <__mcmp+0x28>

0800a450 <__mdiff>:
 800a450:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a454:	460c      	mov	r4, r1
 800a456:	4606      	mov	r6, r0
 800a458:	4611      	mov	r1, r2
 800a45a:	4620      	mov	r0, r4
 800a45c:	4690      	mov	r8, r2
 800a45e:	f7ff ffdb 	bl	800a418 <__mcmp>
 800a462:	1e05      	subs	r5, r0, #0
 800a464:	d110      	bne.n	800a488 <__mdiff+0x38>
 800a466:	4629      	mov	r1, r5
 800a468:	4630      	mov	r0, r6
 800a46a:	f7ff fd53 	bl	8009f14 <_Balloc>
 800a46e:	b930      	cbnz	r0, 800a47e <__mdiff+0x2e>
 800a470:	4b3a      	ldr	r3, [pc, #232]	; (800a55c <__mdiff+0x10c>)
 800a472:	4602      	mov	r2, r0
 800a474:	f240 2132 	movw	r1, #562	; 0x232
 800a478:	4839      	ldr	r0, [pc, #228]	; (800a560 <__mdiff+0x110>)
 800a47a:	f000 fa53 	bl	800a924 <__assert_func>
 800a47e:	2301      	movs	r3, #1
 800a480:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a484:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a488:	bfa4      	itt	ge
 800a48a:	4643      	movge	r3, r8
 800a48c:	46a0      	movge	r8, r4
 800a48e:	4630      	mov	r0, r6
 800a490:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a494:	bfa6      	itte	ge
 800a496:	461c      	movge	r4, r3
 800a498:	2500      	movge	r5, #0
 800a49a:	2501      	movlt	r5, #1
 800a49c:	f7ff fd3a 	bl	8009f14 <_Balloc>
 800a4a0:	b920      	cbnz	r0, 800a4ac <__mdiff+0x5c>
 800a4a2:	4b2e      	ldr	r3, [pc, #184]	; (800a55c <__mdiff+0x10c>)
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a4aa:	e7e5      	b.n	800a478 <__mdiff+0x28>
 800a4ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a4b0:	6926      	ldr	r6, [r4, #16]
 800a4b2:	60c5      	str	r5, [r0, #12]
 800a4b4:	f104 0914 	add.w	r9, r4, #20
 800a4b8:	f108 0514 	add.w	r5, r8, #20
 800a4bc:	f100 0e14 	add.w	lr, r0, #20
 800a4c0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a4c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a4c8:	f108 0210 	add.w	r2, r8, #16
 800a4cc:	46f2      	mov	sl, lr
 800a4ce:	2100      	movs	r1, #0
 800a4d0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a4d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a4d8:	fa1f f883 	uxth.w	r8, r3
 800a4dc:	fa11 f18b 	uxtah	r1, r1, fp
 800a4e0:	0c1b      	lsrs	r3, r3, #16
 800a4e2:	eba1 0808 	sub.w	r8, r1, r8
 800a4e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a4ea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a4ee:	fa1f f888 	uxth.w	r8, r8
 800a4f2:	1419      	asrs	r1, r3, #16
 800a4f4:	454e      	cmp	r6, r9
 800a4f6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a4fa:	f84a 3b04 	str.w	r3, [sl], #4
 800a4fe:	d8e7      	bhi.n	800a4d0 <__mdiff+0x80>
 800a500:	1b33      	subs	r3, r6, r4
 800a502:	3b15      	subs	r3, #21
 800a504:	f023 0303 	bic.w	r3, r3, #3
 800a508:	3304      	adds	r3, #4
 800a50a:	3415      	adds	r4, #21
 800a50c:	42a6      	cmp	r6, r4
 800a50e:	bf38      	it	cc
 800a510:	2304      	movcc	r3, #4
 800a512:	441d      	add	r5, r3
 800a514:	4473      	add	r3, lr
 800a516:	469e      	mov	lr, r3
 800a518:	462e      	mov	r6, r5
 800a51a:	4566      	cmp	r6, ip
 800a51c:	d30e      	bcc.n	800a53c <__mdiff+0xec>
 800a51e:	f10c 0203 	add.w	r2, ip, #3
 800a522:	1b52      	subs	r2, r2, r5
 800a524:	f022 0203 	bic.w	r2, r2, #3
 800a528:	3d03      	subs	r5, #3
 800a52a:	45ac      	cmp	ip, r5
 800a52c:	bf38      	it	cc
 800a52e:	2200      	movcc	r2, #0
 800a530:	441a      	add	r2, r3
 800a532:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a536:	b17b      	cbz	r3, 800a558 <__mdiff+0x108>
 800a538:	6107      	str	r7, [r0, #16]
 800a53a:	e7a3      	b.n	800a484 <__mdiff+0x34>
 800a53c:	f856 8b04 	ldr.w	r8, [r6], #4
 800a540:	fa11 f288 	uxtah	r2, r1, r8
 800a544:	1414      	asrs	r4, r2, #16
 800a546:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a54a:	b292      	uxth	r2, r2
 800a54c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a550:	f84e 2b04 	str.w	r2, [lr], #4
 800a554:	1421      	asrs	r1, r4, #16
 800a556:	e7e0      	b.n	800a51a <__mdiff+0xca>
 800a558:	3f01      	subs	r7, #1
 800a55a:	e7ea      	b.n	800a532 <__mdiff+0xe2>
 800a55c:	0800b3f7 	.word	0x0800b3f7
 800a560:	0800b408 	.word	0x0800b408

0800a564 <__d2b>:
 800a564:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a568:	4689      	mov	r9, r1
 800a56a:	2101      	movs	r1, #1
 800a56c:	ec57 6b10 	vmov	r6, r7, d0
 800a570:	4690      	mov	r8, r2
 800a572:	f7ff fccf 	bl	8009f14 <_Balloc>
 800a576:	4604      	mov	r4, r0
 800a578:	b930      	cbnz	r0, 800a588 <__d2b+0x24>
 800a57a:	4602      	mov	r2, r0
 800a57c:	4b25      	ldr	r3, [pc, #148]	; (800a614 <__d2b+0xb0>)
 800a57e:	4826      	ldr	r0, [pc, #152]	; (800a618 <__d2b+0xb4>)
 800a580:	f240 310a 	movw	r1, #778	; 0x30a
 800a584:	f000 f9ce 	bl	800a924 <__assert_func>
 800a588:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a58c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a590:	bb35      	cbnz	r5, 800a5e0 <__d2b+0x7c>
 800a592:	2e00      	cmp	r6, #0
 800a594:	9301      	str	r3, [sp, #4]
 800a596:	d028      	beq.n	800a5ea <__d2b+0x86>
 800a598:	4668      	mov	r0, sp
 800a59a:	9600      	str	r6, [sp, #0]
 800a59c:	f7ff fd82 	bl	800a0a4 <__lo0bits>
 800a5a0:	9900      	ldr	r1, [sp, #0]
 800a5a2:	b300      	cbz	r0, 800a5e6 <__d2b+0x82>
 800a5a4:	9a01      	ldr	r2, [sp, #4]
 800a5a6:	f1c0 0320 	rsb	r3, r0, #32
 800a5aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a5ae:	430b      	orrs	r3, r1
 800a5b0:	40c2      	lsrs	r2, r0
 800a5b2:	6163      	str	r3, [r4, #20]
 800a5b4:	9201      	str	r2, [sp, #4]
 800a5b6:	9b01      	ldr	r3, [sp, #4]
 800a5b8:	61a3      	str	r3, [r4, #24]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	bf14      	ite	ne
 800a5be:	2202      	movne	r2, #2
 800a5c0:	2201      	moveq	r2, #1
 800a5c2:	6122      	str	r2, [r4, #16]
 800a5c4:	b1d5      	cbz	r5, 800a5fc <__d2b+0x98>
 800a5c6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a5ca:	4405      	add	r5, r0
 800a5cc:	f8c9 5000 	str.w	r5, [r9]
 800a5d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a5d4:	f8c8 0000 	str.w	r0, [r8]
 800a5d8:	4620      	mov	r0, r4
 800a5da:	b003      	add	sp, #12
 800a5dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a5e4:	e7d5      	b.n	800a592 <__d2b+0x2e>
 800a5e6:	6161      	str	r1, [r4, #20]
 800a5e8:	e7e5      	b.n	800a5b6 <__d2b+0x52>
 800a5ea:	a801      	add	r0, sp, #4
 800a5ec:	f7ff fd5a 	bl	800a0a4 <__lo0bits>
 800a5f0:	9b01      	ldr	r3, [sp, #4]
 800a5f2:	6163      	str	r3, [r4, #20]
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	6122      	str	r2, [r4, #16]
 800a5f8:	3020      	adds	r0, #32
 800a5fa:	e7e3      	b.n	800a5c4 <__d2b+0x60>
 800a5fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a600:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a604:	f8c9 0000 	str.w	r0, [r9]
 800a608:	6918      	ldr	r0, [r3, #16]
 800a60a:	f7ff fd2b 	bl	800a064 <__hi0bits>
 800a60e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a612:	e7df      	b.n	800a5d4 <__d2b+0x70>
 800a614:	0800b3f7 	.word	0x0800b3f7
 800a618:	0800b408 	.word	0x0800b408

0800a61c <_calloc_r>:
 800a61c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a61e:	fba1 2402 	umull	r2, r4, r1, r2
 800a622:	b94c      	cbnz	r4, 800a638 <_calloc_r+0x1c>
 800a624:	4611      	mov	r1, r2
 800a626:	9201      	str	r2, [sp, #4]
 800a628:	f7fd ff36 	bl	8008498 <_malloc_r>
 800a62c:	9a01      	ldr	r2, [sp, #4]
 800a62e:	4605      	mov	r5, r0
 800a630:	b930      	cbnz	r0, 800a640 <_calloc_r+0x24>
 800a632:	4628      	mov	r0, r5
 800a634:	b003      	add	sp, #12
 800a636:	bd30      	pop	{r4, r5, pc}
 800a638:	220c      	movs	r2, #12
 800a63a:	6002      	str	r2, [r0, #0]
 800a63c:	2500      	movs	r5, #0
 800a63e:	e7f8      	b.n	800a632 <_calloc_r+0x16>
 800a640:	4621      	mov	r1, r4
 800a642:	f7fd feb5 	bl	80083b0 <memset>
 800a646:	e7f4      	b.n	800a632 <_calloc_r+0x16>

0800a648 <__ssputs_r>:
 800a648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a64c:	688e      	ldr	r6, [r1, #8]
 800a64e:	429e      	cmp	r6, r3
 800a650:	4682      	mov	sl, r0
 800a652:	460c      	mov	r4, r1
 800a654:	4690      	mov	r8, r2
 800a656:	461f      	mov	r7, r3
 800a658:	d838      	bhi.n	800a6cc <__ssputs_r+0x84>
 800a65a:	898a      	ldrh	r2, [r1, #12]
 800a65c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a660:	d032      	beq.n	800a6c8 <__ssputs_r+0x80>
 800a662:	6825      	ldr	r5, [r4, #0]
 800a664:	6909      	ldr	r1, [r1, #16]
 800a666:	eba5 0901 	sub.w	r9, r5, r1
 800a66a:	6965      	ldr	r5, [r4, #20]
 800a66c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a670:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a674:	3301      	adds	r3, #1
 800a676:	444b      	add	r3, r9
 800a678:	106d      	asrs	r5, r5, #1
 800a67a:	429d      	cmp	r5, r3
 800a67c:	bf38      	it	cc
 800a67e:	461d      	movcc	r5, r3
 800a680:	0553      	lsls	r3, r2, #21
 800a682:	d531      	bpl.n	800a6e8 <__ssputs_r+0xa0>
 800a684:	4629      	mov	r1, r5
 800a686:	f7fd ff07 	bl	8008498 <_malloc_r>
 800a68a:	4606      	mov	r6, r0
 800a68c:	b950      	cbnz	r0, 800a6a4 <__ssputs_r+0x5c>
 800a68e:	230c      	movs	r3, #12
 800a690:	f8ca 3000 	str.w	r3, [sl]
 800a694:	89a3      	ldrh	r3, [r4, #12]
 800a696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a69a:	81a3      	strh	r3, [r4, #12]
 800a69c:	f04f 30ff 	mov.w	r0, #4294967295
 800a6a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6a4:	6921      	ldr	r1, [r4, #16]
 800a6a6:	464a      	mov	r2, r9
 800a6a8:	f7fd fe74 	bl	8008394 <memcpy>
 800a6ac:	89a3      	ldrh	r3, [r4, #12]
 800a6ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a6b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6b6:	81a3      	strh	r3, [r4, #12]
 800a6b8:	6126      	str	r6, [r4, #16]
 800a6ba:	6165      	str	r5, [r4, #20]
 800a6bc:	444e      	add	r6, r9
 800a6be:	eba5 0509 	sub.w	r5, r5, r9
 800a6c2:	6026      	str	r6, [r4, #0]
 800a6c4:	60a5      	str	r5, [r4, #8]
 800a6c6:	463e      	mov	r6, r7
 800a6c8:	42be      	cmp	r6, r7
 800a6ca:	d900      	bls.n	800a6ce <__ssputs_r+0x86>
 800a6cc:	463e      	mov	r6, r7
 800a6ce:	6820      	ldr	r0, [r4, #0]
 800a6d0:	4632      	mov	r2, r6
 800a6d2:	4641      	mov	r1, r8
 800a6d4:	f000 f968 	bl	800a9a8 <memmove>
 800a6d8:	68a3      	ldr	r3, [r4, #8]
 800a6da:	1b9b      	subs	r3, r3, r6
 800a6dc:	60a3      	str	r3, [r4, #8]
 800a6de:	6823      	ldr	r3, [r4, #0]
 800a6e0:	4433      	add	r3, r6
 800a6e2:	6023      	str	r3, [r4, #0]
 800a6e4:	2000      	movs	r0, #0
 800a6e6:	e7db      	b.n	800a6a0 <__ssputs_r+0x58>
 800a6e8:	462a      	mov	r2, r5
 800a6ea:	f000 f977 	bl	800a9dc <_realloc_r>
 800a6ee:	4606      	mov	r6, r0
 800a6f0:	2800      	cmp	r0, #0
 800a6f2:	d1e1      	bne.n	800a6b8 <__ssputs_r+0x70>
 800a6f4:	6921      	ldr	r1, [r4, #16]
 800a6f6:	4650      	mov	r0, sl
 800a6f8:	f7fd fe62 	bl	80083c0 <_free_r>
 800a6fc:	e7c7      	b.n	800a68e <__ssputs_r+0x46>
	...

0800a700 <_svfiprintf_r>:
 800a700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a704:	4698      	mov	r8, r3
 800a706:	898b      	ldrh	r3, [r1, #12]
 800a708:	061b      	lsls	r3, r3, #24
 800a70a:	b09d      	sub	sp, #116	; 0x74
 800a70c:	4607      	mov	r7, r0
 800a70e:	460d      	mov	r5, r1
 800a710:	4614      	mov	r4, r2
 800a712:	d50e      	bpl.n	800a732 <_svfiprintf_r+0x32>
 800a714:	690b      	ldr	r3, [r1, #16]
 800a716:	b963      	cbnz	r3, 800a732 <_svfiprintf_r+0x32>
 800a718:	2140      	movs	r1, #64	; 0x40
 800a71a:	f7fd febd 	bl	8008498 <_malloc_r>
 800a71e:	6028      	str	r0, [r5, #0]
 800a720:	6128      	str	r0, [r5, #16]
 800a722:	b920      	cbnz	r0, 800a72e <_svfiprintf_r+0x2e>
 800a724:	230c      	movs	r3, #12
 800a726:	603b      	str	r3, [r7, #0]
 800a728:	f04f 30ff 	mov.w	r0, #4294967295
 800a72c:	e0d1      	b.n	800a8d2 <_svfiprintf_r+0x1d2>
 800a72e:	2340      	movs	r3, #64	; 0x40
 800a730:	616b      	str	r3, [r5, #20]
 800a732:	2300      	movs	r3, #0
 800a734:	9309      	str	r3, [sp, #36]	; 0x24
 800a736:	2320      	movs	r3, #32
 800a738:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a73c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a740:	2330      	movs	r3, #48	; 0x30
 800a742:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a8ec <_svfiprintf_r+0x1ec>
 800a746:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a74a:	f04f 0901 	mov.w	r9, #1
 800a74e:	4623      	mov	r3, r4
 800a750:	469a      	mov	sl, r3
 800a752:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a756:	b10a      	cbz	r2, 800a75c <_svfiprintf_r+0x5c>
 800a758:	2a25      	cmp	r2, #37	; 0x25
 800a75a:	d1f9      	bne.n	800a750 <_svfiprintf_r+0x50>
 800a75c:	ebba 0b04 	subs.w	fp, sl, r4
 800a760:	d00b      	beq.n	800a77a <_svfiprintf_r+0x7a>
 800a762:	465b      	mov	r3, fp
 800a764:	4622      	mov	r2, r4
 800a766:	4629      	mov	r1, r5
 800a768:	4638      	mov	r0, r7
 800a76a:	f7ff ff6d 	bl	800a648 <__ssputs_r>
 800a76e:	3001      	adds	r0, #1
 800a770:	f000 80aa 	beq.w	800a8c8 <_svfiprintf_r+0x1c8>
 800a774:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a776:	445a      	add	r2, fp
 800a778:	9209      	str	r2, [sp, #36]	; 0x24
 800a77a:	f89a 3000 	ldrb.w	r3, [sl]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	f000 80a2 	beq.w	800a8c8 <_svfiprintf_r+0x1c8>
 800a784:	2300      	movs	r3, #0
 800a786:	f04f 32ff 	mov.w	r2, #4294967295
 800a78a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a78e:	f10a 0a01 	add.w	sl, sl, #1
 800a792:	9304      	str	r3, [sp, #16]
 800a794:	9307      	str	r3, [sp, #28]
 800a796:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a79a:	931a      	str	r3, [sp, #104]	; 0x68
 800a79c:	4654      	mov	r4, sl
 800a79e:	2205      	movs	r2, #5
 800a7a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7a4:	4851      	ldr	r0, [pc, #324]	; (800a8ec <_svfiprintf_r+0x1ec>)
 800a7a6:	f7f5 fd1b 	bl	80001e0 <memchr>
 800a7aa:	9a04      	ldr	r2, [sp, #16]
 800a7ac:	b9d8      	cbnz	r0, 800a7e6 <_svfiprintf_r+0xe6>
 800a7ae:	06d0      	lsls	r0, r2, #27
 800a7b0:	bf44      	itt	mi
 800a7b2:	2320      	movmi	r3, #32
 800a7b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7b8:	0711      	lsls	r1, r2, #28
 800a7ba:	bf44      	itt	mi
 800a7bc:	232b      	movmi	r3, #43	; 0x2b
 800a7be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7c2:	f89a 3000 	ldrb.w	r3, [sl]
 800a7c6:	2b2a      	cmp	r3, #42	; 0x2a
 800a7c8:	d015      	beq.n	800a7f6 <_svfiprintf_r+0xf6>
 800a7ca:	9a07      	ldr	r2, [sp, #28]
 800a7cc:	4654      	mov	r4, sl
 800a7ce:	2000      	movs	r0, #0
 800a7d0:	f04f 0c0a 	mov.w	ip, #10
 800a7d4:	4621      	mov	r1, r4
 800a7d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7da:	3b30      	subs	r3, #48	; 0x30
 800a7dc:	2b09      	cmp	r3, #9
 800a7de:	d94e      	bls.n	800a87e <_svfiprintf_r+0x17e>
 800a7e0:	b1b0      	cbz	r0, 800a810 <_svfiprintf_r+0x110>
 800a7e2:	9207      	str	r2, [sp, #28]
 800a7e4:	e014      	b.n	800a810 <_svfiprintf_r+0x110>
 800a7e6:	eba0 0308 	sub.w	r3, r0, r8
 800a7ea:	fa09 f303 	lsl.w	r3, r9, r3
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	9304      	str	r3, [sp, #16]
 800a7f2:	46a2      	mov	sl, r4
 800a7f4:	e7d2      	b.n	800a79c <_svfiprintf_r+0x9c>
 800a7f6:	9b03      	ldr	r3, [sp, #12]
 800a7f8:	1d19      	adds	r1, r3, #4
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	9103      	str	r1, [sp, #12]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	bfbb      	ittet	lt
 800a802:	425b      	neglt	r3, r3
 800a804:	f042 0202 	orrlt.w	r2, r2, #2
 800a808:	9307      	strge	r3, [sp, #28]
 800a80a:	9307      	strlt	r3, [sp, #28]
 800a80c:	bfb8      	it	lt
 800a80e:	9204      	strlt	r2, [sp, #16]
 800a810:	7823      	ldrb	r3, [r4, #0]
 800a812:	2b2e      	cmp	r3, #46	; 0x2e
 800a814:	d10c      	bne.n	800a830 <_svfiprintf_r+0x130>
 800a816:	7863      	ldrb	r3, [r4, #1]
 800a818:	2b2a      	cmp	r3, #42	; 0x2a
 800a81a:	d135      	bne.n	800a888 <_svfiprintf_r+0x188>
 800a81c:	9b03      	ldr	r3, [sp, #12]
 800a81e:	1d1a      	adds	r2, r3, #4
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	9203      	str	r2, [sp, #12]
 800a824:	2b00      	cmp	r3, #0
 800a826:	bfb8      	it	lt
 800a828:	f04f 33ff 	movlt.w	r3, #4294967295
 800a82c:	3402      	adds	r4, #2
 800a82e:	9305      	str	r3, [sp, #20]
 800a830:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a8fc <_svfiprintf_r+0x1fc>
 800a834:	7821      	ldrb	r1, [r4, #0]
 800a836:	2203      	movs	r2, #3
 800a838:	4650      	mov	r0, sl
 800a83a:	f7f5 fcd1 	bl	80001e0 <memchr>
 800a83e:	b140      	cbz	r0, 800a852 <_svfiprintf_r+0x152>
 800a840:	2340      	movs	r3, #64	; 0x40
 800a842:	eba0 000a 	sub.w	r0, r0, sl
 800a846:	fa03 f000 	lsl.w	r0, r3, r0
 800a84a:	9b04      	ldr	r3, [sp, #16]
 800a84c:	4303      	orrs	r3, r0
 800a84e:	3401      	adds	r4, #1
 800a850:	9304      	str	r3, [sp, #16]
 800a852:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a856:	4826      	ldr	r0, [pc, #152]	; (800a8f0 <_svfiprintf_r+0x1f0>)
 800a858:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a85c:	2206      	movs	r2, #6
 800a85e:	f7f5 fcbf 	bl	80001e0 <memchr>
 800a862:	2800      	cmp	r0, #0
 800a864:	d038      	beq.n	800a8d8 <_svfiprintf_r+0x1d8>
 800a866:	4b23      	ldr	r3, [pc, #140]	; (800a8f4 <_svfiprintf_r+0x1f4>)
 800a868:	bb1b      	cbnz	r3, 800a8b2 <_svfiprintf_r+0x1b2>
 800a86a:	9b03      	ldr	r3, [sp, #12]
 800a86c:	3307      	adds	r3, #7
 800a86e:	f023 0307 	bic.w	r3, r3, #7
 800a872:	3308      	adds	r3, #8
 800a874:	9303      	str	r3, [sp, #12]
 800a876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a878:	4433      	add	r3, r6
 800a87a:	9309      	str	r3, [sp, #36]	; 0x24
 800a87c:	e767      	b.n	800a74e <_svfiprintf_r+0x4e>
 800a87e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a882:	460c      	mov	r4, r1
 800a884:	2001      	movs	r0, #1
 800a886:	e7a5      	b.n	800a7d4 <_svfiprintf_r+0xd4>
 800a888:	2300      	movs	r3, #0
 800a88a:	3401      	adds	r4, #1
 800a88c:	9305      	str	r3, [sp, #20]
 800a88e:	4619      	mov	r1, r3
 800a890:	f04f 0c0a 	mov.w	ip, #10
 800a894:	4620      	mov	r0, r4
 800a896:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a89a:	3a30      	subs	r2, #48	; 0x30
 800a89c:	2a09      	cmp	r2, #9
 800a89e:	d903      	bls.n	800a8a8 <_svfiprintf_r+0x1a8>
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d0c5      	beq.n	800a830 <_svfiprintf_r+0x130>
 800a8a4:	9105      	str	r1, [sp, #20]
 800a8a6:	e7c3      	b.n	800a830 <_svfiprintf_r+0x130>
 800a8a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8ac:	4604      	mov	r4, r0
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	e7f0      	b.n	800a894 <_svfiprintf_r+0x194>
 800a8b2:	ab03      	add	r3, sp, #12
 800a8b4:	9300      	str	r3, [sp, #0]
 800a8b6:	462a      	mov	r2, r5
 800a8b8:	4b0f      	ldr	r3, [pc, #60]	; (800a8f8 <_svfiprintf_r+0x1f8>)
 800a8ba:	a904      	add	r1, sp, #16
 800a8bc:	4638      	mov	r0, r7
 800a8be:	f7fd feff 	bl	80086c0 <_printf_float>
 800a8c2:	1c42      	adds	r2, r0, #1
 800a8c4:	4606      	mov	r6, r0
 800a8c6:	d1d6      	bne.n	800a876 <_svfiprintf_r+0x176>
 800a8c8:	89ab      	ldrh	r3, [r5, #12]
 800a8ca:	065b      	lsls	r3, r3, #25
 800a8cc:	f53f af2c 	bmi.w	800a728 <_svfiprintf_r+0x28>
 800a8d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8d2:	b01d      	add	sp, #116	; 0x74
 800a8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8d8:	ab03      	add	r3, sp, #12
 800a8da:	9300      	str	r3, [sp, #0]
 800a8dc:	462a      	mov	r2, r5
 800a8de:	4b06      	ldr	r3, [pc, #24]	; (800a8f8 <_svfiprintf_r+0x1f8>)
 800a8e0:	a904      	add	r1, sp, #16
 800a8e2:	4638      	mov	r0, r7
 800a8e4:	f7fe f990 	bl	8008c08 <_printf_i>
 800a8e8:	e7eb      	b.n	800a8c2 <_svfiprintf_r+0x1c2>
 800a8ea:	bf00      	nop
 800a8ec:	0800b564 	.word	0x0800b564
 800a8f0:	0800b56e 	.word	0x0800b56e
 800a8f4:	080086c1 	.word	0x080086c1
 800a8f8:	0800a649 	.word	0x0800a649
 800a8fc:	0800b56a 	.word	0x0800b56a

0800a900 <_read_r>:
 800a900:	b538      	push	{r3, r4, r5, lr}
 800a902:	4d07      	ldr	r5, [pc, #28]	; (800a920 <_read_r+0x20>)
 800a904:	4604      	mov	r4, r0
 800a906:	4608      	mov	r0, r1
 800a908:	4611      	mov	r1, r2
 800a90a:	2200      	movs	r2, #0
 800a90c:	602a      	str	r2, [r5, #0]
 800a90e:	461a      	mov	r2, r3
 800a910:	f7f6 fd08 	bl	8001324 <_read>
 800a914:	1c43      	adds	r3, r0, #1
 800a916:	d102      	bne.n	800a91e <_read_r+0x1e>
 800a918:	682b      	ldr	r3, [r5, #0]
 800a91a:	b103      	cbz	r3, 800a91e <_read_r+0x1e>
 800a91c:	6023      	str	r3, [r4, #0]
 800a91e:	bd38      	pop	{r3, r4, r5, pc}
 800a920:	200035d4 	.word	0x200035d4

0800a924 <__assert_func>:
 800a924:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a926:	4614      	mov	r4, r2
 800a928:	461a      	mov	r2, r3
 800a92a:	4b09      	ldr	r3, [pc, #36]	; (800a950 <__assert_func+0x2c>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4605      	mov	r5, r0
 800a930:	68d8      	ldr	r0, [r3, #12]
 800a932:	b14c      	cbz	r4, 800a948 <__assert_func+0x24>
 800a934:	4b07      	ldr	r3, [pc, #28]	; (800a954 <__assert_func+0x30>)
 800a936:	9100      	str	r1, [sp, #0]
 800a938:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a93c:	4906      	ldr	r1, [pc, #24]	; (800a958 <__assert_func+0x34>)
 800a93e:	462b      	mov	r3, r5
 800a940:	f000 f80e 	bl	800a960 <fiprintf>
 800a944:	f000 faa0 	bl	800ae88 <abort>
 800a948:	4b04      	ldr	r3, [pc, #16]	; (800a95c <__assert_func+0x38>)
 800a94a:	461c      	mov	r4, r3
 800a94c:	e7f3      	b.n	800a936 <__assert_func+0x12>
 800a94e:	bf00      	nop
 800a950:	20000010 	.word	0x20000010
 800a954:	0800b575 	.word	0x0800b575
 800a958:	0800b582 	.word	0x0800b582
 800a95c:	0800b5b0 	.word	0x0800b5b0

0800a960 <fiprintf>:
 800a960:	b40e      	push	{r1, r2, r3}
 800a962:	b503      	push	{r0, r1, lr}
 800a964:	4601      	mov	r1, r0
 800a966:	ab03      	add	r3, sp, #12
 800a968:	4805      	ldr	r0, [pc, #20]	; (800a980 <fiprintf+0x20>)
 800a96a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a96e:	6800      	ldr	r0, [r0, #0]
 800a970:	9301      	str	r3, [sp, #4]
 800a972:	f000 f88b 	bl	800aa8c <_vfiprintf_r>
 800a976:	b002      	add	sp, #8
 800a978:	f85d eb04 	ldr.w	lr, [sp], #4
 800a97c:	b003      	add	sp, #12
 800a97e:	4770      	bx	lr
 800a980:	20000010 	.word	0x20000010

0800a984 <__ascii_mbtowc>:
 800a984:	b082      	sub	sp, #8
 800a986:	b901      	cbnz	r1, 800a98a <__ascii_mbtowc+0x6>
 800a988:	a901      	add	r1, sp, #4
 800a98a:	b142      	cbz	r2, 800a99e <__ascii_mbtowc+0x1a>
 800a98c:	b14b      	cbz	r3, 800a9a2 <__ascii_mbtowc+0x1e>
 800a98e:	7813      	ldrb	r3, [r2, #0]
 800a990:	600b      	str	r3, [r1, #0]
 800a992:	7812      	ldrb	r2, [r2, #0]
 800a994:	1e10      	subs	r0, r2, #0
 800a996:	bf18      	it	ne
 800a998:	2001      	movne	r0, #1
 800a99a:	b002      	add	sp, #8
 800a99c:	4770      	bx	lr
 800a99e:	4610      	mov	r0, r2
 800a9a0:	e7fb      	b.n	800a99a <__ascii_mbtowc+0x16>
 800a9a2:	f06f 0001 	mvn.w	r0, #1
 800a9a6:	e7f8      	b.n	800a99a <__ascii_mbtowc+0x16>

0800a9a8 <memmove>:
 800a9a8:	4288      	cmp	r0, r1
 800a9aa:	b510      	push	{r4, lr}
 800a9ac:	eb01 0402 	add.w	r4, r1, r2
 800a9b0:	d902      	bls.n	800a9b8 <memmove+0x10>
 800a9b2:	4284      	cmp	r4, r0
 800a9b4:	4623      	mov	r3, r4
 800a9b6:	d807      	bhi.n	800a9c8 <memmove+0x20>
 800a9b8:	1e43      	subs	r3, r0, #1
 800a9ba:	42a1      	cmp	r1, r4
 800a9bc:	d008      	beq.n	800a9d0 <memmove+0x28>
 800a9be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a9c6:	e7f8      	b.n	800a9ba <memmove+0x12>
 800a9c8:	4402      	add	r2, r0
 800a9ca:	4601      	mov	r1, r0
 800a9cc:	428a      	cmp	r2, r1
 800a9ce:	d100      	bne.n	800a9d2 <memmove+0x2a>
 800a9d0:	bd10      	pop	{r4, pc}
 800a9d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a9d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a9da:	e7f7      	b.n	800a9cc <memmove+0x24>

0800a9dc <_realloc_r>:
 800a9dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9e0:	4680      	mov	r8, r0
 800a9e2:	4614      	mov	r4, r2
 800a9e4:	460e      	mov	r6, r1
 800a9e6:	b921      	cbnz	r1, 800a9f2 <_realloc_r+0x16>
 800a9e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ec:	4611      	mov	r1, r2
 800a9ee:	f7fd bd53 	b.w	8008498 <_malloc_r>
 800a9f2:	b92a      	cbnz	r2, 800aa00 <_realloc_r+0x24>
 800a9f4:	f7fd fce4 	bl	80083c0 <_free_r>
 800a9f8:	4625      	mov	r5, r4
 800a9fa:	4628      	mov	r0, r5
 800a9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa00:	f000 faae 	bl	800af60 <_malloc_usable_size_r>
 800aa04:	4284      	cmp	r4, r0
 800aa06:	4607      	mov	r7, r0
 800aa08:	d802      	bhi.n	800aa10 <_realloc_r+0x34>
 800aa0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aa0e:	d812      	bhi.n	800aa36 <_realloc_r+0x5a>
 800aa10:	4621      	mov	r1, r4
 800aa12:	4640      	mov	r0, r8
 800aa14:	f7fd fd40 	bl	8008498 <_malloc_r>
 800aa18:	4605      	mov	r5, r0
 800aa1a:	2800      	cmp	r0, #0
 800aa1c:	d0ed      	beq.n	800a9fa <_realloc_r+0x1e>
 800aa1e:	42bc      	cmp	r4, r7
 800aa20:	4622      	mov	r2, r4
 800aa22:	4631      	mov	r1, r6
 800aa24:	bf28      	it	cs
 800aa26:	463a      	movcs	r2, r7
 800aa28:	f7fd fcb4 	bl	8008394 <memcpy>
 800aa2c:	4631      	mov	r1, r6
 800aa2e:	4640      	mov	r0, r8
 800aa30:	f7fd fcc6 	bl	80083c0 <_free_r>
 800aa34:	e7e1      	b.n	800a9fa <_realloc_r+0x1e>
 800aa36:	4635      	mov	r5, r6
 800aa38:	e7df      	b.n	800a9fa <_realloc_r+0x1e>

0800aa3a <__sfputc_r>:
 800aa3a:	6893      	ldr	r3, [r2, #8]
 800aa3c:	3b01      	subs	r3, #1
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	b410      	push	{r4}
 800aa42:	6093      	str	r3, [r2, #8]
 800aa44:	da08      	bge.n	800aa58 <__sfputc_r+0x1e>
 800aa46:	6994      	ldr	r4, [r2, #24]
 800aa48:	42a3      	cmp	r3, r4
 800aa4a:	db01      	blt.n	800aa50 <__sfputc_r+0x16>
 800aa4c:	290a      	cmp	r1, #10
 800aa4e:	d103      	bne.n	800aa58 <__sfputc_r+0x1e>
 800aa50:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa54:	f000 b94a 	b.w	800acec <__swbuf_r>
 800aa58:	6813      	ldr	r3, [r2, #0]
 800aa5a:	1c58      	adds	r0, r3, #1
 800aa5c:	6010      	str	r0, [r2, #0]
 800aa5e:	7019      	strb	r1, [r3, #0]
 800aa60:	4608      	mov	r0, r1
 800aa62:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa66:	4770      	bx	lr

0800aa68 <__sfputs_r>:
 800aa68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa6a:	4606      	mov	r6, r0
 800aa6c:	460f      	mov	r7, r1
 800aa6e:	4614      	mov	r4, r2
 800aa70:	18d5      	adds	r5, r2, r3
 800aa72:	42ac      	cmp	r4, r5
 800aa74:	d101      	bne.n	800aa7a <__sfputs_r+0x12>
 800aa76:	2000      	movs	r0, #0
 800aa78:	e007      	b.n	800aa8a <__sfputs_r+0x22>
 800aa7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa7e:	463a      	mov	r2, r7
 800aa80:	4630      	mov	r0, r6
 800aa82:	f7ff ffda 	bl	800aa3a <__sfputc_r>
 800aa86:	1c43      	adds	r3, r0, #1
 800aa88:	d1f3      	bne.n	800aa72 <__sfputs_r+0xa>
 800aa8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aa8c <_vfiprintf_r>:
 800aa8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa90:	460d      	mov	r5, r1
 800aa92:	b09d      	sub	sp, #116	; 0x74
 800aa94:	4614      	mov	r4, r2
 800aa96:	4698      	mov	r8, r3
 800aa98:	4606      	mov	r6, r0
 800aa9a:	b118      	cbz	r0, 800aaa4 <_vfiprintf_r+0x18>
 800aa9c:	6983      	ldr	r3, [r0, #24]
 800aa9e:	b90b      	cbnz	r3, 800aaa4 <_vfiprintf_r+0x18>
 800aaa0:	f7fd fb92 	bl	80081c8 <__sinit>
 800aaa4:	4b89      	ldr	r3, [pc, #548]	; (800accc <_vfiprintf_r+0x240>)
 800aaa6:	429d      	cmp	r5, r3
 800aaa8:	d11b      	bne.n	800aae2 <_vfiprintf_r+0x56>
 800aaaa:	6875      	ldr	r5, [r6, #4]
 800aaac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aaae:	07d9      	lsls	r1, r3, #31
 800aab0:	d405      	bmi.n	800aabe <_vfiprintf_r+0x32>
 800aab2:	89ab      	ldrh	r3, [r5, #12]
 800aab4:	059a      	lsls	r2, r3, #22
 800aab6:	d402      	bmi.n	800aabe <_vfiprintf_r+0x32>
 800aab8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aaba:	f7fd fc48 	bl	800834e <__retarget_lock_acquire_recursive>
 800aabe:	89ab      	ldrh	r3, [r5, #12]
 800aac0:	071b      	lsls	r3, r3, #28
 800aac2:	d501      	bpl.n	800aac8 <_vfiprintf_r+0x3c>
 800aac4:	692b      	ldr	r3, [r5, #16]
 800aac6:	b9eb      	cbnz	r3, 800ab04 <_vfiprintf_r+0x78>
 800aac8:	4629      	mov	r1, r5
 800aaca:	4630      	mov	r0, r6
 800aacc:	f000 f96e 	bl	800adac <__swsetup_r>
 800aad0:	b1c0      	cbz	r0, 800ab04 <_vfiprintf_r+0x78>
 800aad2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aad4:	07dc      	lsls	r4, r3, #31
 800aad6:	d50e      	bpl.n	800aaf6 <_vfiprintf_r+0x6a>
 800aad8:	f04f 30ff 	mov.w	r0, #4294967295
 800aadc:	b01d      	add	sp, #116	; 0x74
 800aade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aae2:	4b7b      	ldr	r3, [pc, #492]	; (800acd0 <_vfiprintf_r+0x244>)
 800aae4:	429d      	cmp	r5, r3
 800aae6:	d101      	bne.n	800aaec <_vfiprintf_r+0x60>
 800aae8:	68b5      	ldr	r5, [r6, #8]
 800aaea:	e7df      	b.n	800aaac <_vfiprintf_r+0x20>
 800aaec:	4b79      	ldr	r3, [pc, #484]	; (800acd4 <_vfiprintf_r+0x248>)
 800aaee:	429d      	cmp	r5, r3
 800aaf0:	bf08      	it	eq
 800aaf2:	68f5      	ldreq	r5, [r6, #12]
 800aaf4:	e7da      	b.n	800aaac <_vfiprintf_r+0x20>
 800aaf6:	89ab      	ldrh	r3, [r5, #12]
 800aaf8:	0598      	lsls	r0, r3, #22
 800aafa:	d4ed      	bmi.n	800aad8 <_vfiprintf_r+0x4c>
 800aafc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aafe:	f7fd fc27 	bl	8008350 <__retarget_lock_release_recursive>
 800ab02:	e7e9      	b.n	800aad8 <_vfiprintf_r+0x4c>
 800ab04:	2300      	movs	r3, #0
 800ab06:	9309      	str	r3, [sp, #36]	; 0x24
 800ab08:	2320      	movs	r3, #32
 800ab0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab0e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab12:	2330      	movs	r3, #48	; 0x30
 800ab14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800acd8 <_vfiprintf_r+0x24c>
 800ab18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab1c:	f04f 0901 	mov.w	r9, #1
 800ab20:	4623      	mov	r3, r4
 800ab22:	469a      	mov	sl, r3
 800ab24:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab28:	b10a      	cbz	r2, 800ab2e <_vfiprintf_r+0xa2>
 800ab2a:	2a25      	cmp	r2, #37	; 0x25
 800ab2c:	d1f9      	bne.n	800ab22 <_vfiprintf_r+0x96>
 800ab2e:	ebba 0b04 	subs.w	fp, sl, r4
 800ab32:	d00b      	beq.n	800ab4c <_vfiprintf_r+0xc0>
 800ab34:	465b      	mov	r3, fp
 800ab36:	4622      	mov	r2, r4
 800ab38:	4629      	mov	r1, r5
 800ab3a:	4630      	mov	r0, r6
 800ab3c:	f7ff ff94 	bl	800aa68 <__sfputs_r>
 800ab40:	3001      	adds	r0, #1
 800ab42:	f000 80aa 	beq.w	800ac9a <_vfiprintf_r+0x20e>
 800ab46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab48:	445a      	add	r2, fp
 800ab4a:	9209      	str	r2, [sp, #36]	; 0x24
 800ab4c:	f89a 3000 	ldrb.w	r3, [sl]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	f000 80a2 	beq.w	800ac9a <_vfiprintf_r+0x20e>
 800ab56:	2300      	movs	r3, #0
 800ab58:	f04f 32ff 	mov.w	r2, #4294967295
 800ab5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab60:	f10a 0a01 	add.w	sl, sl, #1
 800ab64:	9304      	str	r3, [sp, #16]
 800ab66:	9307      	str	r3, [sp, #28]
 800ab68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab6c:	931a      	str	r3, [sp, #104]	; 0x68
 800ab6e:	4654      	mov	r4, sl
 800ab70:	2205      	movs	r2, #5
 800ab72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab76:	4858      	ldr	r0, [pc, #352]	; (800acd8 <_vfiprintf_r+0x24c>)
 800ab78:	f7f5 fb32 	bl	80001e0 <memchr>
 800ab7c:	9a04      	ldr	r2, [sp, #16]
 800ab7e:	b9d8      	cbnz	r0, 800abb8 <_vfiprintf_r+0x12c>
 800ab80:	06d1      	lsls	r1, r2, #27
 800ab82:	bf44      	itt	mi
 800ab84:	2320      	movmi	r3, #32
 800ab86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab8a:	0713      	lsls	r3, r2, #28
 800ab8c:	bf44      	itt	mi
 800ab8e:	232b      	movmi	r3, #43	; 0x2b
 800ab90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab94:	f89a 3000 	ldrb.w	r3, [sl]
 800ab98:	2b2a      	cmp	r3, #42	; 0x2a
 800ab9a:	d015      	beq.n	800abc8 <_vfiprintf_r+0x13c>
 800ab9c:	9a07      	ldr	r2, [sp, #28]
 800ab9e:	4654      	mov	r4, sl
 800aba0:	2000      	movs	r0, #0
 800aba2:	f04f 0c0a 	mov.w	ip, #10
 800aba6:	4621      	mov	r1, r4
 800aba8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abac:	3b30      	subs	r3, #48	; 0x30
 800abae:	2b09      	cmp	r3, #9
 800abb0:	d94e      	bls.n	800ac50 <_vfiprintf_r+0x1c4>
 800abb2:	b1b0      	cbz	r0, 800abe2 <_vfiprintf_r+0x156>
 800abb4:	9207      	str	r2, [sp, #28]
 800abb6:	e014      	b.n	800abe2 <_vfiprintf_r+0x156>
 800abb8:	eba0 0308 	sub.w	r3, r0, r8
 800abbc:	fa09 f303 	lsl.w	r3, r9, r3
 800abc0:	4313      	orrs	r3, r2
 800abc2:	9304      	str	r3, [sp, #16]
 800abc4:	46a2      	mov	sl, r4
 800abc6:	e7d2      	b.n	800ab6e <_vfiprintf_r+0xe2>
 800abc8:	9b03      	ldr	r3, [sp, #12]
 800abca:	1d19      	adds	r1, r3, #4
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	9103      	str	r1, [sp, #12]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	bfbb      	ittet	lt
 800abd4:	425b      	neglt	r3, r3
 800abd6:	f042 0202 	orrlt.w	r2, r2, #2
 800abda:	9307      	strge	r3, [sp, #28]
 800abdc:	9307      	strlt	r3, [sp, #28]
 800abde:	bfb8      	it	lt
 800abe0:	9204      	strlt	r2, [sp, #16]
 800abe2:	7823      	ldrb	r3, [r4, #0]
 800abe4:	2b2e      	cmp	r3, #46	; 0x2e
 800abe6:	d10c      	bne.n	800ac02 <_vfiprintf_r+0x176>
 800abe8:	7863      	ldrb	r3, [r4, #1]
 800abea:	2b2a      	cmp	r3, #42	; 0x2a
 800abec:	d135      	bne.n	800ac5a <_vfiprintf_r+0x1ce>
 800abee:	9b03      	ldr	r3, [sp, #12]
 800abf0:	1d1a      	adds	r2, r3, #4
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	9203      	str	r2, [sp, #12]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	bfb8      	it	lt
 800abfa:	f04f 33ff 	movlt.w	r3, #4294967295
 800abfe:	3402      	adds	r4, #2
 800ac00:	9305      	str	r3, [sp, #20]
 800ac02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ace8 <_vfiprintf_r+0x25c>
 800ac06:	7821      	ldrb	r1, [r4, #0]
 800ac08:	2203      	movs	r2, #3
 800ac0a:	4650      	mov	r0, sl
 800ac0c:	f7f5 fae8 	bl	80001e0 <memchr>
 800ac10:	b140      	cbz	r0, 800ac24 <_vfiprintf_r+0x198>
 800ac12:	2340      	movs	r3, #64	; 0x40
 800ac14:	eba0 000a 	sub.w	r0, r0, sl
 800ac18:	fa03 f000 	lsl.w	r0, r3, r0
 800ac1c:	9b04      	ldr	r3, [sp, #16]
 800ac1e:	4303      	orrs	r3, r0
 800ac20:	3401      	adds	r4, #1
 800ac22:	9304      	str	r3, [sp, #16]
 800ac24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac28:	482c      	ldr	r0, [pc, #176]	; (800acdc <_vfiprintf_r+0x250>)
 800ac2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac2e:	2206      	movs	r2, #6
 800ac30:	f7f5 fad6 	bl	80001e0 <memchr>
 800ac34:	2800      	cmp	r0, #0
 800ac36:	d03f      	beq.n	800acb8 <_vfiprintf_r+0x22c>
 800ac38:	4b29      	ldr	r3, [pc, #164]	; (800ace0 <_vfiprintf_r+0x254>)
 800ac3a:	bb1b      	cbnz	r3, 800ac84 <_vfiprintf_r+0x1f8>
 800ac3c:	9b03      	ldr	r3, [sp, #12]
 800ac3e:	3307      	adds	r3, #7
 800ac40:	f023 0307 	bic.w	r3, r3, #7
 800ac44:	3308      	adds	r3, #8
 800ac46:	9303      	str	r3, [sp, #12]
 800ac48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac4a:	443b      	add	r3, r7
 800ac4c:	9309      	str	r3, [sp, #36]	; 0x24
 800ac4e:	e767      	b.n	800ab20 <_vfiprintf_r+0x94>
 800ac50:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac54:	460c      	mov	r4, r1
 800ac56:	2001      	movs	r0, #1
 800ac58:	e7a5      	b.n	800aba6 <_vfiprintf_r+0x11a>
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	3401      	adds	r4, #1
 800ac5e:	9305      	str	r3, [sp, #20]
 800ac60:	4619      	mov	r1, r3
 800ac62:	f04f 0c0a 	mov.w	ip, #10
 800ac66:	4620      	mov	r0, r4
 800ac68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac6c:	3a30      	subs	r2, #48	; 0x30
 800ac6e:	2a09      	cmp	r2, #9
 800ac70:	d903      	bls.n	800ac7a <_vfiprintf_r+0x1ee>
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d0c5      	beq.n	800ac02 <_vfiprintf_r+0x176>
 800ac76:	9105      	str	r1, [sp, #20]
 800ac78:	e7c3      	b.n	800ac02 <_vfiprintf_r+0x176>
 800ac7a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac7e:	4604      	mov	r4, r0
 800ac80:	2301      	movs	r3, #1
 800ac82:	e7f0      	b.n	800ac66 <_vfiprintf_r+0x1da>
 800ac84:	ab03      	add	r3, sp, #12
 800ac86:	9300      	str	r3, [sp, #0]
 800ac88:	462a      	mov	r2, r5
 800ac8a:	4b16      	ldr	r3, [pc, #88]	; (800ace4 <_vfiprintf_r+0x258>)
 800ac8c:	a904      	add	r1, sp, #16
 800ac8e:	4630      	mov	r0, r6
 800ac90:	f7fd fd16 	bl	80086c0 <_printf_float>
 800ac94:	4607      	mov	r7, r0
 800ac96:	1c78      	adds	r0, r7, #1
 800ac98:	d1d6      	bne.n	800ac48 <_vfiprintf_r+0x1bc>
 800ac9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac9c:	07d9      	lsls	r1, r3, #31
 800ac9e:	d405      	bmi.n	800acac <_vfiprintf_r+0x220>
 800aca0:	89ab      	ldrh	r3, [r5, #12]
 800aca2:	059a      	lsls	r2, r3, #22
 800aca4:	d402      	bmi.n	800acac <_vfiprintf_r+0x220>
 800aca6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aca8:	f7fd fb52 	bl	8008350 <__retarget_lock_release_recursive>
 800acac:	89ab      	ldrh	r3, [r5, #12]
 800acae:	065b      	lsls	r3, r3, #25
 800acb0:	f53f af12 	bmi.w	800aad8 <_vfiprintf_r+0x4c>
 800acb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800acb6:	e711      	b.n	800aadc <_vfiprintf_r+0x50>
 800acb8:	ab03      	add	r3, sp, #12
 800acba:	9300      	str	r3, [sp, #0]
 800acbc:	462a      	mov	r2, r5
 800acbe:	4b09      	ldr	r3, [pc, #36]	; (800ace4 <_vfiprintf_r+0x258>)
 800acc0:	a904      	add	r1, sp, #16
 800acc2:	4630      	mov	r0, r6
 800acc4:	f7fd ffa0 	bl	8008c08 <_printf_i>
 800acc8:	e7e4      	b.n	800ac94 <_vfiprintf_r+0x208>
 800acca:	bf00      	nop
 800accc:	0800b300 	.word	0x0800b300
 800acd0:	0800b320 	.word	0x0800b320
 800acd4:	0800b2e0 	.word	0x0800b2e0
 800acd8:	0800b564 	.word	0x0800b564
 800acdc:	0800b56e 	.word	0x0800b56e
 800ace0:	080086c1 	.word	0x080086c1
 800ace4:	0800aa69 	.word	0x0800aa69
 800ace8:	0800b56a 	.word	0x0800b56a

0800acec <__swbuf_r>:
 800acec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acee:	460e      	mov	r6, r1
 800acf0:	4614      	mov	r4, r2
 800acf2:	4605      	mov	r5, r0
 800acf4:	b118      	cbz	r0, 800acfe <__swbuf_r+0x12>
 800acf6:	6983      	ldr	r3, [r0, #24]
 800acf8:	b90b      	cbnz	r3, 800acfe <__swbuf_r+0x12>
 800acfa:	f7fd fa65 	bl	80081c8 <__sinit>
 800acfe:	4b21      	ldr	r3, [pc, #132]	; (800ad84 <__swbuf_r+0x98>)
 800ad00:	429c      	cmp	r4, r3
 800ad02:	d12b      	bne.n	800ad5c <__swbuf_r+0x70>
 800ad04:	686c      	ldr	r4, [r5, #4]
 800ad06:	69a3      	ldr	r3, [r4, #24]
 800ad08:	60a3      	str	r3, [r4, #8]
 800ad0a:	89a3      	ldrh	r3, [r4, #12]
 800ad0c:	071a      	lsls	r2, r3, #28
 800ad0e:	d52f      	bpl.n	800ad70 <__swbuf_r+0x84>
 800ad10:	6923      	ldr	r3, [r4, #16]
 800ad12:	b36b      	cbz	r3, 800ad70 <__swbuf_r+0x84>
 800ad14:	6923      	ldr	r3, [r4, #16]
 800ad16:	6820      	ldr	r0, [r4, #0]
 800ad18:	1ac0      	subs	r0, r0, r3
 800ad1a:	6963      	ldr	r3, [r4, #20]
 800ad1c:	b2f6      	uxtb	r6, r6
 800ad1e:	4283      	cmp	r3, r0
 800ad20:	4637      	mov	r7, r6
 800ad22:	dc04      	bgt.n	800ad2e <__swbuf_r+0x42>
 800ad24:	4621      	mov	r1, r4
 800ad26:	4628      	mov	r0, r5
 800ad28:	f7ff f896 	bl	8009e58 <_fflush_r>
 800ad2c:	bb30      	cbnz	r0, 800ad7c <__swbuf_r+0x90>
 800ad2e:	68a3      	ldr	r3, [r4, #8]
 800ad30:	3b01      	subs	r3, #1
 800ad32:	60a3      	str	r3, [r4, #8]
 800ad34:	6823      	ldr	r3, [r4, #0]
 800ad36:	1c5a      	adds	r2, r3, #1
 800ad38:	6022      	str	r2, [r4, #0]
 800ad3a:	701e      	strb	r6, [r3, #0]
 800ad3c:	6963      	ldr	r3, [r4, #20]
 800ad3e:	3001      	adds	r0, #1
 800ad40:	4283      	cmp	r3, r0
 800ad42:	d004      	beq.n	800ad4e <__swbuf_r+0x62>
 800ad44:	89a3      	ldrh	r3, [r4, #12]
 800ad46:	07db      	lsls	r3, r3, #31
 800ad48:	d506      	bpl.n	800ad58 <__swbuf_r+0x6c>
 800ad4a:	2e0a      	cmp	r6, #10
 800ad4c:	d104      	bne.n	800ad58 <__swbuf_r+0x6c>
 800ad4e:	4621      	mov	r1, r4
 800ad50:	4628      	mov	r0, r5
 800ad52:	f7ff f881 	bl	8009e58 <_fflush_r>
 800ad56:	b988      	cbnz	r0, 800ad7c <__swbuf_r+0x90>
 800ad58:	4638      	mov	r0, r7
 800ad5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad5c:	4b0a      	ldr	r3, [pc, #40]	; (800ad88 <__swbuf_r+0x9c>)
 800ad5e:	429c      	cmp	r4, r3
 800ad60:	d101      	bne.n	800ad66 <__swbuf_r+0x7a>
 800ad62:	68ac      	ldr	r4, [r5, #8]
 800ad64:	e7cf      	b.n	800ad06 <__swbuf_r+0x1a>
 800ad66:	4b09      	ldr	r3, [pc, #36]	; (800ad8c <__swbuf_r+0xa0>)
 800ad68:	429c      	cmp	r4, r3
 800ad6a:	bf08      	it	eq
 800ad6c:	68ec      	ldreq	r4, [r5, #12]
 800ad6e:	e7ca      	b.n	800ad06 <__swbuf_r+0x1a>
 800ad70:	4621      	mov	r1, r4
 800ad72:	4628      	mov	r0, r5
 800ad74:	f000 f81a 	bl	800adac <__swsetup_r>
 800ad78:	2800      	cmp	r0, #0
 800ad7a:	d0cb      	beq.n	800ad14 <__swbuf_r+0x28>
 800ad7c:	f04f 37ff 	mov.w	r7, #4294967295
 800ad80:	e7ea      	b.n	800ad58 <__swbuf_r+0x6c>
 800ad82:	bf00      	nop
 800ad84:	0800b300 	.word	0x0800b300
 800ad88:	0800b320 	.word	0x0800b320
 800ad8c:	0800b2e0 	.word	0x0800b2e0

0800ad90 <__ascii_wctomb>:
 800ad90:	b149      	cbz	r1, 800ada6 <__ascii_wctomb+0x16>
 800ad92:	2aff      	cmp	r2, #255	; 0xff
 800ad94:	bf85      	ittet	hi
 800ad96:	238a      	movhi	r3, #138	; 0x8a
 800ad98:	6003      	strhi	r3, [r0, #0]
 800ad9a:	700a      	strbls	r2, [r1, #0]
 800ad9c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ada0:	bf98      	it	ls
 800ada2:	2001      	movls	r0, #1
 800ada4:	4770      	bx	lr
 800ada6:	4608      	mov	r0, r1
 800ada8:	4770      	bx	lr
	...

0800adac <__swsetup_r>:
 800adac:	4b32      	ldr	r3, [pc, #200]	; (800ae78 <__swsetup_r+0xcc>)
 800adae:	b570      	push	{r4, r5, r6, lr}
 800adb0:	681d      	ldr	r5, [r3, #0]
 800adb2:	4606      	mov	r6, r0
 800adb4:	460c      	mov	r4, r1
 800adb6:	b125      	cbz	r5, 800adc2 <__swsetup_r+0x16>
 800adb8:	69ab      	ldr	r3, [r5, #24]
 800adba:	b913      	cbnz	r3, 800adc2 <__swsetup_r+0x16>
 800adbc:	4628      	mov	r0, r5
 800adbe:	f7fd fa03 	bl	80081c8 <__sinit>
 800adc2:	4b2e      	ldr	r3, [pc, #184]	; (800ae7c <__swsetup_r+0xd0>)
 800adc4:	429c      	cmp	r4, r3
 800adc6:	d10f      	bne.n	800ade8 <__swsetup_r+0x3c>
 800adc8:	686c      	ldr	r4, [r5, #4]
 800adca:	89a3      	ldrh	r3, [r4, #12]
 800adcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800add0:	0719      	lsls	r1, r3, #28
 800add2:	d42c      	bmi.n	800ae2e <__swsetup_r+0x82>
 800add4:	06dd      	lsls	r5, r3, #27
 800add6:	d411      	bmi.n	800adfc <__swsetup_r+0x50>
 800add8:	2309      	movs	r3, #9
 800adda:	6033      	str	r3, [r6, #0]
 800addc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ade0:	81a3      	strh	r3, [r4, #12]
 800ade2:	f04f 30ff 	mov.w	r0, #4294967295
 800ade6:	e03e      	b.n	800ae66 <__swsetup_r+0xba>
 800ade8:	4b25      	ldr	r3, [pc, #148]	; (800ae80 <__swsetup_r+0xd4>)
 800adea:	429c      	cmp	r4, r3
 800adec:	d101      	bne.n	800adf2 <__swsetup_r+0x46>
 800adee:	68ac      	ldr	r4, [r5, #8]
 800adf0:	e7eb      	b.n	800adca <__swsetup_r+0x1e>
 800adf2:	4b24      	ldr	r3, [pc, #144]	; (800ae84 <__swsetup_r+0xd8>)
 800adf4:	429c      	cmp	r4, r3
 800adf6:	bf08      	it	eq
 800adf8:	68ec      	ldreq	r4, [r5, #12]
 800adfa:	e7e6      	b.n	800adca <__swsetup_r+0x1e>
 800adfc:	0758      	lsls	r0, r3, #29
 800adfe:	d512      	bpl.n	800ae26 <__swsetup_r+0x7a>
 800ae00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae02:	b141      	cbz	r1, 800ae16 <__swsetup_r+0x6a>
 800ae04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae08:	4299      	cmp	r1, r3
 800ae0a:	d002      	beq.n	800ae12 <__swsetup_r+0x66>
 800ae0c:	4630      	mov	r0, r6
 800ae0e:	f7fd fad7 	bl	80083c0 <_free_r>
 800ae12:	2300      	movs	r3, #0
 800ae14:	6363      	str	r3, [r4, #52]	; 0x34
 800ae16:	89a3      	ldrh	r3, [r4, #12]
 800ae18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ae1c:	81a3      	strh	r3, [r4, #12]
 800ae1e:	2300      	movs	r3, #0
 800ae20:	6063      	str	r3, [r4, #4]
 800ae22:	6923      	ldr	r3, [r4, #16]
 800ae24:	6023      	str	r3, [r4, #0]
 800ae26:	89a3      	ldrh	r3, [r4, #12]
 800ae28:	f043 0308 	orr.w	r3, r3, #8
 800ae2c:	81a3      	strh	r3, [r4, #12]
 800ae2e:	6923      	ldr	r3, [r4, #16]
 800ae30:	b94b      	cbnz	r3, 800ae46 <__swsetup_r+0x9a>
 800ae32:	89a3      	ldrh	r3, [r4, #12]
 800ae34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ae38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae3c:	d003      	beq.n	800ae46 <__swsetup_r+0x9a>
 800ae3e:	4621      	mov	r1, r4
 800ae40:	4630      	mov	r0, r6
 800ae42:	f000 f84d 	bl	800aee0 <__smakebuf_r>
 800ae46:	89a0      	ldrh	r0, [r4, #12]
 800ae48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae4c:	f010 0301 	ands.w	r3, r0, #1
 800ae50:	d00a      	beq.n	800ae68 <__swsetup_r+0xbc>
 800ae52:	2300      	movs	r3, #0
 800ae54:	60a3      	str	r3, [r4, #8]
 800ae56:	6963      	ldr	r3, [r4, #20]
 800ae58:	425b      	negs	r3, r3
 800ae5a:	61a3      	str	r3, [r4, #24]
 800ae5c:	6923      	ldr	r3, [r4, #16]
 800ae5e:	b943      	cbnz	r3, 800ae72 <__swsetup_r+0xc6>
 800ae60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ae64:	d1ba      	bne.n	800addc <__swsetup_r+0x30>
 800ae66:	bd70      	pop	{r4, r5, r6, pc}
 800ae68:	0781      	lsls	r1, r0, #30
 800ae6a:	bf58      	it	pl
 800ae6c:	6963      	ldrpl	r3, [r4, #20]
 800ae6e:	60a3      	str	r3, [r4, #8]
 800ae70:	e7f4      	b.n	800ae5c <__swsetup_r+0xb0>
 800ae72:	2000      	movs	r0, #0
 800ae74:	e7f7      	b.n	800ae66 <__swsetup_r+0xba>
 800ae76:	bf00      	nop
 800ae78:	20000010 	.word	0x20000010
 800ae7c:	0800b300 	.word	0x0800b300
 800ae80:	0800b320 	.word	0x0800b320
 800ae84:	0800b2e0 	.word	0x0800b2e0

0800ae88 <abort>:
 800ae88:	b508      	push	{r3, lr}
 800ae8a:	2006      	movs	r0, #6
 800ae8c:	f000 f898 	bl	800afc0 <raise>
 800ae90:	2001      	movs	r0, #1
 800ae92:	f7f6 fa3d 	bl	8001310 <_exit>

0800ae96 <__swhatbuf_r>:
 800ae96:	b570      	push	{r4, r5, r6, lr}
 800ae98:	460e      	mov	r6, r1
 800ae9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae9e:	2900      	cmp	r1, #0
 800aea0:	b096      	sub	sp, #88	; 0x58
 800aea2:	4614      	mov	r4, r2
 800aea4:	461d      	mov	r5, r3
 800aea6:	da08      	bge.n	800aeba <__swhatbuf_r+0x24>
 800aea8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aeac:	2200      	movs	r2, #0
 800aeae:	602a      	str	r2, [r5, #0]
 800aeb0:	061a      	lsls	r2, r3, #24
 800aeb2:	d410      	bmi.n	800aed6 <__swhatbuf_r+0x40>
 800aeb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aeb8:	e00e      	b.n	800aed8 <__swhatbuf_r+0x42>
 800aeba:	466a      	mov	r2, sp
 800aebc:	f000 f89c 	bl	800aff8 <_fstat_r>
 800aec0:	2800      	cmp	r0, #0
 800aec2:	dbf1      	blt.n	800aea8 <__swhatbuf_r+0x12>
 800aec4:	9a01      	ldr	r2, [sp, #4]
 800aec6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aeca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aece:	425a      	negs	r2, r3
 800aed0:	415a      	adcs	r2, r3
 800aed2:	602a      	str	r2, [r5, #0]
 800aed4:	e7ee      	b.n	800aeb4 <__swhatbuf_r+0x1e>
 800aed6:	2340      	movs	r3, #64	; 0x40
 800aed8:	2000      	movs	r0, #0
 800aeda:	6023      	str	r3, [r4, #0]
 800aedc:	b016      	add	sp, #88	; 0x58
 800aede:	bd70      	pop	{r4, r5, r6, pc}

0800aee0 <__smakebuf_r>:
 800aee0:	898b      	ldrh	r3, [r1, #12]
 800aee2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aee4:	079d      	lsls	r5, r3, #30
 800aee6:	4606      	mov	r6, r0
 800aee8:	460c      	mov	r4, r1
 800aeea:	d507      	bpl.n	800aefc <__smakebuf_r+0x1c>
 800aeec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aef0:	6023      	str	r3, [r4, #0]
 800aef2:	6123      	str	r3, [r4, #16]
 800aef4:	2301      	movs	r3, #1
 800aef6:	6163      	str	r3, [r4, #20]
 800aef8:	b002      	add	sp, #8
 800aefa:	bd70      	pop	{r4, r5, r6, pc}
 800aefc:	ab01      	add	r3, sp, #4
 800aefe:	466a      	mov	r2, sp
 800af00:	f7ff ffc9 	bl	800ae96 <__swhatbuf_r>
 800af04:	9900      	ldr	r1, [sp, #0]
 800af06:	4605      	mov	r5, r0
 800af08:	4630      	mov	r0, r6
 800af0a:	f7fd fac5 	bl	8008498 <_malloc_r>
 800af0e:	b948      	cbnz	r0, 800af24 <__smakebuf_r+0x44>
 800af10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af14:	059a      	lsls	r2, r3, #22
 800af16:	d4ef      	bmi.n	800aef8 <__smakebuf_r+0x18>
 800af18:	f023 0303 	bic.w	r3, r3, #3
 800af1c:	f043 0302 	orr.w	r3, r3, #2
 800af20:	81a3      	strh	r3, [r4, #12]
 800af22:	e7e3      	b.n	800aeec <__smakebuf_r+0xc>
 800af24:	4b0d      	ldr	r3, [pc, #52]	; (800af5c <__smakebuf_r+0x7c>)
 800af26:	62b3      	str	r3, [r6, #40]	; 0x28
 800af28:	89a3      	ldrh	r3, [r4, #12]
 800af2a:	6020      	str	r0, [r4, #0]
 800af2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af30:	81a3      	strh	r3, [r4, #12]
 800af32:	9b00      	ldr	r3, [sp, #0]
 800af34:	6163      	str	r3, [r4, #20]
 800af36:	9b01      	ldr	r3, [sp, #4]
 800af38:	6120      	str	r0, [r4, #16]
 800af3a:	b15b      	cbz	r3, 800af54 <__smakebuf_r+0x74>
 800af3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af40:	4630      	mov	r0, r6
 800af42:	f000 f86b 	bl	800b01c <_isatty_r>
 800af46:	b128      	cbz	r0, 800af54 <__smakebuf_r+0x74>
 800af48:	89a3      	ldrh	r3, [r4, #12]
 800af4a:	f023 0303 	bic.w	r3, r3, #3
 800af4e:	f043 0301 	orr.w	r3, r3, #1
 800af52:	81a3      	strh	r3, [r4, #12]
 800af54:	89a0      	ldrh	r0, [r4, #12]
 800af56:	4305      	orrs	r5, r0
 800af58:	81a5      	strh	r5, [r4, #12]
 800af5a:	e7cd      	b.n	800aef8 <__smakebuf_r+0x18>
 800af5c:	08008161 	.word	0x08008161

0800af60 <_malloc_usable_size_r>:
 800af60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af64:	1f18      	subs	r0, r3, #4
 800af66:	2b00      	cmp	r3, #0
 800af68:	bfbc      	itt	lt
 800af6a:	580b      	ldrlt	r3, [r1, r0]
 800af6c:	18c0      	addlt	r0, r0, r3
 800af6e:	4770      	bx	lr

0800af70 <_raise_r>:
 800af70:	291f      	cmp	r1, #31
 800af72:	b538      	push	{r3, r4, r5, lr}
 800af74:	4604      	mov	r4, r0
 800af76:	460d      	mov	r5, r1
 800af78:	d904      	bls.n	800af84 <_raise_r+0x14>
 800af7a:	2316      	movs	r3, #22
 800af7c:	6003      	str	r3, [r0, #0]
 800af7e:	f04f 30ff 	mov.w	r0, #4294967295
 800af82:	bd38      	pop	{r3, r4, r5, pc}
 800af84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800af86:	b112      	cbz	r2, 800af8e <_raise_r+0x1e>
 800af88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af8c:	b94b      	cbnz	r3, 800afa2 <_raise_r+0x32>
 800af8e:	4620      	mov	r0, r4
 800af90:	f000 f830 	bl	800aff4 <_getpid_r>
 800af94:	462a      	mov	r2, r5
 800af96:	4601      	mov	r1, r0
 800af98:	4620      	mov	r0, r4
 800af9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af9e:	f000 b817 	b.w	800afd0 <_kill_r>
 800afa2:	2b01      	cmp	r3, #1
 800afa4:	d00a      	beq.n	800afbc <_raise_r+0x4c>
 800afa6:	1c59      	adds	r1, r3, #1
 800afa8:	d103      	bne.n	800afb2 <_raise_r+0x42>
 800afaa:	2316      	movs	r3, #22
 800afac:	6003      	str	r3, [r0, #0]
 800afae:	2001      	movs	r0, #1
 800afb0:	e7e7      	b.n	800af82 <_raise_r+0x12>
 800afb2:	2400      	movs	r4, #0
 800afb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800afb8:	4628      	mov	r0, r5
 800afba:	4798      	blx	r3
 800afbc:	2000      	movs	r0, #0
 800afbe:	e7e0      	b.n	800af82 <_raise_r+0x12>

0800afc0 <raise>:
 800afc0:	4b02      	ldr	r3, [pc, #8]	; (800afcc <raise+0xc>)
 800afc2:	4601      	mov	r1, r0
 800afc4:	6818      	ldr	r0, [r3, #0]
 800afc6:	f7ff bfd3 	b.w	800af70 <_raise_r>
 800afca:	bf00      	nop
 800afcc:	20000010 	.word	0x20000010

0800afd0 <_kill_r>:
 800afd0:	b538      	push	{r3, r4, r5, lr}
 800afd2:	4d07      	ldr	r5, [pc, #28]	; (800aff0 <_kill_r+0x20>)
 800afd4:	2300      	movs	r3, #0
 800afd6:	4604      	mov	r4, r0
 800afd8:	4608      	mov	r0, r1
 800afda:	4611      	mov	r1, r2
 800afdc:	602b      	str	r3, [r5, #0]
 800afde:	f7f6 f987 	bl	80012f0 <_kill>
 800afe2:	1c43      	adds	r3, r0, #1
 800afe4:	d102      	bne.n	800afec <_kill_r+0x1c>
 800afe6:	682b      	ldr	r3, [r5, #0]
 800afe8:	b103      	cbz	r3, 800afec <_kill_r+0x1c>
 800afea:	6023      	str	r3, [r4, #0]
 800afec:	bd38      	pop	{r3, r4, r5, pc}
 800afee:	bf00      	nop
 800aff0:	200035d4 	.word	0x200035d4

0800aff4 <_getpid_r>:
 800aff4:	f7f6 b974 	b.w	80012e0 <_getpid>

0800aff8 <_fstat_r>:
 800aff8:	b538      	push	{r3, r4, r5, lr}
 800affa:	4d07      	ldr	r5, [pc, #28]	; (800b018 <_fstat_r+0x20>)
 800affc:	2300      	movs	r3, #0
 800affe:	4604      	mov	r4, r0
 800b000:	4608      	mov	r0, r1
 800b002:	4611      	mov	r1, r2
 800b004:	602b      	str	r3, [r5, #0]
 800b006:	f7f6 f9d2 	bl	80013ae <_fstat>
 800b00a:	1c43      	adds	r3, r0, #1
 800b00c:	d102      	bne.n	800b014 <_fstat_r+0x1c>
 800b00e:	682b      	ldr	r3, [r5, #0]
 800b010:	b103      	cbz	r3, 800b014 <_fstat_r+0x1c>
 800b012:	6023      	str	r3, [r4, #0]
 800b014:	bd38      	pop	{r3, r4, r5, pc}
 800b016:	bf00      	nop
 800b018:	200035d4 	.word	0x200035d4

0800b01c <_isatty_r>:
 800b01c:	b538      	push	{r3, r4, r5, lr}
 800b01e:	4d06      	ldr	r5, [pc, #24]	; (800b038 <_isatty_r+0x1c>)
 800b020:	2300      	movs	r3, #0
 800b022:	4604      	mov	r4, r0
 800b024:	4608      	mov	r0, r1
 800b026:	602b      	str	r3, [r5, #0]
 800b028:	f7f6 f9d1 	bl	80013ce <_isatty>
 800b02c:	1c43      	adds	r3, r0, #1
 800b02e:	d102      	bne.n	800b036 <_isatty_r+0x1a>
 800b030:	682b      	ldr	r3, [r5, #0]
 800b032:	b103      	cbz	r3, 800b036 <_isatty_r+0x1a>
 800b034:	6023      	str	r3, [r4, #0]
 800b036:	bd38      	pop	{r3, r4, r5, pc}
 800b038:	200035d4 	.word	0x200035d4

0800b03c <_init>:
 800b03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b03e:	bf00      	nop
 800b040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b042:	bc08      	pop	{r3}
 800b044:	469e      	mov	lr, r3
 800b046:	4770      	bx	lr

0800b048 <_fini>:
 800b048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b04a:	bf00      	nop
 800b04c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b04e:	bc08      	pop	{r3}
 800b050:	469e      	mov	lr, r3
 800b052:	4770      	bx	lr
